L 1 "Source\LCD\lucida_8x13.c"
N#include <stdint.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999,2014 */
N/* All rights reserved */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5060034
N
N  #ifdef __INT64_TYPE__
S    /* armclang predefines '__INT64_TYPE__' and '__INT64_C_SUFFIX__' */
S    #define __INT64 __INT64_TYPE__
N  #else
N    /* armcc has builtin '__int64' which can be used in --strict mode */
N    #define __INT64 __int64
N    #define __INT64_C_SUFFIX__ ll
N  #endif
N  #define __PASTE2(x, y) x ## y
N  #define __PASTE(x, y) __PASTE2(x, y)
N  #define __INT64_C(x)  __ESCAPE__(__PASTE(x, __INT64_C_SUFFIX__))
N  #define __UINT64_C(x)  __ESCAPE__(__PASTE(x ## u, __INT64_C_SUFFIX__))
N  #if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X  #if 0L || (1L && !0L)
N    /* armclang and non-strict armcc allow 'long long' in system headers */
N    #define __LONGLONG long long
N  #else
S    /* strict armcc has '__int64' */
S    #define __LONGLONG __int64
N  #endif
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __INT64 int64_t;
Xtypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __INT64 uint64_t;
Xtypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __INT64 int_least64_t;
Xtypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __INT64 uint_least64_t;
Xtypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __INT64 int_fast64_t;
Xtypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __INT64 uint_fast64_t;
Xtypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
N#if __sizeof_ptr == 8
X#if 4 == 8
Stypedef   signed       __INT64 intptr_t;
Stypedef unsigned       __INT64 uintptr_t;
N#else
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N#endif
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed     __LONGLONG intmax_t;
Xtypedef   signed     long long intmax_t;
Ntypedef unsigned     __LONGLONG uintmax_t;
Xtypedef unsigned     long long uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __INT64_C(~0x7fffffffffffffff) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MIN INT64_MIN
N#else
N#define INTPTR_MIN INT32_MIN
N#endif
N
N    /* maximum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MAX INT64_MAX
N#else
N#define INTPTR_MAX INT32_MAX
N#endif
N
N    /* maximum value of pointer-holding unsigned integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define UINTPTR_MAX UINT64_MAX
N#else
N#define UINTPTR_MAX UINT32_MAX
N#endif
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define PTRDIFF_MIN INT64_MIN
S#define PTRDIFF_MAX INT64_MAX
N#else
N#define PTRDIFF_MIN INT32_MIN
N#define PTRDIFF_MAX INT32_MAX
N#endif
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define SIZE_MAX UINT64_MAX
N#else
N#define SIZE_MAX UINT32_MAX
N#endif
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X#if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __INT64_C(x)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __UINT64_C(x)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif
N  #endif /* __cplusplus */
N
N#undef __INT64
N#undef __LONGLONG
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
L 2 "Source\LCD\lucida_8x13.c" 2
N
N//Font Generated by MikroElektronika GLCD Font Creator 1.2.0.0
N//MikroElektrnika 2011 
N//http://www.mikroe.com 
N
N//GLCD FontName : Lucida_Console8x13
N//GLCD FontSize : 8 x 13
N
N__align(4) const uint8_t Lucida_Console8x13[] = {
N   0x00,
N   0x00,
N   0x20,0x00,
N   0x7F,0x00,
N   0x0D,
N   0x00,
N   0x01,0x88,0x01,0x00,
N   0x04,0x95,0x01,0x00,
N   0x06,0xA2,0x01,0x00,
N   0x08,0xAF,0x01,0x00,
N   0x06,0xBC,0x01,0x00,
N   0x08,0xC9,0x01,0x00,
N   0x08,0xD6,0x01,0x00,
N   0x04,0xE3,0x01,0x00,
N   0x07,0xF0,0x01,0x00,
N   0x06,0xFD,0x01,0x00,
N   0x06,0x0A,0x02,0x00,
N   0x07,0x17,0x02,0x00,
N   0x05,0x24,0x02,0x00,
N   0x07,0x31,0x02,0x00,
N   0x04,0x3E,0x02,0x00,
N   0x08,0x4B,0x02,0x00,
N   0x07,0x58,0x02,0x00,
N   0x07,0x65,0x02,0x00,
N   0x06,0x72,0x02,0x00,
N   0x06,0x7F,0x02,0x00,
N   0x06,0x8C,0x02,0x00,
N   0x06,0x99,0x02,0x00,
N   0x07,0xA6,0x02,0x00,
N   0x07,0xB3,0x02,0x00,
N   0x07,0xC0,0x02,0x00,
N   0x07,0xCD,0x02,0x00,
N   0x05,0xDA,0x02,0x00,
N   0x04,0xE7,0x02,0x00,
N   0x07,0xF4,0x02,0x00,
N   0x07,0x01,0x03,0x00,
N   0x07,0x0E,0x03,0x00,
N   0x07,0x1B,0x03,0x00,
N   0x08,0x28,0x03,0x00,
N   0x08,0x35,0x03,0x00,
N   0x07,0x42,0x03,0x00,
N   0x07,0x4F,0x03,0x00,
N   0x07,0x5C,0x03,0x00,
N   0x07,0x69,0x03,0x00,
N   0x07,0x76,0x03,0x00,
N   0x07,0x83,0x03,0x00,
N   0x07,0x90,0x03,0x00,
N   0x06,0x9D,0x03,0x00,
N   0x06,0xAA,0x03,0x00,
N   0x07,0xB7,0x03,0x00,
N   0x07,0xC4,0x03,0x00,
N   0x07,0xD1,0x03,0x00,
N   0x07,0xDE,0x03,0x00,
N   0x07,0xEB,0x03,0x00,
N   0x07,0xF8,0x03,0x00,
N   0x08,0x05,0x04,0x00,
N   0x07,0x12,0x04,0x00,
N   0x07,0x1F,0x04,0x00,
N   0x07,0x2C,0x04,0x00,
N   0x07,0x39,0x04,0x00,
N   0x08,0x46,0x04,0x00,
N   0x08,0x53,0x04,0x00,
N   0x08,0x60,0x04,0x00,
N   0x07,0x6D,0x04,0x00,
N   0x07,0x7A,0x04,0x00,
N   0x07,0x87,0x04,0x00,
N   0x08,0x94,0x04,0x00,
N   0x05,0xA1,0x04,0x00,
N   0x07,0xAE,0x04,0x00,
N   0x08,0xBB,0x04,0x00,
N   0x05,0xC8,0x04,0x00,
N   0x07,0xD5,0x04,0x00,
N   0x07,0xE2,0x04,0x00,
N   0x07,0xEF,0x04,0x00,
N   0x07,0xFC,0x04,0x00,
N   0x07,0x09,0x05,0x00,
N   0x07,0x16,0x05,0x00,
N   0x07,0x23,0x05,0x00,
N   0x07,0x30,0x05,0x00,
N   0x05,0x3D,0x05,0x00,
N   0x05,0x4A,0x05,0x00,
N   0x06,0x57,0x05,0x00,
N   0x05,0x64,0x05,0x00,
N   0x07,0x71,0x05,0x00,
N   0x07,0x7E,0x05,0x00,
N   0x07,0x8B,0x05,0x00,
N   0x07,0x98,0x05,0x00,
N   0x07,0xA5,0x05,0x00,
N   0x06,0xB2,0x05,0x00,
N   0x06,0xBF,0x05,0x00,
N   0x06,0xCC,0x05,0x00,
N   0x07,0xD9,0x05,0x00,
N   0x07,0xE6,0x05,0x00,
N   0x08,0xF3,0x05,0x00,
N   0x07,0x00,0x06,0x00,
N   0x08,0x0D,0x06,0x00,
N   0x07,0x1A,0x06,0x00,
N   0x06,0x27,0x06,0x00,
N   0x04,0x34,0x06,0x00,
N   0x07,0x41,0x06,0x00,
N   0x08,0x4E,0x06,0x00,
N   0x02,0x5B,0x06,0x00,
N   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,                // Code for char num 32
N   0x00,0x08,0x08,0x08,0x08,0x08,0x08,0x00,0x00,0x08,0x00,0x00,0x00,                // Code for char num 33
N   0x24,0x24,0x24,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,                // Code for char num 34
N   0x00,0x28,0x28,0x28,0xFE,0x28,0x7F,0x14,0x14,0x14,0x00,0x00,0x00,                // Code for char num 35
N   0x08,0x3C,0x0A,0x0A,0x0E,0x1C,0x38,0x28,0x28,0x1E,0x08,0x00,0x00,                // Code for char num 36
N   0x00,0x86,0x49,0x29,0x16,0x18,0x68,0x94,0x92,0x61,0x00,0x00,0x00,                // Code for char num 37
N   0x00,0x18,0x24,0x24,0x1C,0x8E,0x91,0x71,0x63,0x7E,0x00,0x00,0x00,                // Code for char num 38
N   0x08,0x08,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,                // Code for char num 39
N   0x60,0x10,0x08,0x04,0x04,0x04,0x04,0x04,0x04,0x08,0x10,0x60,0x00,                // Code for char num 40
N   0x06,0x08,0x10,0x20,0x20,0x20,0x20,0x20,0x20,0x10,0x08,0x06,0x00,                // Code for char num 41
N   0x00,0x08,0x2A,0x1C,0x14,0x22,0x00,0x00,0x00,0x00,0x00,0x00,0x00,                // Code for char num 42
N   0x00,0x00,0x00,0x08,0x08,0x08,0x7F,0x08,0x08,0x08,0x00,0x00,0x00,                // Code for char num 43
N   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x10,0x08,0x00,                // Code for char num 44
N   0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,                // Code for char num 45
N   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x0C,0x00,0x00,0x00,                // Code for char num 46
N   0x80,0x40,0x40,0x20,0x10,0x10,0x08,0x08,0x04,0x02,0x02,0x01,0x00,                // Code for char num 47
N   0x00,0x18,0x24,0x42,0x42,0x42,0x42,0x42,0x24,0x18,0x00,0x00,0x00,                // Code for char num 48
N   0x00,0x0C,0x0A,0x08,0x08,0x08,0x08,0x08,0x08,0x7F,0x00,0x00,0x00,                // Code for char num 49
N   0x00,0x1C,0x22,0x20,0x20,0x10,0x08,0x04,0x02,0x3E,0x00,0x00,0x00,                // Code for char num 50
N   0x00,0x3E,0x20,0x10,0x08,0x0C,0x10,0x20,0x20,0x1E,0x00,0x00,0x00,                // Code for char num 51
N   0x00,0x10,0x18,0x14,0x14,0x12,0x11,0x3F,0x10,0x10,0x00,0x00,0x00,                // Code for char num 52
N   0x00,0x3C,0x04,0x04,0x1C,0x20,0x20,0x20,0x20,0x1C,0x00,0x00,0x00,                // Code for char num 53
N   0x00,0x38,0x44,0x02,0x3A,0x46,0x42,0x42,0x44,0x38,0x00,0x00,0x00,                // Code for char num 54
N   0x00,0x7E,0x40,0x20,0x10,0x10,0x08,0x08,0x04,0x04,0x00,0x00,0x00,                // Code for char num 55
N   0x00,0x3C,0x42,0x42,0x24,0x3C,0x62,0x42,0x42,0x3C,0x00,0x00,0x00,                // Code for char num 56
N   0x00,0x1C,0x22,0x42,0x42,0x62,0x5C,0x40,0x22,0x1C,0x00,0x00,0x00,                // Code for char num 57
N   0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,                // Code for char num 58
N   0x00,0x00,0x00,0x0C,0x0C,0x00,0x00,0x00,0x0C,0x0C,0x08,0x04,0x00,                // Code for char num 59
N   0x00,0x00,0x00,0x40,0x30,0x08,0x06,0x08,0x30,0x40,0x00,0x00,0x00,                // Code for char num 60
N   0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,                // Code for char num 61
N   0x00,0x00,0x00,0x02,0x0C,0x10,0x60,0x10,0x0C,0x02,0x00,0x00,0x00,                // Code for char num 62
N   0x00,0x3C,0x42,0x40,0x20,0x10,0x08,0x00,0x00,0x08,0x00,0x00,0x00,                // Code for char num 63
N   0x00,0x3C,0x46,0x7B,0x4D,0x45,0x65,0xD9,0x22,0x3C,0x00,0x00,0x00,                // Code for char num 64
N   0x00,0x00,0x18,0x18,0x24,0x24,0x3C,0x66,0x42,0xC3,0x00,0x00,0x00,                // Code for char num 65
N   0x00,0x00,0x3E,0x42,0x42,0x3E,0x42,0x42,0x42,0x3E,0x00,0x00,0x00,                // Code for char num 66
N   0x00,0x00,0x7C,0x02,0x01,0x01,0x01,0x01,0x02,0x7C,0x00,0x00,0x00,                // Code for char num 67
N   0x00,0x00,0x1E,0x22,0x42,0x42,0x42,0x42,0x22,0x1E,0x00,0x00,0x00,                // Code for char num 68
N   0x00,0x00,0x7E,0x02,0x02,0x02,0x3E,0x02,0x02,0x7E,0x00,0x00,0x00,                // Code for char num 69
N   0x00,0x00,0x7E,0x02,0x02,0x02,0x3E,0x02,0x02,0x02,0x00,0x00,0x00,                // Code for char num 70
N   0x00,0x00,0x7C,0x02,0x01,0x01,0x71,0x41,0x42,0x7C,0x00,0x00,0x00,                // Code for char num 71
N   0x00,0x00,0x42,0x42,0x42,0x7E,0x42,0x42,0x42,0x42,0x00,0x00,0x00,                // Code for char num 72
N   0x00,0x00,0x3E,0x08,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00,0x00,                // Code for char num 73
N   0x00,0x00,0x3C,0x20,0x20,0x20,0x20,0x20,0x22,0x1C,0x00,0x00,0x00,                // Code for char num 74
N   0x00,0x00,0x42,0x22,0x12,0x0E,0x0A,0x12,0x22,0x42,0x00,0x00,0x00,                // Code for char num 75
N   0x00,0x00,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x7E,0x00,0x00,0x00,                // Code for char num 76
N   0x00,0x00,0x63,0x63,0x55,0x55,0x55,0x49,0x41,0x41,0x00,0x00,0x00,                // Code for char num 77
N   0x00,0x00,0x42,0x46,0x4A,0x4A,0x52,0x52,0x62,0x42,0x00,0x00,0x00,                // Code for char num 78
N   0x00,0x00,0x1C,0x22,0x41,0x41,0x41,0x41,0x22,0x1C,0x00,0x00,0x00,                // Code for char num 79
N   0x00,0x00,0x3E,0x42,0x42,0x42,0x3E,0x02,0x02,0x02,0x00,0x00,0x00,                // Code for char num 80
N   0x00,0x00,0x1C,0x22,0x41,0x41,0x41,0x41,0x22,0x1C,0x60,0xC0,0x00,                // Code for char num 81
N   0x00,0x00,0x1E,0x22,0x22,0x22,0x1E,0x12,0x22,0x42,0x00,0x00,0x00,                // Code for char num 82
N   0x00,0x00,0x7C,0x02,0x02,0x1C,0x20,0x40,0x40,0x3E,0x00,0x00,0x00,                // Code for char num 83
N   0x00,0x00,0x7F,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x00,0x00,0x00,                // Code for char num 84
N   0x00,0x00,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00,0x00,                // Code for char num 85
N   0x00,0x00,0x81,0x41,0x42,0x22,0x24,0x14,0x1C,0x08,0x00,0x00,0x00,                // Code for char num 86
N   0x00,0x00,0x81,0x81,0x99,0xDB,0x5A,0x5A,0x66,0x24,0x00,0x00,0x00,                // Code for char num 87
N   0x00,0x00,0x81,0x42,0x24,0x18,0x18,0x24,0x42,0x81,0x00,0x00,0x00,                // Code for char num 88
N   0x00,0x00,0x41,0x22,0x14,0x14,0x08,0x08,0x08,0x08,0x00,0x00,0x00,                // Code for char num 89
N   0x00,0x00,0x7F,0x40,0x20,0x10,0x08,0x04,0x02,0x7F,0x00,0x00,0x00,                // Code for char num 90
N   0x78,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x78,0x00,                // Code for char num 91
N   0x01,0x02,0x02,0x04,0x08,0x08,0x10,0x10,0x20,0x40,0x40,0x80,0x00,                // Code for char num 92
N   0x1E,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x1E,0x00,                // Code for char num 93
N   0x00,0x10,0x10,0x10,0x28,0x24,0x44,0x42,0x00,0x00,0x00,0x00,0x00,                // Code for char num 94
N   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,                // Code for char num 95
N   0x08,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,                // Code for char num 96
N   0x00,0x00,0x00,0x1C,0x20,0x20,0x3C,0x22,0x22,0x7C,0x00,0x00,0x00,                // Code for char num 97
N   0x02,0x02,0x02,0x3A,0x46,0x42,0x42,0x42,0x46,0x3A,0x00,0x00,0x00,                // Code for char num 98
N   0x00,0x00,0x00,0x78,0x04,0x02,0x02,0x02,0x04,0x78,0x00,0x00,0x00,                // Code for char num 99
N   0x40,0x40,0x40,0x5C,0x62,0x42,0x42,0x42,0x62,0x5C,0x00,0x00,0x00,                // Code for char num 100
N   0x00,0x00,0x00,0x3C,0x44,0x42,0x7E,0x02,0x02,0x7C,0x00,0x00,0x00,                // Code for char num 101
N   0x78,0x04,0x04,0x7F,0x04,0x04,0x04,0x04,0x04,0x04,0x00,0x00,0x00,                // Code for char num 102
N   0x00,0x00,0x00,0x5C,0x62,0x42,0x42,0x42,0x62,0x5C,0x40,0x40,0x3C,                // Code for char num 103
N   0x02,0x02,0x02,0x3A,0x46,0x42,0x42,0x42,0x42,0x42,0x00,0x00,0x00,                // Code for char num 104
N   0x18,0x18,0x00,0x1E,0x10,0x10,0x10,0x10,0x10,0x10,0x00,0x00,0x00,                // Code for char num 105
N   0x18,0x18,0x00,0x1E,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x0E,                // Code for char num 106
N   0x02,0x02,0x02,0x22,0x12,0x0A,0x06,0x0A,0x12,0x22,0x00,0x00,0x00,                // Code for char num 107
N   0x1E,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x00,0x00,0x00,                // Code for char num 108
N   0x00,0x00,0x00,0x6D,0x5B,0x49,0x49,0x49,0x49,0x49,0x00,0x00,0x00,                // Code for char num 109
N   0x00,0x00,0x00,0x3A,0x46,0x42,0x42,0x42,0x42,0x42,0x00,0x00,0x00,                // Code for char num 110
N   0x00,0x00,0x00,0x3C,0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00,0x00,                // Code for char num 111
N   0x00,0x00,0x00,0x3A,0x46,0x42,0x42,0x42,0x46,0x3A,0x02,0x02,0x02,                // Code for char num 112
N   0x00,0x00,0x00,0x5C,0x62,0x42,0x42,0x42,0x62,0x5C,0x40,0x40,0x40,                // Code for char num 113
N   0x00,0x00,0x00,0x3A,0x26,0x02,0x02,0x02,0x02,0x02,0x00,0x00,0x00,                // Code for char num 114
N   0x00,0x00,0x00,0x3C,0x02,0x06,0x18,0x20,0x20,0x1E,0x00,0x00,0x00,                // Code for char num 115
N   0x00,0x00,0x04,0x3F,0x04,0x04,0x04,0x04,0x04,0x38,0x00,0x00,0x00,                // Code for char num 116
N   0x00,0x00,0x00,0x42,0x42,0x42,0x42,0x42,0x62,0x5C,0x00,0x00,0x00,                // Code for char num 117
N   0x00,0x00,0x00,0x41,0x22,0x22,0x22,0x14,0x14,0x08,0x00,0x00,0x00,                // Code for char num 118
N   0x00,0x00,0x00,0x81,0x89,0x5A,0x5A,0x56,0x24,0x24,0x00,0x00,0x00,                // Code for char num 119
N   0x00,0x00,0x00,0x42,0x24,0x18,0x18,0x18,0x24,0x42,0x00,0x00,0x00,                // Code for char num 120
N   0x00,0x00,0x00,0x81,0x42,0x42,0x24,0x24,0x18,0x18,0x08,0x0C,0x07,                // Code for char num 121
N   0x00,0x00,0x00,0x7E,0x40,0x20,0x10,0x08,0x04,0x7E,0x00,0x00,0x00,                // Code for char num 122
N   0x30,0x08,0x08,0x08,0x08,0x06,0x08,0x08,0x08,0x08,0x08,0x30,0x00,                // Code for char num 123
N   0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x00,                // Code for char num 124
N   0x0C,0x10,0x10,0x10,0x10,0x60,0x10,0x10,0x10,0x10,0x10,0x0C,0x00,                // Code for char num 125
N   0x00,0x00,0x00,0x00,0x00,0x00,0x8E,0x71,0x00,0x00,0x00,0x00,0x00,                // Code for char num 126
N   0x00,0x00,0x00,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x00,0x00,0x00                 // Code for char num 127
N        };
