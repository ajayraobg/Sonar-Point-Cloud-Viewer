L 1 "Source\Profiler\PIT.c"
N#include "PIT.h"
L 1 "Source\Profiler\PIT.h" 1
N#ifndef PIT_H
N#define PIT_H
N#include "MKL25Z4.h"
L 1 "C:\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.13.0\Device\Include\MKL25Z4.h" 1
N/*
N** ###################################################################
N**     Processors:          MKL25Z128FM4
N**                          MKL25Z128FT4
N**                          MKL25Z128LH4
N**                          MKL25Z128VLK4
N**
N**     Compilers:           Keil ARM C/C++ Compiler
N**                          Freescale C/C++ for Embedded ARM
N**                          GNU C Compiler
N**                          GNU C Compiler - CodeSourcery Sourcery G++
N**                          IAR ANSI C/C++ Compiler for ARM
N**
N**     Reference manual:    KL25P80M48SF0RM, Rev.3, Sep 2012
N**     Version:             rev. 2.5, 2015-02-19
N**     Build:               b150721
N**
N**     Abstract:
N**         CMSIS Peripheral Access Layer for MKL25Z4
N**
N**     Copyright (c) 1997 - 2015 Freescale Semiconductor, Inc.
N**     All rights reserved.
N**
N**     Redistribution and use in source and binary forms, with or without modification,
N**     are permitted provided that the following conditions are met:
N**
N**     o Redistributions of source code must retain the above copyright notice, this list
N**       of conditions and the following disclaimer.
N**
N**     o Redistributions in binary form must reproduce the above copyright notice, this
N**       list of conditions and the following disclaimer in the documentation and/or
N**       other materials provided with the distribution.
N**
N**     o Neither the name of Freescale Semiconductor, Inc. nor the names of its
N**       contributors may be used to endorse or promote products derived from this
N**       software without specific prior written permission.
N**
N**     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
N**     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
N**     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N**     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
N**     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
N**     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
N**     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
N**     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N**     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
N**     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N**
N**     http:                 www.freescale.com
N**     mail:                 support@freescale.com
N**
N**     Revisions:
N**     - rev. 1.0 (2012-06-13)
N**         Initial version.
N**     - rev. 1.1 (2012-06-21)
N**         Update according to reference manual rev. 1.
N**     - rev. 1.2 (2012-08-01)
N**         Device type UARTLP changed to UART0.
N**     - rev. 1.3 (2012-10-04)
N**         Update according to reference manual rev. 3.
N**     - rev. 1.4 (2012-11-22)
N**         MCG module - bit LOLS in MCG_S register renamed to LOLS0.
N**         NV registers - bit EZPORT_DIS in NV_FOPT register removed.
N**     - rev. 1.5 (2013-04-05)
N**         Changed start of doxygen comment.
N**     - rev. 2.0 (2013-10-29)
N**         Register accessor macros added to the memory map.
N**         Symbols for Processor Expert memory map compatibility added to the memory map.
N**         Startup file for gcc has been updated according to CMSIS 3.2.
N**         System initialization updated.
N**     - rev. 2.1 (2014-07-16)
N**         Module access macro module_BASES replaced by module_BASE_PTRS.
N**         System initialization and startup updated.
N**     - rev. 2.2 (2014-08-22)
N**         System initialization updated - default clock config changed.
N**     - rev. 2.3 (2014-08-28)
N**         Update of startup files - possibility to override DefaultISR added.
N**     - rev. 2.4 (2014-10-14)
N**         Interrupt INT_LPTimer renamed to INT_LPTMR0.
N**     - rev. 2.5 (2015-02-19)
N**         Renamed interrupt vector LLW to LLWU.
N**
N** ###################################################################
N*/
N
N/*!
N * @file MKL25Z4.h
N * @version 2.5
N * @date 2015-02-19
N * @brief CMSIS Peripheral Access Layer for MKL25Z4
N *
N * CMSIS Peripheral Access Layer for MKL25Z4
N */
N
N
N/* ----------------------------------------------------------------------------
N   -- MCU activation
N   ---------------------------------------------------------------------------- */
N
N/* Prevention from multiple including the same memory map */
N#if !defined(MKL25Z4_H_)  /* Check if memory map has not been already included */
X#if !0L   
N#define MKL25Z4_H_
N#define MCU_MKL25Z4
N
N/* Check if another memory map has not been also included */
N#if (defined(MCU_ACTIVE))
X#if (0L)
S  #error MKL25Z4 memory map: There is already included another memory map. Only one memory map can be included.
N#endif /* (defined(MCU_ACTIVE)) */
N#define MCU_ACTIVE
N
N#include <stdint.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999,2014 */
N/* All rights reserved */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5060034
N
N  #ifdef __INT64_TYPE__
S    /* armclang predefines '__INT64_TYPE__' and '__INT64_C_SUFFIX__' */
S    #define __INT64 __INT64_TYPE__
N  #else
N    /* armcc has builtin '__int64' which can be used in --strict mode */
N    #define __INT64 __int64
N    #define __INT64_C_SUFFIX__ ll
N  #endif
N  #define __PASTE2(x, y) x ## y
N  #define __PASTE(x, y) __PASTE2(x, y)
N  #define __INT64_C(x)  __ESCAPE__(__PASTE(x, __INT64_C_SUFFIX__))
N  #define __UINT64_C(x)  __ESCAPE__(__PASTE(x ## u, __INT64_C_SUFFIX__))
N  #if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X  #if 0L || (1L && !0L)
N    /* armclang and non-strict armcc allow 'long long' in system headers */
N    #define __LONGLONG long long
N  #else
S    /* strict armcc has '__int64' */
S    #define __LONGLONG __int64
N  #endif
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __INT64 int64_t;
Xtypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __INT64 uint64_t;
Xtypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __INT64 int_least64_t;
Xtypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __INT64 uint_least64_t;
Xtypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __INT64 int_fast64_t;
Xtypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __INT64 uint_fast64_t;
Xtypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
N#if __sizeof_ptr == 8
X#if 4 == 8
Stypedef   signed       __INT64 intptr_t;
Stypedef unsigned       __INT64 uintptr_t;
N#else
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N#endif
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed     __LONGLONG intmax_t;
Xtypedef   signed     long long intmax_t;
Ntypedef unsigned     __LONGLONG uintmax_t;
Xtypedef unsigned     long long uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __INT64_C(~0x7fffffffffffffff) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MIN INT64_MIN
N#else
N#define INTPTR_MIN INT32_MIN
N#endif
N
N    /* maximum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MAX INT64_MAX
N#else
N#define INTPTR_MAX INT32_MAX
N#endif
N
N    /* maximum value of pointer-holding unsigned integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define UINTPTR_MAX UINT64_MAX
N#else
N#define UINTPTR_MAX UINT32_MAX
N#endif
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define PTRDIFF_MIN INT64_MIN
S#define PTRDIFF_MAX INT64_MAX
N#else
N#define PTRDIFF_MIN INT32_MIN
N#define PTRDIFF_MAX INT32_MAX
N#endif
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define SIZE_MAX UINT64_MAX
N#else
N#define SIZE_MAX UINT32_MAX
N#endif
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X#if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __INT64_C(x)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __UINT64_C(x)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif
N  #endif /* __cplusplus */
N
N#undef __INT64
N#undef __LONGLONG
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
L 112 "C:\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.13.0\Device\Include\MKL25Z4.h" 2
N
N/** Memory map major version (memory maps with equal major version number are
N * compatible) */
N#define MCU_MEM_MAP_VERSION 0x0200u
N/** Memory map minor version */
N#define MCU_MEM_MAP_VERSION_MINOR 0x0005u
N
N
N/* ----------------------------------------------------------------------------
N   -- Interrupt vector numbers
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup Interrupt_vector_numbers Interrupt vector numbers
N * @{
N */
N
N/** Interrupt Number Definitions */
N#define NUMBER_OF_INT_VECTORS 48                 /**< Number of interrupts in the Vector table */
N
Ntypedef enum IRQn {
N  /* Auxiliary constants */
N  NotAvail_IRQn                = -128,             /**< Not available device specific interrupt */
N
N  /* Core interrupts */
N  NonMaskableInt_IRQn          = -14,              /**< Non Maskable Interrupt */
N  HardFault_IRQn               = -13,              /**< Cortex-M0 SV Hard Fault Interrupt */
N  SVCall_IRQn                  = -5,               /**< Cortex-M0 SV Call Interrupt */
N  PendSV_IRQn                  = -2,               /**< Cortex-M0 Pend SV Interrupt */
N  SysTick_IRQn                 = -1,               /**< Cortex-M0 System Tick Interrupt */
N
N  /* Device specific interrupts */
N  DMA0_IRQn                    = 0,                /**< DMA channel 0 transfer complete */
N  DMA1_IRQn                    = 1,                /**< DMA channel 1 transfer complete */
N  DMA2_IRQn                    = 2,                /**< DMA channel 2 transfer complete */
N  DMA3_IRQn                    = 3,                /**< DMA channel 3 transfer complete */
N  Reserved20_IRQn              = 4,                /**< Reserved interrupt */
N  FTFA_IRQn                    = 5,                /**< Command complete and read collision */
N  LVD_LVW_IRQn                 = 6,                /**< Low-voltage detect, low-voltage warning */
N  LLWU_IRQn                    = 7,                /**< Low leakage wakeup Unit */
N  I2C0_IRQn                    = 8,                /**< I2C0 interrupt */
N  I2C1_IRQn                    = 9,                /**< I2C1 interrupt */
N  SPI0_IRQn                    = 10,               /**< SPI0 single interrupt vector for all sources */
N  SPI1_IRQn                    = 11,               /**< SPI1 single interrupt vector for all sources */
N  UART0_IRQn                   = 12,               /**< UART0 status and error */
N  UART1_IRQn                   = 13,               /**< UART1 status and error */
N  UART2_IRQn                   = 14,               /**< UART2 status and error */
N  ADC0_IRQn                    = 15,               /**< ADC0 interrupt */
N  CMP0_IRQn                    = 16,               /**< CMP0 interrupt */
N  TPM0_IRQn                    = 17,               /**< TPM0 single interrupt vector for all sources */
N  TPM1_IRQn                    = 18,               /**< TPM1 single interrupt vector for all sources */
N  TPM2_IRQn                    = 19,               /**< TPM2 single interrupt vector for all sources */
N  RTC_IRQn                     = 20,               /**< RTC alarm */
N  RTC_Seconds_IRQn             = 21,               /**< RTC seconds */
N  PIT_IRQn                     = 22,               /**< PIT interrupt */
N  Reserved39_IRQn              = 23,               /**< Reserved interrupt */
N  USB0_IRQn                    = 24,               /**< USB0 interrupt */
N  DAC0_IRQn                    = 25,               /**< DAC0 interrupt */
N  TSI0_IRQn                    = 26,               /**< TSI0 interrupt */
N  MCG_IRQn                     = 27,               /**< MCG interrupt */
N  LPTMR0_IRQn                  = 28,               /**< LPTMR0 interrupt */
N  Reserved45_IRQn              = 29,               /**< Reserved interrupt */
N  PORTA_IRQn                   = 30,               /**< PORTA Pin detect */
N  PORTD_IRQn                   = 31                /**< PORTD Pin detect */
N} IRQn_Type;
N
N/*!
N * @}
N */ /* end of group Interrupt_vector_numbers */
N
N
N/* ----------------------------------------------------------------------------
N   -- Cortex M0 Core Configuration
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup Cortex_Core_Configuration Cortex M0 Core Configuration
N * @{
N */
N
N#define __CM0PLUS_REV                  0x0000    /**< Core revision r0p0 */
N#define __MPU_PRESENT                  0         /**< Defines if an MPU is present or not */
N#define __VTOR_PRESENT                 1         /**< Defines if an MPU is present or not */
N#define __NVIC_PRIO_BITS               2         /**< Number of priority bits implemented in the NVIC */
N#define __Vendor_SysTickConfig         0         /**< Vendor specific implementation of SysTickConfig is defined */
N
N#include "core_cm0plus.h"              /* Core Peripheral Access Layer */
L 1 "C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.0\CMSIS\Include\core_cm0plus.h" 1
N/**************************************************************************//**
N * @file     core_cm0plus.h
N * @brief    CMSIS Cortex-M0+ Core Peripheral Access Layer Header File
N * @version  V5.0.2
N * @date     19. April 2017
N ******************************************************************************/
N/*
N * Copyright (c) 2009-2017 ARM Limited. All rights reserved.
N *
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the License); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an AS IS BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N */
N
N#if   defined ( __ICCARM__ )
X#if   0L
S #pragma system_include         /* treat file as system include file for MISRA check */
S#elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
X#elif 1L && (5060528 >= 6010050)
S  #pragma clang system_header   /* treat file as system include file */
N#endif
N
N#ifndef __CORE_CM0PLUS_H_GENERIC
N#define __CORE_CM0PLUS_H_GENERIC
N
N#include <stdint.h>
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/**
N  \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
N  CMSIS violates the following MISRA-C:2004 rules:
N
N   \li Required Rule 8.5, object/function definition in header file.<br>
N     Function definitions in header files are used to allow 'inlining'.
N
N   \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
N     Unions are used for effective representation of core registers.
N
N   \li Advisory Rule 19.7, Function-like macro defined.<br>
N     Function-like macros are used to allow more efficient code.
N */
N
N
N/*******************************************************************************
N *                 CMSIS definitions
N ******************************************************************************/
N/**
N  \ingroup Cortex-M0+
N  @{
N */
N
N#include "cmsis_version.h"
L 1 "C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.0\CMSIS\Include\cmsis_version.h" 1
N/**************************************************************************//**
N * @file     cmsis_version.h
N * @brief    CMSIS Core(M) Version definitions
N * @version  V5.0.2
N * @date     19. April 2017
N ******************************************************************************/
N/*
N * Copyright (c) 2009-2017 ARM Limited. All rights reserved.
N *
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the License); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an AS IS BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N */
N
N#if   defined ( __ICCARM__ )
X#if   0L
S #pragma system_include         /* treat file as system include file for MISRA check */
S#elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
X#elif 1L && (5060528 >= 6010050)
S  #pragma clang system_header   /* treat file as system include file */
N#endif
N
N#ifndef __CMSIS_VERSION_H
N#define __CMSIS_VERSION_H
N
N/*  CMSIS Version definitions */
N#define __CM_CMSIS_VERSION_MAIN  ( 5U)                                      /*!< [31:16] CMSIS Core(M) main version */
N#define __CM_CMSIS_VERSION_SUB   ( 0U)                                      /*!< [15:0]  CMSIS Core(M) sub version */
N#define __CM_CMSIS_VERSION       ((__CM_CMSIS_VERSION_MAIN << 16U) | \
N                                   __CM_CMSIS_VERSION_SUB           )       /*!< CMSIS Core(M) version number */
X#define __CM_CMSIS_VERSION       ((__CM_CMSIS_VERSION_MAIN << 16U) |                                    __CM_CMSIS_VERSION_SUB           )        
N#endif
L 64 "C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.0\CMSIS\Include\core_cm0plus.h" 2
N 
N/*  CMSIS CM0+ definitions */
N#define __CM0PLUS_CMSIS_VERSION_MAIN (__CM_CMSIS_VERSION_MAIN)                  /*!< \deprecated [31:16] CMSIS HAL main version */
N#define __CM0PLUS_CMSIS_VERSION_SUB  (__CM_CMSIS_VERSION_SUB)                   /*!< \deprecated [15:0]  CMSIS HAL sub version */
N#define __CM0PLUS_CMSIS_VERSION      ((__CM0PLUS_CMSIS_VERSION_MAIN << 16U) | \
N                                       __CM0PLUS_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL version number */
X#define __CM0PLUS_CMSIS_VERSION      ((__CM0PLUS_CMSIS_VERSION_MAIN << 16U) |                                        __CM0PLUS_CMSIS_VERSION_SUB           )   
N
N#define __CORTEX_M                   (0U)                                       /*!< Cortex-M Core */
N
N/** __FPU_USED indicates whether an FPU is used or not.
N    This core does not support an FPU at all
N*/
N#define __FPU_USED       0U
N
N#if defined ( __CC_ARM )
X#if 1L
N  #if defined __TARGET_FPU_VFP
X  #if 0L
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
N  #endif
N
N#elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
S  #if defined __ARM_PCS_VFP
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __GNUC__ )
S  #if defined (__VFP_FP__) && !defined(__SOFTFP__)
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __ICCARM__ )
S  #if defined __ARMVFP__
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __TI_ARM__ )
S  #if defined __TI_VFP_SUPPORT__
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __TASKING__ )
S  #if defined __FPU_VFP__
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __CSMC__ )
S  #if ( __CSMC__ & 0x400U)
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
N#endif
N
N#include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
L 1 "C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.0\CMSIS\Include\cmsis_compiler.h" 1
N/**************************************************************************//**
N * @file     cmsis_compiler.h
N * @brief    CMSIS compiler generic header file
N * @version  V5.0.2
N * @date     13. February 2017
N ******************************************************************************/
N/*
N * Copyright (c) 2009-2017 ARM Limited. All rights reserved.
N *
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the License); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an AS IS BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N */
N
N#ifndef __CMSIS_COMPILER_H
N#define __CMSIS_COMPILER_H
N
N#include <stdint.h>
N
N/*
N * ARM Compiler 4/5
N */
N#if   defined ( __CC_ARM )
X#if   1L
N  #include "cmsis_armcc.h"
L 1 "C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.0\CMSIS\Include\cmsis_armcc.h" 1
N/**************************************************************************//**
N * @file     cmsis_armcc.h
N * @brief    CMSIS compiler ARMCC (ARM compiler V5) header file
N * @version  V5.0.2
N * @date     13. February 2017
N ******************************************************************************/
N/*
N * Copyright (c) 2009-2017 ARM Limited. All rights reserved.
N *
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the License); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an AS IS BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N */
N
N#ifndef __CMSIS_ARMCC_H
N#define __CMSIS_ARMCC_H
N
N
N#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 400677)
X#if 1L && (5060528 < 400677)
S  #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
N#endif
N
N/* CMSIS compiler control architecture macros */
N#if ((defined (__TARGET_ARCH_6_M  ) && (__TARGET_ARCH_6_M   == 1)) || \
N     (defined (__TARGET_ARCH_6S_M ) && (__TARGET_ARCH_6S_M  == 1))   )
X#if ((0L && (__TARGET_ARCH_6_M   == 1)) ||      (1L && (1  == 1))   )
N  #define __ARM_ARCH_6M__           1
N#endif
N
N#if (defined (__TARGET_ARCH_7_M ) && (__TARGET_ARCH_7_M  == 1))
X#if (0L && (__TARGET_ARCH_7_M  == 1))
S  #define __ARM_ARCH_7M__           1
N#endif
N
N#if (defined (__TARGET_ARCH_7E_M) && (__TARGET_ARCH_7E_M == 1))
X#if (0L && (__TARGET_ARCH_7E_M == 1))
S  #define __ARM_ARCH_7EM__          1
N#endif
N
N  /* __ARM_ARCH_8M_BASE__  not applicable */
N  /* __ARM_ARCH_8M_MAIN__  not applicable */
N
N
N/* CMSIS compiler specific defines */
N#ifndef   __ASM
N  #define __ASM                                  __asm
N#endif
N#ifndef   __INLINE
N  #define __INLINE                               __inline
N#endif
N#ifndef   __STATIC_INLINE
N  #define __STATIC_INLINE                        static __inline
N#endif
N#ifndef   __NO_RETURN
N  #define __NO_RETURN                            __declspec(noreturn)
N#endif
N#ifndef   __USED
N  #define __USED                                 __attribute__((used))
N#endif
N#ifndef   __WEAK
N  #define __WEAK                                 __attribute__((weak))
N#endif
N#ifndef   __PACKED
N  #define __PACKED                               __attribute__((packed))
N#endif
N#ifndef   __PACKED_STRUCT
N  #define __PACKED_STRUCT                        __packed struct
N#endif
N#ifndef   __PACKED_UNION
N  #define __PACKED_UNION                         __packed union
N#endif
N#ifndef   __UNALIGNED_UINT32        /* deprecated */
N  #define __UNALIGNED_UINT32(x)                  (*((__packed uint32_t *)(x)))
N#endif
N#ifndef   __UNALIGNED_UINT16_WRITE
N  #define __UNALIGNED_UINT16_WRITE(addr, val)    ((*((__packed uint16_t *)(addr))) = (val))
N#endif
N#ifndef   __UNALIGNED_UINT16_READ
N  #define __UNALIGNED_UINT16_READ(addr)          (*((const __packed uint16_t *)(addr)))
N#endif
N#ifndef   __UNALIGNED_UINT32_WRITE
N  #define __UNALIGNED_UINT32_WRITE(addr, val)    ((*((__packed uint32_t *)(addr))) = (val))
N#endif
N#ifndef   __UNALIGNED_UINT32_READ
N  #define __UNALIGNED_UINT32_READ(addr)          (*((const __packed uint32_t *)(addr)))
N#endif
N#ifndef   __ALIGNED
N  #define __ALIGNED(x)                           __attribute__((aligned(x)))
N#endif
N#ifndef   __RESTRICT
N  #define __RESTRICT                             __restrict
N#endif
N
N/* ###########################  Core Function Access  ########################### */
N/** \ingroup  CMSIS_Core_FunctionInterface
N    \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
N  @{
N */
N
N/**
N  \brief   Enable IRQ Interrupts
N  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
N           Can only be executed in Privileged modes.
N */
N/* intrinsic void __enable_irq();     */
N
N
N/**
N  \brief   Disable IRQ Interrupts
N  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
N           Can only be executed in Privileged modes.
N */
N/* intrinsic void __disable_irq();    */
N
N/**
N  \brief   Get Control Register
N  \details Returns the content of the Control Register.
N  \return               Control Register value
N */
N__STATIC_INLINE uint32_t __get_CONTROL(void)
Xstatic __inline uint32_t __get_CONTROL(void)
N{
N  register uint32_t __regControl         __ASM("control");
X  register uint32_t __regControl         __asm("control");
N  return(__regControl);
N}
N
N
N/**
N  \brief   Set Control Register
N  \details Writes the given value to the Control Register.
N  \param [in]    control  Control Register value to set
N */
N__STATIC_INLINE void __set_CONTROL(uint32_t control)
Xstatic __inline void __set_CONTROL(uint32_t control)
N{
N  register uint32_t __regControl         __ASM("control");
X  register uint32_t __regControl         __asm("control");
N  __regControl = control;
N}
N
N
N/**
N  \brief   Get IPSR Register
N  \details Returns the content of the IPSR Register.
N  \return               IPSR Register value
N */
N__STATIC_INLINE uint32_t __get_IPSR(void)
Xstatic __inline uint32_t __get_IPSR(void)
N{
N  register uint32_t __regIPSR          __ASM("ipsr");
X  register uint32_t __regIPSR          __asm("ipsr");
N  return(__regIPSR);
N}
N
N
N/**
N  \brief   Get APSR Register
N  \details Returns the content of the APSR Register.
N  \return               APSR Register value
N */
N__STATIC_INLINE uint32_t __get_APSR(void)
Xstatic __inline uint32_t __get_APSR(void)
N{
N  register uint32_t __regAPSR          __ASM("apsr");
X  register uint32_t __regAPSR          __asm("apsr");
N  return(__regAPSR);
N}
N
N
N/**
N  \brief   Get xPSR Register
N  \details Returns the content of the xPSR Register.
N  \return               xPSR Register value
N */
N__STATIC_INLINE uint32_t __get_xPSR(void)
Xstatic __inline uint32_t __get_xPSR(void)
N{
N  register uint32_t __regXPSR          __ASM("xpsr");
X  register uint32_t __regXPSR          __asm("xpsr");
N  return(__regXPSR);
N}
N
N
N/**
N  \brief   Get Process Stack Pointer
N  \details Returns the current value of the Process Stack Pointer (PSP).
N  \return               PSP Register value
N */
N__STATIC_INLINE uint32_t __get_PSP(void)
Xstatic __inline uint32_t __get_PSP(void)
N{
N  register uint32_t __regProcessStackPointer  __ASM("psp");
X  register uint32_t __regProcessStackPointer  __asm("psp");
N  return(__regProcessStackPointer);
N}
N
N
N/**
N  \brief   Set Process Stack Pointer
N  \details Assigns the given value to the Process Stack Pointer (PSP).
N  \param [in]    topOfProcStack  Process Stack Pointer value to set
N */
N__STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
Xstatic __inline void __set_PSP(uint32_t topOfProcStack)
N{
N  register uint32_t __regProcessStackPointer  __ASM("psp");
X  register uint32_t __regProcessStackPointer  __asm("psp");
N  __regProcessStackPointer = topOfProcStack;
N}
N
N
N/**
N  \brief   Get Main Stack Pointer
N  \details Returns the current value of the Main Stack Pointer (MSP).
N  \return               MSP Register value
N */
N__STATIC_INLINE uint32_t __get_MSP(void)
Xstatic __inline uint32_t __get_MSP(void)
N{
N  register uint32_t __regMainStackPointer     __ASM("msp");
X  register uint32_t __regMainStackPointer     __asm("msp");
N  return(__regMainStackPointer);
N}
N
N
N/**
N  \brief   Set Main Stack Pointer
N  \details Assigns the given value to the Main Stack Pointer (MSP).
N  \param [in]    topOfMainStack  Main Stack Pointer value to set
N */
N__STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
Xstatic __inline void __set_MSP(uint32_t topOfMainStack)
N{
N  register uint32_t __regMainStackPointer     __ASM("msp");
X  register uint32_t __regMainStackPointer     __asm("msp");
N  __regMainStackPointer = topOfMainStack;
N}
N
N
N/**
N  \brief   Get Priority Mask
N  \details Returns the current state of the priority mask bit from the Priority Mask Register.
N  \return               Priority Mask value
N */
N__STATIC_INLINE uint32_t __get_PRIMASK(void)
Xstatic __inline uint32_t __get_PRIMASK(void)
N{
N  register uint32_t __regPriMask         __ASM("primask");
X  register uint32_t __regPriMask         __asm("primask");
N  return(__regPriMask);
N}
N
N
N/**
N  \brief   Set Priority Mask
N  \details Assigns the given value to the Priority Mask Register.
N  \param [in]    priMask  Priority Mask
N */
N__STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
Xstatic __inline void __set_PRIMASK(uint32_t priMask)
N{
N  register uint32_t __regPriMask         __ASM("primask");
X  register uint32_t __regPriMask         __asm("primask");
N  __regPriMask = (priMask);
N}
N
N
N#if ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N     (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((0L && (__ARM_ARCH_7M__  == 1)) ||      (0L && (__ARM_ARCH_7EM__ == 1))     )
S
S/**
S  \brief   Enable FIQ
S  \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
S           Can only be executed in Privileged modes.
S */
S#define __enable_fault_irq                __enable_fiq
S
S
S/**
S  \brief   Disable FIQ
S  \details Disables FIQ interrupts by setting the F-bit in the CPSR.
S           Can only be executed in Privileged modes.
S */
S#define __disable_fault_irq               __disable_fiq
S
S
S/**
S  \brief   Get Base Priority
S  \details Returns the current value of the Base Priority register.
S  \return               Base Priority register value
S */
S__STATIC_INLINE uint32_t  __get_BASEPRI(void)
S{
S  register uint32_t __regBasePri         __ASM("basepri");
S  return(__regBasePri);
S}
S
S
S/**
S  \brief   Set Base Priority
S  \details Assigns the given value to the Base Priority register.
S  \param [in]    basePri  Base Priority value to set
S */
S__STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
S{
S  register uint32_t __regBasePri         __ASM("basepri");
S  __regBasePri = (basePri & 0xFFU);
S}
S
S
S/**
S  \brief   Set Base Priority with condition
S  \details Assigns the given value to the Base Priority register only if BASEPRI masking is disabled,
S           or the new value increases the BASEPRI priority level.
S  \param [in]    basePri  Base Priority value to set
S */
S__STATIC_INLINE void __set_BASEPRI_MAX(uint32_t basePri)
S{
S  register uint32_t __regBasePriMax      __ASM("basepri_max");
S  __regBasePriMax = (basePri & 0xFFU);
S}
S
S
S/**
S  \brief   Get Fault Mask
S  \details Returns the current value of the Fault Mask register.
S  \return               Fault Mask register value
S */
S__STATIC_INLINE uint32_t __get_FAULTMASK(void)
S{
S  register uint32_t __regFaultMask       __ASM("faultmask");
S  return(__regFaultMask);
S}
S
S
S/**
S  \brief   Set Fault Mask
S  \details Assigns the given value to the Fault Mask register.
S  \param [in]    faultMask  Fault Mask value to set
S */
S__STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
S{
S  register uint32_t __regFaultMask       __ASM("faultmask");
S  __regFaultMask = (faultMask & (uint32_t)1U);
S}
S
N#endif /* ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N           (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     ) */
X#endif  
N
N
N#if ((defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((0L && (__ARM_ARCH_7EM__ == 1))     )
S
S/**
S  \brief   Get FPSCR
S  \details Returns the current value of the Floating Point Status/Control register.
S  \return               Floating Point Status/Control register value
S */
S__STATIC_INLINE uint32_t __get_FPSCR(void)
S{
S#if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
S     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
X#if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) &&      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
S  register uint32_t __regfpscr         __ASM("fpscr");
S  return(__regfpscr);
S#else
S   return(0U);
S#endif
S}
S
S
S/**
S  \brief   Set FPSCR
S  \details Assigns the given value to the Floating Point Status/Control register.
S  \param [in]    fpscr  Floating Point Status/Control value to set
S */
S__STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
S{
S#if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
S     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
X#if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) &&      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
S  register uint32_t __regfpscr         __ASM("fpscr");
S  __regfpscr = (fpscr);
S#else
S  (void)fpscr;
S#endif
S}
S
N#endif /* ((defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     ) */
N
N
N
N/*@} end of CMSIS_Core_RegAccFunctions */
N
N
N/* ##########################  Core Instruction Access  ######################### */
N/** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
N  Access to dedicated instructions
N  @{
N*/
N
N/**
N  \brief   No Operation
N  \details No Operation does nothing. This instruction can be used for code alignment purposes.
N */
N#define __NOP                             __nop
N
N
N/**
N  \brief   Wait For Interrupt
N  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
N */
N#define __WFI                             __wfi
N
N
N/**
N  \brief   Wait For Event
N  \details Wait For Event is a hint instruction that permits the processor to enter
N           a low-power state until one of a number of events occurs.
N */
N#define __WFE                             __wfe
N
N
N/**
N  \brief   Send Event
N  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
N */
N#define __SEV                             __sev
N
N
N/**
N  \brief   Instruction Synchronization Barrier
N  \details Instruction Synchronization Barrier flushes the pipeline in the processor,
N           so that all instructions following the ISB are fetched from cache or memory,
N           after the instruction has been completed.
N */
N#define __ISB() do {\
N                   __schedule_barrier();\
N                   __isb(0xF);\
N                   __schedule_barrier();\
N                } while (0U)
X#define __ISB() do {                   __schedule_barrier();                   __isb(0xF);                   __schedule_barrier();                } while (0U)
N
N/**
N  \brief   Data Synchronization Barrier
N  \details Acts as a special kind of Data Memory Barrier.
N           It completes when all explicit memory accesses before this instruction complete.
N */
N#define __DSB() do {\
N                   __schedule_barrier();\
N                   __dsb(0xF);\
N                   __schedule_barrier();\
N                } while (0U)
X#define __DSB() do {                   __schedule_barrier();                   __dsb(0xF);                   __schedule_barrier();                } while (0U)
N
N/**
N  \brief   Data Memory Barrier
N  \details Ensures the apparent order of the explicit memory operations before
N           and after the instruction, without ensuring their completion.
N */
N#define __DMB() do {\
N                   __schedule_barrier();\
N                   __dmb(0xF);\
N                   __schedule_barrier();\
N                } while (0U)
X#define __DMB() do {                   __schedule_barrier();                   __dmb(0xF);                   __schedule_barrier();                } while (0U)
N
N/**
N  \brief   Reverse byte order (32 bit)
N  \details Reverses the byte order in integer value.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#define __REV                             __rev
N
N
N/**
N  \brief   Reverse byte order (16 bit)
N  \details Reverses the byte order in two unsigned short values.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#ifndef __NO_EMBEDDED_ASM
N__attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
X__attribute__((section(".rev16_text"))) static __inline __asm uint32_t __REV16(uint32_t value)
N{
N  rev16 r0, r0
N  bx lr
N}
N#endif
N
N
N/**
N  \brief   Reverse byte order in signed short value
N  \details Reverses the byte order in a signed short value with sign extension to integer.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#ifndef __NO_EMBEDDED_ASM
N__attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
X__attribute__((section(".revsh_text"))) static __inline __asm int32_t __REVSH(int32_t value)
N{
N  revsh r0, r0
N  bx lr
N}
N#endif
N
N
N/**
N  \brief   Rotate Right in unsigned value (32 bit)
N  \details Rotate Right (immediate) provides the value of the contents of a register rotated by a variable number of bits.
N  \param [in]    op1  Value to rotate
N  \param [in]    op2  Number of Bits to rotate
N  \return               Rotated value
N */
N#define __ROR                             __ror
N
N
N/**
N  \brief   Breakpoint
N  \details Causes the processor to enter Debug state.
N           Debug tools can use this to investigate system state when the instruction at a particular address is reached.
N  \param [in]    value  is ignored by the processor.
N                 If required, a debugger can use it to store additional information about the breakpoint.
N */
N#define __BKPT(value)                       __breakpoint(value)
N
N
N/**
N  \brief   Reverse bit order of value
N  \details Reverses the bit order of the given value.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#if ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N     (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((0L && (__ARM_ARCH_7M__  == 1)) ||      (0L && (__ARM_ARCH_7EM__ == 1))     )
S  #define __RBIT                          __rbit
N#else
N__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
X__attribute__((always_inline)) static __inline uint32_t __RBIT(uint32_t value)
N{
N  uint32_t result;
N  int32_t s = (4 /*sizeof(v)*/ * 8) - 1; /* extra shift needed at end */
N
N  result = value;                      /* r will be reversed bits of v; first get LSB of v */
N  for (value >>= 1U; value; value >>= 1U)
N  {
N    result <<= 1U;
N    result |= value & 1U;
N    s--;
N  }
N  result <<= s;                        /* shift when v's highest bits are zero */
N  return(result);
N}
N#endif
N
N
N/**
N  \brief   Count leading zeros
N  \details Counts the number of leading zeros of a data value.
N  \param [in]  value  Value to count the leading zeros
N  \return             number of leading zeros in value
N */
N#define __CLZ                             __clz
N
N
N#if ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N     (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((0L && (__ARM_ARCH_7M__  == 1)) ||      (0L && (__ARM_ARCH_7EM__ == 1))     )
S
S/**
S  \brief   LDR Exclusive (8 bit)
S  \details Executes a exclusive LDR instruction for 8 bit value.
S  \param [in]    ptr  Pointer to data
S  \return             value of type uint8_t at (*ptr)
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __LDREXB(ptr)                                                        ((uint8_t ) __ldrex(ptr))
S#else
S  #define __LDREXB(ptr)          _Pragma("push") _Pragma("diag_suppress 3731") ((uint8_t ) __ldrex(ptr))  _Pragma("pop")
S#endif
S
S
S/**
S  \brief   LDR Exclusive (16 bit)
S  \details Executes a exclusive LDR instruction for 16 bit values.
S  \param [in]    ptr  Pointer to data
S  \return        value of type uint16_t at (*ptr)
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __LDREXH(ptr)                                                        ((uint16_t) __ldrex(ptr))
S#else
S  #define __LDREXH(ptr)          _Pragma("push") _Pragma("diag_suppress 3731") ((uint16_t) __ldrex(ptr))  _Pragma("pop")
S#endif
S
S
S/**
S  \brief   LDR Exclusive (32 bit)
S  \details Executes a exclusive LDR instruction for 32 bit values.
S  \param [in]    ptr  Pointer to data
S  \return        value of type uint32_t at (*ptr)
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __LDREXW(ptr)                                                        ((uint32_t ) __ldrex(ptr))
S#else
S  #define __LDREXW(ptr)          _Pragma("push") _Pragma("diag_suppress 3731") ((uint32_t ) __ldrex(ptr))  _Pragma("pop")
S#endif
S
S
S/**
S  \brief   STR Exclusive (8 bit)
S  \details Executes a exclusive STR instruction for 8 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S  \return          0  Function succeeded
S  \return          1  Function failed
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __STREXB(value, ptr)                                                 __strex(value, ptr)
S#else
S  #define __STREXB(value, ptr)   _Pragma("push") _Pragma("diag_suppress 3731") __strex(value, ptr)        _Pragma("pop")
S#endif
S
S
S/**
S  \brief   STR Exclusive (16 bit)
S  \details Executes a exclusive STR instruction for 16 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S  \return          0  Function succeeded
S  \return          1  Function failed
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __STREXH(value, ptr)                                                 __strex(value, ptr)
S#else
S  #define __STREXH(value, ptr)   _Pragma("push") _Pragma("diag_suppress 3731") __strex(value, ptr)        _Pragma("pop")
S#endif
S
S
S/**
S  \brief   STR Exclusive (32 bit)
S  \details Executes a exclusive STR instruction for 32 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S  \return          0  Function succeeded
S  \return          1  Function failed
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __STREXW(value, ptr)                                                 __strex(value, ptr)
S#else
S  #define __STREXW(value, ptr)   _Pragma("push") _Pragma("diag_suppress 3731") __strex(value, ptr)        _Pragma("pop")
S#endif
S
S
S/**
S  \brief   Remove the exclusive lock
S  \details Removes the exclusive lock which is created by LDREX.
S */
S#define __CLREX                           __clrex
S
S
S/**
S  \brief   Signed Saturate
S  \details Saturates a signed value.
S  \param [in]  value  Value to be saturated
S  \param [in]    sat  Bit position to saturate to (1..32)
S  \return             Saturated value
S */
S#define __SSAT                            __ssat
S
S
S/**
S  \brief   Unsigned Saturate
S  \details Saturates an unsigned value.
S  \param [in]  value  Value to be saturated
S  \param [in]    sat  Bit position to saturate to (0..31)
S  \return             Saturated value
S */
S#define __USAT                            __usat
S
S
S/**
S  \brief   Rotate Right with Extend (32 bit)
S  \details Moves each bit of a bitstring right by one bit.
S           The carry input is shifted in at the left end of the bitstring.
S  \param [in]    value  Value to rotate
S  \return               Rotated value
S */
S#ifndef __NO_EMBEDDED_ASM
S__attribute__((section(".rrx_text"))) __STATIC_INLINE __ASM uint32_t __RRX(uint32_t value)
S{
S  rrx r0, r0
S  bx lr
S}
S#endif
S
S
S/**
S  \brief   LDRT Unprivileged (8 bit)
S  \details Executes a Unprivileged LDRT instruction for 8 bit value.
S  \param [in]    ptr  Pointer to data
S  \return             value of type uint8_t at (*ptr)
S */
S#define __LDRBT(ptr)                      ((uint8_t )  __ldrt(ptr))
S
S
S/**
S  \brief   LDRT Unprivileged (16 bit)
S  \details Executes a Unprivileged LDRT instruction for 16 bit values.
S  \param [in]    ptr  Pointer to data
S  \return        value of type uint16_t at (*ptr)
S */
S#define __LDRHT(ptr)                      ((uint16_t)  __ldrt(ptr))
S
S
S/**
S  \brief   LDRT Unprivileged (32 bit)
S  \details Executes a Unprivileged LDRT instruction for 32 bit values.
S  \param [in]    ptr  Pointer to data
S  \return        value of type uint32_t at (*ptr)
S */
S#define __LDRT(ptr)                       ((uint32_t ) __ldrt(ptr))
S
S
S/**
S  \brief   STRT Unprivileged (8 bit)
S  \details Executes a Unprivileged STRT instruction for 8 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S */
S#define __STRBT(value, ptr)               __strt(value, ptr)
S
S
S/**
S  \brief   STRT Unprivileged (16 bit)
S  \details Executes a Unprivileged STRT instruction for 16 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S */
S#define __STRHT(value, ptr)               __strt(value, ptr)
S
S
S/**
S  \brief   STRT Unprivileged (32 bit)
S  \details Executes a Unprivileged STRT instruction for 32 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S */
S#define __STRT(value, ptr)                __strt(value, ptr)
S
N#endif /* ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N           (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     ) */
X#endif  
N
N/*@}*/ /* end of group CMSIS_Core_InstructionInterface */
N
N
N/* ###################  Compiler specific Intrinsics  ########################### */
N/** \defgroup CMSIS_SIMD_intrinsics CMSIS SIMD Intrinsics
N  Access to dedicated SIMD instructions
N  @{
N*/
N
N#if ((defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((0L && (__ARM_ARCH_7EM__ == 1))     )
S
S#define __SADD8                           __sadd8
S#define __QADD8                           __qadd8
S#define __SHADD8                          __shadd8
S#define __UADD8                           __uadd8
S#define __UQADD8                          __uqadd8
S#define __UHADD8                          __uhadd8
S#define __SSUB8                           __ssub8
S#define __QSUB8                           __qsub8
S#define __SHSUB8                          __shsub8
S#define __USUB8                           __usub8
S#define __UQSUB8                          __uqsub8
S#define __UHSUB8                          __uhsub8
S#define __SADD16                          __sadd16
S#define __QADD16                          __qadd16
S#define __SHADD16                         __shadd16
S#define __UADD16                          __uadd16
S#define __UQADD16                         __uqadd16
S#define __UHADD16                         __uhadd16
S#define __SSUB16                          __ssub16
S#define __QSUB16                          __qsub16
S#define __SHSUB16                         __shsub16
S#define __USUB16                          __usub16
S#define __UQSUB16                         __uqsub16
S#define __UHSUB16                         __uhsub16
S#define __SASX                            __sasx
S#define __QASX                            __qasx
S#define __SHASX                           __shasx
S#define __UASX                            __uasx
S#define __UQASX                           __uqasx
S#define __UHASX                           __uhasx
S#define __SSAX                            __ssax
S#define __QSAX                            __qsax
S#define __SHSAX                           __shsax
S#define __USAX                            __usax
S#define __UQSAX                           __uqsax
S#define __UHSAX                           __uhsax
S#define __USAD8                           __usad8
S#define __USADA8                          __usada8
S#define __SSAT16                          __ssat16
S#define __USAT16                          __usat16
S#define __UXTB16                          __uxtb16
S#define __UXTAB16                         __uxtab16
S#define __SXTB16                          __sxtb16
S#define __SXTAB16                         __sxtab16
S#define __SMUAD                           __smuad
S#define __SMUADX                          __smuadx
S#define __SMLAD                           __smlad
S#define __SMLADX                          __smladx
S#define __SMLALD                          __smlald
S#define __SMLALDX                         __smlaldx
S#define __SMUSD                           __smusd
S#define __SMUSDX                          __smusdx
S#define __SMLSD                           __smlsd
S#define __SMLSDX                          __smlsdx
S#define __SMLSLD                          __smlsld
S#define __SMLSLDX                         __smlsldx
S#define __SEL                             __sel
S#define __QADD                            __qadd
S#define __QSUB                            __qsub
S
S#define __PKHBT(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0x0000FFFFUL) |  \
S                                           ((((uint32_t)(ARG2)) << (ARG3)) & 0xFFFF0000UL)  )
X#define __PKHBT(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0x0000FFFFUL) |                                             ((((uint32_t)(ARG2)) << (ARG3)) & 0xFFFF0000UL)  )
S
S#define __PKHTB(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0xFFFF0000UL) |  \
S                                           ((((uint32_t)(ARG2)) >> (ARG3)) & 0x0000FFFFUL)  )
X#define __PKHTB(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0xFFFF0000UL) |                                             ((((uint32_t)(ARG2)) >> (ARG3)) & 0x0000FFFFUL)  )
S
S#define __SMMLA(ARG1,ARG2,ARG3)          ( (int32_t)((((int64_t)(ARG1) * (ARG2)) + \
S                                                      ((int64_t)(ARG3) << 32U)     ) >> 32U))
X#define __SMMLA(ARG1,ARG2,ARG3)          ( (int32_t)((((int64_t)(ARG1) * (ARG2)) +                                                       ((int64_t)(ARG3) << 32U)     ) >> 32U))
S
N#endif /* ((defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     ) */
N/*@} end of group CMSIS_SIMD_intrinsics */
N
N
N#endif /* __CMSIS_ARMCC_H */
L 35 "C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.0\CMSIS\Include\cmsis_compiler.h" 2
N
N
N/*
N * ARM Compiler 6 (armclang)
N */
N#elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
S  #include "cmsis_armclang.h"
S
S
S/*
S * GNU Compiler
S */
S#elif defined ( __GNUC__ )
S  #include "cmsis_gcc.h"
S
S
S/*
S * IAR Compiler
S */
S#elif defined ( __ICCARM__ )
S
S
S  #ifndef   __ASM
S    #define __ASM                                  __asm
S  #endif
S  #ifndef   __INLINE
S    #define __INLINE                               inline
S  #endif
S  #ifndef   __STATIC_INLINE
S    #define __STATIC_INLINE                        static inline
S  #endif
S
S  #include <cmsis_iar.h>
S
S  /* CMSIS compiler control architecture macros */
S  #if (__CORE__ == __ARM6M__) || (__CORE__ == __ARM6SM__)
S    #ifndef __ARM_ARCH_6M__
S      #define __ARM_ARCH_6M__                      1
S    #endif
S  #elif (__CORE__ == __ARM7M__)
S    #ifndef __ARM_ARCH_7M__
S      #define __ARM_ARCH_7M__                      1
S    #endif
S  #elif (__CORE__ == __ARM7EM__)
S    #ifndef __ARM_ARCH_7EM__
S      #define __ARM_ARCH_7EM__                     1
S    #endif
S  #endif
S
S  #ifndef   __NO_RETURN
S    #define __NO_RETURN                            __noreturn
S  #endif
S  #ifndef   __USED
S    #define __USED                                 __root
S  #endif
S  #ifndef   __WEAK
S    #define __WEAK                                 __weak
S  #endif
S  #ifndef   __PACKED
S    #define __PACKED                               __packed
S  #endif
S  #ifndef   __PACKED_STRUCT
S    #define __PACKED_STRUCT                        __packed struct
S  #endif
S  #ifndef   __PACKED_UNION
S    #define __PACKED_UNION                         __packed union
S  #endif
S  #ifndef   __UNALIGNED_UINT32        /* deprecated */
S    __packed struct T_UINT32 { uint32_t v; };
S    #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
S  #endif
S  #ifndef   __UNALIGNED_UINT16_WRITE
S    __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
S    #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))->v) = (val))
S  #endif
S  #ifndef   __UNALIGNED_UINT16_READ
S    __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
S    #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(addr))->v)
S  #endif
S  #ifndef   __UNALIGNED_UINT32_WRITE
S    __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
S    #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))->v) = (val))
S  #endif
S  #ifndef   __UNALIGNED_UINT32_READ
S    __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
S    #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(addr))->v)
S  #endif
S  #ifndef   __ALIGNED
S    #warning No compiler specific solution for __ALIGNED. __ALIGNED is ignored.
S    #define __ALIGNED(x)
S  #endif
S  #ifndef   __RESTRICT
S    #warning No compiler specific solution for __RESTRICT. __RESTRICT is ignored.
S    #define __RESTRICT
S  #endif
S
S  // Workaround for missing __CLZ intrinsic in
S  // various versions of the IAR compilers.
S  // __IAR_FEATURE_CLZ__ should be defined by
S  // the compiler that supports __CLZ internally.
S  #if (defined (__ARM_ARCH_6M__)) && (__ARM_ARCH_6M__ == 1) && (!defined (__IAR_FEATURE_CLZ__))
S    __STATIC_INLINE uint32_t __CLZ(uint32_t data)
S    {
S      if (data == 0u) { return 32u; }
S      
S      uint32_t count = 0;
S      uint32_t mask = 0x80000000;
S      
S      while ((data & mask) == 0)
S      {
S        count += 1u;
S        mask = mask >> 1u;
S      }
S      
S      return (count);
S    }
S  #endif
S
S
S/*
S * TI ARM Compiler
S */
S#elif defined ( __TI_ARM__ )
S  #include <cmsis_ccs.h>
S
S  #ifndef   __ASM
S    #define __ASM                                  __asm
S  #endif
S  #ifndef   __INLINE
S    #define __INLINE                               inline
S  #endif
S  #ifndef   __STATIC_INLINE
S    #define __STATIC_INLINE                        static inline
S  #endif
S  #ifndef   __NO_RETURN
S    #define __NO_RETURN                            __attribute__((noreturn))
S  #endif
S  #ifndef   __USED
S    #define __USED                                 __attribute__((used))
S  #endif
S  #ifndef   __WEAK
S    #define __WEAK                                 __attribute__((weak))
S  #endif
S  #ifndef   __PACKED
S    #define __PACKED                               __attribute__((packed))
S  #endif
S  #ifndef   __PACKED_STRUCT
S    #define __PACKED_STRUCT                        struct __attribute__((packed))
S  #endif
S  #ifndef   __PACKED_UNION
S    #define __PACKED_UNION                         union __attribute__((packed))
S  #endif
S  #ifndef   __UNALIGNED_UINT32        /* deprecated */
S    struct __attribute__((packed)) T_UINT32 { uint32_t v; };
S    #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
S  #endif
S  #ifndef   __UNALIGNED_UINT16_WRITE
S    __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
S    #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void*)(addr))->v) = (val))
S  #endif
S  #ifndef   __UNALIGNED_UINT16_READ
S    __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
S    #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(addr))->v)
S  #endif
S  #ifndef   __UNALIGNED_UINT32_WRITE
S    __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
S    #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))->v) = (val))
S  #endif
S  #ifndef   __UNALIGNED_UINT32_READ
S    __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
S    #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(addr))->v)
S  #endif
S  #ifndef   __ALIGNED
S    #define __ALIGNED(x)                           __attribute__((aligned(x)))
S  #endif
S  #ifndef   __RESTRICT
S    #warning No compiler specific solution for __RESTRICT. __RESTRICT is ignored.
S    #define __RESTRICT
S  #endif
S
S
S/*
S * TASKING Compiler
S */
S#elif defined ( __TASKING__ )
S  /*
S   * The CMSIS functions have been implemented as intrinsics in the compiler.
S   * Please use "carm -?i" to get an up to date list of all intrinsics,
S   * Including the CMSIS ones.
S   */
S
S  #ifndef   __ASM
S    #define __ASM                                  __asm
S  #endif
S  #ifndef   __INLINE
S    #define __INLINE                               inline
S  #endif
S  #ifndef   __STATIC_INLINE
S    #define __STATIC_INLINE                        static inline
S  #endif
S  #ifndef   __NO_RETURN
S    #define __NO_RETURN                            __attribute__((noreturn))
S  #endif
S  #ifndef   __USED
S    #define __USED                                 __attribute__((used))
S  #endif
S  #ifndef   __WEAK
S    #define __WEAK                                 __attribute__((weak))
S  #endif
S  #ifndef   __PACKED
S    #define __PACKED                               __packed__
S  #endif
S  #ifndef   __PACKED_STRUCT
S    #define __PACKED_STRUCT                        struct __packed__
S  #endif
S  #ifndef   __PACKED_UNION
S    #define __PACKED_UNION                         union __packed__
S  #endif
S  #ifndef   __UNALIGNED_UINT32        /* deprecated */
S    struct __packed__ T_UINT32 { uint32_t v; };
S    #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
S  #endif
S  #ifndef   __UNALIGNED_UINT16_WRITE
S    __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
S    #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))->v) = (val))
S  #endif
S  #ifndef   __UNALIGNED_UINT16_READ
S    __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
S    #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(addr))->v)
S  #endif
S  #ifndef   __UNALIGNED_UINT32_WRITE
S    __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
S    #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))->v) = (val))
S  #endif
S  #ifndef   __UNALIGNED_UINT32_READ
S    __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
S    #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(addr))->v)
S  #endif
S  #ifndef   __ALIGNED
S    #define __ALIGNED(x)              __align(x)
S  #endif
S  #ifndef   __RESTRICT
S    #warning No compiler specific solution for __RESTRICT. __RESTRICT is ignored.
S    #define __RESTRICT
S  #endif
S
S
S/*
S * COSMIC Compiler
S */
S#elif defined ( __CSMC__ )
S   #include <cmsis_csm.h>
S
S #ifndef   __ASM
S    #define __ASM                                  _asm
S  #endif
S  #ifndef   __INLINE
S    #define __INLINE                               inline
S  #endif
S  #ifndef   __STATIC_INLINE
S    #define __STATIC_INLINE                        static inline
S  #endif
S  #ifndef   __NO_RETURN
S    // NO RETURN is automatically detected hence no warning here
S    #define __NO_RETURN
S  #endif
S  #ifndef   __USED
S    #warning No compiler specific solution for __USED. __USED is ignored.
S    #define __USED
S  #endif
S  #ifndef   __WEAK
S    #define __WEAK                                 __weak
S  #endif
S  #ifndef   __PACKED
S    #define __PACKED                               @packed
S  #endif
S  #ifndef   __PACKED_STRUCT
S    #define __PACKED_STRUCT                        @packed struct
S  #endif
S  #ifndef   __PACKED_UNION
S    #define __PACKED_UNION                         @packed union
S  #endif
S  #ifndef   __UNALIGNED_UINT32        /* deprecated */
S    @packed struct T_UINT32 { uint32_t v; };
S    #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
S  #endif
S  #ifndef   __UNALIGNED_UINT16_WRITE
S    __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
S    #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))->v) = (val))
S  #endif
S  #ifndef   __UNALIGNED_UINT16_READ
S    __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
S    #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(addr))->v)
S  #endif
S  #ifndef   __UNALIGNED_UINT32_WRITE
S    __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
S    #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))->v) = (val))
S  #endif
S  #ifndef   __UNALIGNED_UINT32_READ
S    __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
S    #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(addr))->v)
S  #endif
S  #ifndef   __ALIGNED
S    #warning No compiler specific solution for __ALIGNED. __ALIGNED is ignored.
S    #define __ALIGNED(x)
S  #endif
S  #ifndef   __RESTRICT
S    #warning No compiler specific solution for __RESTRICT. __RESTRICT is ignored.
S    #define __RESTRICT
S  #endif
S
S
S#else
S  #error Unknown compiler.
N#endif
N
N
N#endif /* __CMSIS_COMPILER_H */
N
L 116 "C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.0\CMSIS\Include\core_cm0plus.h" 2
N
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __CORE_CM0PLUS_H_GENERIC */
N
N#ifndef __CMSIS_GENERIC
N
N#ifndef __CORE_CM0PLUS_H_DEPENDANT
N#define __CORE_CM0PLUS_H_DEPENDANT
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* check device defines and use defaults */
N#if defined __CHECK_DEVICE_DEFINES
X#if 0L
S  #ifndef __CM0PLUS_REV
S    #define __CM0PLUS_REV             0x0000U
S    #warning "__CM0PLUS_REV not defined in device header file; using default!"
S  #endif
S
S  #ifndef __MPU_PRESENT
S    #define __MPU_PRESENT             0U
S    #warning "__MPU_PRESENT not defined in device header file; using default!"
S  #endif
S
S  #ifndef __VTOR_PRESENT
S    #define __VTOR_PRESENT            0U
S    #warning "__VTOR_PRESENT not defined in device header file; using default!"
S  #endif
S
S  #ifndef __NVIC_PRIO_BITS
S    #define __NVIC_PRIO_BITS          2U
S    #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
S  #endif
S
S  #ifndef __Vendor_SysTickConfig
S    #define __Vendor_SysTickConfig    0U
S    #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
S  #endif
N#endif
N
N/* IO definitions (access restrictions to peripheral registers) */
N/**
N    \defgroup CMSIS_glob_defs CMSIS Global Defines
N
N    <strong>IO Type Qualifiers</strong> are used
N    \li to specify the access to peripheral variables.
N    \li for automatic generation of peripheral register debug information.
N*/
N#ifdef __cplusplus
S  #define   __I     volatile             /*!< Defines 'read only' permissions */
N#else
N  #define   __I     volatile const       /*!< Defines 'read only' permissions */
N#endif
N#define     __O     volatile             /*!< Defines 'write only' permissions */
N#define     __IO    volatile             /*!< Defines 'read / write' permissions */
N
N/* following defines should be used for structure members */
N#define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
N#define     __OM     volatile            /*! Defines 'write only' structure member permissions */
N#define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
N
N/*@} end of group Cortex-M0+ */
N
N
N
N/*******************************************************************************
N *                 Register Abstraction
N  Core Register contain:
N  - Core Register
N  - Core NVIC Register
N  - Core SCB Register
N  - Core SysTick Register
N  - Core MPU Register
N ******************************************************************************/
N/**
N  \defgroup CMSIS_core_register Defines and Type Definitions
N  \brief Type definitions and defines for Cortex-M processor based devices.
N*/
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_CORE  Status and Control Registers
N  \brief      Core Register type definitions.
N  @{
N */
N
N/**
N  \brief  Union type to access the Application Program Status Register (APSR).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
N    uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
N    uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
N    uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
N    uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} APSR_Type;
N
N/* APSR Register Definitions */
N#define APSR_N_Pos                         31U                                            /*!< APSR: N Position */
N#define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR: N Mask */
N
N#define APSR_Z_Pos                         30U                                            /*!< APSR: Z Position */
N#define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR: Z Mask */
N
N#define APSR_C_Pos                         29U                                            /*!< APSR: C Position */
N#define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR: C Mask */
N
N#define APSR_V_Pos                         28U                                            /*!< APSR: V Position */
N#define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR: V Mask */
N
N
N/**
N  \brief  Union type to access the Interrupt Program Status Register (IPSR).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
N    uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} IPSR_Type;
N
N/* IPSR Register Definitions */
N#define IPSR_ISR_Pos                        0U                                            /*!< IPSR: ISR Position */
N#define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR: ISR Mask */
N
N
N/**
N  \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
N    uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
N    uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
N    uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
N    uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
N    uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
N    uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
N    uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} xPSR_Type;
N
N/* xPSR Register Definitions */
N#define xPSR_N_Pos                         31U                                            /*!< xPSR: N Position */
N#define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR: N Mask */
N
N#define xPSR_Z_Pos                         30U                                            /*!< xPSR: Z Position */
N#define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR: Z Mask */
N
N#define xPSR_C_Pos                         29U                                            /*!< xPSR: C Position */
N#define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR: C Mask */
N
N#define xPSR_V_Pos                         28U                                            /*!< xPSR: V Position */
N#define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR: V Mask */
N
N#define xPSR_T_Pos                         24U                                            /*!< xPSR: T Position */
N#define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR: T Mask */
N
N#define xPSR_ISR_Pos                        0U                                            /*!< xPSR: ISR Position */
N#define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR: ISR Mask */
N
N
N/**
N  \brief  Union type to access the Control Registers (CONTROL).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
N    uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
N    uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} CONTROL_Type;
N
N/* CONTROL Register Definitions */
N#define CONTROL_SPSEL_Pos                   1U                                            /*!< CONTROL: SPSEL Position */
N#define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONTROL: SPSEL Mask */
N
N#define CONTROL_nPRIV_Pos                   0U                                            /*!< CONTROL: nPRIV Position */
N#define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONTROL: nPRIV Mask */
N
N/*@} end of group CMSIS_CORE */
N
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
N  \brief      Type definitions for the NVIC Registers
N  @{
N */
N
N/**
N  \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
N */
Ntypedef struct
N{
N  __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
X  volatile uint32_t ISER[1U];                
N        uint32_t RESERVED0[31U];
N  __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register */
X  volatile uint32_t ICER[1U];                
N        uint32_t RSERVED1[31U];
N  __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register */
X  volatile uint32_t ISPR[1U];                
N        uint32_t RESERVED2[31U];
N  __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register */
X  volatile uint32_t ICPR[1U];                
N        uint32_t RESERVED3[31U];
N        uint32_t RESERVED4[64U];
N  __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
X  volatile uint32_t IP[8U];                  
N}  NVIC_Type;
N
N/*@} end of group CMSIS_NVIC */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_SCB     System Control Block (SCB)
N  \brief    Type definitions for the System Control Block Registers
N  @{
N */
N
N/**
N  \brief  Structure type to access the System Control Block (SCB).
N */
Ntypedef struct
N{
N  __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
X  volatile const  uint32_t CPUID;                   
N  __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Register */
X  volatile uint32_t ICSR;                    
N#if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
X#if 1L && (1 == 1U)
N  __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
X  volatile uint32_t VTOR;                    
N#else
S        uint32_t RESERVED0;
N#endif
N  __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset Control Register */
X  volatile uint32_t AIRCR;                   
N  __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
X  volatile uint32_t SCR;                     
N  __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register */
X  volatile uint32_t CCR;                     
N        uint32_t RESERVED1;
N  __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registers. [0] is RESERVED */
X  volatile uint32_t SHP[2U];                 
N  __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State Register */
X  volatile uint32_t SHCSR;                   
N} SCB_Type;
N
N/* SCB CPUID Register Definitions */
N#define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB CPUID: IMPLEMENTER Position */
N#define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB CPUID: IMPLEMENTER Mask */
N
N#define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB CPUID: VARIANT Position */
N#define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB CPUID: VARIANT Mask */
N
N#define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB CPUID: ARCHITECTURE Position */
N#define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB CPUID: ARCHITECTURE Mask */
N
N#define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB CPUID: PARTNO Position */
N#define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB CPUID: PARTNO Mask */
N
N#define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB CPUID: REVISION Position */
N#define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB CPUID: REVISION Mask */
N
N/* SCB Interrupt Control State Register Definitions */
N#define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB ICSR: NMIPENDSET Position */
N#define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB ICSR: NMIPENDSET Mask */
N
N#define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB ICSR: PENDSVSET Position */
N#define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB ICSR: PENDSVSET Mask */
N
N#define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB ICSR: PENDSVCLR Position */
N#define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB ICSR: PENDSVCLR Mask */
N
N#define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB ICSR: PENDSTSET Position */
N#define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB ICSR: PENDSTSET Mask */
N
N#define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB ICSR: PENDSTCLR Position */
N#define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB ICSR: PENDSTCLR Mask */
N
N#define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB ICSR: ISRPREEMPT Position */
N#define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB ICSR: ISRPREEMPT Mask */
N
N#define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB ICSR: ISRPENDING Position */
N#define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB ICSR: ISRPENDING Mask */
N
N#define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB ICSR: VECTPENDING Position */
N#define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB ICSR: VECTPENDING Mask */
N
N#define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB ICSR: VECTACTIVE Position */
N#define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB ICSR: VECTACTIVE Mask */
N
N#if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
X#if 1L && (1 == 1U)
N/* SCB Interrupt Control State Register Definitions */
N#define SCB_VTOR_TBLOFF_Pos                 8U                                            /*!< SCB VTOR: TBLOFF Position */
N#define SCB_VTOR_TBLOFF_Msk                (0xFFFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB VTOR: TBLOFF Mask */
N#endif
N
N/* SCB Application Interrupt and Reset Control Register Definitions */
N#define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB AIRCR: VECTKEY Position */
N#define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB AIRCR: VECTKEY Mask */
N
N#define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB AIRCR: VECTKEYSTAT Position */
N#define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB AIRCR: VECTKEYSTAT Mask */
N
N#define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB AIRCR: ENDIANESS Position */
N#define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB AIRCR: ENDIANESS Mask */
N
N#define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB AIRCR: SYSRESETREQ Position */
N#define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB AIRCR: SYSRESETREQ Mask */
N
N#define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB AIRCR: VECTCLRACTIVE Position */
N#define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB AIRCR: VECTCLRACTIVE Mask */
N
N/* SCB System Control Register Definitions */
N#define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB SCR: SEVONPEND Position */
N#define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB SCR: SEVONPEND Mask */
N
N#define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB SCR: SLEEPDEEP Position */
N#define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB SCR: SLEEPDEEP Mask */
N
N#define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB SCR: SLEEPONEXIT Position */
N#define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB SCR: SLEEPONEXIT Mask */
N
N/* SCB Configuration Control Register Definitions */
N#define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB CCR: STKALIGN Position */
N#define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB CCR: STKALIGN Mask */
N
N#define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB CCR: UNALIGN_TRP Position */
N#define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB CCR: UNALIGN_TRP Mask */
N
N/* SCB System Handler Control and State Register Definitions */
N#define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB SHCSR: SVCALLPENDED Position */
N#define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB SHCSR: SVCALLPENDED Mask */
N
N/*@} end of group CMSIS_SCB */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
N  \brief    Type definitions for the System Timer Registers.
N  @{
N */
N
N/**
N  \brief  Structure type to access the System Timer (SysTick).
N */
Ntypedef struct
N{
N  __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Register */
X  volatile uint32_t CTRL;                    
N  __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
X  volatile uint32_t LOAD;                    
N  __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register */
X  volatile uint32_t VAL;                     
N  __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
X  volatile const  uint32_t CALIB;                   
N} SysTick_Type;
N
N/* SysTick Control / Status Register Definitions */
N#define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysTick CTRL: COUNTFLAG Position */
N#define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysTick CTRL: COUNTFLAG Mask */
N
N#define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysTick CTRL: CLKSOURCE Position */
N#define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysTick CTRL: CLKSOURCE Mask */
N
N#define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysTick CTRL: TICKINT Position */
N#define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysTick CTRL: TICKINT Mask */
N
N#define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysTick CTRL: ENABLE Position */
N#define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysTick CTRL: ENABLE Mask */
N
N/* SysTick Reload Register Definitions */
N#define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysTick LOAD: RELOAD Position */
N#define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysTick LOAD: RELOAD Mask */
N
N/* SysTick Current Register Definitions */
N#define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysTick VAL: CURRENT Position */
N#define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysTick VAL: CURRENT Mask */
N
N/* SysTick Calibration Register Definitions */
N#define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysTick CALIB: NOREF Position */
N#define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysTick CALIB: NOREF Mask */
N
N#define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysTick CALIB: SKEW Position */
N#define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysTick CALIB: SKEW Mask */
N
N#define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysTick CALIB: TENMS Position */
N#define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysTick CALIB: TENMS Mask */
N
N/*@} end of group CMSIS_SysTick */
N
N#if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
X#if 1L && (0 == 1U)
S/**
S  \ingroup  CMSIS_core_register
S  \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
S  \brief    Type definitions for the Memory Protection Unit (MPU)
S  @{
S */
S
S/**
S  \brief  Structure type to access the Memory Protection Unit (MPU).
S */
Stypedef struct
S{
S  __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
S  __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
S  __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
S  __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register */
S  __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Register */
S} MPU_Type;
S
S/* MPU Type Register Definitions */
S#define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU TYPE: IREGION Position */
S#define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU TYPE: IREGION Mask */
S
S#define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU TYPE: DREGION Position */
S#define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU TYPE: DREGION Mask */
S
S#define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU TYPE: SEPARATE Position */
S#define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU TYPE: SEPARATE Mask */
S
S/* MPU Control Register Definitions */
S#define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU CTRL: PRIVDEFENA Position */
S#define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU CTRL: PRIVDEFENA Mask */
S
S#define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU CTRL: HFNMIENA Position */
S#define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU CTRL: HFNMIENA Mask */
S
S#define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU CTRL: ENABLE Position */
S#define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU CTRL: ENABLE Mask */
S
S/* MPU Region Number Register Definitions */
S#define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU RNR: REGION Position */
S#define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU RNR: REGION Mask */
S
S/* MPU Region Base Address Register Definitions */
S#define MPU_RBAR_ADDR_Pos                   8U                                            /*!< MPU RBAR: ADDR Position */
S#define MPU_RBAR_ADDR_Msk                  (0xFFFFFFUL << MPU_RBAR_ADDR_Pos)              /*!< MPU RBAR: ADDR Mask */
S
S#define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU RBAR: VALID Position */
S#define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU RBAR: VALID Mask */
S
S#define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU RBAR: REGION Position */
S#define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU RBAR: REGION Mask */
S
S/* MPU Region Attribute and Size Register Definitions */
S#define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU RASR: MPU Region Attribute field Position */
S#define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU RASR: MPU Region Attribute field Mask */
S
S#define MPU_RASR_XN_Pos                    28U                                            /*!< MPU RASR: ATTRS.XN Position */
S#define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU RASR: ATTRS.XN Mask */
S
S#define MPU_RASR_AP_Pos                    24U                                            /*!< MPU RASR: ATTRS.AP Position */
S#define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU RASR: ATTRS.AP Mask */
S
S#define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU RASR: ATTRS.TEX Position */
S#define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU RASR: ATTRS.TEX Mask */
S
S#define MPU_RASR_S_Pos                     18U                                            /*!< MPU RASR: ATTRS.S Position */
S#define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU RASR: ATTRS.S Mask */
S
S#define MPU_RASR_C_Pos                     17U                                            /*!< MPU RASR: ATTRS.C Position */
S#define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU RASR: ATTRS.C Mask */
S
S#define MPU_RASR_B_Pos                     16U                                            /*!< MPU RASR: ATTRS.B Position */
S#define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU RASR: ATTRS.B Mask */
S
S#define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU RASR: Sub-Region Disable Position */
S#define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU RASR: Sub-Region Disable Mask */
S
S#define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU RASR: Region Size Field Position */
S#define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU RASR: Region Size Field Mask */
S
S#define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU RASR: Region enable bit Position */
S#define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU RASR: Region enable bit Disable Mask */
S
S/*@} end of group CMSIS_MPU */
N#endif
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
N  \brief    Cortex-M0+ Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible over DAP and not via processor.
N            Therefore they are not covered by the Cortex-M0+ header file.
N  @{
N */
N/*@} end of group CMSIS_CoreDebug */
N
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_core_bitfield     Core register bit field macros
N  \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
N  @{
N */
N
N/**
N  \brief   Mask and shift a bit field value for use in a register bit range.
N  \param[in] field  Name of the register bit field.
N  \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
N  \return           Masked and shifted value.
N*/
N#define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
N
N/**
N  \brief     Mask and shift a register value to extract a bit filed value.
N  \param[in] field  Name of the register bit field.
N  \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
N  \return           Masked and shifted bit field value.
N*/
N#define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
N
N/*@} end of group CMSIS_core_bitfield */
N
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_core_base     Core Definitions
N  \brief      Definitions for base addresses, unions, and structures.
N  @{
N */
N
N/* Memory mapping of Core Hardware */
N#define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Base Address */
N#define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
N#define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
N#define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Base Address */
N
N#define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct */
N#define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration struct */
N#define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struct */
N
N#if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
X#if 1L && (0 == 1U)
S  #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit */
S  #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit */
N#endif
N
N/*@} */
N
N
N
N/*******************************************************************************
N *                Hardware Abstraction Layer
N  Core Function Interface contains:
N  - Core NVIC Functions
N  - Core SysTick Functions
N  - Core Register Access Functions
N ******************************************************************************/
N/**
N  \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
N*/
N
N
N
N/* ##########################   NVIC functions  #################################### */
N/**
N  \ingroup  CMSIS_Core_FunctionInterface
N  \defgroup CMSIS_Core_NVICFunctions NVIC Functions
N  \brief    Functions that manage interrupts and exceptions via the NVIC.
N  @{
N */
N
N#ifdef CMSIS_NVIC_VIRTUAL
S  #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
S    #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
S  #endif
S  #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
N#else
N/*#define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping   not available for Cortex-M0+ */
N/*#define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping   not available for Cortex-M0+ */
N  #define NVIC_EnableIRQ              __NVIC_EnableIRQ
N  #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
N  #define NVIC_DisableIRQ             __NVIC_DisableIRQ
N  #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
N  #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
N  #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
N/*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0+ */
N  #define NVIC_SetPriority            __NVIC_SetPriority
N  #define NVIC_GetPriority            __NVIC_GetPriority
N  #define NVIC_SystemReset            __NVIC_SystemReset
N#endif /* CMSIS_NVIC_VIRTUAL */
N
N#ifdef CMSIS_VECTAB_VIRTUAL
S  #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
S    #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
S  #endif
S  #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
N#else
N  #define NVIC_SetVector              __NVIC_SetVector
N  #define NVIC_GetVector              __NVIC_GetVector
N#endif  /* (CMSIS_VECTAB_VIRTUAL) */
N
N#define NVIC_USER_IRQ_OFFSET          16
N
N
N/* Interrupt Priorities are WORD accessible only under ARMv6M                   */
N/* The following MACROS handle generation of the register offset and byte masks */
N#define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
N#define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
N#define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
N
N
N/**
N  \brief   Enable Interrupt
N  \details Enables a device specific interrupt in the NVIC interrupt controller.
N  \param [in]      IRQn  Device specific interrupt number.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
Xstatic __inline void __NVIC_EnableIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
N  }
N}
N
N
N/**
N  \brief   Get Interrupt Enable status
N  \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
N  \param [in]      IRQn  Device specific interrupt number.
N  \return             0  Interrupt is not enabled.
N  \return             1  Interrupt is enabled.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
Xstatic __inline uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
X    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
N  }
N  else
N  {
N    return(0U);
N  }
N}
N
N
N/**
N  \brief   Disable Interrupt
N  \details Disables a device specific interrupt in the NVIC interrupt controller.
N  \param [in]      IRQn  Device specific interrupt number.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
Xstatic __inline void __NVIC_DisableIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
N    __DSB();
X    do { __schedule_barrier(); __dsb(0xF); __schedule_barrier(); } while (0U);
N    __ISB();
X    do { __schedule_barrier(); __isb(0xF); __schedule_barrier(); } while (0U);
N  }
N}
N
N
N/**
N  \brief   Get Pending Interrupt
N  \details Reads the NVIC pending register and returns the pending bit for the specified device specific interrupt.
N  \param [in]      IRQn  Device specific interrupt number.
N  \return             0  Interrupt status is not pending.
N  \return             1  Interrupt status is pending.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
Xstatic __inline uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
X    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
N  }
N  else
N  {
N    return(0U);
N  }
N}
N
N
N/**
N  \brief   Set Pending Interrupt
N  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
N  \param [in]      IRQn  Device specific interrupt number.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
Xstatic __inline void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
N  }
N}
N
N
N/**
N  \brief   Clear Pending Interrupt
N  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
N  \param [in]      IRQn  Device specific interrupt number.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
Xstatic __inline void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
N  }
N}
N
N
N/**
N  \brief   Set Interrupt Priority
N  \details Sets the priority of a device specific interrupt or a processor exception.
N           The interrupt number can be positive to specify a device specific interrupt,
N           or negative to specify a processor exception.
N  \param [in]      IRQn  Interrupt number.
N  \param [in]  priority  Priority to set.
N  \note    The priority cannot be set for every processor exception.
N */
N__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
Xstatic __inline void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[( (((uint32_t)(int32_t)(IRQn)) >> 2UL) )]  = ((uint32_t)(((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[( (((uint32_t)(int32_t)(IRQn)) >> 2UL) )]  & ~(0xFFUL << ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL))) |
N       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
X       (((priority << (8U - 2)) & (uint32_t)0xFFUL) << ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL)));
N  }
N  else
N  {
N    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
X    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >> 2UL) )] = ((uint32_t)(((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >> 2UL) )] & ~(0xFFUL << ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL))) |
N       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
X       (((priority << (8U - 2)) & (uint32_t)0xFFUL) << ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL)));
N  }
N}
N
N
N/**
N  \brief   Get Interrupt Priority
N  \details Reads the priority of a device specific interrupt or a processor exception.
N           The interrupt number can be positive to specify a device specific interrupt,
N           or negative to specify a processor exception.
N  \param [in]   IRQn  Interrupt number.
N  \return             Interrupt Priority.
N                      Value is aligned automatically to the implemented priority bits of the microcontroller.
N */
N__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
Xstatic __inline uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
N{
N
N  if ((int32_t)(IRQn) >= 0)
N  {
N    return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
X    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[ ( (((uint32_t)(int32_t)(IRQn)) >> 2UL) )] >> ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL) ) & (uint32_t)0xFFUL) >> (8U - 2)));
N  }
N  else
N  {
N    return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
X    return((uint32_t)(((((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >> 2UL) )] >> ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL) ) & (uint32_t)0xFFUL) >> (8U - 2)));
N  }
N}
N
N
N/**
N  \brief   Set Interrupt Vector
N  \details Sets an interrupt vector in SRAM based interrupt vector table.
N           The interrupt number can be positive to specify a device specific interrupt,
N           or negative to specify a processor exception.
N           VTOR must been relocated to SRAM before.
N           If VTOR is not present address 0 must be mapped to SRAM.
N  \param [in]   IRQn      Interrupt number
N  \param [in]   vector    Address of interrupt handler function
N */
N__STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
Xstatic __inline void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
N{
N#if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
X#if 1L && (1 == 1U)
N  uint32_t *vectors = (uint32_t *)SCB->VTOR;
X  uint32_t *vectors = (uint32_t *)((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->VTOR;
N#else
S    uint32_t *vectors = (uint32_t *)0x0U;
N#endif
N  vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET] = vector;
X  vectors[(int32_t)IRQn + 16] = vector;
N}
N
N
N/**
N  \brief   Get Interrupt Vector
N  \details Reads an interrupt vector from interrupt vector table.
N           The interrupt number can be positive to specify a device specific interrupt,
N           or negative to specify a processor exception.
N  \param [in]   IRQn      Interrupt number.
N  \return                 Address of interrupt handler function
N */
N__STATIC_INLINE uint32_t __NVIC_GetVector(IRQn_Type IRQn)
Xstatic __inline uint32_t __NVIC_GetVector(IRQn_Type IRQn)
N{
N#if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
X#if 1L && (1 == 1U)
N  uint32_t *vectors = (uint32_t *)SCB->VTOR;
X  uint32_t *vectors = (uint32_t *)((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->VTOR;
N#else
S  uint32_t *vectors = (uint32_t *)0x0U;
N#endif
N  return vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET];
X  return vectors[(int32_t)IRQn + 16];
N
N}
N
N
N/**
N  \brief   System Reset
N  \details Initiates a system reset request to reset the MCU.
N */
N__STATIC_INLINE void __NVIC_SystemReset(void)
Xstatic __inline void __NVIC_SystemReset(void)
N{
N  __DSB();                                                          /* Ensure all outstanding memory accesses included
X  do { __schedule_barrier(); __dsb(0xF); __schedule_barrier(); } while (0U);                                                          
N                                                                       buffered write are completed before reset */
N  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
X  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR  = ((0x5FAUL << 16U) |
N                 SCB_AIRCR_SYSRESETREQ_Msk);
X                 (1UL << 2U));
N  __DSB();                                                          /* Ensure completion of memory access */
X  do { __schedule_barrier(); __dsb(0xF); __schedule_barrier(); } while (0U);                                                           
N
N  for(;;)                                                           /* wait until reset */
N  {
N    __NOP();
X    __nop();
N  }
N}
N
N/*@} end of CMSIS_Core_NVICFunctions */
N
N/* ##########################  MPU functions  #################################### */
N
N#if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
X#if 1L && (0 == 1U)
S
S#include "mpu_armv7.h"
S
N#endif
N
N/* ##########################  FPU functions  #################################### */
N/**
N  \ingroup  CMSIS_Core_FunctionInterface
N  \defgroup CMSIS_Core_FpuFunctions FPU Functions
N  \brief    Function that provides FPU type.
N  @{
N */
N
N/**
N  \brief   get FPU type
N  \details returns the FPU type
N  \returns
N   - \b  0: No FPU
N   - \b  1: Single precision FPU
N   - \b  2: Double + Single precision FPU
N */
N__STATIC_INLINE uint32_t SCB_GetFPUType(void)
Xstatic __inline uint32_t SCB_GetFPUType(void)
N{
N    return 0U;           /* No FPU */
N}
N
N
N/*@} end of CMSIS_Core_FpuFunctions */
N
N
N
N/* ##################################    SysTick function  ############################################ */
N/**
N  \ingroup  CMSIS_Core_FunctionInterface
N  \defgroup CMSIS_Core_SysTickFunctions SysTick Functions
N  \brief    Functions that configure the System.
N  @{
N */
N
N#if defined (__Vendor_SysTickConfig) && (__Vendor_SysTickConfig == 0U)
X#if 1L && (0 == 0U)
N
N/**
N  \brief   System Tick Configuration
N  \details Initializes the System Timer and its interrupt, and starts the System Tick Timer.
N           Counter is in free running mode to generate periodic interrupts.
N  \param [in]  ticks  Number of ticks between two interrupts.
N  \return          0  Function succeeded.
N  \return          1  Function failed.
N  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
N           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
N           must contain a vendor-specific implementation of this function.
N */
N__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
Xstatic __inline uint32_t SysTick_Config(uint32_t ticks)
N{
N  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
X  if ((ticks - 1UL) > (0xFFFFFFUL ))
N  {
N    return (1UL);                                                   /* Reload value impossible */
N  }
N
N  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->LOAD  = (uint32_t)(ticks - 1UL);                          
N  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
X  __NVIC_SetPriority (SysTick_IRQn, (1UL << 2) - 1UL);  
N  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->VAL   = 0UL;                                              
N  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL  = (1UL << 2U) |
N                   SysTick_CTRL_TICKINT_Msk   |
X                   (1UL << 1U)   |
N                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
X                   (1UL );                          
N  return (0UL);                                                     /* Function successful */
N}
N
N#endif
N
N/*@} end of CMSIS_Core_SysTickFunctions */
N
N
N
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __CORE_CM0PLUS_H_DEPENDANT */
N
N#endif /* __CMSIS_GENERIC */
L 199 "C:\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.13.0\Device\Include\MKL25Z4.h" 2
N#include "system_MKL25Z4.h"            /* Device specific configuration file */
L 1 ".\RTE\Device\MKL25Z128xxx4\system_MKL25Z4.h" 1
N/*
N** ###################################################################
N**     Processors:          MKL25Z128FM4
N**                          MKL25Z128FT4
N**                          MKL25Z128LH4
N**                          MKL25Z128VLK4
N**
N**     Compilers:           Keil ARM C/C++ Compiler
N**                          Freescale C/C++ for Embedded ARM
N**                          GNU C Compiler
N**                          GNU C Compiler - CodeSourcery Sourcery G++
N**                          IAR ANSI C/C++ Compiler for ARM
N**
N**     Reference manual:    KL25P80M48SF0RM, Rev.3, Sep 2012
N**     Version:             rev. 2.5, 2015-02-19
N**     Build:               b150224
N**
N**     Abstract:
N**         Provides a system configuration function and a global variable that
N**         contains the system frequency. It configures the device and initializes
N**         the oscillator (PLL) that is part of the microcontroller device.
N**
N**     Copyright (c) 2015 Freescale Semiconductor, Inc.
N**     All rights reserved.
N**
N**     Redistribution and use in source and binary forms, with or without modification,
N**     are permitted provided that the following conditions are met:
N**
N**     o Redistributions of source code must retain the above copyright notice, this list
N**       of conditions and the following disclaimer.
N**
N**     o Redistributions in binary form must reproduce the above copyright notice, this
N**       list of conditions and the following disclaimer in the documentation and/or
N**       other materials provided with the distribution.
N**
N**     o Neither the name of Freescale Semiconductor, Inc. nor the names of its
N**       contributors may be used to endorse or promote products derived from this
N**       software without specific prior written permission.
N**
N**     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
N**     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
N**     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N**     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
N**     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
N**     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
N**     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
N**     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N**     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
N**     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N**
N**     http:                 www.freescale.com
N**     mail:                 support@freescale.com
N**
N**     Revisions:
N**     - rev. 1.0 (2012-06-13)
N**         Initial version.
N**     - rev. 1.1 (2012-06-21)
N**         Update according to reference manual rev. 1.
N**     - rev. 1.2 (2012-08-01)
N**         Device type UARTLP changed to UART0.
N**     - rev. 1.3 (2012-10-04)
N**         Update according to reference manual rev. 3.
N**     - rev. 1.4 (2012-11-22)
N**         MCG module - bit LOLS in MCG_S register renamed to LOLS0.
N**         NV registers - bit EZPORT_DIS in NV_FOPT register removed.
N**     - rev. 1.5 (2013-04-05)
N**         Changed start of doxygen comment.
N**     - rev. 2.0 (2013-10-29)
N**         Register accessor macros added to the memory map.
N**         Symbols for Processor Expert memory map compatibility added to the memory map.
N**         Startup file for gcc has been updated according to CMSIS 3.2.
N**         System initialization updated.
N**     - rev. 2.1 (2014-07-16)
N**         Module access macro module_BASES replaced by module_BASE_PTRS.
N**         System initialization and startup updated.
N**     - rev. 2.2 (2014-08-22)
N**         System initialization updated - default clock config changed.
N**     - rev. 2.3 (2014-08-28)
N**         Update of startup files - possibility to override DefaultISR added.
N**     - rev. 2.4 (2014-10-14)
N**         Interrupt INT_LPTimer renamed to INT_LPTMR0.
N**     - rev. 2.5 (2015-02-19)
N**         Renamed interrupt vector LLW to LLWU.
N**
N** ###################################################################
N*/
N
N/*!
N * @file MKL25Z4
N * @version 2.5
N * @date 2015-02-19
N * @brief Device specific configuration file for MKL25Z4 (header file)
N *
N * Provides a system configuration function and a global variable that contains
N * the system frequency. It configures the device and initializes the oscillator
N * (PLL) that is part of the microcontroller device.
N */
N
N#ifndef SYSTEM_MKL25Z4_H_
N#define SYSTEM_MKL25Z4_H_                        /**< Symbol preventing repeated inclusion */
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#include <stdint.h>
N
N
N#ifndef DISABLE_WDOG
N  #define DISABLE_WDOG                 1
N#endif
N
N
N
N
N/* MCG mode constants */
N
N#define MCG_MODE_FEI                   0U
N#define MCG_MODE_FBI                   1U
N#define MCG_MODE_BLPI                  2U
N#define MCG_MODE_FEE                   3U
N#define MCG_MODE_FBE                   4U
N#define MCG_MODE_BLPE                  5U
N#define MCG_MODE_PBE                   6U
N#define MCG_MODE_PEE                   7U
N
N
N#define CLOCK_SETUP 1
N
N/* Predefined clock setups
N   0 ... Default  part configuration
N         Multipurpose Clock Generator (MCG) in FEI mode.
N         Reference clock source for MCG module: Slow internal reference clock
N         Core clock = 20.97152MHz
N         Bus clock  = 20.97152MHz
N   1 ... Maximum achievable clock frequency configuration
N         Multipurpose Clock Generator (MCG) in PEE mode.
N         Reference clock source for MCG module: System oscillator reference clock
N         Core clock = 48MHz
N         Bus clock  = 24MHz
N   2 ... Chip internaly clocked, ready for Very Low Power Run mode
N         Multipurpose Clock Generator (MCG) in BLPI mode.
N         Reference clock source for MCG module: Fast internal reference clock
N         Core clock = 4MHz
N         Bus clock  = 0.8MHz
N   3 ... Chip externally clocked, ready for Very Low Power Run mode
N         Multipurpose Clock Generator (MCG) in BLPE mode.
N         Reference clock source for MCG module: System oscillator reference clock
N         Core clock = 4MHz
N         Bus clock  = 1MHz
N   4 ... USB clock setup
N         Multipurpose Clock Generator (MCG) in PEE mode.
N         Reference clock source for MCG module: System oscillator reference clock
N         Core clock = 48MHz
N         Bus clock  = 24MHz
N */
N
N/* Define clock source values */
N
N#define CPU_XTAL_CLK_HZ                8000000u            /* Value of the external crystal or oscillator clock frequency in Hz */
N#define CPU_INT_SLOW_CLK_HZ            32768u              /* Value of the slow internal oscillator clock frequency in Hz */
N#define CPU_INT_FAST_CLK_HZ            4000000u            /* Value of the fast internal oscillator clock frequency in Hz */
N
N/* RTC oscillator setting */
N
N/* Low power mode enable */
N/* SMC_PMPROT: AVLP=1,ALLS=1,AVLLS=1 */
N#define SYSTEM_SMC_PMPROT_VALUE        0x2AU               /* SMC_PMPROT */
N
N/* Internal reference clock trim */
N/* #undef SLOW_TRIM_ADDRESS */                             /* Slow oscillator not trimmed. Commented out for MISRA compliance. */
N/* #undef SLOW_FINE_TRIM_ADDRESS */                        /* Slow oscillator not trimmed. Commented out for MISRA compliance. */
N/* #undef FAST_TRIM_ADDRESS */                             /* Fast oscillator not trimmed. Commented out for MISRA compliance. */
N/* #undef FAST_FINE_TRIM_ADDRESS */                        /* Fast oscillator not trimmed. Commented out for MISRA compliance. */
N
N#ifdef CLOCK_SETUP
N#if (CLOCK_SETUP == 0)
X#if (1 == 0)
S  #define DEFAULT_SYSTEM_CLOCK         20971520u           /* Default System clock value */
S  #define MCG_MODE                     MCG_MODE_FEI /* Clock generator mode */
S  /* MCG_C1: CLKS=0,FRDIV=0,IREFS=1,IRCLKEN=1,IREFSTEN=0 */
S  #define SYSTEM_MCG_C1_VALUE          0x06U               /* MCG_C1 */
S  /* MCG_C2: LOCRE0=0,RANGE0=2,HGO0=0,EREFS0=1,LP=0,IRCS=0 */
S  #define SYSTEM_MCG_C2_VALUE          0x24U               /* MCG_C2 */
S  /* MCG_C4: DMX32=0,DRST_DRS=0,FCTRIM=0,SCFTRIM=0 */
S  #define SYSTEM_MCG_C4_VALUE          0x00U               /* MCG_C4 */
S  /* MCG_SC: ATME=0,ATMS=0,ATMF=0,FLTPRSRV=0,FCRDIV=0,LOCS0=0 */
S  #define SYSTEM_MCG_SC_VALUE          0x00U               /* MCG_SC */
S/* MCG_C5: PLLCLKEN0=0,PLLSTEN0=0,PRDIV0=0 */
S  #define SYSTEM_MCG_C5_VALUE          0x00U               /* MCG_C5 */
S/* MCG_C6: LOLIE0=0,PLLS=0,CME0=0,VDIV0=0 */
S  #define SYSTEM_MCG_C6_VALUE          0x00U               /* MCG_C6 */
S/* OSC0_CR: ERCLKEN=1,EREFSTEN=0,SC2P=0,SC4P=0,SC8P=0,SC16P=0 */
S  #define SYSTEM_OSC0_CR_VALUE         0x80U               /* OSC0_CR */
S/* SMC_PMCTRL: RUNM=0,STOPA=0,STOPM=0 */
S  #define SYSTEM_SMC_PMCTRL_VALUE      0x00U               /* SMC_PMCTRL */
S/* SIM_CLKDIV1: OUTDIV1=0,OUTDIV4=0 */
S  #define SYSTEM_SIM_CLKDIV1_VALUE     0x00U               /* SIM_CLKDIV1 */
S/* SIM_SOPT1: USBREGEN=0,USBSSTBY=0,USBVSTBY=0,OSC32KSEL=3 */
S  #define SYSTEM_SIM_SOPT1_VALUE       0x000C0000U         /* SIM_SOPT1 */
S/* SIM_SOPT2: UART0SRC=0,TPMSRC=1,USBSRC=0,PLLFLLSEL=0,CLKOUTSEL=0,RTCCLKOUTSEL=0 */
S  #define SYSTEM_SIM_SOPT2_VALUE       0x01000000U         /* SIM_SOPT2 */
N#elif (CLOCK_SETUP == 1)
X#elif (1 == 1)
N  #define DEFAULT_SYSTEM_CLOCK         48000000u           /* Default System clock value */
N  #define MCG_MODE                     MCG_MODE_PEE /* Clock generator mode */
N  /* MCG_C1: CLKS=0,FRDIV=3,IREFS=0,IRCLKEN=1,IREFSTEN=0 */
N  #define SYSTEM_MCG_C1_VALUE          0x1AU               /* MCG_C1 */
N  /* MCG_C2: LOCRE0=0,RANGE0=2,HGO0=0,EREFS0=1,LP=0,IRCS=0 */
N  #define SYSTEM_MCG_C2_VALUE          0x24U               /* MCG_C2 */
N  /* MCG_C4: DMX32=0,DRST_DRS=0,FCTRIM=0,SCFTRIM=0 */
N  #define SYSTEM_MCG_C4_VALUE          0x00U               /* MCG_C4 */
N  /* MCG_SC: ATME=0,ATMS=0,ATMF=0,FLTPRSRV=0,FCRDIV=0,LOCS0=0 */
N  #define SYSTEM_MCG_SC_VALUE          0x00U               /* MCG_SC */
N/* MCG_C5: PLLCLKEN0=0,PLLSTEN0=0,PRDIV0=1 */
N  #define SYSTEM_MCG_C5_VALUE          0x01U               /* MCG_C5 */
N/* MCG_C6: LOLIE0=0,PLLS=1,CME0=0,VDIV0=0 */
N  #define SYSTEM_MCG_C6_VALUE          0x40U               /* MCG_C6 */
N/* OSC0_CR: ERCLKEN=1,EREFSTEN=0,SC2P=0,SC4P=0,SC8P=0,SC16P=0 */
N  #define SYSTEM_OSC0_CR_VALUE         0x80U               /* OSC0_CR */
N/* SMC_PMCTRL: RUNM=0,STOPA=0,STOPM=0 */
N  #define SYSTEM_SMC_PMCTRL_VALUE      0x00U               /* SMC_PMCTRL */
N/* SIM_CLKDIV1: OUTDIV1=1,OUTDIV4=1 */
N  #define SYSTEM_SIM_CLKDIV1_VALUE     0x10010000U         /* SIM_CLKDIV1 */
N/* SIM_SOPT1: USBREGEN=0,USBSSTBY=0,USBVSTBY=0,OSC32KSEL=3 */
N  #define SYSTEM_SIM_SOPT1_VALUE       0x000C0000U         /* SIM_SOPT1 */
N/* SIM_SOPT2: UART0SRC=0,TPMSRC=1,USBSRC=0,PLLFLLSEL=1,CLKOUTSEL=0,RTCCLKOUTSEL=0 */
N  #define SYSTEM_SIM_SOPT2_VALUE       0x01010000U         /* SIM_SOPT2 */
N#elif (CLOCK_SETUP == 2)
S  #define DEFAULT_SYSTEM_CLOCK         4000000u            /* Default System clock value */
S  #define MCG_MODE                     MCG_MODE_BLPI /* Clock generator mode */
S  /* MCG_C1: CLKS=1,FRDIV=0,IREFS=1,IRCLKEN=1,IREFSTEN=0 */
S  #define SYSTEM_MCG_C1_VALUE          0x46U               /* MCG_C1 */
S  /* MCG_C2: LOCRE0=0,RANGE0=2,HGO0=0,EREFS0=1,LP=1,IRCS=1 */
S  #define SYSTEM_MCG_C2_VALUE          0x27U               /* MCG_C2 */
S  /* MCG_C4: DMX32=0,DRST_DRS=0,FCTRIM=0,SCFTRIM=0 */
S  #define SYSTEM_MCG_C4_VALUE          0x00U               /* MCG_C4 */
S  /* MCG_SC: ATME=0,ATMS=0,ATMF=0,FLTPRSRV=0,FCRDIV=0,LOCS0=0 */
S  #define SYSTEM_MCG_SC_VALUE          0x00U               /* MCG_SC */
S/* MCG_C5: PLLCLKEN0=0,PLLSTEN0=0,PRDIV0=0 */
S  #define SYSTEM_MCG_C5_VALUE          0x00U               /* MCG_C5 */
S/* MCG_C6: LOLIE0=0,PLLS=0,CME0=0,VDIV0=0 */
S  #define SYSTEM_MCG_C6_VALUE          0x00U               /* MCG_C6 */
S/* OSC0_CR: ERCLKEN=1,EREFSTEN=0,SC2P=0,SC4P=0,SC8P=0,SC16P=0 */
S  #define SYSTEM_OSC0_CR_VALUE         0x80U               /* OSC0_CR */
S/* SMC_PMCTRL: RUNM=0,STOPA=0,STOPM=0 */
S  #define SYSTEM_SMC_PMCTRL_VALUE      0x00U               /* SMC_PMCTRL */
S/* SIM_CLKDIV1: OUTDIV1=0,OUTDIV4=4 */
S  #define SYSTEM_SIM_CLKDIV1_VALUE     0x00040000U         /* SIM_CLKDIV1 */
S/* SIM_SOPT1: USBREGEN=0,USBSSTBY=0,USBVSTBY=0,OSC32KSEL=3 */
S  #define SYSTEM_SIM_SOPT1_VALUE       0x000C0000U         /* SIM_SOPT1 */
S/* SIM_SOPT2: UART0SRC=0,TPMSRC=2,USBSRC=0,PLLFLLSEL=0,CLKOUTSEL=0,RTCCLKOUTSEL=0 */
S  #define SYSTEM_SIM_SOPT2_VALUE       0x02000000U         /* SIM_SOPT2 */
S#elif (CLOCK_SETUP == 3)
S  #define DEFAULT_SYSTEM_CLOCK         4000000u            /* Default System clock value */
S  #define MCG_MODE                     MCG_MODE_BLPE /* Clock generator mode */
S  /* MCG_C1: CLKS=2,FRDIV=3,IREFS=0,IRCLKEN=1,IREFSTEN=0 */
S  #define SYSTEM_MCG_C1_VALUE          0x9AU               /* MCG_C1 */
S  /* MCG_C2: LOCRE0=0,RANGE0=2,HGO0=0,EREFS0=1,LP=1,IRCS=1 */
S  #define SYSTEM_MCG_C2_VALUE          0x27U               /* MCG_C2 */
S  /* MCG_C4: DMX32=0,DRST_DRS=0,FCTRIM=0,SCFTRIM=0 */
S  #define SYSTEM_MCG_C4_VALUE          0x00U               /* MCG_C4 */
S  /* MCG_SC: ATME=0,ATMS=0,ATMF=0,FLTPRSRV=0,FCRDIV=1,LOCS0=0 */
S  #define SYSTEM_MCG_SC_VALUE          0x02U               /* MCG_SC */
S/* MCG_C5: PLLCLKEN0=0,PLLSTEN0=0,PRDIV0=0 */
S  #define SYSTEM_MCG_C5_VALUE          0x00U               /* MCG_C5 */
S/* MCG_C6: LOLIE0=0,PLLS=0,CME0=0,VDIV0=0 */
S  #define SYSTEM_MCG_C6_VALUE          0x00U               /* MCG_C6 */
S/* OSC0_CR: ERCLKEN=1,EREFSTEN=0,SC2P=0,SC4P=0,SC8P=0,SC16P=0 */
S  #define SYSTEM_OSC0_CR_VALUE         0x80U               /* OSC0_CR */
S/* SMC_PMCTRL: RUNM=0,STOPA=0,STOPM=0 */
S  #define SYSTEM_SMC_PMCTRL_VALUE      0x00U               /* SMC_PMCTRL */
S/* SIM_CLKDIV1: OUTDIV1=1,OUTDIV4=3 */
S  #define SYSTEM_SIM_CLKDIV1_VALUE     0x10030000U         /* SIM_CLKDIV1 */
S/* SIM_SOPT1: USBREGEN=0,USBSSTBY=0,USBVSTBY=0,OSC32KSEL=3 */
S  #define SYSTEM_SIM_SOPT1_VALUE       0x000C0000U         /* SIM_SOPT1 */
S/* SIM_SOPT2: UART0SRC=0,TPMSRC=2,USBSRC=0,PLLFLLSEL=0,CLKOUTSEL=0,RTCCLKOUTSEL=0 */
S  #define SYSTEM_SIM_SOPT2_VALUE       0x02000000U         /* SIM_SOPT2 */
S#elif (CLOCK_SETUP == 4)
S  #define DEFAULT_SYSTEM_CLOCK         48000000u           /* Default System clock value */
S  #define MCG_MODE                     MCG_MODE_PEE /* Clock generator mode */
S  /* MCG_C1: CLKS=0,FRDIV=3,IREFS=0,IRCLKEN=1,IREFSTEN=0 */
S  #define SYSTEM_MCG_C1_VALUE          0x1AU               /* MCG_C1 */
S  /* MCG_C2: LOCRE0=0,RANGE0=2,HGO0=0,EREFS0=1,LP=0,IRCS=0 */
S  #define SYSTEM_MCG_C2_VALUE          0x24U               /* MCG_C2 */
S  /* MCG_C4: DMX32=0,DRST_DRS=0,FCTRIM=0,SCFTRIM=0 */
S  #define SYSTEM_MCG_C4_VALUE          0x00U               /* MCG_C4 */
S  /* MCG_SC: ATME=0,ATMS=0,ATMF=0,FLTPRSRV=0,FCRDIV=0,LOCS0=0 */
S  #define SYSTEM_MCG_SC_VALUE          0x00U               /* MCG_SC */
S/* MCG_C5: PLLCLKEN0=0,PLLSTEN0=0,PRDIV0=1 */
S  #define SYSTEM_MCG_C5_VALUE          0x01U               /* MCG_C5 */
S/* MCG_C6: LOLIE0=0,PLLS=1,CME0=0,VDIV0=0 */
S  #define SYSTEM_MCG_C6_VALUE          0x40U               /* MCG_C6 */
S/* OSC0_CR: ERCLKEN=1,EREFSTEN=0,SC2P=0,SC4P=0,SC8P=0,SC16P=0 */
S  #define SYSTEM_OSC0_CR_VALUE         0x80U               /* OSC0_CR */
S/* SMC_PMCTRL: RUNM=0,STOPA=0,STOPM=0 */
S  #define SYSTEM_SMC_PMCTRL_VALUE      0x00U               /* SMC_PMCTRL */
S/* SIM_CLKDIV1: OUTDIV1=1,OUTDIV4=1 */
S  #define SYSTEM_SIM_CLKDIV1_VALUE     0x10010000U         /* SIM_CLKDIV1 */
S/* SIM_SOPT1: USBREGEN=0,USBSSTBY=0,USBVSTBY=0,OSC32KSEL=3 */
S  #define SYSTEM_SIM_SOPT1_VALUE       0x000C0000U         /* SIM_SOPT1 */
S/* SIM_SOPT2: UART0SRC=0,TPMSRC=1,USBSRC=0,PLLFLLSEL=1,CLKOUTSEL=0,RTCCLKOUTSEL=0 */
S  #define SYSTEM_SIM_SOPT2_VALUE       0x01010000U         /* SIM_SOPT2 */
S
N#endif
N#else
S  #define DEFAULT_SYSTEM_CLOCK         20971520u           /* Default System clock value */
N#endif
N
N/**
N * @brief System clock frequency (core clock)
N *
N * The system clock frequency supplied to the SysTick timer and the processor
N * core clock. This variable can be used by the user application to setup the
N * SysTick timer or configure other parameters. It may also be used by debugger to
N * query the frequency of the debug timer or configure the trace clock speed
N * SystemCoreClock is initialized with a correct predefined value.
N */
Nextern uint32_t SystemCoreClock;
N
N/**
N * @brief Setup the microcontroller system.
N *
N * Typically this function configures the oscillator (PLL) that is part of the
N * microcontroller device. For systems with variable clock speed it also updates
N * the variable SystemCoreClock. SystemInit is called from startup_device file.
N */
Nvoid SystemInit (void);
N
N/**
N * @brief Updates the SystemCoreClock variable.
N *
N * It must be called whenever the core clock is changed during program
N * execution. SystemCoreClockUpdate() evaluates the clock register settings and calculates
N * the current core clock.
N */
Nvoid SystemCoreClockUpdate (void);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif  /* #if !defined(SYSTEM_MKL25Z4_H_) */
L 200 "C:\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.13.0\Device\Include\MKL25Z4.h" 2
N
N/*!
N * @}
N */ /* end of group Cortex_Core_Configuration */
N
N
N/* ----------------------------------------------------------------------------
N   -- Device Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup Peripheral_access_layer Device Peripheral Access Layer
N * @{
N */
N
N
N/*
N** Start of section using anonymous unions
N*/
N
N#if defined(__CC_ARM)
X#if 1L
N  #pragma push
N  #pragma anon_unions
N#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
S  #pragma clang diagnostic push
S  #pragma clang diagnostic ignored "-Wc11-extensions"
S  #pragma clang diagnostic ignored "-Wreserved-id-macro"
S  #pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
S  #pragma clang diagnostic ignored "-Wnested-anon-types"
S#elif defined(__CWCC__)
S  #pragma push
S  #pragma cpp_extensions on
S#elif defined(__GNUC__)
S  /* anonymous unions are enabled by default */
S#elif defined(__IAR_SYSTEMS_ICC__)
S  #pragma language=extended
S#else
S  #error Not supported compiler type
N#endif
N
N/* ----------------------------------------------------------------------------
N   -- ADC Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup ADC_Peripheral_Access_Layer ADC Peripheral Access Layer
N * @{
N */
N
N/** ADC - Register Layout Typedef */
Ntypedef struct {
N  __IO uint32_t SC1[2];                            /**< ADC Status and Control Registers 1, array offset: 0x0, array step: 0x4 */
X  volatile uint32_t SC1[2];                             
N  __IO uint32_t CFG1;                              /**< ADC Configuration Register 1, offset: 0x8 */
X  volatile uint32_t CFG1;                               
N  __IO uint32_t CFG2;                              /**< ADC Configuration Register 2, offset: 0xC */
X  volatile uint32_t CFG2;                               
N  __I  uint32_t R[2];                              /**< ADC Data Result Register, array offset: 0x10, array step: 0x4 */
X  volatile const  uint32_t R[2];                               
N  __IO uint32_t CV1;                               /**< Compare Value Registers, offset: 0x18 */
X  volatile uint32_t CV1;                                
N  __IO uint32_t CV2;                               /**< Compare Value Registers, offset: 0x1C */
X  volatile uint32_t CV2;                                
N  __IO uint32_t SC2;                               /**< Status and Control Register 2, offset: 0x20 */
X  volatile uint32_t SC2;                                
N  __IO uint32_t SC3;                               /**< Status and Control Register 3, offset: 0x24 */
X  volatile uint32_t SC3;                                
N  __IO uint32_t OFS;                               /**< ADC Offset Correction Register, offset: 0x28 */
X  volatile uint32_t OFS;                                
N  __IO uint32_t PG;                                /**< ADC Plus-Side Gain Register, offset: 0x2C */
X  volatile uint32_t PG;                                 
N  __IO uint32_t MG;                                /**< ADC Minus-Side Gain Register, offset: 0x30 */
X  volatile uint32_t MG;                                 
N  __IO uint32_t CLPD;                              /**< ADC Plus-Side General Calibration Value Register, offset: 0x34 */
X  volatile uint32_t CLPD;                               
N  __IO uint32_t CLPS;                              /**< ADC Plus-Side General Calibration Value Register, offset: 0x38 */
X  volatile uint32_t CLPS;                               
N  __IO uint32_t CLP4;                              /**< ADC Plus-Side General Calibration Value Register, offset: 0x3C */
X  volatile uint32_t CLP4;                               
N  __IO uint32_t CLP3;                              /**< ADC Plus-Side General Calibration Value Register, offset: 0x40 */
X  volatile uint32_t CLP3;                               
N  __IO uint32_t CLP2;                              /**< ADC Plus-Side General Calibration Value Register, offset: 0x44 */
X  volatile uint32_t CLP2;                               
N  __IO uint32_t CLP1;                              /**< ADC Plus-Side General Calibration Value Register, offset: 0x48 */
X  volatile uint32_t CLP1;                               
N  __IO uint32_t CLP0;                              /**< ADC Plus-Side General Calibration Value Register, offset: 0x4C */
X  volatile uint32_t CLP0;                               
N       uint8_t RESERVED_0[4];
N  __IO uint32_t CLMD;                              /**< ADC Minus-Side General Calibration Value Register, offset: 0x54 */
X  volatile uint32_t CLMD;                               
N  __IO uint32_t CLMS;                              /**< ADC Minus-Side General Calibration Value Register, offset: 0x58 */
X  volatile uint32_t CLMS;                               
N  __IO uint32_t CLM4;                              /**< ADC Minus-Side General Calibration Value Register, offset: 0x5C */
X  volatile uint32_t CLM4;                               
N  __IO uint32_t CLM3;                              /**< ADC Minus-Side General Calibration Value Register, offset: 0x60 */
X  volatile uint32_t CLM3;                               
N  __IO uint32_t CLM2;                              /**< ADC Minus-Side General Calibration Value Register, offset: 0x64 */
X  volatile uint32_t CLM2;                               
N  __IO uint32_t CLM1;                              /**< ADC Minus-Side General Calibration Value Register, offset: 0x68 */
X  volatile uint32_t CLM1;                               
N  __IO uint32_t CLM0;                              /**< ADC Minus-Side General Calibration Value Register, offset: 0x6C */
X  volatile uint32_t CLM0;                               
N} ADC_Type, *ADC_MemMapPtr;
N
N/* ----------------------------------------------------------------------------
N   -- ADC - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup ADC_Register_Accessor_Macros ADC - Register accessor macros
N * @{
N */
N
N
N/* ADC - Register accessors */
N#define ADC_SC1_REG(base,index)                  ((base)->SC1[index])
N#define ADC_SC1_COUNT                            2
N#define ADC_CFG1_REG(base)                       ((base)->CFG1)
N#define ADC_CFG2_REG(base)                       ((base)->CFG2)
N#define ADC_R_REG(base,index)                    ((base)->R[index])
N#define ADC_R_COUNT                              2
N#define ADC_CV1_REG(base)                        ((base)->CV1)
N#define ADC_CV2_REG(base)                        ((base)->CV2)
N#define ADC_SC2_REG(base)                        ((base)->SC2)
N#define ADC_SC3_REG(base)                        ((base)->SC3)
N#define ADC_OFS_REG(base)                        ((base)->OFS)
N#define ADC_PG_REG(base)                         ((base)->PG)
N#define ADC_MG_REG(base)                         ((base)->MG)
N#define ADC_CLPD_REG(base)                       ((base)->CLPD)
N#define ADC_CLPS_REG(base)                       ((base)->CLPS)
N#define ADC_CLP4_REG(base)                       ((base)->CLP4)
N#define ADC_CLP3_REG(base)                       ((base)->CLP3)
N#define ADC_CLP2_REG(base)                       ((base)->CLP2)
N#define ADC_CLP1_REG(base)                       ((base)->CLP1)
N#define ADC_CLP0_REG(base)                       ((base)->CLP0)
N#define ADC_CLMD_REG(base)                       ((base)->CLMD)
N#define ADC_CLMS_REG(base)                       ((base)->CLMS)
N#define ADC_CLM4_REG(base)                       ((base)->CLM4)
N#define ADC_CLM3_REG(base)                       ((base)->CLM3)
N#define ADC_CLM2_REG(base)                       ((base)->CLM2)
N#define ADC_CLM1_REG(base)                       ((base)->CLM1)
N#define ADC_CLM0_REG(base)                       ((base)->CLM0)
N
N/*!
N * @}
N */ /* end of group ADC_Register_Accessor_Macros */
N
N
N/* ----------------------------------------------------------------------------
N   -- ADC Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup ADC_Register_Masks ADC Register Masks
N * @{
N */
N
N/* SC1 Bit Fields */
N#define ADC_SC1_ADCH_MASK                        0x1Fu
N#define ADC_SC1_ADCH_SHIFT                       0
N#define ADC_SC1_ADCH_WIDTH                       5
N#define ADC_SC1_ADCH(x)                          (((uint32_t)(((uint32_t)(x))<<ADC_SC1_ADCH_SHIFT))&ADC_SC1_ADCH_MASK)
N#define ADC_SC1_DIFF_MASK                        0x20u
N#define ADC_SC1_DIFF_SHIFT                       5
N#define ADC_SC1_DIFF_WIDTH                       1
N#define ADC_SC1_DIFF(x)                          (((uint32_t)(((uint32_t)(x))<<ADC_SC1_DIFF_SHIFT))&ADC_SC1_DIFF_MASK)
N#define ADC_SC1_AIEN_MASK                        0x40u
N#define ADC_SC1_AIEN_SHIFT                       6
N#define ADC_SC1_AIEN_WIDTH                       1
N#define ADC_SC1_AIEN(x)                          (((uint32_t)(((uint32_t)(x))<<ADC_SC1_AIEN_SHIFT))&ADC_SC1_AIEN_MASK)
N#define ADC_SC1_COCO_MASK                        0x80u
N#define ADC_SC1_COCO_SHIFT                       7
N#define ADC_SC1_COCO_WIDTH                       1
N#define ADC_SC1_COCO(x)                          (((uint32_t)(((uint32_t)(x))<<ADC_SC1_COCO_SHIFT))&ADC_SC1_COCO_MASK)
N/* CFG1 Bit Fields */
N#define ADC_CFG1_ADICLK_MASK                     0x3u
N#define ADC_CFG1_ADICLK_SHIFT                    0
N#define ADC_CFG1_ADICLK_WIDTH                    2
N#define ADC_CFG1_ADICLK(x)                       (((uint32_t)(((uint32_t)(x))<<ADC_CFG1_ADICLK_SHIFT))&ADC_CFG1_ADICLK_MASK)
N#define ADC_CFG1_MODE_MASK                       0xCu
N#define ADC_CFG1_MODE_SHIFT                      2
N#define ADC_CFG1_MODE_WIDTH                      2
N#define ADC_CFG1_MODE(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CFG1_MODE_SHIFT))&ADC_CFG1_MODE_MASK)
N#define ADC_CFG1_ADLSMP_MASK                     0x10u
N#define ADC_CFG1_ADLSMP_SHIFT                    4
N#define ADC_CFG1_ADLSMP_WIDTH                    1
N#define ADC_CFG1_ADLSMP(x)                       (((uint32_t)(((uint32_t)(x))<<ADC_CFG1_ADLSMP_SHIFT))&ADC_CFG1_ADLSMP_MASK)
N#define ADC_CFG1_ADIV_MASK                       0x60u
N#define ADC_CFG1_ADIV_SHIFT                      5
N#define ADC_CFG1_ADIV_WIDTH                      2
N#define ADC_CFG1_ADIV(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CFG1_ADIV_SHIFT))&ADC_CFG1_ADIV_MASK)
N#define ADC_CFG1_ADLPC_MASK                      0x80u
N#define ADC_CFG1_ADLPC_SHIFT                     7
N#define ADC_CFG1_ADLPC_WIDTH                     1
N#define ADC_CFG1_ADLPC(x)                        (((uint32_t)(((uint32_t)(x))<<ADC_CFG1_ADLPC_SHIFT))&ADC_CFG1_ADLPC_MASK)
N/* CFG2 Bit Fields */
N#define ADC_CFG2_ADLSTS_MASK                     0x3u
N#define ADC_CFG2_ADLSTS_SHIFT                    0
N#define ADC_CFG2_ADLSTS_WIDTH                    2
N#define ADC_CFG2_ADLSTS(x)                       (((uint32_t)(((uint32_t)(x))<<ADC_CFG2_ADLSTS_SHIFT))&ADC_CFG2_ADLSTS_MASK)
N#define ADC_CFG2_ADHSC_MASK                      0x4u
N#define ADC_CFG2_ADHSC_SHIFT                     2
N#define ADC_CFG2_ADHSC_WIDTH                     1
N#define ADC_CFG2_ADHSC(x)                        (((uint32_t)(((uint32_t)(x))<<ADC_CFG2_ADHSC_SHIFT))&ADC_CFG2_ADHSC_MASK)
N#define ADC_CFG2_ADACKEN_MASK                    0x8u
N#define ADC_CFG2_ADACKEN_SHIFT                   3
N#define ADC_CFG2_ADACKEN_WIDTH                   1
N#define ADC_CFG2_ADACKEN(x)                      (((uint32_t)(((uint32_t)(x))<<ADC_CFG2_ADACKEN_SHIFT))&ADC_CFG2_ADACKEN_MASK)
N#define ADC_CFG2_MUXSEL_MASK                     0x10u
N#define ADC_CFG2_MUXSEL_SHIFT                    4
N#define ADC_CFG2_MUXSEL_WIDTH                    1
N#define ADC_CFG2_MUXSEL(x)                       (((uint32_t)(((uint32_t)(x))<<ADC_CFG2_MUXSEL_SHIFT))&ADC_CFG2_MUXSEL_MASK)
N/* R Bit Fields */
N#define ADC_R_D_MASK                             0xFFFFu
N#define ADC_R_D_SHIFT                            0
N#define ADC_R_D_WIDTH                            16
N#define ADC_R_D(x)                               (((uint32_t)(((uint32_t)(x))<<ADC_R_D_SHIFT))&ADC_R_D_MASK)
N/* CV1 Bit Fields */
N#define ADC_CV1_CV_MASK                          0xFFFFu
N#define ADC_CV1_CV_SHIFT                         0
N#define ADC_CV1_CV_WIDTH                         16
N#define ADC_CV1_CV(x)                            (((uint32_t)(((uint32_t)(x))<<ADC_CV1_CV_SHIFT))&ADC_CV1_CV_MASK)
N/* CV2 Bit Fields */
N#define ADC_CV2_CV_MASK                          0xFFFFu
N#define ADC_CV2_CV_SHIFT                         0
N#define ADC_CV2_CV_WIDTH                         16
N#define ADC_CV2_CV(x)                            (((uint32_t)(((uint32_t)(x))<<ADC_CV2_CV_SHIFT))&ADC_CV2_CV_MASK)
N/* SC2 Bit Fields */
N#define ADC_SC2_REFSEL_MASK                      0x3u
N#define ADC_SC2_REFSEL_SHIFT                     0
N#define ADC_SC2_REFSEL_WIDTH                     2
N#define ADC_SC2_REFSEL(x)                        (((uint32_t)(((uint32_t)(x))<<ADC_SC2_REFSEL_SHIFT))&ADC_SC2_REFSEL_MASK)
N#define ADC_SC2_DMAEN_MASK                       0x4u
N#define ADC_SC2_DMAEN_SHIFT                      2
N#define ADC_SC2_DMAEN_WIDTH                      1
N#define ADC_SC2_DMAEN(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_SC2_DMAEN_SHIFT))&ADC_SC2_DMAEN_MASK)
N#define ADC_SC2_ACREN_MASK                       0x8u
N#define ADC_SC2_ACREN_SHIFT                      3
N#define ADC_SC2_ACREN_WIDTH                      1
N#define ADC_SC2_ACREN(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_SC2_ACREN_SHIFT))&ADC_SC2_ACREN_MASK)
N#define ADC_SC2_ACFGT_MASK                       0x10u
N#define ADC_SC2_ACFGT_SHIFT                      4
N#define ADC_SC2_ACFGT_WIDTH                      1
N#define ADC_SC2_ACFGT(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_SC2_ACFGT_SHIFT))&ADC_SC2_ACFGT_MASK)
N#define ADC_SC2_ACFE_MASK                        0x20u
N#define ADC_SC2_ACFE_SHIFT                       5
N#define ADC_SC2_ACFE_WIDTH                       1
N#define ADC_SC2_ACFE(x)                          (((uint32_t)(((uint32_t)(x))<<ADC_SC2_ACFE_SHIFT))&ADC_SC2_ACFE_MASK)
N#define ADC_SC2_ADTRG_MASK                       0x40u
N#define ADC_SC2_ADTRG_SHIFT                      6
N#define ADC_SC2_ADTRG_WIDTH                      1
N#define ADC_SC2_ADTRG(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_SC2_ADTRG_SHIFT))&ADC_SC2_ADTRG_MASK)
N#define ADC_SC2_ADACT_MASK                       0x80u
N#define ADC_SC2_ADACT_SHIFT                      7
N#define ADC_SC2_ADACT_WIDTH                      1
N#define ADC_SC2_ADACT(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_SC2_ADACT_SHIFT))&ADC_SC2_ADACT_MASK)
N/* SC3 Bit Fields */
N#define ADC_SC3_AVGS_MASK                        0x3u
N#define ADC_SC3_AVGS_SHIFT                       0
N#define ADC_SC3_AVGS_WIDTH                       2
N#define ADC_SC3_AVGS(x)                          (((uint32_t)(((uint32_t)(x))<<ADC_SC3_AVGS_SHIFT))&ADC_SC3_AVGS_MASK)
N#define ADC_SC3_AVGE_MASK                        0x4u
N#define ADC_SC3_AVGE_SHIFT                       2
N#define ADC_SC3_AVGE_WIDTH                       1
N#define ADC_SC3_AVGE(x)                          (((uint32_t)(((uint32_t)(x))<<ADC_SC3_AVGE_SHIFT))&ADC_SC3_AVGE_MASK)
N#define ADC_SC3_ADCO_MASK                        0x8u
N#define ADC_SC3_ADCO_SHIFT                       3
N#define ADC_SC3_ADCO_WIDTH                       1
N#define ADC_SC3_ADCO(x)                          (((uint32_t)(((uint32_t)(x))<<ADC_SC3_ADCO_SHIFT))&ADC_SC3_ADCO_MASK)
N#define ADC_SC3_CALF_MASK                        0x40u
N#define ADC_SC3_CALF_SHIFT                       6
N#define ADC_SC3_CALF_WIDTH                       1
N#define ADC_SC3_CALF(x)                          (((uint32_t)(((uint32_t)(x))<<ADC_SC3_CALF_SHIFT))&ADC_SC3_CALF_MASK)
N#define ADC_SC3_CAL_MASK                         0x80u
N#define ADC_SC3_CAL_SHIFT                        7
N#define ADC_SC3_CAL_WIDTH                        1
N#define ADC_SC3_CAL(x)                           (((uint32_t)(((uint32_t)(x))<<ADC_SC3_CAL_SHIFT))&ADC_SC3_CAL_MASK)
N/* OFS Bit Fields */
N#define ADC_OFS_OFS_MASK                         0xFFFFu
N#define ADC_OFS_OFS_SHIFT                        0
N#define ADC_OFS_OFS_WIDTH                        16
N#define ADC_OFS_OFS(x)                           (((uint32_t)(((uint32_t)(x))<<ADC_OFS_OFS_SHIFT))&ADC_OFS_OFS_MASK)
N/* PG Bit Fields */
N#define ADC_PG_PG_MASK                           0xFFFFu
N#define ADC_PG_PG_SHIFT                          0
N#define ADC_PG_PG_WIDTH                          16
N#define ADC_PG_PG(x)                             (((uint32_t)(((uint32_t)(x))<<ADC_PG_PG_SHIFT))&ADC_PG_PG_MASK)
N/* MG Bit Fields */
N#define ADC_MG_MG_MASK                           0xFFFFu
N#define ADC_MG_MG_SHIFT                          0
N#define ADC_MG_MG_WIDTH                          16
N#define ADC_MG_MG(x)                             (((uint32_t)(((uint32_t)(x))<<ADC_MG_MG_SHIFT))&ADC_MG_MG_MASK)
N/* CLPD Bit Fields */
N#define ADC_CLPD_CLPD_MASK                       0x3Fu
N#define ADC_CLPD_CLPD_SHIFT                      0
N#define ADC_CLPD_CLPD_WIDTH                      6
N#define ADC_CLPD_CLPD(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CLPD_CLPD_SHIFT))&ADC_CLPD_CLPD_MASK)
N/* CLPS Bit Fields */
N#define ADC_CLPS_CLPS_MASK                       0x3Fu
N#define ADC_CLPS_CLPS_SHIFT                      0
N#define ADC_CLPS_CLPS_WIDTH                      6
N#define ADC_CLPS_CLPS(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CLPS_CLPS_SHIFT))&ADC_CLPS_CLPS_MASK)
N/* CLP4 Bit Fields */
N#define ADC_CLP4_CLP4_MASK                       0x3FFu
N#define ADC_CLP4_CLP4_SHIFT                      0
N#define ADC_CLP4_CLP4_WIDTH                      10
N#define ADC_CLP4_CLP4(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CLP4_CLP4_SHIFT))&ADC_CLP4_CLP4_MASK)
N/* CLP3 Bit Fields */
N#define ADC_CLP3_CLP3_MASK                       0x1FFu
N#define ADC_CLP3_CLP3_SHIFT                      0
N#define ADC_CLP3_CLP3_WIDTH                      9
N#define ADC_CLP3_CLP3(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CLP3_CLP3_SHIFT))&ADC_CLP3_CLP3_MASK)
N/* CLP2 Bit Fields */
N#define ADC_CLP2_CLP2_MASK                       0xFFu
N#define ADC_CLP2_CLP2_SHIFT                      0
N#define ADC_CLP2_CLP2_WIDTH                      8
N#define ADC_CLP2_CLP2(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CLP2_CLP2_SHIFT))&ADC_CLP2_CLP2_MASK)
N/* CLP1 Bit Fields */
N#define ADC_CLP1_CLP1_MASK                       0x7Fu
N#define ADC_CLP1_CLP1_SHIFT                      0
N#define ADC_CLP1_CLP1_WIDTH                      7
N#define ADC_CLP1_CLP1(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CLP1_CLP1_SHIFT))&ADC_CLP1_CLP1_MASK)
N/* CLP0 Bit Fields */
N#define ADC_CLP0_CLP0_MASK                       0x3Fu
N#define ADC_CLP0_CLP0_SHIFT                      0
N#define ADC_CLP0_CLP0_WIDTH                      6
N#define ADC_CLP0_CLP0(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CLP0_CLP0_SHIFT))&ADC_CLP0_CLP0_MASK)
N/* CLMD Bit Fields */
N#define ADC_CLMD_CLMD_MASK                       0x3Fu
N#define ADC_CLMD_CLMD_SHIFT                      0
N#define ADC_CLMD_CLMD_WIDTH                      6
N#define ADC_CLMD_CLMD(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CLMD_CLMD_SHIFT))&ADC_CLMD_CLMD_MASK)
N/* CLMS Bit Fields */
N#define ADC_CLMS_CLMS_MASK                       0x3Fu
N#define ADC_CLMS_CLMS_SHIFT                      0
N#define ADC_CLMS_CLMS_WIDTH                      6
N#define ADC_CLMS_CLMS(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CLMS_CLMS_SHIFT))&ADC_CLMS_CLMS_MASK)
N/* CLM4 Bit Fields */
N#define ADC_CLM4_CLM4_MASK                       0x3FFu
N#define ADC_CLM4_CLM4_SHIFT                      0
N#define ADC_CLM4_CLM4_WIDTH                      10
N#define ADC_CLM4_CLM4(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CLM4_CLM4_SHIFT))&ADC_CLM4_CLM4_MASK)
N/* CLM3 Bit Fields */
N#define ADC_CLM3_CLM3_MASK                       0x1FFu
N#define ADC_CLM3_CLM3_SHIFT                      0
N#define ADC_CLM3_CLM3_WIDTH                      9
N#define ADC_CLM3_CLM3(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CLM3_CLM3_SHIFT))&ADC_CLM3_CLM3_MASK)
N/* CLM2 Bit Fields */
N#define ADC_CLM2_CLM2_MASK                       0xFFu
N#define ADC_CLM2_CLM2_SHIFT                      0
N#define ADC_CLM2_CLM2_WIDTH                      8
N#define ADC_CLM2_CLM2(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CLM2_CLM2_SHIFT))&ADC_CLM2_CLM2_MASK)
N/* CLM1 Bit Fields */
N#define ADC_CLM1_CLM1_MASK                       0x7Fu
N#define ADC_CLM1_CLM1_SHIFT                      0
N#define ADC_CLM1_CLM1_WIDTH                      7
N#define ADC_CLM1_CLM1(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CLM1_CLM1_SHIFT))&ADC_CLM1_CLM1_MASK)
N/* CLM0 Bit Fields */
N#define ADC_CLM0_CLM0_MASK                       0x3Fu
N#define ADC_CLM0_CLM0_SHIFT                      0
N#define ADC_CLM0_CLM0_WIDTH                      6
N#define ADC_CLM0_CLM0(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CLM0_CLM0_SHIFT))&ADC_CLM0_CLM0_MASK)
N
N/*!
N * @}
N */ /* end of group ADC_Register_Masks */
N
N
N/* ADC - Peripheral instance base addresses */
N/** Peripheral ADC0 base address */
N#define ADC0_BASE                                (0x4003B000u)
N/** Peripheral ADC0 base pointer */
N#define ADC0                                     ((ADC_Type *)ADC0_BASE)
N#define ADC0_BASE_PTR                            (ADC0)
N/** Array initializer of ADC peripheral base addresses */
N#define ADC_BASE_ADDRS                           { ADC0_BASE }
N/** Array initializer of ADC peripheral base pointers */
N#define ADC_BASE_PTRS                            { ADC0 }
N/** Interrupt vectors for the ADC peripheral type */
N#define ADC_IRQS                                 { ADC0_IRQn }
N
N/* ----------------------------------------------------------------------------
N   -- ADC - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup ADC_Register_Accessor_Macros ADC - Register accessor macros
N * @{
N */
N
N
N/* ADC - Register instance definitions */
N/* ADC0 */
N#define ADC0_SC1A                                ADC_SC1_REG(ADC0,0)
N#define ADC0_SC1B                                ADC_SC1_REG(ADC0,1)
N#define ADC0_CFG1                                ADC_CFG1_REG(ADC0)
N#define ADC0_CFG2                                ADC_CFG2_REG(ADC0)
N#define ADC0_RA                                  ADC_R_REG(ADC0,0)
N#define ADC0_RB                                  ADC_R_REG(ADC0,1)
N#define ADC0_CV1                                 ADC_CV1_REG(ADC0)
N#define ADC0_CV2                                 ADC_CV2_REG(ADC0)
N#define ADC0_SC2                                 ADC_SC2_REG(ADC0)
N#define ADC0_SC3                                 ADC_SC3_REG(ADC0)
N#define ADC0_OFS                                 ADC_OFS_REG(ADC0)
N#define ADC0_PG                                  ADC_PG_REG(ADC0)
N#define ADC0_MG                                  ADC_MG_REG(ADC0)
N#define ADC0_CLPD                                ADC_CLPD_REG(ADC0)
N#define ADC0_CLPS                                ADC_CLPS_REG(ADC0)
N#define ADC0_CLP4                                ADC_CLP4_REG(ADC0)
N#define ADC0_CLP3                                ADC_CLP3_REG(ADC0)
N#define ADC0_CLP2                                ADC_CLP2_REG(ADC0)
N#define ADC0_CLP1                                ADC_CLP1_REG(ADC0)
N#define ADC0_CLP0                                ADC_CLP0_REG(ADC0)
N#define ADC0_CLMD                                ADC_CLMD_REG(ADC0)
N#define ADC0_CLMS                                ADC_CLMS_REG(ADC0)
N#define ADC0_CLM4                                ADC_CLM4_REG(ADC0)
N#define ADC0_CLM3                                ADC_CLM3_REG(ADC0)
N#define ADC0_CLM2                                ADC_CLM2_REG(ADC0)
N#define ADC0_CLM1                                ADC_CLM1_REG(ADC0)
N#define ADC0_CLM0                                ADC_CLM0_REG(ADC0)
N
N/* ADC - Register array accessors */
N#define ADC0_SC1(index)                          ADC_SC1_REG(ADC0,index)
N#define ADC0_R(index)                            ADC_R_REG(ADC0,index)
N
N/*!
N * @}
N */ /* end of group ADC_Register_Accessor_Macros */
N
N
N/*!
N * @}
N */ /* end of group ADC_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- CMP Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup CMP_Peripheral_Access_Layer CMP Peripheral Access Layer
N * @{
N */
N
N/** CMP - Register Layout Typedef */
Ntypedef struct {
N  __IO uint8_t CR0;                                /**< CMP Control Register 0, offset: 0x0 */
X  volatile uint8_t CR0;                                 
N  __IO uint8_t CR1;                                /**< CMP Control Register 1, offset: 0x1 */
X  volatile uint8_t CR1;                                 
N  __IO uint8_t FPR;                                /**< CMP Filter Period Register, offset: 0x2 */
X  volatile uint8_t FPR;                                 
N  __IO uint8_t SCR;                                /**< CMP Status and Control Register, offset: 0x3 */
X  volatile uint8_t SCR;                                 
N  __IO uint8_t DACCR;                              /**< DAC Control Register, offset: 0x4 */
X  volatile uint8_t DACCR;                               
N  __IO uint8_t MUXCR;                              /**< MUX Control Register, offset: 0x5 */
X  volatile uint8_t MUXCR;                               
N} CMP_Type, *CMP_MemMapPtr;
N
N/* ----------------------------------------------------------------------------
N   -- CMP - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup CMP_Register_Accessor_Macros CMP - Register accessor macros
N * @{
N */
N
N
N/* CMP - Register accessors */
N#define CMP_CR0_REG(base)                        ((base)->CR0)
N#define CMP_CR1_REG(base)                        ((base)->CR1)
N#define CMP_FPR_REG(base)                        ((base)->FPR)
N#define CMP_SCR_REG(base)                        ((base)->SCR)
N#define CMP_DACCR_REG(base)                      ((base)->DACCR)
N#define CMP_MUXCR_REG(base)                      ((base)->MUXCR)
N
N/*!
N * @}
N */ /* end of group CMP_Register_Accessor_Macros */
N
N
N/* ----------------------------------------------------------------------------
N   -- CMP Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup CMP_Register_Masks CMP Register Masks
N * @{
N */
N
N/* CR0 Bit Fields */
N#define CMP_CR0_HYSTCTR_MASK                     0x3u
N#define CMP_CR0_HYSTCTR_SHIFT                    0
N#define CMP_CR0_HYSTCTR_WIDTH                    2
N#define CMP_CR0_HYSTCTR(x)                       (((uint8_t)(((uint8_t)(x))<<CMP_CR0_HYSTCTR_SHIFT))&CMP_CR0_HYSTCTR_MASK)
N#define CMP_CR0_FILTER_CNT_MASK                  0x70u
N#define CMP_CR0_FILTER_CNT_SHIFT                 4
N#define CMP_CR0_FILTER_CNT_WIDTH                 3
N#define CMP_CR0_FILTER_CNT(x)                    (((uint8_t)(((uint8_t)(x))<<CMP_CR0_FILTER_CNT_SHIFT))&CMP_CR0_FILTER_CNT_MASK)
N/* CR1 Bit Fields */
N#define CMP_CR1_EN_MASK                          0x1u
N#define CMP_CR1_EN_SHIFT                         0
N#define CMP_CR1_EN_WIDTH                         1
N#define CMP_CR1_EN(x)                            (((uint8_t)(((uint8_t)(x))<<CMP_CR1_EN_SHIFT))&CMP_CR1_EN_MASK)
N#define CMP_CR1_OPE_MASK                         0x2u
N#define CMP_CR1_OPE_SHIFT                        1
N#define CMP_CR1_OPE_WIDTH                        1
N#define CMP_CR1_OPE(x)                           (((uint8_t)(((uint8_t)(x))<<CMP_CR1_OPE_SHIFT))&CMP_CR1_OPE_MASK)
N#define CMP_CR1_COS_MASK                         0x4u
N#define CMP_CR1_COS_SHIFT                        2
N#define CMP_CR1_COS_WIDTH                        1
N#define CMP_CR1_COS(x)                           (((uint8_t)(((uint8_t)(x))<<CMP_CR1_COS_SHIFT))&CMP_CR1_COS_MASK)
N#define CMP_CR1_INV_MASK                         0x8u
N#define CMP_CR1_INV_SHIFT                        3
N#define CMP_CR1_INV_WIDTH                        1
N#define CMP_CR1_INV(x)                           (((uint8_t)(((uint8_t)(x))<<CMP_CR1_INV_SHIFT))&CMP_CR1_INV_MASK)
N#define CMP_CR1_PMODE_MASK                       0x10u
N#define CMP_CR1_PMODE_SHIFT                      4
N#define CMP_CR1_PMODE_WIDTH                      1
N#define CMP_CR1_PMODE(x)                         (((uint8_t)(((uint8_t)(x))<<CMP_CR1_PMODE_SHIFT))&CMP_CR1_PMODE_MASK)
N#define CMP_CR1_TRIGM_MASK                       0x20u
N#define CMP_CR1_TRIGM_SHIFT                      5
N#define CMP_CR1_TRIGM_WIDTH                      1
N#define CMP_CR1_TRIGM(x)                         (((uint8_t)(((uint8_t)(x))<<CMP_CR1_TRIGM_SHIFT))&CMP_CR1_TRIGM_MASK)
N#define CMP_CR1_WE_MASK                          0x40u
N#define CMP_CR1_WE_SHIFT                         6
N#define CMP_CR1_WE_WIDTH                         1
N#define CMP_CR1_WE(x)                            (((uint8_t)(((uint8_t)(x))<<CMP_CR1_WE_SHIFT))&CMP_CR1_WE_MASK)
N#define CMP_CR1_SE_MASK                          0x80u
N#define CMP_CR1_SE_SHIFT                         7
N#define CMP_CR1_SE_WIDTH                         1
N#define CMP_CR1_SE(x)                            (((uint8_t)(((uint8_t)(x))<<CMP_CR1_SE_SHIFT))&CMP_CR1_SE_MASK)
N/* FPR Bit Fields */
N#define CMP_FPR_FILT_PER_MASK                    0xFFu
N#define CMP_FPR_FILT_PER_SHIFT                   0
N#define CMP_FPR_FILT_PER_WIDTH                   8
N#define CMP_FPR_FILT_PER(x)                      (((uint8_t)(((uint8_t)(x))<<CMP_FPR_FILT_PER_SHIFT))&CMP_FPR_FILT_PER_MASK)
N/* SCR Bit Fields */
N#define CMP_SCR_COUT_MASK                        0x1u
N#define CMP_SCR_COUT_SHIFT                       0
N#define CMP_SCR_COUT_WIDTH                       1
N#define CMP_SCR_COUT(x)                          (((uint8_t)(((uint8_t)(x))<<CMP_SCR_COUT_SHIFT))&CMP_SCR_COUT_MASK)
N#define CMP_SCR_CFF_MASK                         0x2u
N#define CMP_SCR_CFF_SHIFT                        1
N#define CMP_SCR_CFF_WIDTH                        1
N#define CMP_SCR_CFF(x)                           (((uint8_t)(((uint8_t)(x))<<CMP_SCR_CFF_SHIFT))&CMP_SCR_CFF_MASK)
N#define CMP_SCR_CFR_MASK                         0x4u
N#define CMP_SCR_CFR_SHIFT                        2
N#define CMP_SCR_CFR_WIDTH                        1
N#define CMP_SCR_CFR(x)                           (((uint8_t)(((uint8_t)(x))<<CMP_SCR_CFR_SHIFT))&CMP_SCR_CFR_MASK)
N#define CMP_SCR_IEF_MASK                         0x8u
N#define CMP_SCR_IEF_SHIFT                        3
N#define CMP_SCR_IEF_WIDTH                        1
N#define CMP_SCR_IEF(x)                           (((uint8_t)(((uint8_t)(x))<<CMP_SCR_IEF_SHIFT))&CMP_SCR_IEF_MASK)
N#define CMP_SCR_IER_MASK                         0x10u
N#define CMP_SCR_IER_SHIFT                        4
N#define CMP_SCR_IER_WIDTH                        1
N#define CMP_SCR_IER(x)                           (((uint8_t)(((uint8_t)(x))<<CMP_SCR_IER_SHIFT))&CMP_SCR_IER_MASK)
N#define CMP_SCR_DMAEN_MASK                       0x40u
N#define CMP_SCR_DMAEN_SHIFT                      6
N#define CMP_SCR_DMAEN_WIDTH                      1
N#define CMP_SCR_DMAEN(x)                         (((uint8_t)(((uint8_t)(x))<<CMP_SCR_DMAEN_SHIFT))&CMP_SCR_DMAEN_MASK)
N/* DACCR Bit Fields */
N#define CMP_DACCR_VOSEL_MASK                     0x3Fu
N#define CMP_DACCR_VOSEL_SHIFT                    0
N#define CMP_DACCR_VOSEL_WIDTH                    6
N#define CMP_DACCR_VOSEL(x)                       (((uint8_t)(((uint8_t)(x))<<CMP_DACCR_VOSEL_SHIFT))&CMP_DACCR_VOSEL_MASK)
N#define CMP_DACCR_VRSEL_MASK                     0x40u
N#define CMP_DACCR_VRSEL_SHIFT                    6
N#define CMP_DACCR_VRSEL_WIDTH                    1
N#define CMP_DACCR_VRSEL(x)                       (((uint8_t)(((uint8_t)(x))<<CMP_DACCR_VRSEL_SHIFT))&CMP_DACCR_VRSEL_MASK)
N#define CMP_DACCR_DACEN_MASK                     0x80u
N#define CMP_DACCR_DACEN_SHIFT                    7
N#define CMP_DACCR_DACEN_WIDTH                    1
N#define CMP_DACCR_DACEN(x)                       (((uint8_t)(((uint8_t)(x))<<CMP_DACCR_DACEN_SHIFT))&CMP_DACCR_DACEN_MASK)
N/* MUXCR Bit Fields */
N#define CMP_MUXCR_MSEL_MASK                      0x7u
N#define CMP_MUXCR_MSEL_SHIFT                     0
N#define CMP_MUXCR_MSEL_WIDTH                     3
N#define CMP_MUXCR_MSEL(x)                        (((uint8_t)(((uint8_t)(x))<<CMP_MUXCR_MSEL_SHIFT))&CMP_MUXCR_MSEL_MASK)
N#define CMP_MUXCR_PSEL_MASK                      0x38u
N#define CMP_MUXCR_PSEL_SHIFT                     3
N#define CMP_MUXCR_PSEL_WIDTH                     3
N#define CMP_MUXCR_PSEL(x)                        (((uint8_t)(((uint8_t)(x))<<CMP_MUXCR_PSEL_SHIFT))&CMP_MUXCR_PSEL_MASK)
N#define CMP_MUXCR_PSTM_MASK                      0x80u
N#define CMP_MUXCR_PSTM_SHIFT                     7
N#define CMP_MUXCR_PSTM_WIDTH                     1
N#define CMP_MUXCR_PSTM(x)                        (((uint8_t)(((uint8_t)(x))<<CMP_MUXCR_PSTM_SHIFT))&CMP_MUXCR_PSTM_MASK)
N
N/*!
N * @}
N */ /* end of group CMP_Register_Masks */
N
N
N/* CMP - Peripheral instance base addresses */
N/** Peripheral CMP0 base address */
N#define CMP0_BASE                                (0x40073000u)
N/** Peripheral CMP0 base pointer */
N#define CMP0                                     ((CMP_Type *)CMP0_BASE)
N#define CMP0_BASE_PTR                            (CMP0)
N/** Array initializer of CMP peripheral base addresses */
N#define CMP_BASE_ADDRS                           { CMP0_BASE }
N/** Array initializer of CMP peripheral base pointers */
N#define CMP_BASE_PTRS                            { CMP0 }
N/** Interrupt vectors for the CMP peripheral type */
N#define CMP_IRQS                                 { CMP0_IRQn }
N
N/* ----------------------------------------------------------------------------
N   -- CMP - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup CMP_Register_Accessor_Macros CMP - Register accessor macros
N * @{
N */
N
N
N/* CMP - Register instance definitions */
N/* CMP0 */
N#define CMP0_CR0                                 CMP_CR0_REG(CMP0)
N#define CMP0_CR1                                 CMP_CR1_REG(CMP0)
N#define CMP0_FPR                                 CMP_FPR_REG(CMP0)
N#define CMP0_SCR                                 CMP_SCR_REG(CMP0)
N#define CMP0_DACCR                               CMP_DACCR_REG(CMP0)
N#define CMP0_MUXCR                               CMP_MUXCR_REG(CMP0)
N
N/*!
N * @}
N */ /* end of group CMP_Register_Accessor_Macros */
N
N
N/*!
N * @}
N */ /* end of group CMP_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- DAC Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup DAC_Peripheral_Access_Layer DAC Peripheral Access Layer
N * @{
N */
N
N/** DAC - Register Layout Typedef */
Ntypedef struct {
N  struct {                                         /* offset: 0x0, array step: 0x2 */
N    __IO uint8_t DATL;                               /**< DAC Data Low Register, array offset: 0x0, array step: 0x2 */
X    volatile uint8_t DATL;                                
N    __IO uint8_t DATH;                               /**< DAC Data High Register, array offset: 0x1, array step: 0x2 */
X    volatile uint8_t DATH;                                
N  } DAT[2];
N       uint8_t RESERVED_0[28];
N  __IO uint8_t SR;                                 /**< DAC Status Register, offset: 0x20 */
X  volatile uint8_t SR;                                  
N  __IO uint8_t C0;                                 /**< DAC Control Register, offset: 0x21 */
X  volatile uint8_t C0;                                  
N  __IO uint8_t C1;                                 /**< DAC Control Register 1, offset: 0x22 */
X  volatile uint8_t C1;                                  
N  __IO uint8_t C2;                                 /**< DAC Control Register 2, offset: 0x23 */
X  volatile uint8_t C2;                                  
N} DAC_Type, *DAC_MemMapPtr;
N
N/* ----------------------------------------------------------------------------
N   -- DAC - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup DAC_Register_Accessor_Macros DAC - Register accessor macros
N * @{
N */
N
N
N/* DAC - Register accessors */
N#define DAC_DATL_REG(base,index)                 ((base)->DAT[index].DATL)
N#define DAC_DATL_COUNT                           2
N#define DAC_DATH_REG(base,index)                 ((base)->DAT[index].DATH)
N#define DAC_DATH_COUNT                           2
N#define DAC_SR_REG(base)                         ((base)->SR)
N#define DAC_C0_REG(base)                         ((base)->C0)
N#define DAC_C1_REG(base)                         ((base)->C1)
N#define DAC_C2_REG(base)                         ((base)->C2)
N
N/*!
N * @}
N */ /* end of group DAC_Register_Accessor_Macros */
N
N
N/* ----------------------------------------------------------------------------
N   -- DAC Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup DAC_Register_Masks DAC Register Masks
N * @{
N */
N
N/* DATL Bit Fields */
N#define DAC_DATL_DATA0_MASK                      0xFFu
N#define DAC_DATL_DATA0_SHIFT                     0
N#define DAC_DATL_DATA0_WIDTH                     8
N#define DAC_DATL_DATA0(x)                        (((uint8_t)(((uint8_t)(x))<<DAC_DATL_DATA0_SHIFT))&DAC_DATL_DATA0_MASK)
N/* DATH Bit Fields */
N#define DAC_DATH_DATA1_MASK                      0xFu
N#define DAC_DATH_DATA1_SHIFT                     0
N#define DAC_DATH_DATA1_WIDTH                     4
N#define DAC_DATH_DATA1(x)                        (((uint8_t)(((uint8_t)(x))<<DAC_DATH_DATA1_SHIFT))&DAC_DATH_DATA1_MASK)
N/* SR Bit Fields */
N#define DAC_SR_DACBFRPBF_MASK                    0x1u
N#define DAC_SR_DACBFRPBF_SHIFT                   0
N#define DAC_SR_DACBFRPBF_WIDTH                   1
N#define DAC_SR_DACBFRPBF(x)                      (((uint8_t)(((uint8_t)(x))<<DAC_SR_DACBFRPBF_SHIFT))&DAC_SR_DACBFRPBF_MASK)
N#define DAC_SR_DACBFRPTF_MASK                    0x2u
N#define DAC_SR_DACBFRPTF_SHIFT                   1
N#define DAC_SR_DACBFRPTF_WIDTH                   1
N#define DAC_SR_DACBFRPTF(x)                      (((uint8_t)(((uint8_t)(x))<<DAC_SR_DACBFRPTF_SHIFT))&DAC_SR_DACBFRPTF_MASK)
N/* C0 Bit Fields */
N#define DAC_C0_DACBBIEN_MASK                     0x1u
N#define DAC_C0_DACBBIEN_SHIFT                    0
N#define DAC_C0_DACBBIEN_WIDTH                    1
N#define DAC_C0_DACBBIEN(x)                       (((uint8_t)(((uint8_t)(x))<<DAC_C0_DACBBIEN_SHIFT))&DAC_C0_DACBBIEN_MASK)
N#define DAC_C0_DACBTIEN_MASK                     0x2u
N#define DAC_C0_DACBTIEN_SHIFT                    1
N#define DAC_C0_DACBTIEN_WIDTH                    1
N#define DAC_C0_DACBTIEN(x)                       (((uint8_t)(((uint8_t)(x))<<DAC_C0_DACBTIEN_SHIFT))&DAC_C0_DACBTIEN_MASK)
N#define DAC_C0_LPEN_MASK                         0x8u
N#define DAC_C0_LPEN_SHIFT                        3
N#define DAC_C0_LPEN_WIDTH                        1
N#define DAC_C0_LPEN(x)                           (((uint8_t)(((uint8_t)(x))<<DAC_C0_LPEN_SHIFT))&DAC_C0_LPEN_MASK)
N#define DAC_C0_DACSWTRG_MASK                     0x10u
N#define DAC_C0_DACSWTRG_SHIFT                    4
N#define DAC_C0_DACSWTRG_WIDTH                    1
N#define DAC_C0_DACSWTRG(x)                       (((uint8_t)(((uint8_t)(x))<<DAC_C0_DACSWTRG_SHIFT))&DAC_C0_DACSWTRG_MASK)
N#define DAC_C0_DACTRGSEL_MASK                    0x20u
N#define DAC_C0_DACTRGSEL_SHIFT                   5
N#define DAC_C0_DACTRGSEL_WIDTH                   1
N#define DAC_C0_DACTRGSEL(x)                      (((uint8_t)(((uint8_t)(x))<<DAC_C0_DACTRGSEL_SHIFT))&DAC_C0_DACTRGSEL_MASK)
N#define DAC_C0_DACRFS_MASK                       0x40u
N#define DAC_C0_DACRFS_SHIFT                      6
N#define DAC_C0_DACRFS_WIDTH                      1
N#define DAC_C0_DACRFS(x)                         (((uint8_t)(((uint8_t)(x))<<DAC_C0_DACRFS_SHIFT))&DAC_C0_DACRFS_MASK)
N#define DAC_C0_DACEN_MASK                        0x80u
N#define DAC_C0_DACEN_SHIFT                       7
N#define DAC_C0_DACEN_WIDTH                       1
N#define DAC_C0_DACEN(x)                          (((uint8_t)(((uint8_t)(x))<<DAC_C0_DACEN_SHIFT))&DAC_C0_DACEN_MASK)
N/* C1 Bit Fields */
N#define DAC_C1_DACBFEN_MASK                      0x1u
N#define DAC_C1_DACBFEN_SHIFT                     0
N#define DAC_C1_DACBFEN_WIDTH                     1
N#define DAC_C1_DACBFEN(x)                        (((uint8_t)(((uint8_t)(x))<<DAC_C1_DACBFEN_SHIFT))&DAC_C1_DACBFEN_MASK)
N#define DAC_C1_DACBFMD_MASK                      0x4u
N#define DAC_C1_DACBFMD_SHIFT                     2
N#define DAC_C1_DACBFMD_WIDTH                     1
N#define DAC_C1_DACBFMD(x)                        (((uint8_t)(((uint8_t)(x))<<DAC_C1_DACBFMD_SHIFT))&DAC_C1_DACBFMD_MASK)
N#define DAC_C1_DMAEN_MASK                        0x80u
N#define DAC_C1_DMAEN_SHIFT                       7
N#define DAC_C1_DMAEN_WIDTH                       1
N#define DAC_C1_DMAEN(x)                          (((uint8_t)(((uint8_t)(x))<<DAC_C1_DMAEN_SHIFT))&DAC_C1_DMAEN_MASK)
N/* C2 Bit Fields */
N#define DAC_C2_DACBFUP_MASK                      0x1u
N#define DAC_C2_DACBFUP_SHIFT                     0
N#define DAC_C2_DACBFUP_WIDTH                     1
N#define DAC_C2_DACBFUP(x)                        (((uint8_t)(((uint8_t)(x))<<DAC_C2_DACBFUP_SHIFT))&DAC_C2_DACBFUP_MASK)
N#define DAC_C2_DACBFRP_MASK                      0x10u
N#define DAC_C2_DACBFRP_SHIFT                     4
N#define DAC_C2_DACBFRP_WIDTH                     1
N#define DAC_C2_DACBFRP(x)                        (((uint8_t)(((uint8_t)(x))<<DAC_C2_DACBFRP_SHIFT))&DAC_C2_DACBFRP_MASK)
N
N/*!
N * @}
N */ /* end of group DAC_Register_Masks */
N
N
N/* DAC - Peripheral instance base addresses */
N/** Peripheral DAC0 base address */
N#define DAC0_BASE                                (0x4003F000u)
N/** Peripheral DAC0 base pointer */
N#define DAC0                                     ((DAC_Type *)DAC0_BASE)
N#define DAC0_BASE_PTR                            (DAC0)
N/** Array initializer of DAC peripheral base addresses */
N#define DAC_BASE_ADDRS                           { DAC0_BASE }
N/** Array initializer of DAC peripheral base pointers */
N#define DAC_BASE_PTRS                            { DAC0 }
N/** Interrupt vectors for the DAC peripheral type */
N#define DAC_IRQS                                 { DAC0_IRQn }
N
N/* ----------------------------------------------------------------------------
N   -- DAC - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup DAC_Register_Accessor_Macros DAC - Register accessor macros
N * @{
N */
N
N
N/* DAC - Register instance definitions */
N/* DAC0 */
N#define DAC0_DAT0L                               DAC_DATL_REG(DAC0,0)
N#define DAC0_DAT0H                               DAC_DATH_REG(DAC0,0)
N#define DAC0_DAT1L                               DAC_DATL_REG(DAC0,1)
N#define DAC0_DAT1H                               DAC_DATH_REG(DAC0,1)
N#define DAC0_SR                                  DAC_SR_REG(DAC0)
N#define DAC0_C0                                  DAC_C0_REG(DAC0)
N#define DAC0_C1                                  DAC_C1_REG(DAC0)
N#define DAC0_C2                                  DAC_C2_REG(DAC0)
N
N/* DAC - Register array accessors */
N#define DAC0_DATL(index)                         DAC_DATL_REG(DAC0,index)
N#define DAC0_DATH(index)                         DAC_DATH_REG(DAC0,index)
N
N/*!
N * @}
N */ /* end of group DAC_Register_Accessor_Macros */
N
N
N/*!
N * @}
N */ /* end of group DAC_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- DMA Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup DMA_Peripheral_Access_Layer DMA Peripheral Access Layer
N * @{
N */
N
N/** DMA - Register Layout Typedef */
Ntypedef struct {
N       uint8_t RESERVED_0[256];
N  struct {                                         /* offset: 0x100, array step: 0x10 */
N    __IO uint32_t SAR;                               /**< Source Address Register, array offset: 0x100, array step: 0x10 */
X    volatile uint32_t SAR;                                
N    __IO uint32_t DAR;                               /**< Destination Address Register, array offset: 0x104, array step: 0x10 */
X    volatile uint32_t DAR;                                
N    union {                                          /* offset: 0x108, array step: 0x10 */
N      __IO uint32_t DSR_BCR;                           /**< DMA Status Register / Byte Count Register, array offset: 0x108, array step: 0x10 */
X      volatile uint32_t DSR_BCR;                            
N      struct {                                         /* offset: 0x108, array step: 0x10 */
N             uint8_t RESERVED_0[3];
N        __IO uint8_t DSR;                                /**< DMA_DSR0 register...DMA_DSR3 register., array offset: 0x10B, array step: 0x10 */
X        volatile uint8_t DSR;                                 
N      } DMA_DSR_ACCESS8BIT;
N    };
N    __IO uint32_t DCR;                               /**< DMA Control Register, array offset: 0x10C, array step: 0x10 */
X    volatile uint32_t DCR;                                
N  } DMA[4];
N} DMA_Type, *DMA_MemMapPtr;
N
N/* ----------------------------------------------------------------------------
N   -- DMA - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup DMA_Register_Accessor_Macros DMA - Register accessor macros
N * @{
N */
N
N
N/* DMA - Register accessors */
N#define DMA_SAR_REG(base,index)                  ((base)->DMA[index].SAR)
N#define DMA_SAR_COUNT                            4
N#define DMA_DAR_REG(base,index)                  ((base)->DMA[index].DAR)
N#define DMA_DAR_COUNT                            4
N#define DMA_DSR_BCR_REG(base,index)              ((base)->DMA[index].DSR_BCR)
N#define DMA_DSR_BCR_COUNT                        4
N#define DMA_DSR_REG(base,index)                  ((base)->DMA[index].DMA_DSR_ACCESS8BIT.DSR)
N#define DMA_DSR_COUNT                            4
N#define DMA_DCR_REG(base,index)                  ((base)->DMA[index].DCR)
N#define DMA_DCR_COUNT                            4
N
N/*!
N * @}
N */ /* end of group DMA_Register_Accessor_Macros */
N
N
N/* ----------------------------------------------------------------------------
N   -- DMA Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup DMA_Register_Masks DMA Register Masks
N * @{
N */
N
N/* SAR Bit Fields */
N#define DMA_SAR_SAR_MASK                         0xFFFFFFFFu
N#define DMA_SAR_SAR_SHIFT                        0
N#define DMA_SAR_SAR_WIDTH                        32
N#define DMA_SAR_SAR(x)                           (((uint32_t)(((uint32_t)(x))<<DMA_SAR_SAR_SHIFT))&DMA_SAR_SAR_MASK)
N/* DAR Bit Fields */
N#define DMA_DAR_DAR_MASK                         0xFFFFFFFFu
N#define DMA_DAR_DAR_SHIFT                        0
N#define DMA_DAR_DAR_WIDTH                        32
N#define DMA_DAR_DAR(x)                           (((uint32_t)(((uint32_t)(x))<<DMA_DAR_DAR_SHIFT))&DMA_DAR_DAR_MASK)
N/* DSR_BCR Bit Fields */
N#define DMA_DSR_BCR_BCR_MASK                     0xFFFFFFu
N#define DMA_DSR_BCR_BCR_SHIFT                    0
N#define DMA_DSR_BCR_BCR_WIDTH                    24
N#define DMA_DSR_BCR_BCR(x)                       (((uint32_t)(((uint32_t)(x))<<DMA_DSR_BCR_BCR_SHIFT))&DMA_DSR_BCR_BCR_MASK)
N#define DMA_DSR_BCR_DONE_MASK                    0x1000000u
N#define DMA_DSR_BCR_DONE_SHIFT                   24
N#define DMA_DSR_BCR_DONE_WIDTH                   1
N#define DMA_DSR_BCR_DONE(x)                      (((uint32_t)(((uint32_t)(x))<<DMA_DSR_BCR_DONE_SHIFT))&DMA_DSR_BCR_DONE_MASK)
N#define DMA_DSR_BCR_BSY_MASK                     0x2000000u
N#define DMA_DSR_BCR_BSY_SHIFT                    25
N#define DMA_DSR_BCR_BSY_WIDTH                    1
N#define DMA_DSR_BCR_BSY(x)                       (((uint32_t)(((uint32_t)(x))<<DMA_DSR_BCR_BSY_SHIFT))&DMA_DSR_BCR_BSY_MASK)
N#define DMA_DSR_BCR_REQ_MASK                     0x4000000u
N#define DMA_DSR_BCR_REQ_SHIFT                    26
N#define DMA_DSR_BCR_REQ_WIDTH                    1
N#define DMA_DSR_BCR_REQ(x)                       (((uint32_t)(((uint32_t)(x))<<DMA_DSR_BCR_REQ_SHIFT))&DMA_DSR_BCR_REQ_MASK)
N#define DMA_DSR_BCR_BED_MASK                     0x10000000u
N#define DMA_DSR_BCR_BED_SHIFT                    28
N#define DMA_DSR_BCR_BED_WIDTH                    1
N#define DMA_DSR_BCR_BED(x)                       (((uint32_t)(((uint32_t)(x))<<DMA_DSR_BCR_BED_SHIFT))&DMA_DSR_BCR_BED_MASK)
N#define DMA_DSR_BCR_BES_MASK                     0x20000000u
N#define DMA_DSR_BCR_BES_SHIFT                    29
N#define DMA_DSR_BCR_BES_WIDTH                    1
N#define DMA_DSR_BCR_BES(x)                       (((uint32_t)(((uint32_t)(x))<<DMA_DSR_BCR_BES_SHIFT))&DMA_DSR_BCR_BES_MASK)
N#define DMA_DSR_BCR_CE_MASK                      0x40000000u
N#define DMA_DSR_BCR_CE_SHIFT                     30
N#define DMA_DSR_BCR_CE_WIDTH                     1
N#define DMA_DSR_BCR_CE(x)                        (((uint32_t)(((uint32_t)(x))<<DMA_DSR_BCR_CE_SHIFT))&DMA_DSR_BCR_CE_MASK)
N/* DCR Bit Fields */
N#define DMA_DCR_LCH2_MASK                        0x3u
N#define DMA_DCR_LCH2_SHIFT                       0
N#define DMA_DCR_LCH2_WIDTH                       2
N#define DMA_DCR_LCH2(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_DCR_LCH2_SHIFT))&DMA_DCR_LCH2_MASK)
N#define DMA_DCR_LCH1_MASK                        0xCu
N#define DMA_DCR_LCH1_SHIFT                       2
N#define DMA_DCR_LCH1_WIDTH                       2
N#define DMA_DCR_LCH1(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_DCR_LCH1_SHIFT))&DMA_DCR_LCH1_MASK)
N#define DMA_DCR_LINKCC_MASK                      0x30u
N#define DMA_DCR_LINKCC_SHIFT                     4
N#define DMA_DCR_LINKCC_WIDTH                     2
N#define DMA_DCR_LINKCC(x)                        (((uint32_t)(((uint32_t)(x))<<DMA_DCR_LINKCC_SHIFT))&DMA_DCR_LINKCC_MASK)
N#define DMA_DCR_D_REQ_MASK                       0x80u
N#define DMA_DCR_D_REQ_SHIFT                      7
N#define DMA_DCR_D_REQ_WIDTH                      1
N#define DMA_DCR_D_REQ(x)                         (((uint32_t)(((uint32_t)(x))<<DMA_DCR_D_REQ_SHIFT))&DMA_DCR_D_REQ_MASK)
N#define DMA_DCR_DMOD_MASK                        0xF00u
N#define DMA_DCR_DMOD_SHIFT                       8
N#define DMA_DCR_DMOD_WIDTH                       4
N#define DMA_DCR_DMOD(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_DCR_DMOD_SHIFT))&DMA_DCR_DMOD_MASK)
N#define DMA_DCR_SMOD_MASK                        0xF000u
N#define DMA_DCR_SMOD_SHIFT                       12
N#define DMA_DCR_SMOD_WIDTH                       4
N#define DMA_DCR_SMOD(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_DCR_SMOD_SHIFT))&DMA_DCR_SMOD_MASK)
N#define DMA_DCR_START_MASK                       0x10000u
N#define DMA_DCR_START_SHIFT                      16
N#define DMA_DCR_START_WIDTH                      1
N#define DMA_DCR_START(x)                         (((uint32_t)(((uint32_t)(x))<<DMA_DCR_START_SHIFT))&DMA_DCR_START_MASK)
N#define DMA_DCR_DSIZE_MASK                       0x60000u
N#define DMA_DCR_DSIZE_SHIFT                      17
N#define DMA_DCR_DSIZE_WIDTH                      2
N#define DMA_DCR_DSIZE(x)                         (((uint32_t)(((uint32_t)(x))<<DMA_DCR_DSIZE_SHIFT))&DMA_DCR_DSIZE_MASK)
N#define DMA_DCR_DINC_MASK                        0x80000u
N#define DMA_DCR_DINC_SHIFT                       19
N#define DMA_DCR_DINC_WIDTH                       1
N#define DMA_DCR_DINC(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_DCR_DINC_SHIFT))&DMA_DCR_DINC_MASK)
N#define DMA_DCR_SSIZE_MASK                       0x300000u
N#define DMA_DCR_SSIZE_SHIFT                      20
N#define DMA_DCR_SSIZE_WIDTH                      2
N#define DMA_DCR_SSIZE(x)                         (((uint32_t)(((uint32_t)(x))<<DMA_DCR_SSIZE_SHIFT))&DMA_DCR_SSIZE_MASK)
N#define DMA_DCR_SINC_MASK                        0x400000u
N#define DMA_DCR_SINC_SHIFT                       22
N#define DMA_DCR_SINC_WIDTH                       1
N#define DMA_DCR_SINC(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_DCR_SINC_SHIFT))&DMA_DCR_SINC_MASK)
N#define DMA_DCR_EADREQ_MASK                      0x800000u
N#define DMA_DCR_EADREQ_SHIFT                     23
N#define DMA_DCR_EADREQ_WIDTH                     1
N#define DMA_DCR_EADREQ(x)                        (((uint32_t)(((uint32_t)(x))<<DMA_DCR_EADREQ_SHIFT))&DMA_DCR_EADREQ_MASK)
N#define DMA_DCR_AA_MASK                          0x10000000u
N#define DMA_DCR_AA_SHIFT                         28
N#define DMA_DCR_AA_WIDTH                         1
N#define DMA_DCR_AA(x)                            (((uint32_t)(((uint32_t)(x))<<DMA_DCR_AA_SHIFT))&DMA_DCR_AA_MASK)
N#define DMA_DCR_CS_MASK                          0x20000000u
N#define DMA_DCR_CS_SHIFT                         29
N#define DMA_DCR_CS_WIDTH                         1
N#define DMA_DCR_CS(x)                            (((uint32_t)(((uint32_t)(x))<<DMA_DCR_CS_SHIFT))&DMA_DCR_CS_MASK)
N#define DMA_DCR_ERQ_MASK                         0x40000000u
N#define DMA_DCR_ERQ_SHIFT                        30
N#define DMA_DCR_ERQ_WIDTH                        1
N#define DMA_DCR_ERQ(x)                           (((uint32_t)(((uint32_t)(x))<<DMA_DCR_ERQ_SHIFT))&DMA_DCR_ERQ_MASK)
N#define DMA_DCR_EINT_MASK                        0x80000000u
N#define DMA_DCR_EINT_SHIFT                       31
N#define DMA_DCR_EINT_WIDTH                       1
N#define DMA_DCR_EINT(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_DCR_EINT_SHIFT))&DMA_DCR_EINT_MASK)
N
N/*!
N * @}
N */ /* end of group DMA_Register_Masks */
N
N
N/* DMA - Peripheral instance base addresses */
N/** Peripheral DMA base address */
N#define DMA_BASE                                 (0x40008000u)
N/** Peripheral DMA base pointer */
N#define DMA0                                     ((DMA_Type *)DMA_BASE)
N#define DMA_BASE_PTR                             (DMA0)
N/** Array initializer of DMA peripheral base addresses */
N#define DMA_BASE_ADDRS                           { DMA_BASE }
N/** Array initializer of DMA peripheral base pointers */
N#define DMA_BASE_PTRS                            { DMA0 }
N/** Interrupt vectors for the DMA peripheral type */
N#define DMA_CHN_IRQS                             { DMA0_IRQn, DMA1_IRQn, DMA2_IRQn, DMA3_IRQn }
N
N/* ----------------------------------------------------------------------------
N   -- DMA - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup DMA_Register_Accessor_Macros DMA - Register accessor macros
N * @{
N */
N
N
N/* DMA - Register instance definitions */
N/* DMA */
N#define DMA_SAR0                                 DMA_SAR_REG(DMA0,0)
N#define DMA_DAR0                                 DMA_DAR_REG(DMA0,0)
N#define DMA_DSR_BCR0                             DMA_DSR_BCR_REG(DMA0,0)
N#define DMA_DSR0                                 DMA_DSR_REG(DMA0,0)
N#define DMA_DCR0                                 DMA_DCR_REG(DMA0,0)
N#define DMA_SAR1                                 DMA_SAR_REG(DMA0,1)
N#define DMA_DAR1                                 DMA_DAR_REG(DMA0,1)
N#define DMA_DSR_BCR1                             DMA_DSR_BCR_REG(DMA0,1)
N#define DMA_DSR1                                 DMA_DSR_REG(DMA0,1)
N#define DMA_DCR1                                 DMA_DCR_REG(DMA0,1)
N#define DMA_SAR2                                 DMA_SAR_REG(DMA0,2)
N#define DMA_DAR2                                 DMA_DAR_REG(DMA0,2)
N#define DMA_DSR_BCR2                             DMA_DSR_BCR_REG(DMA0,2)
N#define DMA_DSR2                                 DMA_DSR_REG(DMA0,2)
N#define DMA_DCR2                                 DMA_DCR_REG(DMA0,2)
N#define DMA_SAR3                                 DMA_SAR_REG(DMA0,3)
N#define DMA_DAR3                                 DMA_DAR_REG(DMA0,3)
N#define DMA_DSR_BCR3                             DMA_DSR_BCR_REG(DMA0,3)
N#define DMA_DSR3                                 DMA_DSR_REG(DMA0,3)
N#define DMA_DCR3                                 DMA_DCR_REG(DMA0,3)
N
N/* DMA - Register array accessors */
N#define DMA_SAR(index)                           DMA_SAR_REG(DMA0,index)
N#define DMA_DAR(index)                           DMA_DAR_REG(DMA0,index)
N#define DMA_DSR_BCR(index)                       DMA_DSR_BCR_REG(DMA0,index)
N#define DMA_DSR(index)                           DMA_DSR_REG(DMA0,index)
N#define DMA_DCR(index)                           DMA_DCR_REG(DMA0,index)
N
N/*!
N * @}
N */ /* end of group DMA_Register_Accessor_Macros */
N
N
N/*!
N * @}
N */ /* end of group DMA_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- DMAMUX Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup DMAMUX_Peripheral_Access_Layer DMAMUX Peripheral Access Layer
N * @{
N */
N
N/** DMAMUX - Register Layout Typedef */
Ntypedef struct {
N  __IO uint8_t CHCFG[4];                           /**< Channel Configuration register, array offset: 0x0, array step: 0x1 */
X  volatile uint8_t CHCFG[4];                            
N} DMAMUX_Type, *DMAMUX_MemMapPtr;
N
N/* ----------------------------------------------------------------------------
N   -- DMAMUX - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup DMAMUX_Register_Accessor_Macros DMAMUX - Register accessor macros
N * @{
N */
N
N
N/* DMAMUX - Register accessors */
N#define DMAMUX_CHCFG_REG(base,index)             ((base)->CHCFG[index])
N#define DMAMUX_CHCFG_COUNT                       4
N
N/*!
N * @}
N */ /* end of group DMAMUX_Register_Accessor_Macros */
N
N
N/* ----------------------------------------------------------------------------
N   -- DMAMUX Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup DMAMUX_Register_Masks DMAMUX Register Masks
N * @{
N */
N
N/* CHCFG Bit Fields */
N#define DMAMUX_CHCFG_SOURCE_MASK                 0x3Fu
N#define DMAMUX_CHCFG_SOURCE_SHIFT                0
N#define DMAMUX_CHCFG_SOURCE_WIDTH                6
N#define DMAMUX_CHCFG_SOURCE(x)                   (((uint8_t)(((uint8_t)(x))<<DMAMUX_CHCFG_SOURCE_SHIFT))&DMAMUX_CHCFG_SOURCE_MASK)
N#define DMAMUX_CHCFG_TRIG_MASK                   0x40u
N#define DMAMUX_CHCFG_TRIG_SHIFT                  6
N#define DMAMUX_CHCFG_TRIG_WIDTH                  1
N#define DMAMUX_CHCFG_TRIG(x)                     (((uint8_t)(((uint8_t)(x))<<DMAMUX_CHCFG_TRIG_SHIFT))&DMAMUX_CHCFG_TRIG_MASK)
N#define DMAMUX_CHCFG_ENBL_MASK                   0x80u
N#define DMAMUX_CHCFG_ENBL_SHIFT                  7
N#define DMAMUX_CHCFG_ENBL_WIDTH                  1
N#define DMAMUX_CHCFG_ENBL(x)                     (((uint8_t)(((uint8_t)(x))<<DMAMUX_CHCFG_ENBL_SHIFT))&DMAMUX_CHCFG_ENBL_MASK)
N
N/*!
N * @}
N */ /* end of group DMAMUX_Register_Masks */
N
N
N/* DMAMUX - Peripheral instance base addresses */
N/** Peripheral DMAMUX0 base address */
N#define DMAMUX0_BASE                             (0x40021000u)
N/** Peripheral DMAMUX0 base pointer */
N#define DMAMUX0                                  ((DMAMUX_Type *)DMAMUX0_BASE)
N#define DMAMUX0_BASE_PTR                         (DMAMUX0)
N/** Array initializer of DMAMUX peripheral base addresses */
N#define DMAMUX_BASE_ADDRS                        { DMAMUX0_BASE }
N/** Array initializer of DMAMUX peripheral base pointers */
N#define DMAMUX_BASE_PTRS                         { DMAMUX0 }
N
N/* ----------------------------------------------------------------------------
N   -- DMAMUX - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup DMAMUX_Register_Accessor_Macros DMAMUX - Register accessor macros
N * @{
N */
N
N
N/* DMAMUX - Register instance definitions */
N/* DMAMUX0 */
N#define DMAMUX0_CHCFG0                           DMAMUX_CHCFG_REG(DMAMUX0,0)
N#define DMAMUX0_CHCFG1                           DMAMUX_CHCFG_REG(DMAMUX0,1)
N#define DMAMUX0_CHCFG2                           DMAMUX_CHCFG_REG(DMAMUX0,2)
N#define DMAMUX0_CHCFG3                           DMAMUX_CHCFG_REG(DMAMUX0,3)
N
N/* DMAMUX - Register array accessors */
N#define DMAMUX0_CHCFG(index)                     DMAMUX_CHCFG_REG(DMAMUX0,index)
N
N/*!
N * @}
N */ /* end of group DMAMUX_Register_Accessor_Macros */
N
N
N/*!
N * @}
N */ /* end of group DMAMUX_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- FGPIO Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup FGPIO_Peripheral_Access_Layer FGPIO Peripheral Access Layer
N * @{
N */
N
N/** FGPIO - Register Layout Typedef */
Ntypedef struct {
N  __IO uint32_t PDOR;                              /**< Port Data Output Register, offset: 0x0 */
X  volatile uint32_t PDOR;                               
N  __O  uint32_t PSOR;                              /**< Port Set Output Register, offset: 0x4 */
X  volatile  uint32_t PSOR;                               
N  __O  uint32_t PCOR;                              /**< Port Clear Output Register, offset: 0x8 */
X  volatile  uint32_t PCOR;                               
N  __O  uint32_t PTOR;                              /**< Port Toggle Output Register, offset: 0xC */
X  volatile  uint32_t PTOR;                               
N  __I  uint32_t PDIR;                              /**< Port Data Input Register, offset: 0x10 */
X  volatile const  uint32_t PDIR;                               
N  __IO uint32_t PDDR;                              /**< Port Data Direction Register, offset: 0x14 */
X  volatile uint32_t PDDR;                               
N} FGPIO_Type, *FGPIO_MemMapPtr;
N
N/* ----------------------------------------------------------------------------
N   -- FGPIO - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup FGPIO_Register_Accessor_Macros FGPIO - Register accessor macros
N * @{
N */
N
N
N/* FGPIO - Register accessors */
N#define FGPIO_PDOR_REG(base)                     ((base)->PDOR)
N#define FGPIO_PSOR_REG(base)                     ((base)->PSOR)
N#define FGPIO_PCOR_REG(base)                     ((base)->PCOR)
N#define FGPIO_PTOR_REG(base)                     ((base)->PTOR)
N#define FGPIO_PDIR_REG(base)                     ((base)->PDIR)
N#define FGPIO_PDDR_REG(base)                     ((base)->PDDR)
N
N/*!
N * @}
N */ /* end of group FGPIO_Register_Accessor_Macros */
N
N
N/* ----------------------------------------------------------------------------
N   -- FGPIO Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup FGPIO_Register_Masks FGPIO Register Masks
N * @{
N */
N
N/* PDOR Bit Fields */
N#define FGPIO_PDOR_PDO_MASK                      0xFFFFFFFFu
N#define FGPIO_PDOR_PDO_SHIFT                     0
N#define FGPIO_PDOR_PDO_WIDTH                     32
N#define FGPIO_PDOR_PDO(x)                        (((uint32_t)(((uint32_t)(x))<<FGPIO_PDOR_PDO_SHIFT))&FGPIO_PDOR_PDO_MASK)
N/* PSOR Bit Fields */
N#define FGPIO_PSOR_PTSO_MASK                     0xFFFFFFFFu
N#define FGPIO_PSOR_PTSO_SHIFT                    0
N#define FGPIO_PSOR_PTSO_WIDTH                    32
N#define FGPIO_PSOR_PTSO(x)                       (((uint32_t)(((uint32_t)(x))<<FGPIO_PSOR_PTSO_SHIFT))&FGPIO_PSOR_PTSO_MASK)
N/* PCOR Bit Fields */
N#define FGPIO_PCOR_PTCO_MASK                     0xFFFFFFFFu
N#define FGPIO_PCOR_PTCO_SHIFT                    0
N#define FGPIO_PCOR_PTCO_WIDTH                    32
N#define FGPIO_PCOR_PTCO(x)                       (((uint32_t)(((uint32_t)(x))<<FGPIO_PCOR_PTCO_SHIFT))&FGPIO_PCOR_PTCO_MASK)
N/* PTOR Bit Fields */
N#define FGPIO_PTOR_PTTO_MASK                     0xFFFFFFFFu
N#define FGPIO_PTOR_PTTO_SHIFT                    0
N#define FGPIO_PTOR_PTTO_WIDTH                    32
N#define FGPIO_PTOR_PTTO(x)                       (((uint32_t)(((uint32_t)(x))<<FGPIO_PTOR_PTTO_SHIFT))&FGPIO_PTOR_PTTO_MASK)
N/* PDIR Bit Fields */
N#define FGPIO_PDIR_PDI_MASK                      0xFFFFFFFFu
N#define FGPIO_PDIR_PDI_SHIFT                     0
N#define FGPIO_PDIR_PDI_WIDTH                     32
N#define FGPIO_PDIR_PDI(x)                        (((uint32_t)(((uint32_t)(x))<<FGPIO_PDIR_PDI_SHIFT))&FGPIO_PDIR_PDI_MASK)
N/* PDDR Bit Fields */
N#define FGPIO_PDDR_PDD_MASK                      0xFFFFFFFFu
N#define FGPIO_PDDR_PDD_SHIFT                     0
N#define FGPIO_PDDR_PDD_WIDTH                     32
N#define FGPIO_PDDR_PDD(x)                        (((uint32_t)(((uint32_t)(x))<<FGPIO_PDDR_PDD_SHIFT))&FGPIO_PDDR_PDD_MASK)
N
N/*!
N * @}
N */ /* end of group FGPIO_Register_Masks */
N
N
N/* FGPIO - Peripheral instance base addresses */
N/** Peripheral FGPIOA base address */
N#define FGPIOA_BASE                              (0xF80FF000u)
N/** Peripheral FGPIOA base pointer */
N#define FGPIOA                                   ((FGPIO_Type *)FGPIOA_BASE)
N#define FGPIOA_BASE_PTR                          (FGPIOA)
N/** Peripheral FGPIOB base address */
N#define FGPIOB_BASE                              (0xF80FF040u)
N/** Peripheral FGPIOB base pointer */
N#define FGPIOB                                   ((FGPIO_Type *)FGPIOB_BASE)
N#define FGPIOB_BASE_PTR                          (FGPIOB)
N/** Peripheral FGPIOC base address */
N#define FGPIOC_BASE                              (0xF80FF080u)
N/** Peripheral FGPIOC base pointer */
N#define FGPIOC                                   ((FGPIO_Type *)FGPIOC_BASE)
N#define FGPIOC_BASE_PTR                          (FGPIOC)
N/** Peripheral FGPIOD base address */
N#define FGPIOD_BASE                              (0xF80FF0C0u)
N/** Peripheral FGPIOD base pointer */
N#define FGPIOD                                   ((FGPIO_Type *)FGPIOD_BASE)
N#define FGPIOD_BASE_PTR                          (FGPIOD)
N/** Peripheral FGPIOE base address */
N#define FGPIOE_BASE                              (0xF80FF100u)
N/** Peripheral FGPIOE base pointer */
N#define FGPIOE                                   ((FGPIO_Type *)FGPIOE_BASE)
N#define FGPIOE_BASE_PTR                          (FGPIOE)
N/** Array initializer of FGPIO peripheral base addresses */
N#define FGPIO_BASE_ADDRS                         { FGPIOA_BASE, FGPIOB_BASE, FGPIOC_BASE, FGPIOD_BASE, FGPIOE_BASE }
N/** Array initializer of FGPIO peripheral base pointers */
N#define FGPIO_BASE_PTRS                          { FGPIOA, FGPIOB, FGPIOC, FGPIOD, FGPIOE }
N
N/* ----------------------------------------------------------------------------
N   -- FGPIO - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup FGPIO_Register_Accessor_Macros FGPIO - Register accessor macros
N * @{
N */
N
N
N/* FGPIO - Register instance definitions */
N/* FGPIOA */
N#define FGPIOA_PDOR                              FGPIO_PDOR_REG(FGPIOA)
N#define FGPIOA_PSOR                              FGPIO_PSOR_REG(FGPIOA)
N#define FGPIOA_PCOR                              FGPIO_PCOR_REG(FGPIOA)
N#define FGPIOA_PTOR                              FGPIO_PTOR_REG(FGPIOA)
N#define FGPIOA_PDIR                              FGPIO_PDIR_REG(FGPIOA)
N#define FGPIOA_PDDR                              FGPIO_PDDR_REG(FGPIOA)
N/* FGPIOB */
N#define FGPIOB_PDOR                              FGPIO_PDOR_REG(FGPIOB)
N#define FGPIOB_PSOR                              FGPIO_PSOR_REG(FGPIOB)
N#define FGPIOB_PCOR                              FGPIO_PCOR_REG(FGPIOB)
N#define FGPIOB_PTOR                              FGPIO_PTOR_REG(FGPIOB)
N#define FGPIOB_PDIR                              FGPIO_PDIR_REG(FGPIOB)
N#define FGPIOB_PDDR                              FGPIO_PDDR_REG(FGPIOB)
N/* FGPIOC */
N#define FGPIOC_PDOR                              FGPIO_PDOR_REG(FGPIOC)
N#define FGPIOC_PSOR                              FGPIO_PSOR_REG(FGPIOC)
N#define FGPIOC_PCOR                              FGPIO_PCOR_REG(FGPIOC)
N#define FGPIOC_PTOR                              FGPIO_PTOR_REG(FGPIOC)
N#define FGPIOC_PDIR                              FGPIO_PDIR_REG(FGPIOC)
N#define FGPIOC_PDDR                              FGPIO_PDDR_REG(FGPIOC)
N/* FGPIOD */
N#define FGPIOD_PDOR                              FGPIO_PDOR_REG(FGPIOD)
N#define FGPIOD_PSOR                              FGPIO_PSOR_REG(FGPIOD)
N#define FGPIOD_PCOR                              FGPIO_PCOR_REG(FGPIOD)
N#define FGPIOD_PTOR                              FGPIO_PTOR_REG(FGPIOD)
N#define FGPIOD_PDIR                              FGPIO_PDIR_REG(FGPIOD)
N#define FGPIOD_PDDR                              FGPIO_PDDR_REG(FGPIOD)
N/* FGPIOE */
N#define FGPIOE_PDOR                              FGPIO_PDOR_REG(FGPIOE)
N#define FGPIOE_PSOR                              FGPIO_PSOR_REG(FGPIOE)
N#define FGPIOE_PCOR                              FGPIO_PCOR_REG(FGPIOE)
N#define FGPIOE_PTOR                              FGPIO_PTOR_REG(FGPIOE)
N#define FGPIOE_PDIR                              FGPIO_PDIR_REG(FGPIOE)
N#define FGPIOE_PDDR                              FGPIO_PDDR_REG(FGPIOE)
N
N/*!
N * @}
N */ /* end of group FGPIO_Register_Accessor_Macros */
N
N
N/*!
N * @}
N */ /* end of group FGPIO_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- FTFA Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup FTFA_Peripheral_Access_Layer FTFA Peripheral Access Layer
N * @{
N */
N
N/** FTFA - Register Layout Typedef */
Ntypedef struct {
N  __IO uint8_t FSTAT;                              /**< Flash Status Register, offset: 0x0 */
X  volatile uint8_t FSTAT;                               
N  __IO uint8_t FCNFG;                              /**< Flash Configuration Register, offset: 0x1 */
X  volatile uint8_t FCNFG;                               
N  __I  uint8_t FSEC;                               /**< Flash Security Register, offset: 0x2 */
X  volatile const  uint8_t FSEC;                                
N  __I  uint8_t FOPT;                               /**< Flash Option Register, offset: 0x3 */
X  volatile const  uint8_t FOPT;                                
N  __IO uint8_t FCCOB3;                             /**< Flash Common Command Object Registers, offset: 0x4 */
X  volatile uint8_t FCCOB3;                              
N  __IO uint8_t FCCOB2;                             /**< Flash Common Command Object Registers, offset: 0x5 */
X  volatile uint8_t FCCOB2;                              
N  __IO uint8_t FCCOB1;                             /**< Flash Common Command Object Registers, offset: 0x6 */
X  volatile uint8_t FCCOB1;                              
N  __IO uint8_t FCCOB0;                             /**< Flash Common Command Object Registers, offset: 0x7 */
X  volatile uint8_t FCCOB0;                              
N  __IO uint8_t FCCOB7;                             /**< Flash Common Command Object Registers, offset: 0x8 */
X  volatile uint8_t FCCOB7;                              
N  __IO uint8_t FCCOB6;                             /**< Flash Common Command Object Registers, offset: 0x9 */
X  volatile uint8_t FCCOB6;                              
N  __IO uint8_t FCCOB5;                             /**< Flash Common Command Object Registers, offset: 0xA */
X  volatile uint8_t FCCOB5;                              
N  __IO uint8_t FCCOB4;                             /**< Flash Common Command Object Registers, offset: 0xB */
X  volatile uint8_t FCCOB4;                              
N  __IO uint8_t FCCOBB;                             /**< Flash Common Command Object Registers, offset: 0xC */
X  volatile uint8_t FCCOBB;                              
N  __IO uint8_t FCCOBA;                             /**< Flash Common Command Object Registers, offset: 0xD */
X  volatile uint8_t FCCOBA;                              
N  __IO uint8_t FCCOB9;                             /**< Flash Common Command Object Registers, offset: 0xE */
X  volatile uint8_t FCCOB9;                              
N  __IO uint8_t FCCOB8;                             /**< Flash Common Command Object Registers, offset: 0xF */
X  volatile uint8_t FCCOB8;                              
N  __IO uint8_t FPROT3;                             /**< Program Flash Protection Registers, offset: 0x10 */
X  volatile uint8_t FPROT3;                              
N  __IO uint8_t FPROT2;                             /**< Program Flash Protection Registers, offset: 0x11 */
X  volatile uint8_t FPROT2;                              
N  __IO uint8_t FPROT1;                             /**< Program Flash Protection Registers, offset: 0x12 */
X  volatile uint8_t FPROT1;                              
N  __IO uint8_t FPROT0;                             /**< Program Flash Protection Registers, offset: 0x13 */
X  volatile uint8_t FPROT0;                              
N} FTFA_Type, *FTFA_MemMapPtr;
N
N/* ----------------------------------------------------------------------------
N   -- FTFA - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup FTFA_Register_Accessor_Macros FTFA - Register accessor macros
N * @{
N */
N
N
N/* FTFA - Register accessors */
N#define FTFA_FSTAT_REG(base)                     ((base)->FSTAT)
N#define FTFA_FCNFG_REG(base)                     ((base)->FCNFG)
N#define FTFA_FSEC_REG(base)                      ((base)->FSEC)
N#define FTFA_FOPT_REG(base)                      ((base)->FOPT)
N#define FTFA_FCCOB3_REG(base)                    ((base)->FCCOB3)
N#define FTFA_FCCOB2_REG(base)                    ((base)->FCCOB2)
N#define FTFA_FCCOB1_REG(base)                    ((base)->FCCOB1)
N#define FTFA_FCCOB0_REG(base)                    ((base)->FCCOB0)
N#define FTFA_FCCOB7_REG(base)                    ((base)->FCCOB7)
N#define FTFA_FCCOB6_REG(base)                    ((base)->FCCOB6)
N#define FTFA_FCCOB5_REG(base)                    ((base)->FCCOB5)
N#define FTFA_FCCOB4_REG(base)                    ((base)->FCCOB4)
N#define FTFA_FCCOBB_REG(base)                    ((base)->FCCOBB)
N#define FTFA_FCCOBA_REG(base)                    ((base)->FCCOBA)
N#define FTFA_FCCOB9_REG(base)                    ((base)->FCCOB9)
N#define FTFA_FCCOB8_REG(base)                    ((base)->FCCOB8)
N#define FTFA_FPROT3_REG(base)                    ((base)->FPROT3)
N#define FTFA_FPROT2_REG(base)                    ((base)->FPROT2)
N#define FTFA_FPROT1_REG(base)                    ((base)->FPROT1)
N#define FTFA_FPROT0_REG(base)                    ((base)->FPROT0)
N
N/*!
N * @}
N */ /* end of group FTFA_Register_Accessor_Macros */
N
N
N/* ----------------------------------------------------------------------------
N   -- FTFA Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup FTFA_Register_Masks FTFA Register Masks
N * @{
N */
N
N/* FSTAT Bit Fields */
N#define FTFA_FSTAT_MGSTAT0_MASK                  0x1u
N#define FTFA_FSTAT_MGSTAT0_SHIFT                 0
N#define FTFA_FSTAT_MGSTAT0_WIDTH                 1
N#define FTFA_FSTAT_MGSTAT0(x)                    (((uint8_t)(((uint8_t)(x))<<FTFA_FSTAT_MGSTAT0_SHIFT))&FTFA_FSTAT_MGSTAT0_MASK)
N#define FTFA_FSTAT_FPVIOL_MASK                   0x10u
N#define FTFA_FSTAT_FPVIOL_SHIFT                  4
N#define FTFA_FSTAT_FPVIOL_WIDTH                  1
N#define FTFA_FSTAT_FPVIOL(x)                     (((uint8_t)(((uint8_t)(x))<<FTFA_FSTAT_FPVIOL_SHIFT))&FTFA_FSTAT_FPVIOL_MASK)
N#define FTFA_FSTAT_ACCERR_MASK                   0x20u
N#define FTFA_FSTAT_ACCERR_SHIFT                  5
N#define FTFA_FSTAT_ACCERR_WIDTH                  1
N#define FTFA_FSTAT_ACCERR(x)                     (((uint8_t)(((uint8_t)(x))<<FTFA_FSTAT_ACCERR_SHIFT))&FTFA_FSTAT_ACCERR_MASK)
N#define FTFA_FSTAT_RDCOLERR_MASK                 0x40u
N#define FTFA_FSTAT_RDCOLERR_SHIFT                6
N#define FTFA_FSTAT_RDCOLERR_WIDTH                1
N#define FTFA_FSTAT_RDCOLERR(x)                   (((uint8_t)(((uint8_t)(x))<<FTFA_FSTAT_RDCOLERR_SHIFT))&FTFA_FSTAT_RDCOLERR_MASK)
N#define FTFA_FSTAT_CCIF_MASK                     0x80u
N#define FTFA_FSTAT_CCIF_SHIFT                    7
N#define FTFA_FSTAT_CCIF_WIDTH                    1
N#define FTFA_FSTAT_CCIF(x)                       (((uint8_t)(((uint8_t)(x))<<FTFA_FSTAT_CCIF_SHIFT))&FTFA_FSTAT_CCIF_MASK)
N/* FCNFG Bit Fields */
N#define FTFA_FCNFG_ERSSUSP_MASK                  0x10u
N#define FTFA_FCNFG_ERSSUSP_SHIFT                 4
N#define FTFA_FCNFG_ERSSUSP_WIDTH                 1
N#define FTFA_FCNFG_ERSSUSP(x)                    (((uint8_t)(((uint8_t)(x))<<FTFA_FCNFG_ERSSUSP_SHIFT))&FTFA_FCNFG_ERSSUSP_MASK)
N#define FTFA_FCNFG_ERSAREQ_MASK                  0x20u
N#define FTFA_FCNFG_ERSAREQ_SHIFT                 5
N#define FTFA_FCNFG_ERSAREQ_WIDTH                 1
N#define FTFA_FCNFG_ERSAREQ(x)                    (((uint8_t)(((uint8_t)(x))<<FTFA_FCNFG_ERSAREQ_SHIFT))&FTFA_FCNFG_ERSAREQ_MASK)
N#define FTFA_FCNFG_RDCOLLIE_MASK                 0x40u
N#define FTFA_FCNFG_RDCOLLIE_SHIFT                6
N#define FTFA_FCNFG_RDCOLLIE_WIDTH                1
N#define FTFA_FCNFG_RDCOLLIE(x)                   (((uint8_t)(((uint8_t)(x))<<FTFA_FCNFG_RDCOLLIE_SHIFT))&FTFA_FCNFG_RDCOLLIE_MASK)
N#define FTFA_FCNFG_CCIE_MASK                     0x80u
N#define FTFA_FCNFG_CCIE_SHIFT                    7
N#define FTFA_FCNFG_CCIE_WIDTH                    1
N#define FTFA_FCNFG_CCIE(x)                       (((uint8_t)(((uint8_t)(x))<<FTFA_FCNFG_CCIE_SHIFT))&FTFA_FCNFG_CCIE_MASK)
N/* FSEC Bit Fields */
N#define FTFA_FSEC_SEC_MASK                       0x3u
N#define FTFA_FSEC_SEC_SHIFT                      0
N#define FTFA_FSEC_SEC_WIDTH                      2
N#define FTFA_FSEC_SEC(x)                         (((uint8_t)(((uint8_t)(x))<<FTFA_FSEC_SEC_SHIFT))&FTFA_FSEC_SEC_MASK)
N#define FTFA_FSEC_FSLACC_MASK                    0xCu
N#define FTFA_FSEC_FSLACC_SHIFT                   2
N#define FTFA_FSEC_FSLACC_WIDTH                   2
N#define FTFA_FSEC_FSLACC(x)                      (((uint8_t)(((uint8_t)(x))<<FTFA_FSEC_FSLACC_SHIFT))&FTFA_FSEC_FSLACC_MASK)
N#define FTFA_FSEC_MEEN_MASK                      0x30u
N#define FTFA_FSEC_MEEN_SHIFT                     4
N#define FTFA_FSEC_MEEN_WIDTH                     2
N#define FTFA_FSEC_MEEN(x)                        (((uint8_t)(((uint8_t)(x))<<FTFA_FSEC_MEEN_SHIFT))&FTFA_FSEC_MEEN_MASK)
N#define FTFA_FSEC_KEYEN_MASK                     0xC0u
N#define FTFA_FSEC_KEYEN_SHIFT                    6
N#define FTFA_FSEC_KEYEN_WIDTH                    2
N#define FTFA_FSEC_KEYEN(x)                       (((uint8_t)(((uint8_t)(x))<<FTFA_FSEC_KEYEN_SHIFT))&FTFA_FSEC_KEYEN_MASK)
N/* FOPT Bit Fields */
N#define FTFA_FOPT_OPT_MASK                       0xFFu
N#define FTFA_FOPT_OPT_SHIFT                      0
N#define FTFA_FOPT_OPT_WIDTH                      8
N#define FTFA_FOPT_OPT(x)                         (((uint8_t)(((uint8_t)(x))<<FTFA_FOPT_OPT_SHIFT))&FTFA_FOPT_OPT_MASK)
N/* FCCOB3 Bit Fields */
N#define FTFA_FCCOB3_CCOBn_MASK                   0xFFu
N#define FTFA_FCCOB3_CCOBn_SHIFT                  0
N#define FTFA_FCCOB3_CCOBn_WIDTH                  8
N#define FTFA_FCCOB3_CCOBn(x)                     (((uint8_t)(((uint8_t)(x))<<FTFA_FCCOB3_CCOBn_SHIFT))&FTFA_FCCOB3_CCOBn_MASK)
N/* FCCOB2 Bit Fields */
N#define FTFA_FCCOB2_CCOBn_MASK                   0xFFu
N#define FTFA_FCCOB2_CCOBn_SHIFT                  0
N#define FTFA_FCCOB2_CCOBn_WIDTH                  8
N#define FTFA_FCCOB2_CCOBn(x)                     (((uint8_t)(((uint8_t)(x))<<FTFA_FCCOB2_CCOBn_SHIFT))&FTFA_FCCOB2_CCOBn_MASK)
N/* FCCOB1 Bit Fields */
N#define FTFA_FCCOB1_CCOBn_MASK                   0xFFu
N#define FTFA_FCCOB1_CCOBn_SHIFT                  0
N#define FTFA_FCCOB1_CCOBn_WIDTH                  8
N#define FTFA_FCCOB1_CCOBn(x)                     (((uint8_t)(((uint8_t)(x))<<FTFA_FCCOB1_CCOBn_SHIFT))&FTFA_FCCOB1_CCOBn_MASK)
N/* FCCOB0 Bit Fields */
N#define FTFA_FCCOB0_CCOBn_MASK                   0xFFu
N#define FTFA_FCCOB0_CCOBn_SHIFT                  0
N#define FTFA_FCCOB0_CCOBn_WIDTH                  8
N#define FTFA_FCCOB0_CCOBn(x)                     (((uint8_t)(((uint8_t)(x))<<FTFA_FCCOB0_CCOBn_SHIFT))&FTFA_FCCOB0_CCOBn_MASK)
N/* FCCOB7 Bit Fields */
N#define FTFA_FCCOB7_CCOBn_MASK                   0xFFu
N#define FTFA_FCCOB7_CCOBn_SHIFT                  0
N#define FTFA_FCCOB7_CCOBn_WIDTH                  8
N#define FTFA_FCCOB7_CCOBn(x)                     (((uint8_t)(((uint8_t)(x))<<FTFA_FCCOB7_CCOBn_SHIFT))&FTFA_FCCOB7_CCOBn_MASK)
N/* FCCOB6 Bit Fields */
N#define FTFA_FCCOB6_CCOBn_MASK                   0xFFu
N#define FTFA_FCCOB6_CCOBn_SHIFT                  0
N#define FTFA_FCCOB6_CCOBn_WIDTH                  8
N#define FTFA_FCCOB6_CCOBn(x)                     (((uint8_t)(((uint8_t)(x))<<FTFA_FCCOB6_CCOBn_SHIFT))&FTFA_FCCOB6_CCOBn_MASK)
N/* FCCOB5 Bit Fields */
N#define FTFA_FCCOB5_CCOBn_MASK                   0xFFu
N#define FTFA_FCCOB5_CCOBn_SHIFT                  0
N#define FTFA_FCCOB5_CCOBn_WIDTH                  8
N#define FTFA_FCCOB5_CCOBn(x)                     (((uint8_t)(((uint8_t)(x))<<FTFA_FCCOB5_CCOBn_SHIFT))&FTFA_FCCOB5_CCOBn_MASK)
N/* FCCOB4 Bit Fields */
N#define FTFA_FCCOB4_CCOBn_MASK                   0xFFu
N#define FTFA_FCCOB4_CCOBn_SHIFT                  0
N#define FTFA_FCCOB4_CCOBn_WIDTH                  8
N#define FTFA_FCCOB4_CCOBn(x)                     (((uint8_t)(((uint8_t)(x))<<FTFA_FCCOB4_CCOBn_SHIFT))&FTFA_FCCOB4_CCOBn_MASK)
N/* FCCOBB Bit Fields */
N#define FTFA_FCCOBB_CCOBn_MASK                   0xFFu
N#define FTFA_FCCOBB_CCOBn_SHIFT                  0
N#define FTFA_FCCOBB_CCOBn_WIDTH                  8
N#define FTFA_FCCOBB_CCOBn(x)                     (((uint8_t)(((uint8_t)(x))<<FTFA_FCCOBB_CCOBn_SHIFT))&FTFA_FCCOBB_CCOBn_MASK)
N/* FCCOBA Bit Fields */
N#define FTFA_FCCOBA_CCOBn_MASK                   0xFFu
N#define FTFA_FCCOBA_CCOBn_SHIFT                  0
N#define FTFA_FCCOBA_CCOBn_WIDTH                  8
N#define FTFA_FCCOBA_CCOBn(x)                     (((uint8_t)(((uint8_t)(x))<<FTFA_FCCOBA_CCOBn_SHIFT))&FTFA_FCCOBA_CCOBn_MASK)
N/* FCCOB9 Bit Fields */
N#define FTFA_FCCOB9_CCOBn_MASK                   0xFFu
N#define FTFA_FCCOB9_CCOBn_SHIFT                  0
N#define FTFA_FCCOB9_CCOBn_WIDTH                  8
N#define FTFA_FCCOB9_CCOBn(x)                     (((uint8_t)(((uint8_t)(x))<<FTFA_FCCOB9_CCOBn_SHIFT))&FTFA_FCCOB9_CCOBn_MASK)
N/* FCCOB8 Bit Fields */
N#define FTFA_FCCOB8_CCOBn_MASK                   0xFFu
N#define FTFA_FCCOB8_CCOBn_SHIFT                  0
N#define FTFA_FCCOB8_CCOBn_WIDTH                  8
N#define FTFA_FCCOB8_CCOBn(x)                     (((uint8_t)(((uint8_t)(x))<<FTFA_FCCOB8_CCOBn_SHIFT))&FTFA_FCCOB8_CCOBn_MASK)
N/* FPROT3 Bit Fields */
N#define FTFA_FPROT3_PROT_MASK                    0xFFu
N#define FTFA_FPROT3_PROT_SHIFT                   0
N#define FTFA_FPROT3_PROT_WIDTH                   8
N#define FTFA_FPROT3_PROT(x)                      (((uint8_t)(((uint8_t)(x))<<FTFA_FPROT3_PROT_SHIFT))&FTFA_FPROT3_PROT_MASK)
N/* FPROT2 Bit Fields */
N#define FTFA_FPROT2_PROT_MASK                    0xFFu
N#define FTFA_FPROT2_PROT_SHIFT                   0
N#define FTFA_FPROT2_PROT_WIDTH                   8
N#define FTFA_FPROT2_PROT(x)                      (((uint8_t)(((uint8_t)(x))<<FTFA_FPROT2_PROT_SHIFT))&FTFA_FPROT2_PROT_MASK)
N/* FPROT1 Bit Fields */
N#define FTFA_FPROT1_PROT_MASK                    0xFFu
N#define FTFA_FPROT1_PROT_SHIFT                   0
N#define FTFA_FPROT1_PROT_WIDTH                   8
N#define FTFA_FPROT1_PROT(x)                      (((uint8_t)(((uint8_t)(x))<<FTFA_FPROT1_PROT_SHIFT))&FTFA_FPROT1_PROT_MASK)
N/* FPROT0 Bit Fields */
N#define FTFA_FPROT0_PROT_MASK                    0xFFu
N#define FTFA_FPROT0_PROT_SHIFT                   0
N#define FTFA_FPROT0_PROT_WIDTH                   8
N#define FTFA_FPROT0_PROT(x)                      (((uint8_t)(((uint8_t)(x))<<FTFA_FPROT0_PROT_SHIFT))&FTFA_FPROT0_PROT_MASK)
N
N/*!
N * @}
N */ /* end of group FTFA_Register_Masks */
N
N
N/* FTFA - Peripheral instance base addresses */
N/** Peripheral FTFA base address */
N#define FTFA_BASE                                (0x40020000u)
N/** Peripheral FTFA base pointer */
N#define FTFA                                     ((FTFA_Type *)FTFA_BASE)
N#define FTFA_BASE_PTR                            (FTFA)
N/** Array initializer of FTFA peripheral base addresses */
N#define FTFA_BASE_ADDRS                          { FTFA_BASE }
N/** Array initializer of FTFA peripheral base pointers */
N#define FTFA_BASE_PTRS                           { FTFA }
N/** Interrupt vectors for the FTFA peripheral type */
N#define FTFA_COMMAND_COMPLETE_IRQS               { FTFA_IRQn }
N
N/* ----------------------------------------------------------------------------
N   -- FTFA - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup FTFA_Register_Accessor_Macros FTFA - Register accessor macros
N * @{
N */
N
N
N/* FTFA - Register instance definitions */
N/* FTFA */
N#define FTFA_FSTAT                               FTFA_FSTAT_REG(FTFA)
N#define FTFA_FCNFG                               FTFA_FCNFG_REG(FTFA)
N#define FTFA_FSEC                                FTFA_FSEC_REG(FTFA)
N#define FTFA_FOPT                                FTFA_FOPT_REG(FTFA)
N#define FTFA_FCCOB3                              FTFA_FCCOB3_REG(FTFA)
N#define FTFA_FCCOB2                              FTFA_FCCOB2_REG(FTFA)
N#define FTFA_FCCOB1                              FTFA_FCCOB1_REG(FTFA)
N#define FTFA_FCCOB0                              FTFA_FCCOB0_REG(FTFA)
N#define FTFA_FCCOB7                              FTFA_FCCOB7_REG(FTFA)
N#define FTFA_FCCOB6                              FTFA_FCCOB6_REG(FTFA)
N#define FTFA_FCCOB5                              FTFA_FCCOB5_REG(FTFA)
N#define FTFA_FCCOB4                              FTFA_FCCOB4_REG(FTFA)
N#define FTFA_FCCOBB                              FTFA_FCCOBB_REG(FTFA)
N#define FTFA_FCCOBA                              FTFA_FCCOBA_REG(FTFA)
N#define FTFA_FCCOB9                              FTFA_FCCOB9_REG(FTFA)
N#define FTFA_FCCOB8                              FTFA_FCCOB8_REG(FTFA)
N#define FTFA_FPROT3                              FTFA_FPROT3_REG(FTFA)
N#define FTFA_FPROT2                              FTFA_FPROT2_REG(FTFA)
N#define FTFA_FPROT1                              FTFA_FPROT1_REG(FTFA)
N#define FTFA_FPROT0                              FTFA_FPROT0_REG(FTFA)
N
N/*!
N * @}
N */ /* end of group FTFA_Register_Accessor_Macros */
N
N
N/*!
N * @}
N */ /* end of group FTFA_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- GPIO Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup GPIO_Peripheral_Access_Layer GPIO Peripheral Access Layer
N * @{
N */
N
N/** GPIO - Register Layout Typedef */
Ntypedef struct {
N  __IO uint32_t PDOR;                              /**< Port Data Output Register, offset: 0x0 */
X  volatile uint32_t PDOR;                               
N  __O  uint32_t PSOR;                              /**< Port Set Output Register, offset: 0x4 */
X  volatile  uint32_t PSOR;                               
N  __O  uint32_t PCOR;                              /**< Port Clear Output Register, offset: 0x8 */
X  volatile  uint32_t PCOR;                               
N  __O  uint32_t PTOR;                              /**< Port Toggle Output Register, offset: 0xC */
X  volatile  uint32_t PTOR;                               
N  __I  uint32_t PDIR;                              /**< Port Data Input Register, offset: 0x10 */
X  volatile const  uint32_t PDIR;                               
N  __IO uint32_t PDDR;                              /**< Port Data Direction Register, offset: 0x14 */
X  volatile uint32_t PDDR;                               
N} GPIO_Type, *GPIO_MemMapPtr;
N
N/* ----------------------------------------------------------------------------
N   -- GPIO - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup GPIO_Register_Accessor_Macros GPIO - Register accessor macros
N * @{
N */
N
N
N/* GPIO - Register accessors */
N#define GPIO_PDOR_REG(base)                      ((base)->PDOR)
N#define GPIO_PSOR_REG(base)                      ((base)->PSOR)
N#define GPIO_PCOR_REG(base)                      ((base)->PCOR)
N#define GPIO_PTOR_REG(base)                      ((base)->PTOR)
N#define GPIO_PDIR_REG(base)                      ((base)->PDIR)
N#define GPIO_PDDR_REG(base)                      ((base)->PDDR)
N
N/*!
N * @}
N */ /* end of group GPIO_Register_Accessor_Macros */
N
N
N/* ----------------------------------------------------------------------------
N   -- GPIO Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup GPIO_Register_Masks GPIO Register Masks
N * @{
N */
N
N/* PDOR Bit Fields */
N#define GPIO_PDOR_PDO_MASK                       0xFFFFFFFFu
N#define GPIO_PDOR_PDO_SHIFT                      0
N#define GPIO_PDOR_PDO_WIDTH                      32
N#define GPIO_PDOR_PDO(x)                         (((uint32_t)(((uint32_t)(x))<<GPIO_PDOR_PDO_SHIFT))&GPIO_PDOR_PDO_MASK)
N/* PSOR Bit Fields */
N#define GPIO_PSOR_PTSO_MASK                      0xFFFFFFFFu
N#define GPIO_PSOR_PTSO_SHIFT                     0
N#define GPIO_PSOR_PTSO_WIDTH                     32
N#define GPIO_PSOR_PTSO(x)                        (((uint32_t)(((uint32_t)(x))<<GPIO_PSOR_PTSO_SHIFT))&GPIO_PSOR_PTSO_MASK)
N/* PCOR Bit Fields */
N#define GPIO_PCOR_PTCO_MASK                      0xFFFFFFFFu
N#define GPIO_PCOR_PTCO_SHIFT                     0
N#define GPIO_PCOR_PTCO_WIDTH                     32
N#define GPIO_PCOR_PTCO(x)                        (((uint32_t)(((uint32_t)(x))<<GPIO_PCOR_PTCO_SHIFT))&GPIO_PCOR_PTCO_MASK)
N/* PTOR Bit Fields */
N#define GPIO_PTOR_PTTO_MASK                      0xFFFFFFFFu
N#define GPIO_PTOR_PTTO_SHIFT                     0
N#define GPIO_PTOR_PTTO_WIDTH                     32
N#define GPIO_PTOR_PTTO(x)                        (((uint32_t)(((uint32_t)(x))<<GPIO_PTOR_PTTO_SHIFT))&GPIO_PTOR_PTTO_MASK)
N/* PDIR Bit Fields */
N#define GPIO_PDIR_PDI_MASK                       0xFFFFFFFFu
N#define GPIO_PDIR_PDI_SHIFT                      0
N#define GPIO_PDIR_PDI_WIDTH                      32
N#define GPIO_PDIR_PDI(x)                         (((uint32_t)(((uint32_t)(x))<<GPIO_PDIR_PDI_SHIFT))&GPIO_PDIR_PDI_MASK)
N/* PDDR Bit Fields */
N#define GPIO_PDDR_PDD_MASK                       0xFFFFFFFFu
N#define GPIO_PDDR_PDD_SHIFT                      0
N#define GPIO_PDDR_PDD_WIDTH                      32
N#define GPIO_PDDR_PDD(x)                         (((uint32_t)(((uint32_t)(x))<<GPIO_PDDR_PDD_SHIFT))&GPIO_PDDR_PDD_MASK)
N
N/*!
N * @}
N */ /* end of group GPIO_Register_Masks */
N
N
N/* GPIO - Peripheral instance base addresses */
N/** Peripheral GPIOA base address */
N#define GPIOA_BASE                               (0x400FF000u)
N/** Peripheral GPIOA base pointer */
N#define GPIOA                                    ((GPIO_Type *)GPIOA_BASE)
N#define GPIOA_BASE_PTR                           (GPIOA)
N/** Peripheral GPIOB base address */
N#define GPIOB_BASE                               (0x400FF040u)
N/** Peripheral GPIOB base pointer */
N#define GPIOB                                    ((GPIO_Type *)GPIOB_BASE)
N#define GPIOB_BASE_PTR                           (GPIOB)
N/** Peripheral GPIOC base address */
N#define GPIOC_BASE                               (0x400FF080u)
N/** Peripheral GPIOC base pointer */
N#define GPIOC                                    ((GPIO_Type *)GPIOC_BASE)
N#define GPIOC_BASE_PTR                           (GPIOC)
N/** Peripheral GPIOD base address */
N#define GPIOD_BASE                               (0x400FF0C0u)
N/** Peripheral GPIOD base pointer */
N#define GPIOD                                    ((GPIO_Type *)GPIOD_BASE)
N#define GPIOD_BASE_PTR                           (GPIOD)
N/** Peripheral GPIOE base address */
N#define GPIOE_BASE                               (0x400FF100u)
N/** Peripheral GPIOE base pointer */
N#define GPIOE                                    ((GPIO_Type *)GPIOE_BASE)
N#define GPIOE_BASE_PTR                           (GPIOE)
N/** Array initializer of GPIO peripheral base addresses */
N#define GPIO_BASE_ADDRS                          { GPIOA_BASE, GPIOB_BASE, GPIOC_BASE, GPIOD_BASE, GPIOE_BASE }
N/** Array initializer of GPIO peripheral base pointers */
N#define GPIO_BASE_PTRS                           { GPIOA, GPIOB, GPIOC, GPIOD, GPIOE }
N
N/* ----------------------------------------------------------------------------
N   -- GPIO - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup GPIO_Register_Accessor_Macros GPIO - Register accessor macros
N * @{
N */
N
N
N/* GPIO - Register instance definitions */
N/* GPIOA */
N#define GPIOA_PDOR                               GPIO_PDOR_REG(GPIOA)
N#define GPIOA_PSOR                               GPIO_PSOR_REG(GPIOA)
N#define GPIOA_PCOR                               GPIO_PCOR_REG(GPIOA)
N#define GPIOA_PTOR                               GPIO_PTOR_REG(GPIOA)
N#define GPIOA_PDIR                               GPIO_PDIR_REG(GPIOA)
N#define GPIOA_PDDR                               GPIO_PDDR_REG(GPIOA)
N/* GPIOB */
N#define GPIOB_PDOR                               GPIO_PDOR_REG(GPIOB)
N#define GPIOB_PSOR                               GPIO_PSOR_REG(GPIOB)
N#define GPIOB_PCOR                               GPIO_PCOR_REG(GPIOB)
N#define GPIOB_PTOR                               GPIO_PTOR_REG(GPIOB)
N#define GPIOB_PDIR                               GPIO_PDIR_REG(GPIOB)
N#define GPIOB_PDDR                               GPIO_PDDR_REG(GPIOB)
N/* GPIOC */
N#define GPIOC_PDOR                               GPIO_PDOR_REG(GPIOC)
N#define GPIOC_PSOR                               GPIO_PSOR_REG(GPIOC)
N#define GPIOC_PCOR                               GPIO_PCOR_REG(GPIOC)
N#define GPIOC_PTOR                               GPIO_PTOR_REG(GPIOC)
N#define GPIOC_PDIR                               GPIO_PDIR_REG(GPIOC)
N#define GPIOC_PDDR                               GPIO_PDDR_REG(GPIOC)
N/* GPIOD */
N#define GPIOD_PDOR                               GPIO_PDOR_REG(GPIOD)
N#define GPIOD_PSOR                               GPIO_PSOR_REG(GPIOD)
N#define GPIOD_PCOR                               GPIO_PCOR_REG(GPIOD)
N#define GPIOD_PTOR                               GPIO_PTOR_REG(GPIOD)
N#define GPIOD_PDIR                               GPIO_PDIR_REG(GPIOD)
N#define GPIOD_PDDR                               GPIO_PDDR_REG(GPIOD)
N/* GPIOE */
N#define GPIOE_PDOR                               GPIO_PDOR_REG(GPIOE)
N#define GPIOE_PSOR                               GPIO_PSOR_REG(GPIOE)
N#define GPIOE_PCOR                               GPIO_PCOR_REG(GPIOE)
N#define GPIOE_PTOR                               GPIO_PTOR_REG(GPIOE)
N#define GPIOE_PDIR                               GPIO_PDIR_REG(GPIOE)
N#define GPIOE_PDDR                               GPIO_PDDR_REG(GPIOE)
N
N/*!
N * @}
N */ /* end of group GPIO_Register_Accessor_Macros */
N
N
N/*!
N * @}
N */ /* end of group GPIO_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- I2C Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup I2C_Peripheral_Access_Layer I2C Peripheral Access Layer
N * @{
N */
N
N/** I2C - Register Layout Typedef */
Ntypedef struct {
N  __IO uint8_t A1;                                 /**< I2C Address Register 1, offset: 0x0 */
X  volatile uint8_t A1;                                  
N  __IO uint8_t F;                                  /**< I2C Frequency Divider register, offset: 0x1 */
X  volatile uint8_t F;                                   
N  __IO uint8_t C1;                                 /**< I2C Control Register 1, offset: 0x2 */
X  volatile uint8_t C1;                                  
N  __IO uint8_t S;                                  /**< I2C Status register, offset: 0x3 */
X  volatile uint8_t S;                                   
N  __IO uint8_t D;                                  /**< I2C Data I/O register, offset: 0x4 */
X  volatile uint8_t D;                                   
N  __IO uint8_t C2;                                 /**< I2C Control Register 2, offset: 0x5 */
X  volatile uint8_t C2;                                  
N  __IO uint8_t FLT;                                /**< I2C Programmable Input Glitch Filter register, offset: 0x6 */
X  volatile uint8_t FLT;                                 
N  __IO uint8_t RA;                                 /**< I2C Range Address register, offset: 0x7 */
X  volatile uint8_t RA;                                  
N  __IO uint8_t SMB;                                /**< I2C SMBus Control and Status register, offset: 0x8 */
X  volatile uint8_t SMB;                                 
N  __IO uint8_t A2;                                 /**< I2C Address Register 2, offset: 0x9 */
X  volatile uint8_t A2;                                  
N  __IO uint8_t SLTH;                               /**< I2C SCL Low Timeout Register High, offset: 0xA */
X  volatile uint8_t SLTH;                                
N  __IO uint8_t SLTL;                               /**< I2C SCL Low Timeout Register Low, offset: 0xB */
X  volatile uint8_t SLTL;                                
N} I2C_Type, *I2C_MemMapPtr;
N
N/* ----------------------------------------------------------------------------
N   -- I2C - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup I2C_Register_Accessor_Macros I2C - Register accessor macros
N * @{
N */
N
N
N/* I2C - Register accessors */
N#define I2C_A1_REG(base)                         ((base)->A1)
N#define I2C_F_REG(base)                          ((base)->F)
N#define I2C_C1_REG(base)                         ((base)->C1)
N#define I2C_S_REG(base)                          ((base)->S)
N#define I2C_D_REG(base)                          ((base)->D)
N#define I2C_C2_REG(base)                         ((base)->C2)
N#define I2C_FLT_REG(base)                        ((base)->FLT)
N#define I2C_RA_REG(base)                         ((base)->RA)
N#define I2C_SMB_REG(base)                        ((base)->SMB)
N#define I2C_A2_REG(base)                         ((base)->A2)
N#define I2C_SLTH_REG(base)                       ((base)->SLTH)
N#define I2C_SLTL_REG(base)                       ((base)->SLTL)
N
N/*!
N * @}
N */ /* end of group I2C_Register_Accessor_Macros */
N
N
N/* ----------------------------------------------------------------------------
N   -- I2C Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup I2C_Register_Masks I2C Register Masks
N * @{
N */
N
N/* A1 Bit Fields */
N#define I2C_A1_AD_MASK                           0xFEu
N#define I2C_A1_AD_SHIFT                          1
N#define I2C_A1_AD_WIDTH                          7
N#define I2C_A1_AD(x)                             (((uint8_t)(((uint8_t)(x))<<I2C_A1_AD_SHIFT))&I2C_A1_AD_MASK)
N/* F Bit Fields */
N#define I2C_F_ICR_MASK                           0x3Fu
N#define I2C_F_ICR_SHIFT                          0
N#define I2C_F_ICR_WIDTH                          6
N#define I2C_F_ICR(x)                             (((uint8_t)(((uint8_t)(x))<<I2C_F_ICR_SHIFT))&I2C_F_ICR_MASK)
N#define I2C_F_MULT_MASK                          0xC0u
N#define I2C_F_MULT_SHIFT                         6
N#define I2C_F_MULT_WIDTH                         2
N#define I2C_F_MULT(x)                            (((uint8_t)(((uint8_t)(x))<<I2C_F_MULT_SHIFT))&I2C_F_MULT_MASK)
N/* C1 Bit Fields */
N#define I2C_C1_DMAEN_MASK                        0x1u
N#define I2C_C1_DMAEN_SHIFT                       0
N#define I2C_C1_DMAEN_WIDTH                       1
N#define I2C_C1_DMAEN(x)                          (((uint8_t)(((uint8_t)(x))<<I2C_C1_DMAEN_SHIFT))&I2C_C1_DMAEN_MASK)
N#define I2C_C1_WUEN_MASK                         0x2u
N#define I2C_C1_WUEN_SHIFT                        1
N#define I2C_C1_WUEN_WIDTH                        1
N#define I2C_C1_WUEN(x)                           (((uint8_t)(((uint8_t)(x))<<I2C_C1_WUEN_SHIFT))&I2C_C1_WUEN_MASK)
N#define I2C_C1_RSTA_MASK                         0x4u
N#define I2C_C1_RSTA_SHIFT                        2
N#define I2C_C1_RSTA_WIDTH                        1
N#define I2C_C1_RSTA(x)                           (((uint8_t)(((uint8_t)(x))<<I2C_C1_RSTA_SHIFT))&I2C_C1_RSTA_MASK)
N#define I2C_C1_TXAK_MASK                         0x8u
N#define I2C_C1_TXAK_SHIFT                        3
N#define I2C_C1_TXAK_WIDTH                        1
N#define I2C_C1_TXAK(x)                           (((uint8_t)(((uint8_t)(x))<<I2C_C1_TXAK_SHIFT))&I2C_C1_TXAK_MASK)
N#define I2C_C1_TX_MASK                           0x10u
N#define I2C_C1_TX_SHIFT                          4
N#define I2C_C1_TX_WIDTH                          1
N#define I2C_C1_TX(x)                             (((uint8_t)(((uint8_t)(x))<<I2C_C1_TX_SHIFT))&I2C_C1_TX_MASK)
N#define I2C_C1_MST_MASK                          0x20u
N#define I2C_C1_MST_SHIFT                         5
N#define I2C_C1_MST_WIDTH                         1
N#define I2C_C1_MST(x)                            (((uint8_t)(((uint8_t)(x))<<I2C_C1_MST_SHIFT))&I2C_C1_MST_MASK)
N#define I2C_C1_IICIE_MASK                        0x40u
N#define I2C_C1_IICIE_SHIFT                       6
N#define I2C_C1_IICIE_WIDTH                       1
N#define I2C_C1_IICIE(x)                          (((uint8_t)(((uint8_t)(x))<<I2C_C1_IICIE_SHIFT))&I2C_C1_IICIE_MASK)
N#define I2C_C1_IICEN_MASK                        0x80u
N#define I2C_C1_IICEN_SHIFT                       7
N#define I2C_C1_IICEN_WIDTH                       1
N#define I2C_C1_IICEN(x)                          (((uint8_t)(((uint8_t)(x))<<I2C_C1_IICEN_SHIFT))&I2C_C1_IICEN_MASK)
N/* S Bit Fields */
N#define I2C_S_RXAK_MASK                          0x1u
N#define I2C_S_RXAK_SHIFT                         0
N#define I2C_S_RXAK_WIDTH                         1
N#define I2C_S_RXAK(x)                            (((uint8_t)(((uint8_t)(x))<<I2C_S_RXAK_SHIFT))&I2C_S_RXAK_MASK)
N#define I2C_S_IICIF_MASK                         0x2u
N#define I2C_S_IICIF_SHIFT                        1
N#define I2C_S_IICIF_WIDTH                        1
N#define I2C_S_IICIF(x)                           (((uint8_t)(((uint8_t)(x))<<I2C_S_IICIF_SHIFT))&I2C_S_IICIF_MASK)
N#define I2C_S_SRW_MASK                           0x4u
N#define I2C_S_SRW_SHIFT                          2
N#define I2C_S_SRW_WIDTH                          1
N#define I2C_S_SRW(x)                             (((uint8_t)(((uint8_t)(x))<<I2C_S_SRW_SHIFT))&I2C_S_SRW_MASK)
N#define I2C_S_RAM_MASK                           0x8u
N#define I2C_S_RAM_SHIFT                          3
N#define I2C_S_RAM_WIDTH                          1
N#define I2C_S_RAM(x)                             (((uint8_t)(((uint8_t)(x))<<I2C_S_RAM_SHIFT))&I2C_S_RAM_MASK)
N#define I2C_S_ARBL_MASK                          0x10u
N#define I2C_S_ARBL_SHIFT                         4
N#define I2C_S_ARBL_WIDTH                         1
N#define I2C_S_ARBL(x)                            (((uint8_t)(((uint8_t)(x))<<I2C_S_ARBL_SHIFT))&I2C_S_ARBL_MASK)
N#define I2C_S_BUSY_MASK                          0x20u
N#define I2C_S_BUSY_SHIFT                         5
N#define I2C_S_BUSY_WIDTH                         1
N#define I2C_S_BUSY(x)                            (((uint8_t)(((uint8_t)(x))<<I2C_S_BUSY_SHIFT))&I2C_S_BUSY_MASK)
N#define I2C_S_IAAS_MASK                          0x40u
N#define I2C_S_IAAS_SHIFT                         6
N#define I2C_S_IAAS_WIDTH                         1
N#define I2C_S_IAAS(x)                            (((uint8_t)(((uint8_t)(x))<<I2C_S_IAAS_SHIFT))&I2C_S_IAAS_MASK)
N#define I2C_S_TCF_MASK                           0x80u
N#define I2C_S_TCF_SHIFT                          7
N#define I2C_S_TCF_WIDTH                          1
N#define I2C_S_TCF(x)                             (((uint8_t)(((uint8_t)(x))<<I2C_S_TCF_SHIFT))&I2C_S_TCF_MASK)
N/* D Bit Fields */
N#define I2C_D_DATA_MASK                          0xFFu
N#define I2C_D_DATA_SHIFT                         0
N#define I2C_D_DATA_WIDTH                         8
N#define I2C_D_DATA(x)                            (((uint8_t)(((uint8_t)(x))<<I2C_D_DATA_SHIFT))&I2C_D_DATA_MASK)
N/* C2 Bit Fields */
N#define I2C_C2_AD_MASK                           0x7u
N#define I2C_C2_AD_SHIFT                          0
N#define I2C_C2_AD_WIDTH                          3
N#define I2C_C2_AD(x)                             (((uint8_t)(((uint8_t)(x))<<I2C_C2_AD_SHIFT))&I2C_C2_AD_MASK)
N#define I2C_C2_RMEN_MASK                         0x8u
N#define I2C_C2_RMEN_SHIFT                        3
N#define I2C_C2_RMEN_WIDTH                        1
N#define I2C_C2_RMEN(x)                           (((uint8_t)(((uint8_t)(x))<<I2C_C2_RMEN_SHIFT))&I2C_C2_RMEN_MASK)
N#define I2C_C2_SBRC_MASK                         0x10u
N#define I2C_C2_SBRC_SHIFT                        4
N#define I2C_C2_SBRC_WIDTH                        1
N#define I2C_C2_SBRC(x)                           (((uint8_t)(((uint8_t)(x))<<I2C_C2_SBRC_SHIFT))&I2C_C2_SBRC_MASK)
N#define I2C_C2_HDRS_MASK                         0x20u
N#define I2C_C2_HDRS_SHIFT                        5
N#define I2C_C2_HDRS_WIDTH                        1
N#define I2C_C2_HDRS(x)                           (((uint8_t)(((uint8_t)(x))<<I2C_C2_HDRS_SHIFT))&I2C_C2_HDRS_MASK)
N#define I2C_C2_ADEXT_MASK                        0x40u
N#define I2C_C2_ADEXT_SHIFT                       6
N#define I2C_C2_ADEXT_WIDTH                       1
N#define I2C_C2_ADEXT(x)                          (((uint8_t)(((uint8_t)(x))<<I2C_C2_ADEXT_SHIFT))&I2C_C2_ADEXT_MASK)
N#define I2C_C2_GCAEN_MASK                        0x80u
N#define I2C_C2_GCAEN_SHIFT                       7
N#define I2C_C2_GCAEN_WIDTH                       1
N#define I2C_C2_GCAEN(x)                          (((uint8_t)(((uint8_t)(x))<<I2C_C2_GCAEN_SHIFT))&I2C_C2_GCAEN_MASK)
N/* FLT Bit Fields */
N#define I2C_FLT_FLT_MASK                         0x1Fu
N#define I2C_FLT_FLT_SHIFT                        0
N#define I2C_FLT_FLT_WIDTH                        5
N#define I2C_FLT_FLT(x)                           (((uint8_t)(((uint8_t)(x))<<I2C_FLT_FLT_SHIFT))&I2C_FLT_FLT_MASK)
N#define I2C_FLT_STOPIE_MASK                      0x20u
N#define I2C_FLT_STOPIE_SHIFT                     5
N#define I2C_FLT_STOPIE_WIDTH                     1
N#define I2C_FLT_STOPIE(x)                        (((uint8_t)(((uint8_t)(x))<<I2C_FLT_STOPIE_SHIFT))&I2C_FLT_STOPIE_MASK)
N#define I2C_FLT_STOPF_MASK                       0x40u
N#define I2C_FLT_STOPF_SHIFT                      6
N#define I2C_FLT_STOPF_WIDTH                      1
N#define I2C_FLT_STOPF(x)                         (((uint8_t)(((uint8_t)(x))<<I2C_FLT_STOPF_SHIFT))&I2C_FLT_STOPF_MASK)
N#define I2C_FLT_SHEN_MASK                        0x80u
N#define I2C_FLT_SHEN_SHIFT                       7
N#define I2C_FLT_SHEN_WIDTH                       1
N#define I2C_FLT_SHEN(x)                          (((uint8_t)(((uint8_t)(x))<<I2C_FLT_SHEN_SHIFT))&I2C_FLT_SHEN_MASK)
N/* RA Bit Fields */
N#define I2C_RA_RAD_MASK                          0xFEu
N#define I2C_RA_RAD_SHIFT                         1
N#define I2C_RA_RAD_WIDTH                         7
N#define I2C_RA_RAD(x)                            (((uint8_t)(((uint8_t)(x))<<I2C_RA_RAD_SHIFT))&I2C_RA_RAD_MASK)
N/* SMB Bit Fields */
N#define I2C_SMB_SHTF2IE_MASK                     0x1u
N#define I2C_SMB_SHTF2IE_SHIFT                    0
N#define I2C_SMB_SHTF2IE_WIDTH                    1
N#define I2C_SMB_SHTF2IE(x)                       (((uint8_t)(((uint8_t)(x))<<I2C_SMB_SHTF2IE_SHIFT))&I2C_SMB_SHTF2IE_MASK)
N#define I2C_SMB_SHTF2_MASK                       0x2u
N#define I2C_SMB_SHTF2_SHIFT                      1
N#define I2C_SMB_SHTF2_WIDTH                      1
N#define I2C_SMB_SHTF2(x)                         (((uint8_t)(((uint8_t)(x))<<I2C_SMB_SHTF2_SHIFT))&I2C_SMB_SHTF2_MASK)
N#define I2C_SMB_SHTF1_MASK                       0x4u
N#define I2C_SMB_SHTF1_SHIFT                      2
N#define I2C_SMB_SHTF1_WIDTH                      1
N#define I2C_SMB_SHTF1(x)                         (((uint8_t)(((uint8_t)(x))<<I2C_SMB_SHTF1_SHIFT))&I2C_SMB_SHTF1_MASK)
N#define I2C_SMB_SLTF_MASK                        0x8u
N#define I2C_SMB_SLTF_SHIFT                       3
N#define I2C_SMB_SLTF_WIDTH                       1
N#define I2C_SMB_SLTF(x)                          (((uint8_t)(((uint8_t)(x))<<I2C_SMB_SLTF_SHIFT))&I2C_SMB_SLTF_MASK)
N#define I2C_SMB_TCKSEL_MASK                      0x10u
N#define I2C_SMB_TCKSEL_SHIFT                     4
N#define I2C_SMB_TCKSEL_WIDTH                     1
N#define I2C_SMB_TCKSEL(x)                        (((uint8_t)(((uint8_t)(x))<<I2C_SMB_TCKSEL_SHIFT))&I2C_SMB_TCKSEL_MASK)
N#define I2C_SMB_SIICAEN_MASK                     0x20u
N#define I2C_SMB_SIICAEN_SHIFT                    5
N#define I2C_SMB_SIICAEN_WIDTH                    1
N#define I2C_SMB_SIICAEN(x)                       (((uint8_t)(((uint8_t)(x))<<I2C_SMB_SIICAEN_SHIFT))&I2C_SMB_SIICAEN_MASK)
N#define I2C_SMB_ALERTEN_MASK                     0x40u
N#define I2C_SMB_ALERTEN_SHIFT                    6
N#define I2C_SMB_ALERTEN_WIDTH                    1
N#define I2C_SMB_ALERTEN(x)                       (((uint8_t)(((uint8_t)(x))<<I2C_SMB_ALERTEN_SHIFT))&I2C_SMB_ALERTEN_MASK)
N#define I2C_SMB_FACK_MASK                        0x80u
N#define I2C_SMB_FACK_SHIFT                       7
N#define I2C_SMB_FACK_WIDTH                       1
N#define I2C_SMB_FACK(x)                          (((uint8_t)(((uint8_t)(x))<<I2C_SMB_FACK_SHIFT))&I2C_SMB_FACK_MASK)
N/* A2 Bit Fields */
N#define I2C_A2_SAD_MASK                          0xFEu
N#define I2C_A2_SAD_SHIFT                         1
N#define I2C_A2_SAD_WIDTH                         7
N#define I2C_A2_SAD(x)                            (((uint8_t)(((uint8_t)(x))<<I2C_A2_SAD_SHIFT))&I2C_A2_SAD_MASK)
N/* SLTH Bit Fields */
N#define I2C_SLTH_SSLT_MASK                       0xFFu
N#define I2C_SLTH_SSLT_SHIFT                      0
N#define I2C_SLTH_SSLT_WIDTH                      8
N#define I2C_SLTH_SSLT(x)                         (((uint8_t)(((uint8_t)(x))<<I2C_SLTH_SSLT_SHIFT))&I2C_SLTH_SSLT_MASK)
N/* SLTL Bit Fields */
N#define I2C_SLTL_SSLT_MASK                       0xFFu
N#define I2C_SLTL_SSLT_SHIFT                      0
N#define I2C_SLTL_SSLT_WIDTH                      8
N#define I2C_SLTL_SSLT(x)                         (((uint8_t)(((uint8_t)(x))<<I2C_SLTL_SSLT_SHIFT))&I2C_SLTL_SSLT_MASK)
N
N/*!
N * @}
N */ /* end of group I2C_Register_Masks */
N
N
N/* I2C - Peripheral instance base addresses */
N/** Peripheral I2C0 base address */
N#define I2C0_BASE                                (0x40066000u)
N/** Peripheral I2C0 base pointer */
N#define I2C0                                     ((I2C_Type *)I2C0_BASE)
N#define I2C0_BASE_PTR                            (I2C0)
N/** Peripheral I2C1 base address */
N#define I2C1_BASE                                (0x40067000u)
N/** Peripheral I2C1 base pointer */
N#define I2C1                                     ((I2C_Type *)I2C1_BASE)
N#define I2C1_BASE_PTR                            (I2C1)
N/** Array initializer of I2C peripheral base addresses */
N#define I2C_BASE_ADDRS                           { I2C0_BASE, I2C1_BASE }
N/** Array initializer of I2C peripheral base pointers */
N#define I2C_BASE_PTRS                            { I2C0, I2C1 }
N/** Interrupt vectors for the I2C peripheral type */
N#define I2C_IRQS                                 { I2C0_IRQn, I2C1_IRQn }
N
N/* ----------------------------------------------------------------------------
N   -- I2C - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup I2C_Register_Accessor_Macros I2C - Register accessor macros
N * @{
N */
N
N
N/* I2C - Register instance definitions */
N/* I2C0 */
N#define I2C0_A1                                  I2C_A1_REG(I2C0)
N#define I2C0_F                                   I2C_F_REG(I2C0)
N#define I2C0_C1                                  I2C_C1_REG(I2C0)
N#define I2C0_S                                   I2C_S_REG(I2C0)
N#define I2C0_D                                   I2C_D_REG(I2C0)
N#define I2C0_C2                                  I2C_C2_REG(I2C0)
N#define I2C0_FLT                                 I2C_FLT_REG(I2C0)
N#define I2C0_RA                                  I2C_RA_REG(I2C0)
N#define I2C0_SMB                                 I2C_SMB_REG(I2C0)
N#define I2C0_A2                                  I2C_A2_REG(I2C0)
N#define I2C0_SLTH                                I2C_SLTH_REG(I2C0)
N#define I2C0_SLTL                                I2C_SLTL_REG(I2C0)
N/* I2C1 */
N#define I2C1_A1                                  I2C_A1_REG(I2C1)
N#define I2C1_F                                   I2C_F_REG(I2C1)
N#define I2C1_C1                                  I2C_C1_REG(I2C1)
N#define I2C1_S                                   I2C_S_REG(I2C1)
N#define I2C1_D                                   I2C_D_REG(I2C1)
N#define I2C1_C2                                  I2C_C2_REG(I2C1)
N#define I2C1_FLT                                 I2C_FLT_REG(I2C1)
N#define I2C1_RA                                  I2C_RA_REG(I2C1)
N#define I2C1_SMB                                 I2C_SMB_REG(I2C1)
N#define I2C1_A2                                  I2C_A2_REG(I2C1)
N#define I2C1_SLTH                                I2C_SLTH_REG(I2C1)
N#define I2C1_SLTL                                I2C_SLTL_REG(I2C1)
N
N/*!
N * @}
N */ /* end of group I2C_Register_Accessor_Macros */
N
N
N/*!
N * @}
N */ /* end of group I2C_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- LLWU Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup LLWU_Peripheral_Access_Layer LLWU Peripheral Access Layer
N * @{
N */
N
N/** LLWU - Register Layout Typedef */
Ntypedef struct {
N  __IO uint8_t PE1;                                /**< LLWU Pin Enable 1 register, offset: 0x0 */
X  volatile uint8_t PE1;                                 
N  __IO uint8_t PE2;                                /**< LLWU Pin Enable 2 register, offset: 0x1 */
X  volatile uint8_t PE2;                                 
N  __IO uint8_t PE3;                                /**< LLWU Pin Enable 3 register, offset: 0x2 */
X  volatile uint8_t PE3;                                 
N  __IO uint8_t PE4;                                /**< LLWU Pin Enable 4 register, offset: 0x3 */
X  volatile uint8_t PE4;                                 
N  __IO uint8_t ME;                                 /**< LLWU Module Enable register, offset: 0x4 */
X  volatile uint8_t ME;                                  
N  __IO uint8_t F1;                                 /**< LLWU Flag 1 register, offset: 0x5 */
X  volatile uint8_t F1;                                  
N  __IO uint8_t F2;                                 /**< LLWU Flag 2 register, offset: 0x6 */
X  volatile uint8_t F2;                                  
N  __I  uint8_t F3;                                 /**< LLWU Flag 3 register, offset: 0x7 */
X  volatile const  uint8_t F3;                                  
N  __IO uint8_t FILT1;                              /**< LLWU Pin Filter 1 register, offset: 0x8 */
X  volatile uint8_t FILT1;                               
N  __IO uint8_t FILT2;                              /**< LLWU Pin Filter 2 register, offset: 0x9 */
X  volatile uint8_t FILT2;                               
N} LLWU_Type, *LLWU_MemMapPtr;
N
N/* ----------------------------------------------------------------------------
N   -- LLWU - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup LLWU_Register_Accessor_Macros LLWU - Register accessor macros
N * @{
N */
N
N
N/* LLWU - Register accessors */
N#define LLWU_PE1_REG(base)                       ((base)->PE1)
N#define LLWU_PE2_REG(base)                       ((base)->PE2)
N#define LLWU_PE3_REG(base)                       ((base)->PE3)
N#define LLWU_PE4_REG(base)                       ((base)->PE4)
N#define LLWU_ME_REG(base)                        ((base)->ME)
N#define LLWU_F1_REG(base)                        ((base)->F1)
N#define LLWU_F2_REG(base)                        ((base)->F2)
N#define LLWU_F3_REG(base)                        ((base)->F3)
N#define LLWU_FILT1_REG(base)                     ((base)->FILT1)
N#define LLWU_FILT2_REG(base)                     ((base)->FILT2)
N
N/*!
N * @}
N */ /* end of group LLWU_Register_Accessor_Macros */
N
N
N/* ----------------------------------------------------------------------------
N   -- LLWU Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup LLWU_Register_Masks LLWU Register Masks
N * @{
N */
N
N/* PE1 Bit Fields */
N#define LLWU_PE1_WUPE0_MASK                      0x3u
N#define LLWU_PE1_WUPE0_SHIFT                     0
N#define LLWU_PE1_WUPE0_WIDTH                     2
N#define LLWU_PE1_WUPE0(x)                        (((uint8_t)(((uint8_t)(x))<<LLWU_PE1_WUPE0_SHIFT))&LLWU_PE1_WUPE0_MASK)
N#define LLWU_PE1_WUPE1_MASK                      0xCu
N#define LLWU_PE1_WUPE1_SHIFT                     2
N#define LLWU_PE1_WUPE1_WIDTH                     2
N#define LLWU_PE1_WUPE1(x)                        (((uint8_t)(((uint8_t)(x))<<LLWU_PE1_WUPE1_SHIFT))&LLWU_PE1_WUPE1_MASK)
N#define LLWU_PE1_WUPE2_MASK                      0x30u
N#define LLWU_PE1_WUPE2_SHIFT                     4
N#define LLWU_PE1_WUPE2_WIDTH                     2
N#define LLWU_PE1_WUPE2(x)                        (((uint8_t)(((uint8_t)(x))<<LLWU_PE1_WUPE2_SHIFT))&LLWU_PE1_WUPE2_MASK)
N#define LLWU_PE1_WUPE3_MASK                      0xC0u
N#define LLWU_PE1_WUPE3_SHIFT                     6
N#define LLWU_PE1_WUPE3_WIDTH                     2
N#define LLWU_PE1_WUPE3(x)                        (((uint8_t)(((uint8_t)(x))<<LLWU_PE1_WUPE3_SHIFT))&LLWU_PE1_WUPE3_MASK)
N/* PE2 Bit Fields */
N#define LLWU_PE2_WUPE4_MASK                      0x3u
N#define LLWU_PE2_WUPE4_SHIFT                     0
N#define LLWU_PE2_WUPE4_WIDTH                     2
N#define LLWU_PE2_WUPE4(x)                        (((uint8_t)(((uint8_t)(x))<<LLWU_PE2_WUPE4_SHIFT))&LLWU_PE2_WUPE4_MASK)
N#define LLWU_PE2_WUPE5_MASK                      0xCu
N#define LLWU_PE2_WUPE5_SHIFT                     2
N#define LLWU_PE2_WUPE5_WIDTH                     2
N#define LLWU_PE2_WUPE5(x)                        (((uint8_t)(((uint8_t)(x))<<LLWU_PE2_WUPE5_SHIFT))&LLWU_PE2_WUPE5_MASK)
N#define LLWU_PE2_WUPE6_MASK                      0x30u
N#define LLWU_PE2_WUPE6_SHIFT                     4
N#define LLWU_PE2_WUPE6_WIDTH                     2
N#define LLWU_PE2_WUPE6(x)                        (((uint8_t)(((uint8_t)(x))<<LLWU_PE2_WUPE6_SHIFT))&LLWU_PE2_WUPE6_MASK)
N#define LLWU_PE2_WUPE7_MASK                      0xC0u
N#define LLWU_PE2_WUPE7_SHIFT                     6
N#define LLWU_PE2_WUPE7_WIDTH                     2
N#define LLWU_PE2_WUPE7(x)                        (((uint8_t)(((uint8_t)(x))<<LLWU_PE2_WUPE7_SHIFT))&LLWU_PE2_WUPE7_MASK)
N/* PE3 Bit Fields */
N#define LLWU_PE3_WUPE8_MASK                      0x3u
N#define LLWU_PE3_WUPE8_SHIFT                     0
N#define LLWU_PE3_WUPE8_WIDTH                     2
N#define LLWU_PE3_WUPE8(x)                        (((uint8_t)(((uint8_t)(x))<<LLWU_PE3_WUPE8_SHIFT))&LLWU_PE3_WUPE8_MASK)
N#define LLWU_PE3_WUPE9_MASK                      0xCu
N#define LLWU_PE3_WUPE9_SHIFT                     2
N#define LLWU_PE3_WUPE9_WIDTH                     2
N#define LLWU_PE3_WUPE9(x)                        (((uint8_t)(((uint8_t)(x))<<LLWU_PE3_WUPE9_SHIFT))&LLWU_PE3_WUPE9_MASK)
N#define LLWU_PE3_WUPE10_MASK                     0x30u
N#define LLWU_PE3_WUPE10_SHIFT                    4
N#define LLWU_PE3_WUPE10_WIDTH                    2
N#define LLWU_PE3_WUPE10(x)                       (((uint8_t)(((uint8_t)(x))<<LLWU_PE3_WUPE10_SHIFT))&LLWU_PE3_WUPE10_MASK)
N#define LLWU_PE3_WUPE11_MASK                     0xC0u
N#define LLWU_PE3_WUPE11_SHIFT                    6
N#define LLWU_PE3_WUPE11_WIDTH                    2
N#define LLWU_PE3_WUPE11(x)                       (((uint8_t)(((uint8_t)(x))<<LLWU_PE3_WUPE11_SHIFT))&LLWU_PE3_WUPE11_MASK)
N/* PE4 Bit Fields */
N#define LLWU_PE4_WUPE12_MASK                     0x3u
N#define LLWU_PE4_WUPE12_SHIFT                    0
N#define LLWU_PE4_WUPE12_WIDTH                    2
N#define LLWU_PE4_WUPE12(x)                       (((uint8_t)(((uint8_t)(x))<<LLWU_PE4_WUPE12_SHIFT))&LLWU_PE4_WUPE12_MASK)
N#define LLWU_PE4_WUPE13_MASK                     0xCu
N#define LLWU_PE4_WUPE13_SHIFT                    2
N#define LLWU_PE4_WUPE13_WIDTH                    2
N#define LLWU_PE4_WUPE13(x)                       (((uint8_t)(((uint8_t)(x))<<LLWU_PE4_WUPE13_SHIFT))&LLWU_PE4_WUPE13_MASK)
N#define LLWU_PE4_WUPE14_MASK                     0x30u
N#define LLWU_PE4_WUPE14_SHIFT                    4
N#define LLWU_PE4_WUPE14_WIDTH                    2
N#define LLWU_PE4_WUPE14(x)                       (((uint8_t)(((uint8_t)(x))<<LLWU_PE4_WUPE14_SHIFT))&LLWU_PE4_WUPE14_MASK)
N#define LLWU_PE4_WUPE15_MASK                     0xC0u
N#define LLWU_PE4_WUPE15_SHIFT                    6
N#define LLWU_PE4_WUPE15_WIDTH                    2
N#define LLWU_PE4_WUPE15(x)                       (((uint8_t)(((uint8_t)(x))<<LLWU_PE4_WUPE15_SHIFT))&LLWU_PE4_WUPE15_MASK)
N/* ME Bit Fields */
N#define LLWU_ME_WUME0_MASK                       0x1u
N#define LLWU_ME_WUME0_SHIFT                      0
N#define LLWU_ME_WUME0_WIDTH                      1
N#define LLWU_ME_WUME0(x)                         (((uint8_t)(((uint8_t)(x))<<LLWU_ME_WUME0_SHIFT))&LLWU_ME_WUME0_MASK)
N#define LLWU_ME_WUME1_MASK                       0x2u
N#define LLWU_ME_WUME1_SHIFT                      1
N#define LLWU_ME_WUME1_WIDTH                      1
N#define LLWU_ME_WUME1(x)                         (((uint8_t)(((uint8_t)(x))<<LLWU_ME_WUME1_SHIFT))&LLWU_ME_WUME1_MASK)
N#define LLWU_ME_WUME2_MASK                       0x4u
N#define LLWU_ME_WUME2_SHIFT                      2
N#define LLWU_ME_WUME2_WIDTH                      1
N#define LLWU_ME_WUME2(x)                         (((uint8_t)(((uint8_t)(x))<<LLWU_ME_WUME2_SHIFT))&LLWU_ME_WUME2_MASK)
N#define LLWU_ME_WUME3_MASK                       0x8u
N#define LLWU_ME_WUME3_SHIFT                      3
N#define LLWU_ME_WUME3_WIDTH                      1
N#define LLWU_ME_WUME3(x)                         (((uint8_t)(((uint8_t)(x))<<LLWU_ME_WUME3_SHIFT))&LLWU_ME_WUME3_MASK)
N#define LLWU_ME_WUME4_MASK                       0x10u
N#define LLWU_ME_WUME4_SHIFT                      4
N#define LLWU_ME_WUME4_WIDTH                      1
N#define LLWU_ME_WUME4(x)                         (((uint8_t)(((uint8_t)(x))<<LLWU_ME_WUME4_SHIFT))&LLWU_ME_WUME4_MASK)
N#define LLWU_ME_WUME5_MASK                       0x20u
N#define LLWU_ME_WUME5_SHIFT                      5
N#define LLWU_ME_WUME5_WIDTH                      1
N#define LLWU_ME_WUME5(x)                         (((uint8_t)(((uint8_t)(x))<<LLWU_ME_WUME5_SHIFT))&LLWU_ME_WUME5_MASK)
N#define LLWU_ME_WUME6_MASK                       0x40u
N#define LLWU_ME_WUME6_SHIFT                      6
N#define LLWU_ME_WUME6_WIDTH                      1
N#define LLWU_ME_WUME6(x)                         (((uint8_t)(((uint8_t)(x))<<LLWU_ME_WUME6_SHIFT))&LLWU_ME_WUME6_MASK)
N#define LLWU_ME_WUME7_MASK                       0x80u
N#define LLWU_ME_WUME7_SHIFT                      7
N#define LLWU_ME_WUME7_WIDTH                      1
N#define LLWU_ME_WUME7(x)                         (((uint8_t)(((uint8_t)(x))<<LLWU_ME_WUME7_SHIFT))&LLWU_ME_WUME7_MASK)
N/* F1 Bit Fields */
N#define LLWU_F1_WUF0_MASK                        0x1u
N#define LLWU_F1_WUF0_SHIFT                       0
N#define LLWU_F1_WUF0_WIDTH                       1
N#define LLWU_F1_WUF0(x)                          (((uint8_t)(((uint8_t)(x))<<LLWU_F1_WUF0_SHIFT))&LLWU_F1_WUF0_MASK)
N#define LLWU_F1_WUF1_MASK                        0x2u
N#define LLWU_F1_WUF1_SHIFT                       1
N#define LLWU_F1_WUF1_WIDTH                       1
N#define LLWU_F1_WUF1(x)                          (((uint8_t)(((uint8_t)(x))<<LLWU_F1_WUF1_SHIFT))&LLWU_F1_WUF1_MASK)
N#define LLWU_F1_WUF2_MASK                        0x4u
N#define LLWU_F1_WUF2_SHIFT                       2
N#define LLWU_F1_WUF2_WIDTH                       1
N#define LLWU_F1_WUF2(x)                          (((uint8_t)(((uint8_t)(x))<<LLWU_F1_WUF2_SHIFT))&LLWU_F1_WUF2_MASK)
N#define LLWU_F1_WUF3_MASK                        0x8u
N#define LLWU_F1_WUF3_SHIFT                       3
N#define LLWU_F1_WUF3_WIDTH                       1
N#define LLWU_F1_WUF3(x)                          (((uint8_t)(((uint8_t)(x))<<LLWU_F1_WUF3_SHIFT))&LLWU_F1_WUF3_MASK)
N#define LLWU_F1_WUF4_MASK                        0x10u
N#define LLWU_F1_WUF4_SHIFT                       4
N#define LLWU_F1_WUF4_WIDTH                       1
N#define LLWU_F1_WUF4(x)                          (((uint8_t)(((uint8_t)(x))<<LLWU_F1_WUF4_SHIFT))&LLWU_F1_WUF4_MASK)
N#define LLWU_F1_WUF5_MASK                        0x20u
N#define LLWU_F1_WUF5_SHIFT                       5
N#define LLWU_F1_WUF5_WIDTH                       1
N#define LLWU_F1_WUF5(x)                          (((uint8_t)(((uint8_t)(x))<<LLWU_F1_WUF5_SHIFT))&LLWU_F1_WUF5_MASK)
N#define LLWU_F1_WUF6_MASK                        0x40u
N#define LLWU_F1_WUF6_SHIFT                       6
N#define LLWU_F1_WUF6_WIDTH                       1
N#define LLWU_F1_WUF6(x)                          (((uint8_t)(((uint8_t)(x))<<LLWU_F1_WUF6_SHIFT))&LLWU_F1_WUF6_MASK)
N#define LLWU_F1_WUF7_MASK                        0x80u
N#define LLWU_F1_WUF7_SHIFT                       7
N#define LLWU_F1_WUF7_WIDTH                       1
N#define LLWU_F1_WUF7(x)                          (((uint8_t)(((uint8_t)(x))<<LLWU_F1_WUF7_SHIFT))&LLWU_F1_WUF7_MASK)
N/* F2 Bit Fields */
N#define LLWU_F2_WUF8_MASK                        0x1u
N#define LLWU_F2_WUF8_SHIFT                       0
N#define LLWU_F2_WUF8_WIDTH                       1
N#define LLWU_F2_WUF8(x)                          (((uint8_t)(((uint8_t)(x))<<LLWU_F2_WUF8_SHIFT))&LLWU_F2_WUF8_MASK)
N#define LLWU_F2_WUF9_MASK                        0x2u
N#define LLWU_F2_WUF9_SHIFT                       1
N#define LLWU_F2_WUF9_WIDTH                       1
N#define LLWU_F2_WUF9(x)                          (((uint8_t)(((uint8_t)(x))<<LLWU_F2_WUF9_SHIFT))&LLWU_F2_WUF9_MASK)
N#define LLWU_F2_WUF10_MASK                       0x4u
N#define LLWU_F2_WUF10_SHIFT                      2
N#define LLWU_F2_WUF10_WIDTH                      1
N#define LLWU_F2_WUF10(x)                         (((uint8_t)(((uint8_t)(x))<<LLWU_F2_WUF10_SHIFT))&LLWU_F2_WUF10_MASK)
N#define LLWU_F2_WUF11_MASK                       0x8u
N#define LLWU_F2_WUF11_SHIFT                      3
N#define LLWU_F2_WUF11_WIDTH                      1
N#define LLWU_F2_WUF11(x)                         (((uint8_t)(((uint8_t)(x))<<LLWU_F2_WUF11_SHIFT))&LLWU_F2_WUF11_MASK)
N#define LLWU_F2_WUF12_MASK                       0x10u
N#define LLWU_F2_WUF12_SHIFT                      4
N#define LLWU_F2_WUF12_WIDTH                      1
N#define LLWU_F2_WUF12(x)                         (((uint8_t)(((uint8_t)(x))<<LLWU_F2_WUF12_SHIFT))&LLWU_F2_WUF12_MASK)
N#define LLWU_F2_WUF13_MASK                       0x20u
N#define LLWU_F2_WUF13_SHIFT                      5
N#define LLWU_F2_WUF13_WIDTH                      1
N#define LLWU_F2_WUF13(x)                         (((uint8_t)(((uint8_t)(x))<<LLWU_F2_WUF13_SHIFT))&LLWU_F2_WUF13_MASK)
N#define LLWU_F2_WUF14_MASK                       0x40u
N#define LLWU_F2_WUF14_SHIFT                      6
N#define LLWU_F2_WUF14_WIDTH                      1
N#define LLWU_F2_WUF14(x)                         (((uint8_t)(((uint8_t)(x))<<LLWU_F2_WUF14_SHIFT))&LLWU_F2_WUF14_MASK)
N#define LLWU_F2_WUF15_MASK                       0x80u
N#define LLWU_F2_WUF15_SHIFT                      7
N#define LLWU_F2_WUF15_WIDTH                      1
N#define LLWU_F2_WUF15(x)                         (((uint8_t)(((uint8_t)(x))<<LLWU_F2_WUF15_SHIFT))&LLWU_F2_WUF15_MASK)
N/* F3 Bit Fields */
N#define LLWU_F3_MWUF0_MASK                       0x1u
N#define LLWU_F3_MWUF0_SHIFT                      0
N#define LLWU_F3_MWUF0_WIDTH                      1
N#define LLWU_F3_MWUF0(x)                         (((uint8_t)(((uint8_t)(x))<<LLWU_F3_MWUF0_SHIFT))&LLWU_F3_MWUF0_MASK)
N#define LLWU_F3_MWUF1_MASK                       0x2u
N#define LLWU_F3_MWUF1_SHIFT                      1
N#define LLWU_F3_MWUF1_WIDTH                      1
N#define LLWU_F3_MWUF1(x)                         (((uint8_t)(((uint8_t)(x))<<LLWU_F3_MWUF1_SHIFT))&LLWU_F3_MWUF1_MASK)
N#define LLWU_F3_MWUF2_MASK                       0x4u
N#define LLWU_F3_MWUF2_SHIFT                      2
N#define LLWU_F3_MWUF2_WIDTH                      1
N#define LLWU_F3_MWUF2(x)                         (((uint8_t)(((uint8_t)(x))<<LLWU_F3_MWUF2_SHIFT))&LLWU_F3_MWUF2_MASK)
N#define LLWU_F3_MWUF3_MASK                       0x8u
N#define LLWU_F3_MWUF3_SHIFT                      3
N#define LLWU_F3_MWUF3_WIDTH                      1
N#define LLWU_F3_MWUF3(x)                         (((uint8_t)(((uint8_t)(x))<<LLWU_F3_MWUF3_SHIFT))&LLWU_F3_MWUF3_MASK)
N#define LLWU_F3_MWUF4_MASK                       0x10u
N#define LLWU_F3_MWUF4_SHIFT                      4
N#define LLWU_F3_MWUF4_WIDTH                      1
N#define LLWU_F3_MWUF4(x)                         (((uint8_t)(((uint8_t)(x))<<LLWU_F3_MWUF4_SHIFT))&LLWU_F3_MWUF4_MASK)
N#define LLWU_F3_MWUF5_MASK                       0x20u
N#define LLWU_F3_MWUF5_SHIFT                      5
N#define LLWU_F3_MWUF5_WIDTH                      1
N#define LLWU_F3_MWUF5(x)                         (((uint8_t)(((uint8_t)(x))<<LLWU_F3_MWUF5_SHIFT))&LLWU_F3_MWUF5_MASK)
N#define LLWU_F3_MWUF6_MASK                       0x40u
N#define LLWU_F3_MWUF6_SHIFT                      6
N#define LLWU_F3_MWUF6_WIDTH                      1
N#define LLWU_F3_MWUF6(x)                         (((uint8_t)(((uint8_t)(x))<<LLWU_F3_MWUF6_SHIFT))&LLWU_F3_MWUF6_MASK)
N#define LLWU_F3_MWUF7_MASK                       0x80u
N#define LLWU_F3_MWUF7_SHIFT                      7
N#define LLWU_F3_MWUF7_WIDTH                      1
N#define LLWU_F3_MWUF7(x)                         (((uint8_t)(((uint8_t)(x))<<LLWU_F3_MWUF7_SHIFT))&LLWU_F3_MWUF7_MASK)
N/* FILT1 Bit Fields */
N#define LLWU_FILT1_FILTSEL_MASK                  0xFu
N#define LLWU_FILT1_FILTSEL_SHIFT                 0
N#define LLWU_FILT1_FILTSEL_WIDTH                 4
N#define LLWU_FILT1_FILTSEL(x)                    (((uint8_t)(((uint8_t)(x))<<LLWU_FILT1_FILTSEL_SHIFT))&LLWU_FILT1_FILTSEL_MASK)
N#define LLWU_FILT1_FILTE_MASK                    0x60u
N#define LLWU_FILT1_FILTE_SHIFT                   5
N#define LLWU_FILT1_FILTE_WIDTH                   2
N#define LLWU_FILT1_FILTE(x)                      (((uint8_t)(((uint8_t)(x))<<LLWU_FILT1_FILTE_SHIFT))&LLWU_FILT1_FILTE_MASK)
N#define LLWU_FILT1_FILTF_MASK                    0x80u
N#define LLWU_FILT1_FILTF_SHIFT                   7
N#define LLWU_FILT1_FILTF_WIDTH                   1
N#define LLWU_FILT1_FILTF(x)                      (((uint8_t)(((uint8_t)(x))<<LLWU_FILT1_FILTF_SHIFT))&LLWU_FILT1_FILTF_MASK)
N/* FILT2 Bit Fields */
N#define LLWU_FILT2_FILTSEL_MASK                  0xFu
N#define LLWU_FILT2_FILTSEL_SHIFT                 0
N#define LLWU_FILT2_FILTSEL_WIDTH                 4
N#define LLWU_FILT2_FILTSEL(x)                    (((uint8_t)(((uint8_t)(x))<<LLWU_FILT2_FILTSEL_SHIFT))&LLWU_FILT2_FILTSEL_MASK)
N#define LLWU_FILT2_FILTE_MASK                    0x60u
N#define LLWU_FILT2_FILTE_SHIFT                   5
N#define LLWU_FILT2_FILTE_WIDTH                   2
N#define LLWU_FILT2_FILTE(x)                      (((uint8_t)(((uint8_t)(x))<<LLWU_FILT2_FILTE_SHIFT))&LLWU_FILT2_FILTE_MASK)
N#define LLWU_FILT2_FILTF_MASK                    0x80u
N#define LLWU_FILT2_FILTF_SHIFT                   7
N#define LLWU_FILT2_FILTF_WIDTH                   1
N#define LLWU_FILT2_FILTF(x)                      (((uint8_t)(((uint8_t)(x))<<LLWU_FILT2_FILTF_SHIFT))&LLWU_FILT2_FILTF_MASK)
N
N/*!
N * @}
N */ /* end of group LLWU_Register_Masks */
N
N
N/* LLWU - Peripheral instance base addresses */
N/** Peripheral LLWU base address */
N#define LLWU_BASE                                (0x4007C000u)
N/** Peripheral LLWU base pointer */
N#define LLWU                                     ((LLWU_Type *)LLWU_BASE)
N#define LLWU_BASE_PTR                            (LLWU)
N/** Array initializer of LLWU peripheral base addresses */
N#define LLWU_BASE_ADDRS                          { LLWU_BASE }
N/** Array initializer of LLWU peripheral base pointers */
N#define LLWU_BASE_PTRS                           { LLWU }
N/** Interrupt vectors for the LLWU peripheral type */
N#define LLWU_IRQS                                { LLWU_IRQn }
N
N/* ----------------------------------------------------------------------------
N   -- LLWU - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup LLWU_Register_Accessor_Macros LLWU - Register accessor macros
N * @{
N */
N
N
N/* LLWU - Register instance definitions */
N/* LLWU */
N#define LLWU_PE1                                 LLWU_PE1_REG(LLWU)
N#define LLWU_PE2                                 LLWU_PE2_REG(LLWU)
N#define LLWU_PE3                                 LLWU_PE3_REG(LLWU)
N#define LLWU_PE4                                 LLWU_PE4_REG(LLWU)
N#define LLWU_ME                                  LLWU_ME_REG(LLWU)
N#define LLWU_F1                                  LLWU_F1_REG(LLWU)
N#define LLWU_F2                                  LLWU_F2_REG(LLWU)
N#define LLWU_F3                                  LLWU_F3_REG(LLWU)
N#define LLWU_FILT1                               LLWU_FILT1_REG(LLWU)
N#define LLWU_FILT2                               LLWU_FILT2_REG(LLWU)
N
N/*!
N * @}
N */ /* end of group LLWU_Register_Accessor_Macros */
N
N
N/*!
N * @}
N */ /* end of group LLWU_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- LPTMR Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup LPTMR_Peripheral_Access_Layer LPTMR Peripheral Access Layer
N * @{
N */
N
N/** LPTMR - Register Layout Typedef */
Ntypedef struct {
N  __IO uint32_t CSR;                               /**< Low Power Timer Control Status Register, offset: 0x0 */
X  volatile uint32_t CSR;                                
N  __IO uint32_t PSR;                               /**< Low Power Timer Prescale Register, offset: 0x4 */
X  volatile uint32_t PSR;                                
N  __IO uint32_t CMR;                               /**< Low Power Timer Compare Register, offset: 0x8 */
X  volatile uint32_t CMR;                                
N  __IO uint32_t CNR;                               /**< Low Power Timer Counter Register, offset: 0xC */
X  volatile uint32_t CNR;                                
N} LPTMR_Type, *LPTMR_MemMapPtr;
N
N/* ----------------------------------------------------------------------------
N   -- LPTMR - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup LPTMR_Register_Accessor_Macros LPTMR - Register accessor macros
N * @{
N */
N
N
N/* LPTMR - Register accessors */
N#define LPTMR_CSR_REG(base)                      ((base)->CSR)
N#define LPTMR_PSR_REG(base)                      ((base)->PSR)
N#define LPTMR_CMR_REG(base)                      ((base)->CMR)
N#define LPTMR_CNR_REG(base)                      ((base)->CNR)
N
N/*!
N * @}
N */ /* end of group LPTMR_Register_Accessor_Macros */
N
N
N/* ----------------------------------------------------------------------------
N   -- LPTMR Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup LPTMR_Register_Masks LPTMR Register Masks
N * @{
N */
N
N/* CSR Bit Fields */
N#define LPTMR_CSR_TEN_MASK                       0x1u
N#define LPTMR_CSR_TEN_SHIFT                      0
N#define LPTMR_CSR_TEN_WIDTH                      1
N#define LPTMR_CSR_TEN(x)                         (((uint32_t)(((uint32_t)(x))<<LPTMR_CSR_TEN_SHIFT))&LPTMR_CSR_TEN_MASK)
N#define LPTMR_CSR_TMS_MASK                       0x2u
N#define LPTMR_CSR_TMS_SHIFT                      1
N#define LPTMR_CSR_TMS_WIDTH                      1
N#define LPTMR_CSR_TMS(x)                         (((uint32_t)(((uint32_t)(x))<<LPTMR_CSR_TMS_SHIFT))&LPTMR_CSR_TMS_MASK)
N#define LPTMR_CSR_TFC_MASK                       0x4u
N#define LPTMR_CSR_TFC_SHIFT                      2
N#define LPTMR_CSR_TFC_WIDTH                      1
N#define LPTMR_CSR_TFC(x)                         (((uint32_t)(((uint32_t)(x))<<LPTMR_CSR_TFC_SHIFT))&LPTMR_CSR_TFC_MASK)
N#define LPTMR_CSR_TPP_MASK                       0x8u
N#define LPTMR_CSR_TPP_SHIFT                      3
N#define LPTMR_CSR_TPP_WIDTH                      1
N#define LPTMR_CSR_TPP(x)                         (((uint32_t)(((uint32_t)(x))<<LPTMR_CSR_TPP_SHIFT))&LPTMR_CSR_TPP_MASK)
N#define LPTMR_CSR_TPS_MASK                       0x30u
N#define LPTMR_CSR_TPS_SHIFT                      4
N#define LPTMR_CSR_TPS_WIDTH                      2
N#define LPTMR_CSR_TPS(x)                         (((uint32_t)(((uint32_t)(x))<<LPTMR_CSR_TPS_SHIFT))&LPTMR_CSR_TPS_MASK)
N#define LPTMR_CSR_TIE_MASK                       0x40u
N#define LPTMR_CSR_TIE_SHIFT                      6
N#define LPTMR_CSR_TIE_WIDTH                      1
N#define LPTMR_CSR_TIE(x)                         (((uint32_t)(((uint32_t)(x))<<LPTMR_CSR_TIE_SHIFT))&LPTMR_CSR_TIE_MASK)
N#define LPTMR_CSR_TCF_MASK                       0x80u
N#define LPTMR_CSR_TCF_SHIFT                      7
N#define LPTMR_CSR_TCF_WIDTH                      1
N#define LPTMR_CSR_TCF(x)                         (((uint32_t)(((uint32_t)(x))<<LPTMR_CSR_TCF_SHIFT))&LPTMR_CSR_TCF_MASK)
N/* PSR Bit Fields */
N#define LPTMR_PSR_PCS_MASK                       0x3u
N#define LPTMR_PSR_PCS_SHIFT                      0
N#define LPTMR_PSR_PCS_WIDTH                      2
N#define LPTMR_PSR_PCS(x)                         (((uint32_t)(((uint32_t)(x))<<LPTMR_PSR_PCS_SHIFT))&LPTMR_PSR_PCS_MASK)
N#define LPTMR_PSR_PBYP_MASK                      0x4u
N#define LPTMR_PSR_PBYP_SHIFT                     2
N#define LPTMR_PSR_PBYP_WIDTH                     1
N#define LPTMR_PSR_PBYP(x)                        (((uint32_t)(((uint32_t)(x))<<LPTMR_PSR_PBYP_SHIFT))&LPTMR_PSR_PBYP_MASK)
N#define LPTMR_PSR_PRESCALE_MASK                  0x78u
N#define LPTMR_PSR_PRESCALE_SHIFT                 3
N#define LPTMR_PSR_PRESCALE_WIDTH                 4
N#define LPTMR_PSR_PRESCALE(x)                    (((uint32_t)(((uint32_t)(x))<<LPTMR_PSR_PRESCALE_SHIFT))&LPTMR_PSR_PRESCALE_MASK)
N/* CMR Bit Fields */
N#define LPTMR_CMR_COMPARE_MASK                   0xFFFFu
N#define LPTMR_CMR_COMPARE_SHIFT                  0
N#define LPTMR_CMR_COMPARE_WIDTH                  16
N#define LPTMR_CMR_COMPARE(x)                     (((uint32_t)(((uint32_t)(x))<<LPTMR_CMR_COMPARE_SHIFT))&LPTMR_CMR_COMPARE_MASK)
N/* CNR Bit Fields */
N#define LPTMR_CNR_COUNTER_MASK                   0xFFFFu
N#define LPTMR_CNR_COUNTER_SHIFT                  0
N#define LPTMR_CNR_COUNTER_WIDTH                  16
N#define LPTMR_CNR_COUNTER(x)                     (((uint32_t)(((uint32_t)(x))<<LPTMR_CNR_COUNTER_SHIFT))&LPTMR_CNR_COUNTER_MASK)
N
N/*!
N * @}
N */ /* end of group LPTMR_Register_Masks */
N
N
N/* LPTMR - Peripheral instance base addresses */
N/** Peripheral LPTMR0 base address */
N#define LPTMR0_BASE                              (0x40040000u)
N/** Peripheral LPTMR0 base pointer */
N#define LPTMR0                                   ((LPTMR_Type *)LPTMR0_BASE)
N#define LPTMR0_BASE_PTR                          (LPTMR0)
N/** Array initializer of LPTMR peripheral base addresses */
N#define LPTMR_BASE_ADDRS                         { LPTMR0_BASE }
N/** Array initializer of LPTMR peripheral base pointers */
N#define LPTMR_BASE_PTRS                          { LPTMR0 }
N/** Interrupt vectors for the LPTMR peripheral type */
N#define LPTMR_IRQS                               { LPTMR0_IRQn }
N
N/* ----------------------------------------------------------------------------
N   -- LPTMR - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup LPTMR_Register_Accessor_Macros LPTMR - Register accessor macros
N * @{
N */
N
N
N/* LPTMR - Register instance definitions */
N/* LPTMR0 */
N#define LPTMR0_CSR                               LPTMR_CSR_REG(LPTMR0)
N#define LPTMR0_PSR                               LPTMR_PSR_REG(LPTMR0)
N#define LPTMR0_CMR                               LPTMR_CMR_REG(LPTMR0)
N#define LPTMR0_CNR                               LPTMR_CNR_REG(LPTMR0)
N
N/*!
N * @}
N */ /* end of group LPTMR_Register_Accessor_Macros */
N
N
N/*!
N * @}
N */ /* end of group LPTMR_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- MCG Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup MCG_Peripheral_Access_Layer MCG Peripheral Access Layer
N * @{
N */
N
N/** MCG - Register Layout Typedef */
Ntypedef struct {
N  __IO uint8_t C1;                                 /**< MCG Control 1 Register, offset: 0x0 */
X  volatile uint8_t C1;                                  
N  __IO uint8_t C2;                                 /**< MCG Control 2 Register, offset: 0x1 */
X  volatile uint8_t C2;                                  
N  __IO uint8_t C3;                                 /**< MCG Control 3 Register, offset: 0x2 */
X  volatile uint8_t C3;                                  
N  __IO uint8_t C4;                                 /**< MCG Control 4 Register, offset: 0x3 */
X  volatile uint8_t C4;                                  
N  __IO uint8_t C5;                                 /**< MCG Control 5 Register, offset: 0x4 */
X  volatile uint8_t C5;                                  
N  __IO uint8_t C6;                                 /**< MCG Control 6 Register, offset: 0x5 */
X  volatile uint8_t C6;                                  
N  __IO uint8_t S;                                  /**< MCG Status Register, offset: 0x6 */
X  volatile uint8_t S;                                   
N       uint8_t RESERVED_0[1];
N  __IO uint8_t SC;                                 /**< MCG Status and Control Register, offset: 0x8 */
X  volatile uint8_t SC;                                  
N       uint8_t RESERVED_1[1];
N  __IO uint8_t ATCVH;                              /**< MCG Auto Trim Compare Value High Register, offset: 0xA */
X  volatile uint8_t ATCVH;                               
N  __IO uint8_t ATCVL;                              /**< MCG Auto Trim Compare Value Low Register, offset: 0xB */
X  volatile uint8_t ATCVL;                               
N  __I  uint8_t C7;                                 /**< MCG Control 7 Register, offset: 0xC */
X  volatile const  uint8_t C7;                                  
N  __IO uint8_t C8;                                 /**< MCG Control 8 Register, offset: 0xD */
X  volatile uint8_t C8;                                  
N  __I  uint8_t C9;                                 /**< MCG Control 9 Register, offset: 0xE */
X  volatile const  uint8_t C9;                                  
N  __I  uint8_t C10;                                /**< MCG Control 10 Register, offset: 0xF */
X  volatile const  uint8_t C10;                                 
N} MCG_Type, *MCG_MemMapPtr;
N
N/* ----------------------------------------------------------------------------
N   -- MCG - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup MCG_Register_Accessor_Macros MCG - Register accessor macros
N * @{
N */
N
N
N/* MCG - Register accessors */
N#define MCG_C1_REG(base)                         ((base)->C1)
N#define MCG_C2_REG(base)                         ((base)->C2)
N#define MCG_C3_REG(base)                         ((base)->C3)
N#define MCG_C4_REG(base)                         ((base)->C4)
N#define MCG_C5_REG(base)                         ((base)->C5)
N#define MCG_C6_REG(base)                         ((base)->C6)
N#define MCG_S_REG(base)                          ((base)->S)
N#define MCG_SC_REG(base)                         ((base)->SC)
N#define MCG_ATCVH_REG(base)                      ((base)->ATCVH)
N#define MCG_ATCVL_REG(base)                      ((base)->ATCVL)
N#define MCG_C7_REG(base)                         ((base)->C7)
N#define MCG_C8_REG(base)                         ((base)->C8)
N#define MCG_C9_REG(base)                         ((base)->C9)
N#define MCG_C10_REG(base)                        ((base)->C10)
N
N/*!
N * @}
N */ /* end of group MCG_Register_Accessor_Macros */
N
N
N/* ----------------------------------------------------------------------------
N   -- MCG Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup MCG_Register_Masks MCG Register Masks
N * @{
N */
N
N/* C1 Bit Fields */
N#define MCG_C1_IREFSTEN_MASK                     0x1u
N#define MCG_C1_IREFSTEN_SHIFT                    0
N#define MCG_C1_IREFSTEN_WIDTH                    1
N#define MCG_C1_IREFSTEN(x)                       (((uint8_t)(((uint8_t)(x))<<MCG_C1_IREFSTEN_SHIFT))&MCG_C1_IREFSTEN_MASK)
N#define MCG_C1_IRCLKEN_MASK                      0x2u
N#define MCG_C1_IRCLKEN_SHIFT                     1
N#define MCG_C1_IRCLKEN_WIDTH                     1
N#define MCG_C1_IRCLKEN(x)                        (((uint8_t)(((uint8_t)(x))<<MCG_C1_IRCLKEN_SHIFT))&MCG_C1_IRCLKEN_MASK)
N#define MCG_C1_IREFS_MASK                        0x4u
N#define MCG_C1_IREFS_SHIFT                       2
N#define MCG_C1_IREFS_WIDTH                       1
N#define MCG_C1_IREFS(x)                          (((uint8_t)(((uint8_t)(x))<<MCG_C1_IREFS_SHIFT))&MCG_C1_IREFS_MASK)
N#define MCG_C1_FRDIV_MASK                        0x38u
N#define MCG_C1_FRDIV_SHIFT                       3
N#define MCG_C1_FRDIV_WIDTH                       3
N#define MCG_C1_FRDIV(x)                          (((uint8_t)(((uint8_t)(x))<<MCG_C1_FRDIV_SHIFT))&MCG_C1_FRDIV_MASK)
N#define MCG_C1_CLKS_MASK                         0xC0u
N#define MCG_C1_CLKS_SHIFT                        6
N#define MCG_C1_CLKS_WIDTH                        2
N#define MCG_C1_CLKS(x)                           (((uint8_t)(((uint8_t)(x))<<MCG_C1_CLKS_SHIFT))&MCG_C1_CLKS_MASK)
N/* C2 Bit Fields */
N#define MCG_C2_IRCS_MASK                         0x1u
N#define MCG_C2_IRCS_SHIFT                        0
N#define MCG_C2_IRCS_WIDTH                        1
N#define MCG_C2_IRCS(x)                           (((uint8_t)(((uint8_t)(x))<<MCG_C2_IRCS_SHIFT))&MCG_C2_IRCS_MASK)
N#define MCG_C2_LP_MASK                           0x2u
N#define MCG_C2_LP_SHIFT                          1
N#define MCG_C2_LP_WIDTH                          1
N#define MCG_C2_LP(x)                             (((uint8_t)(((uint8_t)(x))<<MCG_C2_LP_SHIFT))&MCG_C2_LP_MASK)
N#define MCG_C2_EREFS0_MASK                       0x4u
N#define MCG_C2_EREFS0_SHIFT                      2
N#define MCG_C2_EREFS0_WIDTH                      1
N#define MCG_C2_EREFS0(x)                         (((uint8_t)(((uint8_t)(x))<<MCG_C2_EREFS0_SHIFT))&MCG_C2_EREFS0_MASK)
N#define MCG_C2_HGO0_MASK                         0x8u
N#define MCG_C2_HGO0_SHIFT                        3
N#define MCG_C2_HGO0_WIDTH                        1
N#define MCG_C2_HGO0(x)                           (((uint8_t)(((uint8_t)(x))<<MCG_C2_HGO0_SHIFT))&MCG_C2_HGO0_MASK)
N#define MCG_C2_RANGE0_MASK                       0x30u
N#define MCG_C2_RANGE0_SHIFT                      4
N#define MCG_C2_RANGE0_WIDTH                      2
N#define MCG_C2_RANGE0(x)                         (((uint8_t)(((uint8_t)(x))<<MCG_C2_RANGE0_SHIFT))&MCG_C2_RANGE0_MASK)
N#define MCG_C2_LOCRE0_MASK                       0x80u
N#define MCG_C2_LOCRE0_SHIFT                      7
N#define MCG_C2_LOCRE0_WIDTH                      1
N#define MCG_C2_LOCRE0(x)                         (((uint8_t)(((uint8_t)(x))<<MCG_C2_LOCRE0_SHIFT))&MCG_C2_LOCRE0_MASK)
N/* C3 Bit Fields */
N#define MCG_C3_SCTRIM_MASK                       0xFFu
N#define MCG_C3_SCTRIM_SHIFT                      0
N#define MCG_C3_SCTRIM_WIDTH                      8
N#define MCG_C3_SCTRIM(x)                         (((uint8_t)(((uint8_t)(x))<<MCG_C3_SCTRIM_SHIFT))&MCG_C3_SCTRIM_MASK)
N/* C4 Bit Fields */
N#define MCG_C4_SCFTRIM_MASK                      0x1u
N#define MCG_C4_SCFTRIM_SHIFT                     0
N#define MCG_C4_SCFTRIM_WIDTH                     1
N#define MCG_C4_SCFTRIM(x)                        (((uint8_t)(((uint8_t)(x))<<MCG_C4_SCFTRIM_SHIFT))&MCG_C4_SCFTRIM_MASK)
N#define MCG_C4_FCTRIM_MASK                       0x1Eu
N#define MCG_C4_FCTRIM_SHIFT                      1
N#define MCG_C4_FCTRIM_WIDTH                      4
N#define MCG_C4_FCTRIM(x)                         (((uint8_t)(((uint8_t)(x))<<MCG_C4_FCTRIM_SHIFT))&MCG_C4_FCTRIM_MASK)
N#define MCG_C4_DRST_DRS_MASK                     0x60u
N#define MCG_C4_DRST_DRS_SHIFT                    5
N#define MCG_C4_DRST_DRS_WIDTH                    2
N#define MCG_C4_DRST_DRS(x)                       (((uint8_t)(((uint8_t)(x))<<MCG_C4_DRST_DRS_SHIFT))&MCG_C4_DRST_DRS_MASK)
N#define MCG_C4_DMX32_MASK                        0x80u
N#define MCG_C4_DMX32_SHIFT                       7
N#define MCG_C4_DMX32_WIDTH                       1
N#define MCG_C4_DMX32(x)                          (((uint8_t)(((uint8_t)(x))<<MCG_C4_DMX32_SHIFT))&MCG_C4_DMX32_MASK)
N/* C5 Bit Fields */
N#define MCG_C5_PRDIV0_MASK                       0x1Fu
N#define MCG_C5_PRDIV0_SHIFT                      0
N#define MCG_C5_PRDIV0_WIDTH                      5
N#define MCG_C5_PRDIV0(x)                         (((uint8_t)(((uint8_t)(x))<<MCG_C5_PRDIV0_SHIFT))&MCG_C5_PRDIV0_MASK)
N#define MCG_C5_PLLSTEN0_MASK                     0x20u
N#define MCG_C5_PLLSTEN0_SHIFT                    5
N#define MCG_C5_PLLSTEN0_WIDTH                    1
N#define MCG_C5_PLLSTEN0(x)                       (((uint8_t)(((uint8_t)(x))<<MCG_C5_PLLSTEN0_SHIFT))&MCG_C5_PLLSTEN0_MASK)
N#define MCG_C5_PLLCLKEN0_MASK                    0x40u
N#define MCG_C5_PLLCLKEN0_SHIFT                   6
N#define MCG_C5_PLLCLKEN0_WIDTH                   1
N#define MCG_C5_PLLCLKEN0(x)                      (((uint8_t)(((uint8_t)(x))<<MCG_C5_PLLCLKEN0_SHIFT))&MCG_C5_PLLCLKEN0_MASK)
N/* C6 Bit Fields */
N#define MCG_C6_VDIV0_MASK                        0x1Fu
N#define MCG_C6_VDIV0_SHIFT                       0
N#define MCG_C6_VDIV0_WIDTH                       5
N#define MCG_C6_VDIV0(x)                          (((uint8_t)(((uint8_t)(x))<<MCG_C6_VDIV0_SHIFT))&MCG_C6_VDIV0_MASK)
N#define MCG_C6_CME0_MASK                         0x20u
N#define MCG_C6_CME0_SHIFT                        5
N#define MCG_C6_CME0_WIDTH                        1
N#define MCG_C6_CME0(x)                           (((uint8_t)(((uint8_t)(x))<<MCG_C6_CME0_SHIFT))&MCG_C6_CME0_MASK)
N#define MCG_C6_PLLS_MASK                         0x40u
N#define MCG_C6_PLLS_SHIFT                        6
N#define MCG_C6_PLLS_WIDTH                        1
N#define MCG_C6_PLLS(x)                           (((uint8_t)(((uint8_t)(x))<<MCG_C6_PLLS_SHIFT))&MCG_C6_PLLS_MASK)
N#define MCG_C6_LOLIE0_MASK                       0x80u
N#define MCG_C6_LOLIE0_SHIFT                      7
N#define MCG_C6_LOLIE0_WIDTH                      1
N#define MCG_C6_LOLIE0(x)                         (((uint8_t)(((uint8_t)(x))<<MCG_C6_LOLIE0_SHIFT))&MCG_C6_LOLIE0_MASK)
N/* S Bit Fields */
N#define MCG_S_IRCST_MASK                         0x1u
N#define MCG_S_IRCST_SHIFT                        0
N#define MCG_S_IRCST_WIDTH                        1
N#define MCG_S_IRCST(x)                           (((uint8_t)(((uint8_t)(x))<<MCG_S_IRCST_SHIFT))&MCG_S_IRCST_MASK)
N#define MCG_S_OSCINIT0_MASK                      0x2u
N#define MCG_S_OSCINIT0_SHIFT                     1
N#define MCG_S_OSCINIT0_WIDTH                     1
N#define MCG_S_OSCINIT0(x)                        (((uint8_t)(((uint8_t)(x))<<MCG_S_OSCINIT0_SHIFT))&MCG_S_OSCINIT0_MASK)
N#define MCG_S_CLKST_MASK                         0xCu
N#define MCG_S_CLKST_SHIFT                        2
N#define MCG_S_CLKST_WIDTH                        2
N#define MCG_S_CLKST(x)                           (((uint8_t)(((uint8_t)(x))<<MCG_S_CLKST_SHIFT))&MCG_S_CLKST_MASK)
N#define MCG_S_IREFST_MASK                        0x10u
N#define MCG_S_IREFST_SHIFT                       4
N#define MCG_S_IREFST_WIDTH                       1
N#define MCG_S_IREFST(x)                          (((uint8_t)(((uint8_t)(x))<<MCG_S_IREFST_SHIFT))&MCG_S_IREFST_MASK)
N#define MCG_S_PLLST_MASK                         0x20u
N#define MCG_S_PLLST_SHIFT                        5
N#define MCG_S_PLLST_WIDTH                        1
N#define MCG_S_PLLST(x)                           (((uint8_t)(((uint8_t)(x))<<MCG_S_PLLST_SHIFT))&MCG_S_PLLST_MASK)
N#define MCG_S_LOCK0_MASK                         0x40u
N#define MCG_S_LOCK0_SHIFT                        6
N#define MCG_S_LOCK0_WIDTH                        1
N#define MCG_S_LOCK0(x)                           (((uint8_t)(((uint8_t)(x))<<MCG_S_LOCK0_SHIFT))&MCG_S_LOCK0_MASK)
N#define MCG_S_LOLS0_MASK                         0x80u
N#define MCG_S_LOLS0_SHIFT                        7
N#define MCG_S_LOLS0_WIDTH                        1
N#define MCG_S_LOLS0(x)                           (((uint8_t)(((uint8_t)(x))<<MCG_S_LOLS0_SHIFT))&MCG_S_LOLS0_MASK)
N/* SC Bit Fields */
N#define MCG_SC_LOCS0_MASK                        0x1u
N#define MCG_SC_LOCS0_SHIFT                       0
N#define MCG_SC_LOCS0_WIDTH                       1
N#define MCG_SC_LOCS0(x)                          (((uint8_t)(((uint8_t)(x))<<MCG_SC_LOCS0_SHIFT))&MCG_SC_LOCS0_MASK)
N#define MCG_SC_FCRDIV_MASK                       0xEu
N#define MCG_SC_FCRDIV_SHIFT                      1
N#define MCG_SC_FCRDIV_WIDTH                      3
N#define MCG_SC_FCRDIV(x)                         (((uint8_t)(((uint8_t)(x))<<MCG_SC_FCRDIV_SHIFT))&MCG_SC_FCRDIV_MASK)
N#define MCG_SC_FLTPRSRV_MASK                     0x10u
N#define MCG_SC_FLTPRSRV_SHIFT                    4
N#define MCG_SC_FLTPRSRV_WIDTH                    1
N#define MCG_SC_FLTPRSRV(x)                       (((uint8_t)(((uint8_t)(x))<<MCG_SC_FLTPRSRV_SHIFT))&MCG_SC_FLTPRSRV_MASK)
N#define MCG_SC_ATMF_MASK                         0x20u
N#define MCG_SC_ATMF_SHIFT                        5
N#define MCG_SC_ATMF_WIDTH                        1
N#define MCG_SC_ATMF(x)                           (((uint8_t)(((uint8_t)(x))<<MCG_SC_ATMF_SHIFT))&MCG_SC_ATMF_MASK)
N#define MCG_SC_ATMS_MASK                         0x40u
N#define MCG_SC_ATMS_SHIFT                        6
N#define MCG_SC_ATMS_WIDTH                        1
N#define MCG_SC_ATMS(x)                           (((uint8_t)(((uint8_t)(x))<<MCG_SC_ATMS_SHIFT))&MCG_SC_ATMS_MASK)
N#define MCG_SC_ATME_MASK                         0x80u
N#define MCG_SC_ATME_SHIFT                        7
N#define MCG_SC_ATME_WIDTH                        1
N#define MCG_SC_ATME(x)                           (((uint8_t)(((uint8_t)(x))<<MCG_SC_ATME_SHIFT))&MCG_SC_ATME_MASK)
N/* ATCVH Bit Fields */
N#define MCG_ATCVH_ATCVH_MASK                     0xFFu
N#define MCG_ATCVH_ATCVH_SHIFT                    0
N#define MCG_ATCVH_ATCVH_WIDTH                    8
N#define MCG_ATCVH_ATCVH(x)                       (((uint8_t)(((uint8_t)(x))<<MCG_ATCVH_ATCVH_SHIFT))&MCG_ATCVH_ATCVH_MASK)
N/* ATCVL Bit Fields */
N#define MCG_ATCVL_ATCVL_MASK                     0xFFu
N#define MCG_ATCVL_ATCVL_SHIFT                    0
N#define MCG_ATCVL_ATCVL_WIDTH                    8
N#define MCG_ATCVL_ATCVL(x)                       (((uint8_t)(((uint8_t)(x))<<MCG_ATCVL_ATCVL_SHIFT))&MCG_ATCVL_ATCVL_MASK)
N/* C8 Bit Fields */
N#define MCG_C8_LOLRE_MASK                        0x40u
N#define MCG_C8_LOLRE_SHIFT                       6
N#define MCG_C8_LOLRE_WIDTH                       1
N#define MCG_C8_LOLRE(x)                          (((uint8_t)(((uint8_t)(x))<<MCG_C8_LOLRE_SHIFT))&MCG_C8_LOLRE_MASK)
N
N/*!
N * @}
N */ /* end of group MCG_Register_Masks */
N
N
N/* MCG - Peripheral instance base addresses */
N/** Peripheral MCG base address */
N#define MCG_BASE                                 (0x40064000u)
N/** Peripheral MCG base pointer */
N#define MCG                                      ((MCG_Type *)MCG_BASE)
N#define MCG_BASE_PTR                             (MCG)
N/** Array initializer of MCG peripheral base addresses */
N#define MCG_BASE_ADDRS                           { MCG_BASE }
N/** Array initializer of MCG peripheral base pointers */
N#define MCG_BASE_PTRS                            { MCG }
N/** Interrupt vectors for the MCG peripheral type */
N#define MCG_IRQS                                 { MCG_IRQn }
N
N/* ----------------------------------------------------------------------------
N   -- MCG - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup MCG_Register_Accessor_Macros MCG - Register accessor macros
N * @{
N */
N
N
N/* MCG - Register instance definitions */
N/* MCG */
N#define MCG_C1                                   MCG_C1_REG(MCG)
N#define MCG_C2                                   MCG_C2_REG(MCG)
N#define MCG_C3                                   MCG_C3_REG(MCG)
N#define MCG_C4                                   MCG_C4_REG(MCG)
N#define MCG_C5                                   MCG_C5_REG(MCG)
N#define MCG_C6                                   MCG_C6_REG(MCG)
N#define MCG_S                                    MCG_S_REG(MCG)
N#define MCG_SC                                   MCG_SC_REG(MCG)
N#define MCG_ATCVH                                MCG_ATCVH_REG(MCG)
N#define MCG_ATCVL                                MCG_ATCVL_REG(MCG)
N#define MCG_C7                                   MCG_C7_REG(MCG)
N#define MCG_C8                                   MCG_C8_REG(MCG)
N#define MCG_C9                                   MCG_C9_REG(MCG)
N#define MCG_C10                                  MCG_C10_REG(MCG)
N
N/*!
N * @}
N */ /* end of group MCG_Register_Accessor_Macros */
N
N/* MCG C2[EREFS] backward compatibility */
N#define MCG_C2_EREFS_MASK         (MCG_C2_EREFS0_MASK)
N#define MCG_C2_EREFS_SHIFT        (MCG_C2_EREFS0_SHIFT)
N#define MCG_C2_EREFS_WIDTH        (MCG_C2_EREFS0_WIDTH)
N#define MCG_C2_EREFS(x)           (MCG_C2_EREFS0(x))
N
N/* MCG C2[HGO] backward compatibility */
N#define MCG_C2_HGO_MASK         (MCG_C2_HGO0_MASK)
N#define MCG_C2_HGO_SHIFT        (MCG_C2_HGO0_SHIFT)
N#define MCG_C2_HGO_WIDTH        (MCG_C2_HGO0_WIDTH)
N#define MCG_C2_HGO(x)           (MCG_C2_HGO0(x))
N
N/* MCG C2[RANGE] backward compatibility */
N#define MCG_C2_RANGE_MASK         (MCG_C2_RANGE0_MASK)
N#define MCG_C2_RANGE_SHIFT        (MCG_C2_RANGE0_SHIFT)
N#define MCG_C2_RANGE_WIDTH        (MCG_C2_RANGE0_WIDTH)
N#define MCG_C2_RANGE(x)           (MCG_C2_RANGE0(x))
N
N
N/*!
N * @}
N */ /* end of group MCG_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- MCM Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup MCM_Peripheral_Access_Layer MCM Peripheral Access Layer
N * @{
N */
N
N/** MCM - Register Layout Typedef */
Ntypedef struct {
N       uint8_t RESERVED_0[8];
N  __I  uint16_t PLASC;                             /**< Crossbar Switch (AXBS) Slave Configuration, offset: 0x8 */
X  volatile const  uint16_t PLASC;                              
N  __I  uint16_t PLAMC;                             /**< Crossbar Switch (AXBS) Master Configuration, offset: 0xA */
X  volatile const  uint16_t PLAMC;                              
N  __IO uint32_t PLACR;                             /**< Platform Control Register, offset: 0xC */
X  volatile uint32_t PLACR;                              
N       uint8_t RESERVED_1[48];
N  __IO uint32_t CPO;                               /**< Compute Operation Control Register, offset: 0x40 */
X  volatile uint32_t CPO;                                
N} MCM_Type, *MCM_MemMapPtr;
N
N/* ----------------------------------------------------------------------------
N   -- MCM - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup MCM_Register_Accessor_Macros MCM - Register accessor macros
N * @{
N */
N
N
N/* MCM - Register accessors */
N#define MCM_PLASC_REG(base)                      ((base)->PLASC)
N#define MCM_PLAMC_REG(base)                      ((base)->PLAMC)
N#define MCM_PLACR_REG(base)                      ((base)->PLACR)
N#define MCM_CPO_REG(base)                        ((base)->CPO)
N
N/*!
N * @}
N */ /* end of group MCM_Register_Accessor_Macros */
N
N
N/* ----------------------------------------------------------------------------
N   -- MCM Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup MCM_Register_Masks MCM Register Masks
N * @{
N */
N
N/* PLASC Bit Fields */
N#define MCM_PLASC_ASC_MASK                       0xFFu
N#define MCM_PLASC_ASC_SHIFT                      0
N#define MCM_PLASC_ASC_WIDTH                      8
N#define MCM_PLASC_ASC(x)                         (((uint16_t)(((uint16_t)(x))<<MCM_PLASC_ASC_SHIFT))&MCM_PLASC_ASC_MASK)
N/* PLAMC Bit Fields */
N#define MCM_PLAMC_AMC_MASK                       0xFFu
N#define MCM_PLAMC_AMC_SHIFT                      0
N#define MCM_PLAMC_AMC_WIDTH                      8
N#define MCM_PLAMC_AMC(x)                         (((uint16_t)(((uint16_t)(x))<<MCM_PLAMC_AMC_SHIFT))&MCM_PLAMC_AMC_MASK)
N/* PLACR Bit Fields */
N#define MCM_PLACR_ARB_MASK                       0x200u
N#define MCM_PLACR_ARB_SHIFT                      9
N#define MCM_PLACR_ARB_WIDTH                      1
N#define MCM_PLACR_ARB(x)                         (((uint32_t)(((uint32_t)(x))<<MCM_PLACR_ARB_SHIFT))&MCM_PLACR_ARB_MASK)
N#define MCM_PLACR_CFCC_MASK                      0x400u
N#define MCM_PLACR_CFCC_SHIFT                     10
N#define MCM_PLACR_CFCC_WIDTH                     1
N#define MCM_PLACR_CFCC(x)                        (((uint32_t)(((uint32_t)(x))<<MCM_PLACR_CFCC_SHIFT))&MCM_PLACR_CFCC_MASK)
N#define MCM_PLACR_DFCDA_MASK                     0x800u
N#define MCM_PLACR_DFCDA_SHIFT                    11
N#define MCM_PLACR_DFCDA_WIDTH                    1
N#define MCM_PLACR_DFCDA(x)                       (((uint32_t)(((uint32_t)(x))<<MCM_PLACR_DFCDA_SHIFT))&MCM_PLACR_DFCDA_MASK)
N#define MCM_PLACR_DFCIC_MASK                     0x1000u
N#define MCM_PLACR_DFCIC_SHIFT                    12
N#define MCM_PLACR_DFCIC_WIDTH                    1
N#define MCM_PLACR_DFCIC(x)                       (((uint32_t)(((uint32_t)(x))<<MCM_PLACR_DFCIC_SHIFT))&MCM_PLACR_DFCIC_MASK)
N#define MCM_PLACR_DFCC_MASK                      0x2000u
N#define MCM_PLACR_DFCC_SHIFT                     13
N#define MCM_PLACR_DFCC_WIDTH                     1
N#define MCM_PLACR_DFCC(x)                        (((uint32_t)(((uint32_t)(x))<<MCM_PLACR_DFCC_SHIFT))&MCM_PLACR_DFCC_MASK)
N#define MCM_PLACR_EFDS_MASK                      0x4000u
N#define MCM_PLACR_EFDS_SHIFT                     14
N#define MCM_PLACR_EFDS_WIDTH                     1
N#define MCM_PLACR_EFDS(x)                        (((uint32_t)(((uint32_t)(x))<<MCM_PLACR_EFDS_SHIFT))&MCM_PLACR_EFDS_MASK)
N#define MCM_PLACR_DFCS_MASK                      0x8000u
N#define MCM_PLACR_DFCS_SHIFT                     15
N#define MCM_PLACR_DFCS_WIDTH                     1
N#define MCM_PLACR_DFCS(x)                        (((uint32_t)(((uint32_t)(x))<<MCM_PLACR_DFCS_SHIFT))&MCM_PLACR_DFCS_MASK)
N#define MCM_PLACR_ESFC_MASK                      0x10000u
N#define MCM_PLACR_ESFC_SHIFT                     16
N#define MCM_PLACR_ESFC_WIDTH                     1
N#define MCM_PLACR_ESFC(x)                        (((uint32_t)(((uint32_t)(x))<<MCM_PLACR_ESFC_SHIFT))&MCM_PLACR_ESFC_MASK)
N/* CPO Bit Fields */
N#define MCM_CPO_CPOREQ_MASK                      0x1u
N#define MCM_CPO_CPOREQ_SHIFT                     0
N#define MCM_CPO_CPOREQ_WIDTH                     1
N#define MCM_CPO_CPOREQ(x)                        (((uint32_t)(((uint32_t)(x))<<MCM_CPO_CPOREQ_SHIFT))&MCM_CPO_CPOREQ_MASK)
N#define MCM_CPO_CPOACK_MASK                      0x2u
N#define MCM_CPO_CPOACK_SHIFT                     1
N#define MCM_CPO_CPOACK_WIDTH                     1
N#define MCM_CPO_CPOACK(x)                        (((uint32_t)(((uint32_t)(x))<<MCM_CPO_CPOACK_SHIFT))&MCM_CPO_CPOACK_MASK)
N#define MCM_CPO_CPOWOI_MASK                      0x4u
N#define MCM_CPO_CPOWOI_SHIFT                     2
N#define MCM_CPO_CPOWOI_WIDTH                     1
N#define MCM_CPO_CPOWOI(x)                        (((uint32_t)(((uint32_t)(x))<<MCM_CPO_CPOWOI_SHIFT))&MCM_CPO_CPOWOI_MASK)
N
N/*!
N * @}
N */ /* end of group MCM_Register_Masks */
N
N
N/* MCM - Peripheral instance base addresses */
N/** Peripheral MCM base address */
N#define MCM_BASE                                 (0xF0003000u)
N/** Peripheral MCM base pointer */
N#define MCM                                      ((MCM_Type *)MCM_BASE)
N#define MCM_BASE_PTR                             (MCM)
N/** Array initializer of MCM peripheral base addresses */
N#define MCM_BASE_ADDRS                           { MCM_BASE }
N/** Array initializer of MCM peripheral base pointers */
N#define MCM_BASE_PTRS                            { MCM }
N
N/* ----------------------------------------------------------------------------
N   -- MCM - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup MCM_Register_Accessor_Macros MCM - Register accessor macros
N * @{
N */
N
N
N/* MCM - Register instance definitions */
N/* MCM */
N#define MCM_PLASC                                MCM_PLASC_REG(MCM)
N#define MCM_PLAMC                                MCM_PLAMC_REG(MCM)
N#define MCM_PLACR                                MCM_PLACR_REG(MCM)
N#define MCM_CPO                                  MCM_CPO_REG(MCM)
N
N/*!
N * @}
N */ /* end of group MCM_Register_Accessor_Macros */
N
N
N/*!
N * @}
N */ /* end of group MCM_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- MTB Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup MTB_Peripheral_Access_Layer MTB Peripheral Access Layer
N * @{
N */
N
N/** MTB - Register Layout Typedef */
Ntypedef struct {
N  __IO uint32_t POSITION;                          /**< MTB Position Register, offset: 0x0 */
X  volatile uint32_t POSITION;                           
N  __IO uint32_t MASTER;                            /**< MTB Master Register, offset: 0x4 */
X  volatile uint32_t MASTER;                             
N  __IO uint32_t FLOW;                              /**< MTB Flow Register, offset: 0x8 */
X  volatile uint32_t FLOW;                               
N  __I  uint32_t BASE;                              /**< MTB Base Register, offset: 0xC */
X  volatile const  uint32_t BASE;                               
N       uint8_t RESERVED_0[3824];
N  __I  uint32_t MODECTRL;                          /**< Integration Mode Control Register, offset: 0xF00 */
X  volatile const  uint32_t MODECTRL;                           
N       uint8_t RESERVED_1[156];
N  __I  uint32_t TAGSET;                            /**< Claim TAG Set Register, offset: 0xFA0 */
X  volatile const  uint32_t TAGSET;                             
N  __I  uint32_t TAGCLEAR;                          /**< Claim TAG Clear Register, offset: 0xFA4 */
X  volatile const  uint32_t TAGCLEAR;                           
N       uint8_t RESERVED_2[8];
N  __I  uint32_t LOCKACCESS;                        /**< Lock Access Register, offset: 0xFB0 */
X  volatile const  uint32_t LOCKACCESS;                         
N  __I  uint32_t LOCKSTAT;                          /**< Lock Status Register, offset: 0xFB4 */
X  volatile const  uint32_t LOCKSTAT;                           
N  __I  uint32_t AUTHSTAT;                          /**< Authentication Status Register, offset: 0xFB8 */
X  volatile const  uint32_t AUTHSTAT;                           
N  __I  uint32_t DEVICEARCH;                        /**< Device Architecture Register, offset: 0xFBC */
X  volatile const  uint32_t DEVICEARCH;                         
N       uint8_t RESERVED_3[8];
N  __I  uint32_t DEVICECFG;                         /**< Device Configuration Register, offset: 0xFC8 */
X  volatile const  uint32_t DEVICECFG;                          
N  __I  uint32_t DEVICETYPID;                       /**< Device Type Identifier Register, offset: 0xFCC */
X  volatile const  uint32_t DEVICETYPID;                        
N  __I  uint32_t PERIPHID[8];                       /**< Peripheral ID Register, array offset: 0xFD0, array step: 0x4 */
X  volatile const  uint32_t PERIPHID[8];                        
N  __I  uint32_t COMPID[4];                         /**< Component ID Register, array offset: 0xFF0, array step: 0x4 */
X  volatile const  uint32_t COMPID[4];                          
N} MTB_Type, *MTB_MemMapPtr;
N
N/* ----------------------------------------------------------------------------
N   -- MTB - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup MTB_Register_Accessor_Macros MTB - Register accessor macros
N * @{
N */
N
N
N/* MTB - Register accessors */
N#define MTB_POSITION_REG(base)                   ((base)->POSITION)
N#define MTB_MASTER_REG(base)                     ((base)->MASTER)
N#define MTB_FLOW_REG(base)                       ((base)->FLOW)
N#define MTB_BASE_REG(base)                       ((base)->BASE)
N#define MTB_MODECTRL_REG(base)                   ((base)->MODECTRL)
N#define MTB_TAGSET_REG(base)                     ((base)->TAGSET)
N#define MTB_TAGCLEAR_REG(base)                   ((base)->TAGCLEAR)
N#define MTB_LOCKACCESS_REG(base)                 ((base)->LOCKACCESS)
N#define MTB_LOCKSTAT_REG(base)                   ((base)->LOCKSTAT)
N#define MTB_AUTHSTAT_REG(base)                   ((base)->AUTHSTAT)
N#define MTB_DEVICEARCH_REG(base)                 ((base)->DEVICEARCH)
N#define MTB_DEVICECFG_REG(base)                  ((base)->DEVICECFG)
N#define MTB_DEVICETYPID_REG(base)                ((base)->DEVICETYPID)
N#define MTB_PERIPHID_REG(base,index)             ((base)->PERIPHID[index])
N#define MTB_PERIPHID_COUNT                       8
N#define MTB_COMPID_REG(base,index)               ((base)->COMPID[index])
N#define MTB_COMPID_COUNT                         4
N
N/*!
N * @}
N */ /* end of group MTB_Register_Accessor_Macros */
N
N
N/* ----------------------------------------------------------------------------
N   -- MTB Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup MTB_Register_Masks MTB Register Masks
N * @{
N */
N
N/* POSITION Bit Fields */
N#define MTB_POSITION_WRAP_MASK                   0x4u
N#define MTB_POSITION_WRAP_SHIFT                  2
N#define MTB_POSITION_WRAP_WIDTH                  1
N#define MTB_POSITION_WRAP(x)                     (((uint32_t)(((uint32_t)(x))<<MTB_POSITION_WRAP_SHIFT))&MTB_POSITION_WRAP_MASK)
N#define MTB_POSITION_POINTER_MASK                0xFFFFFFF8u
N#define MTB_POSITION_POINTER_SHIFT               3
N#define MTB_POSITION_POINTER_WIDTH               29
N#define MTB_POSITION_POINTER(x)                  (((uint32_t)(((uint32_t)(x))<<MTB_POSITION_POINTER_SHIFT))&MTB_POSITION_POINTER_MASK)
N/* MASTER Bit Fields */
N#define MTB_MASTER_MASK_MASK                     0x1Fu
N#define MTB_MASTER_MASK_SHIFT                    0
N#define MTB_MASTER_MASK_WIDTH                    5
N#define MTB_MASTER_MASK(x)                       (((uint32_t)(((uint32_t)(x))<<MTB_MASTER_MASK_SHIFT))&MTB_MASTER_MASK_MASK)
N#define MTB_MASTER_TSTARTEN_MASK                 0x20u
N#define MTB_MASTER_TSTARTEN_SHIFT                5
N#define MTB_MASTER_TSTARTEN_WIDTH                1
N#define MTB_MASTER_TSTARTEN(x)                   (((uint32_t)(((uint32_t)(x))<<MTB_MASTER_TSTARTEN_SHIFT))&MTB_MASTER_TSTARTEN_MASK)
N#define MTB_MASTER_TSTOPEN_MASK                  0x40u
N#define MTB_MASTER_TSTOPEN_SHIFT                 6
N#define MTB_MASTER_TSTOPEN_WIDTH                 1
N#define MTB_MASTER_TSTOPEN(x)                    (((uint32_t)(((uint32_t)(x))<<MTB_MASTER_TSTOPEN_SHIFT))&MTB_MASTER_TSTOPEN_MASK)
N#define MTB_MASTER_SFRWPRIV_MASK                 0x80u
N#define MTB_MASTER_SFRWPRIV_SHIFT                7
N#define MTB_MASTER_SFRWPRIV_WIDTH                1
N#define MTB_MASTER_SFRWPRIV(x)                   (((uint32_t)(((uint32_t)(x))<<MTB_MASTER_SFRWPRIV_SHIFT))&MTB_MASTER_SFRWPRIV_MASK)
N#define MTB_MASTER_RAMPRIV_MASK                  0x100u
N#define MTB_MASTER_RAMPRIV_SHIFT                 8
N#define MTB_MASTER_RAMPRIV_WIDTH                 1
N#define MTB_MASTER_RAMPRIV(x)                    (((uint32_t)(((uint32_t)(x))<<MTB_MASTER_RAMPRIV_SHIFT))&MTB_MASTER_RAMPRIV_MASK)
N#define MTB_MASTER_HALTREQ_MASK                  0x200u
N#define MTB_MASTER_HALTREQ_SHIFT                 9
N#define MTB_MASTER_HALTREQ_WIDTH                 1
N#define MTB_MASTER_HALTREQ(x)                    (((uint32_t)(((uint32_t)(x))<<MTB_MASTER_HALTREQ_SHIFT))&MTB_MASTER_HALTREQ_MASK)
N#define MTB_MASTER_EN_MASK                       0x80000000u
N#define MTB_MASTER_EN_SHIFT                      31
N#define MTB_MASTER_EN_WIDTH                      1
N#define MTB_MASTER_EN(x)                         (((uint32_t)(((uint32_t)(x))<<MTB_MASTER_EN_SHIFT))&MTB_MASTER_EN_MASK)
N/* FLOW Bit Fields */
N#define MTB_FLOW_AUTOSTOP_MASK                   0x1u
N#define MTB_FLOW_AUTOSTOP_SHIFT                  0
N#define MTB_FLOW_AUTOSTOP_WIDTH                  1
N#define MTB_FLOW_AUTOSTOP(x)                     (((uint32_t)(((uint32_t)(x))<<MTB_FLOW_AUTOSTOP_SHIFT))&MTB_FLOW_AUTOSTOP_MASK)
N#define MTB_FLOW_AUTOHALT_MASK                   0x2u
N#define MTB_FLOW_AUTOHALT_SHIFT                  1
N#define MTB_FLOW_AUTOHALT_WIDTH                  1
N#define MTB_FLOW_AUTOHALT(x)                     (((uint32_t)(((uint32_t)(x))<<MTB_FLOW_AUTOHALT_SHIFT))&MTB_FLOW_AUTOHALT_MASK)
N#define MTB_FLOW_WATERMARK_MASK                  0xFFFFFFF8u
N#define MTB_FLOW_WATERMARK_SHIFT                 3
N#define MTB_FLOW_WATERMARK_WIDTH                 29
N#define MTB_FLOW_WATERMARK(x)                    (((uint32_t)(((uint32_t)(x))<<MTB_FLOW_WATERMARK_SHIFT))&MTB_FLOW_WATERMARK_MASK)
N/* BASE Bit Fields */
N#define MTB_BASE_BASEADDR_MASK                   0xFFFFFFFFu
N#define MTB_BASE_BASEADDR_SHIFT                  0
N#define MTB_BASE_BASEADDR_WIDTH                  32
N#define MTB_BASE_BASEADDR(x)                     (((uint32_t)(((uint32_t)(x))<<MTB_BASE_BASEADDR_SHIFT))&MTB_BASE_BASEADDR_MASK)
N/* MODECTRL Bit Fields */
N#define MTB_MODECTRL_MODECTRL_MASK               0xFFFFFFFFu
N#define MTB_MODECTRL_MODECTRL_SHIFT              0
N#define MTB_MODECTRL_MODECTRL_WIDTH              32
N#define MTB_MODECTRL_MODECTRL(x)                 (((uint32_t)(((uint32_t)(x))<<MTB_MODECTRL_MODECTRL_SHIFT))&MTB_MODECTRL_MODECTRL_MASK)
N/* TAGSET Bit Fields */
N#define MTB_TAGSET_TAGSET_MASK                   0xFFFFFFFFu
N#define MTB_TAGSET_TAGSET_SHIFT                  0
N#define MTB_TAGSET_TAGSET_WIDTH                  32
N#define MTB_TAGSET_TAGSET(x)                     (((uint32_t)(((uint32_t)(x))<<MTB_TAGSET_TAGSET_SHIFT))&MTB_TAGSET_TAGSET_MASK)
N/* TAGCLEAR Bit Fields */
N#define MTB_TAGCLEAR_TAGCLEAR_MASK               0xFFFFFFFFu
N#define MTB_TAGCLEAR_TAGCLEAR_SHIFT              0
N#define MTB_TAGCLEAR_TAGCLEAR_WIDTH              32
N#define MTB_TAGCLEAR_TAGCLEAR(x)                 (((uint32_t)(((uint32_t)(x))<<MTB_TAGCLEAR_TAGCLEAR_SHIFT))&MTB_TAGCLEAR_TAGCLEAR_MASK)
N/* LOCKACCESS Bit Fields */
N#define MTB_LOCKACCESS_LOCKACCESS_MASK           0xFFFFFFFFu
N#define MTB_LOCKACCESS_LOCKACCESS_SHIFT          0
N#define MTB_LOCKACCESS_LOCKACCESS_WIDTH          32
N#define MTB_LOCKACCESS_LOCKACCESS(x)             (((uint32_t)(((uint32_t)(x))<<MTB_LOCKACCESS_LOCKACCESS_SHIFT))&MTB_LOCKACCESS_LOCKACCESS_MASK)
N/* LOCKSTAT Bit Fields */
N#define MTB_LOCKSTAT_LOCKSTAT_MASK               0xFFFFFFFFu
N#define MTB_LOCKSTAT_LOCKSTAT_SHIFT              0
N#define MTB_LOCKSTAT_LOCKSTAT_WIDTH              32
N#define MTB_LOCKSTAT_LOCKSTAT(x)                 (((uint32_t)(((uint32_t)(x))<<MTB_LOCKSTAT_LOCKSTAT_SHIFT))&MTB_LOCKSTAT_LOCKSTAT_MASK)
N/* AUTHSTAT Bit Fields */
N#define MTB_AUTHSTAT_BIT0_MASK                   0x1u
N#define MTB_AUTHSTAT_BIT0_SHIFT                  0
N#define MTB_AUTHSTAT_BIT0_WIDTH                  1
N#define MTB_AUTHSTAT_BIT0(x)                     (((uint32_t)(((uint32_t)(x))<<MTB_AUTHSTAT_BIT0_SHIFT))&MTB_AUTHSTAT_BIT0_MASK)
N#define MTB_AUTHSTAT_BIT1_MASK                   0x2u
N#define MTB_AUTHSTAT_BIT1_SHIFT                  1
N#define MTB_AUTHSTAT_BIT1_WIDTH                  1
N#define MTB_AUTHSTAT_BIT1(x)                     (((uint32_t)(((uint32_t)(x))<<MTB_AUTHSTAT_BIT1_SHIFT))&MTB_AUTHSTAT_BIT1_MASK)
N#define MTB_AUTHSTAT_BIT2_MASK                   0x4u
N#define MTB_AUTHSTAT_BIT2_SHIFT                  2
N#define MTB_AUTHSTAT_BIT2_WIDTH                  1
N#define MTB_AUTHSTAT_BIT2(x)                     (((uint32_t)(((uint32_t)(x))<<MTB_AUTHSTAT_BIT2_SHIFT))&MTB_AUTHSTAT_BIT2_MASK)
N#define MTB_AUTHSTAT_BIT3_MASK                   0x8u
N#define MTB_AUTHSTAT_BIT3_SHIFT                  3
N#define MTB_AUTHSTAT_BIT3_WIDTH                  1
N#define MTB_AUTHSTAT_BIT3(x)                     (((uint32_t)(((uint32_t)(x))<<MTB_AUTHSTAT_BIT3_SHIFT))&MTB_AUTHSTAT_BIT3_MASK)
N/* DEVICEARCH Bit Fields */
N#define MTB_DEVICEARCH_DEVICEARCH_MASK           0xFFFFFFFFu
N#define MTB_DEVICEARCH_DEVICEARCH_SHIFT          0
N#define MTB_DEVICEARCH_DEVICEARCH_WIDTH          32
N#define MTB_DEVICEARCH_DEVICEARCH(x)             (((uint32_t)(((uint32_t)(x))<<MTB_DEVICEARCH_DEVICEARCH_SHIFT))&MTB_DEVICEARCH_DEVICEARCH_MASK)
N/* DEVICECFG Bit Fields */
N#define MTB_DEVICECFG_DEVICECFG_MASK             0xFFFFFFFFu
N#define MTB_DEVICECFG_DEVICECFG_SHIFT            0
N#define MTB_DEVICECFG_DEVICECFG_WIDTH            32
N#define MTB_DEVICECFG_DEVICECFG(x)               (((uint32_t)(((uint32_t)(x))<<MTB_DEVICECFG_DEVICECFG_SHIFT))&MTB_DEVICECFG_DEVICECFG_MASK)
N/* DEVICETYPID Bit Fields */
N#define MTB_DEVICETYPID_DEVICETYPID_MASK         0xFFFFFFFFu
N#define MTB_DEVICETYPID_DEVICETYPID_SHIFT        0
N#define MTB_DEVICETYPID_DEVICETYPID_WIDTH        32
N#define MTB_DEVICETYPID_DEVICETYPID(x)           (((uint32_t)(((uint32_t)(x))<<MTB_DEVICETYPID_DEVICETYPID_SHIFT))&MTB_DEVICETYPID_DEVICETYPID_MASK)
N/* PERIPHID Bit Fields */
N#define MTB_PERIPHID_PERIPHID_MASK               0xFFFFFFFFu
N#define MTB_PERIPHID_PERIPHID_SHIFT              0
N#define MTB_PERIPHID_PERIPHID_WIDTH              32
N#define MTB_PERIPHID_PERIPHID(x)                 (((uint32_t)(((uint32_t)(x))<<MTB_PERIPHID_PERIPHID_SHIFT))&MTB_PERIPHID_PERIPHID_MASK)
N/* COMPID Bit Fields */
N#define MTB_COMPID_COMPID_MASK                   0xFFFFFFFFu
N#define MTB_COMPID_COMPID_SHIFT                  0
N#define MTB_COMPID_COMPID_WIDTH                  32
N#define MTB_COMPID_COMPID(x)                     (((uint32_t)(((uint32_t)(x))<<MTB_COMPID_COMPID_SHIFT))&MTB_COMPID_COMPID_MASK)
N
N/*!
N * @}
N */ /* end of group MTB_Register_Masks */
N
N
N/* MTB - Peripheral instance base addresses */
N/** Peripheral MTB base address */
N#define MTB_BASE                                 (0xF0000000u)
N/** Peripheral MTB base pointer */
N#define MTB                                      ((MTB_Type *)MTB_BASE)
N#define MTB_BASE_PTR                             (MTB)
N/** Array initializer of MTB peripheral base addresses */
N#define MTB_BASE_ADDRS                           { MTB_BASE }
N/** Array initializer of MTB peripheral base pointers */
N#define MTB_BASE_PTRS                            { MTB }
N
N/* ----------------------------------------------------------------------------
N   -- MTB - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup MTB_Register_Accessor_Macros MTB - Register accessor macros
N * @{
N */
N
N
N/* MTB - Register instance definitions */
N/* MTB */
N#define MTB_POSITION                             MTB_POSITION_REG(MTB)
N#define MTB_MASTER                               MTB_MASTER_REG(MTB)
N#define MTB_FLOW                                 MTB_FLOW_REG(MTB)
N#define MTB_BASEr                                MTB_BASE_REG(MTB)
N#define MTB_MODECTRL                             MTB_MODECTRL_REG(MTB)
N#define MTB_TAGSET                               MTB_TAGSET_REG(MTB)
N#define MTB_TAGCLEAR                             MTB_TAGCLEAR_REG(MTB)
N#define MTB_LOCKACCESS                           MTB_LOCKACCESS_REG(MTB)
N#define MTB_LOCKSTAT                             MTB_LOCKSTAT_REG(MTB)
N#define MTB_AUTHSTAT                             MTB_AUTHSTAT_REG(MTB)
N#define MTB_DEVICEARCH                           MTB_DEVICEARCH_REG(MTB)
N#define MTB_DEVICECFG                            MTB_DEVICECFG_REG(MTB)
N#define MTB_DEVICETYPID                          MTB_DEVICETYPID_REG(MTB)
N#define MTB_PERIPHID4                            MTB_PERIPHID_REG(MTB,0)
N#define MTB_PERIPHID5                            MTB_PERIPHID_REG(MTB,1)
N#define MTB_PERIPHID6                            MTB_PERIPHID_REG(MTB,2)
N#define MTB_PERIPHID7                            MTB_PERIPHID_REG(MTB,3)
N#define MTB_PERIPHID0                            MTB_PERIPHID_REG(MTB,4)
N#define MTB_PERIPHID1                            MTB_PERIPHID_REG(MTB,5)
N#define MTB_PERIPHID2                            MTB_PERIPHID_REG(MTB,6)
N#define MTB_PERIPHID3                            MTB_PERIPHID_REG(MTB,7)
N#define MTB_COMPID0                              MTB_COMPID_REG(MTB,0)
N#define MTB_COMPID1                              MTB_COMPID_REG(MTB,1)
N#define MTB_COMPID2                              MTB_COMPID_REG(MTB,2)
N#define MTB_COMPID3                              MTB_COMPID_REG(MTB,3)
N
N/* MTB - Register array accessors */
N#define MTB_PERIPHID(index)                      MTB_PERIPHID_REG(MTB,index)
N#define MTB_COMPID(index)                        MTB_COMPID_REG(MTB,index)
N
N/*!
N * @}
N */ /* end of group MTB_Register_Accessor_Macros */
N
N
N/*!
N * @}
N */ /* end of group MTB_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- MTBDWT Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup MTBDWT_Peripheral_Access_Layer MTBDWT Peripheral Access Layer
N * @{
N */
N
N/** MTBDWT - Register Layout Typedef */
Ntypedef struct {
N  __I  uint32_t CTRL;                              /**< MTB DWT Control Register, offset: 0x0 */
X  volatile const  uint32_t CTRL;                               
N       uint8_t RESERVED_0[28];
N  struct {                                         /* offset: 0x20, array step: 0x10 */
N    __IO uint32_t COMP;                              /**< MTB_DWT Comparator Register, array offset: 0x20, array step: 0x10 */
X    volatile uint32_t COMP;                               
N    __IO uint32_t MASK;                              /**< MTB_DWT Comparator Mask Register, array offset: 0x24, array step: 0x10 */
X    volatile uint32_t MASK;                               
N    __IO uint32_t FCT;                               /**< MTB_DWT Comparator Function Register 0..MTB_DWT Comparator Function Register 1, array offset: 0x28, array step: 0x10 */
X    volatile uint32_t FCT;                                
N         uint8_t RESERVED_0[4];
N  } COMPARATOR[2];
N       uint8_t RESERVED_1[448];
N  __IO uint32_t TBCTRL;                            /**< MTB_DWT Trace Buffer Control Register, offset: 0x200 */
X  volatile uint32_t TBCTRL;                             
N       uint8_t RESERVED_2[3524];
N  __I  uint32_t DEVICECFG;                         /**< Device Configuration Register, offset: 0xFC8 */
X  volatile const  uint32_t DEVICECFG;                          
N  __I  uint32_t DEVICETYPID;                       /**< Device Type Identifier Register, offset: 0xFCC */
X  volatile const  uint32_t DEVICETYPID;                        
N  __I  uint32_t PERIPHID[8];                       /**< Peripheral ID Register, array offset: 0xFD0, array step: 0x4 */
X  volatile const  uint32_t PERIPHID[8];                        
N  __I  uint32_t COMPID[4];                         /**< Component ID Register, array offset: 0xFF0, array step: 0x4 */
X  volatile const  uint32_t COMPID[4];                          
N} MTBDWT_Type, *MTBDWT_MemMapPtr;
N
N/* ----------------------------------------------------------------------------
N   -- MTBDWT - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup MTBDWT_Register_Accessor_Macros MTBDWT - Register accessor macros
N * @{
N */
N
N
N/* MTBDWT - Register accessors */
N#define MTBDWT_CTRL_REG(base)                    ((base)->CTRL)
N#define MTBDWT_COMP_REG(base,index)              ((base)->COMPARATOR[index].COMP)
N#define MTBDWT_COMP_COUNT                        2
N#define MTBDWT_MASK_REG(base,index)              ((base)->COMPARATOR[index].MASK)
N#define MTBDWT_MASK_COUNT                        2
N#define MTBDWT_FCT_REG(base,index)               ((base)->COMPARATOR[index].FCT)
N#define MTBDWT_FCT_COUNT                         2
N#define MTBDWT_TBCTRL_REG(base)                  ((base)->TBCTRL)
N#define MTBDWT_DEVICECFG_REG(base)               ((base)->DEVICECFG)
N#define MTBDWT_DEVICETYPID_REG(base)             ((base)->DEVICETYPID)
N#define MTBDWT_PERIPHID_REG(base,index)          ((base)->PERIPHID[index])
N#define MTBDWT_PERIPHID_COUNT                    8
N#define MTBDWT_COMPID_REG(base,index)            ((base)->COMPID[index])
N#define MTBDWT_COMPID_COUNT                      4
N
N/*!
N * @}
N */ /* end of group MTBDWT_Register_Accessor_Macros */
N
N
N/* ----------------------------------------------------------------------------
N   -- MTBDWT Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup MTBDWT_Register_Masks MTBDWT Register Masks
N * @{
N */
N
N/* CTRL Bit Fields */
N#define MTBDWT_CTRL_DWTCFGCTRL_MASK              0xFFFFFFFu
N#define MTBDWT_CTRL_DWTCFGCTRL_SHIFT             0
N#define MTBDWT_CTRL_DWTCFGCTRL_WIDTH             28
N#define MTBDWT_CTRL_DWTCFGCTRL(x)                (((uint32_t)(((uint32_t)(x))<<MTBDWT_CTRL_DWTCFGCTRL_SHIFT))&MTBDWT_CTRL_DWTCFGCTRL_MASK)
N#define MTBDWT_CTRL_NUMCMP_MASK                  0xF0000000u
N#define MTBDWT_CTRL_NUMCMP_SHIFT                 28
N#define MTBDWT_CTRL_NUMCMP_WIDTH                 4
N#define MTBDWT_CTRL_NUMCMP(x)                    (((uint32_t)(((uint32_t)(x))<<MTBDWT_CTRL_NUMCMP_SHIFT))&MTBDWT_CTRL_NUMCMP_MASK)
N/* COMP Bit Fields */
N#define MTBDWT_COMP_COMP_MASK                    0xFFFFFFFFu
N#define MTBDWT_COMP_COMP_SHIFT                   0
N#define MTBDWT_COMP_COMP_WIDTH                   32
N#define MTBDWT_COMP_COMP(x)                      (((uint32_t)(((uint32_t)(x))<<MTBDWT_COMP_COMP_SHIFT))&MTBDWT_COMP_COMP_MASK)
N/* MASK Bit Fields */
N#define MTBDWT_MASK_MASK_MASK                    0x1Fu
N#define MTBDWT_MASK_MASK_SHIFT                   0
N#define MTBDWT_MASK_MASK_WIDTH                   5
N#define MTBDWT_MASK_MASK(x)                      (((uint32_t)(((uint32_t)(x))<<MTBDWT_MASK_MASK_SHIFT))&MTBDWT_MASK_MASK_MASK)
N/* FCT Bit Fields */
N#define MTBDWT_FCT_FUNCTION_MASK                 0xFu
N#define MTBDWT_FCT_FUNCTION_SHIFT                0
N#define MTBDWT_FCT_FUNCTION_WIDTH                4
N#define MTBDWT_FCT_FUNCTION(x)                   (((uint32_t)(((uint32_t)(x))<<MTBDWT_FCT_FUNCTION_SHIFT))&MTBDWT_FCT_FUNCTION_MASK)
N#define MTBDWT_FCT_DATAVMATCH_MASK               0x100u
N#define MTBDWT_FCT_DATAVMATCH_SHIFT              8
N#define MTBDWT_FCT_DATAVMATCH_WIDTH              1
N#define MTBDWT_FCT_DATAVMATCH(x)                 (((uint32_t)(((uint32_t)(x))<<MTBDWT_FCT_DATAVMATCH_SHIFT))&MTBDWT_FCT_DATAVMATCH_MASK)
N#define MTBDWT_FCT_DATAVSIZE_MASK                0xC00u
N#define MTBDWT_FCT_DATAVSIZE_SHIFT               10
N#define MTBDWT_FCT_DATAVSIZE_WIDTH               2
N#define MTBDWT_FCT_DATAVSIZE(x)                  (((uint32_t)(((uint32_t)(x))<<MTBDWT_FCT_DATAVSIZE_SHIFT))&MTBDWT_FCT_DATAVSIZE_MASK)
N#define MTBDWT_FCT_DATAVADDR0_MASK               0xF000u
N#define MTBDWT_FCT_DATAVADDR0_SHIFT              12
N#define MTBDWT_FCT_DATAVADDR0_WIDTH              4
N#define MTBDWT_FCT_DATAVADDR0(x)                 (((uint32_t)(((uint32_t)(x))<<MTBDWT_FCT_DATAVADDR0_SHIFT))&MTBDWT_FCT_DATAVADDR0_MASK)
N#define MTBDWT_FCT_MATCHED_MASK                  0x1000000u
N#define MTBDWT_FCT_MATCHED_SHIFT                 24
N#define MTBDWT_FCT_MATCHED_WIDTH                 1
N#define MTBDWT_FCT_MATCHED(x)                    (((uint32_t)(((uint32_t)(x))<<MTBDWT_FCT_MATCHED_SHIFT))&MTBDWT_FCT_MATCHED_MASK)
N/* TBCTRL Bit Fields */
N#define MTBDWT_TBCTRL_ACOMP0_MASK                0x1u
N#define MTBDWT_TBCTRL_ACOMP0_SHIFT               0
N#define MTBDWT_TBCTRL_ACOMP0_WIDTH               1
N#define MTBDWT_TBCTRL_ACOMP0(x)                  (((uint32_t)(((uint32_t)(x))<<MTBDWT_TBCTRL_ACOMP0_SHIFT))&MTBDWT_TBCTRL_ACOMP0_MASK)
N#define MTBDWT_TBCTRL_ACOMP1_MASK                0x2u
N#define MTBDWT_TBCTRL_ACOMP1_SHIFT               1
N#define MTBDWT_TBCTRL_ACOMP1_WIDTH               1
N#define MTBDWT_TBCTRL_ACOMP1(x)                  (((uint32_t)(((uint32_t)(x))<<MTBDWT_TBCTRL_ACOMP1_SHIFT))&MTBDWT_TBCTRL_ACOMP1_MASK)
N#define MTBDWT_TBCTRL_NUMCOMP_MASK               0xF0000000u
N#define MTBDWT_TBCTRL_NUMCOMP_SHIFT              28
N#define MTBDWT_TBCTRL_NUMCOMP_WIDTH              4
N#define MTBDWT_TBCTRL_NUMCOMP(x)                 (((uint32_t)(((uint32_t)(x))<<MTBDWT_TBCTRL_NUMCOMP_SHIFT))&MTBDWT_TBCTRL_NUMCOMP_MASK)
N/* DEVICECFG Bit Fields */
N#define MTBDWT_DEVICECFG_DEVICECFG_MASK          0xFFFFFFFFu
N#define MTBDWT_DEVICECFG_DEVICECFG_SHIFT         0
N#define MTBDWT_DEVICECFG_DEVICECFG_WIDTH         32
N#define MTBDWT_DEVICECFG_DEVICECFG(x)            (((uint32_t)(((uint32_t)(x))<<MTBDWT_DEVICECFG_DEVICECFG_SHIFT))&MTBDWT_DEVICECFG_DEVICECFG_MASK)
N/* DEVICETYPID Bit Fields */
N#define MTBDWT_DEVICETYPID_DEVICETYPID_MASK      0xFFFFFFFFu
N#define MTBDWT_DEVICETYPID_DEVICETYPID_SHIFT     0
N#define MTBDWT_DEVICETYPID_DEVICETYPID_WIDTH     32
N#define MTBDWT_DEVICETYPID_DEVICETYPID(x)        (((uint32_t)(((uint32_t)(x))<<MTBDWT_DEVICETYPID_DEVICETYPID_SHIFT))&MTBDWT_DEVICETYPID_DEVICETYPID_MASK)
N/* PERIPHID Bit Fields */
N#define MTBDWT_PERIPHID_PERIPHID_MASK            0xFFFFFFFFu
N#define MTBDWT_PERIPHID_PERIPHID_SHIFT           0
N#define MTBDWT_PERIPHID_PERIPHID_WIDTH           32
N#define MTBDWT_PERIPHID_PERIPHID(x)              (((uint32_t)(((uint32_t)(x))<<MTBDWT_PERIPHID_PERIPHID_SHIFT))&MTBDWT_PERIPHID_PERIPHID_MASK)
N/* COMPID Bit Fields */
N#define MTBDWT_COMPID_COMPID_MASK                0xFFFFFFFFu
N#define MTBDWT_COMPID_COMPID_SHIFT               0
N#define MTBDWT_COMPID_COMPID_WIDTH               32
N#define MTBDWT_COMPID_COMPID(x)                  (((uint32_t)(((uint32_t)(x))<<MTBDWT_COMPID_COMPID_SHIFT))&MTBDWT_COMPID_COMPID_MASK)
N
N/*!
N * @}
N */ /* end of group MTBDWT_Register_Masks */
N
N
N/* MTBDWT - Peripheral instance base addresses */
N/** Peripheral MTBDWT base address */
N#define MTBDWT_BASE                              (0xF0001000u)
N/** Peripheral MTBDWT base pointer */
N#define MTBDWT                                   ((MTBDWT_Type *)MTBDWT_BASE)
N#define MTBDWT_BASE_PTR                          (MTBDWT)
N/** Array initializer of MTBDWT peripheral base addresses */
N#define MTBDWT_BASE_ADDRS                        { MTBDWT_BASE }
N/** Array initializer of MTBDWT peripheral base pointers */
N#define MTBDWT_BASE_PTRS                         { MTBDWT }
N
N/* ----------------------------------------------------------------------------
N   -- MTBDWT - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup MTBDWT_Register_Accessor_Macros MTBDWT - Register accessor macros
N * @{
N */
N
N
N/* MTBDWT - Register instance definitions */
N/* MTBDWT */
N#define MTBDWT_CTRL                              MTBDWT_CTRL_REG(MTBDWT)
N#define MTBDWT_COMP0                             MTBDWT_COMP_REG(MTBDWT,0)
N#define MTBDWT_MASK0                             MTBDWT_MASK_REG(MTBDWT,0)
N#define MTBDWT_FCT0                              MTBDWT_FCT_REG(MTBDWT,0)
N#define MTBDWT_COMP1                             MTBDWT_COMP_REG(MTBDWT,1)
N#define MTBDWT_MASK1                             MTBDWT_MASK_REG(MTBDWT,1)
N#define MTBDWT_FCT1                              MTBDWT_FCT_REG(MTBDWT,1)
N#define MTBDWT_TBCTRL                            MTBDWT_TBCTRL_REG(MTBDWT)
N#define MTBDWT_DEVICECFG                         MTBDWT_DEVICECFG_REG(MTBDWT)
N#define MTBDWT_DEVICETYPID                       MTBDWT_DEVICETYPID_REG(MTBDWT)
N#define MTBDWT_PERIPHID4                         MTBDWT_PERIPHID_REG(MTBDWT,0)
N#define MTBDWT_PERIPHID5                         MTBDWT_PERIPHID_REG(MTBDWT,1)
N#define MTBDWT_PERIPHID6                         MTBDWT_PERIPHID_REG(MTBDWT,2)
N#define MTBDWT_PERIPHID7                         MTBDWT_PERIPHID_REG(MTBDWT,3)
N#define MTBDWT_PERIPHID0                         MTBDWT_PERIPHID_REG(MTBDWT,4)
N#define MTBDWT_PERIPHID1                         MTBDWT_PERIPHID_REG(MTBDWT,5)
N#define MTBDWT_PERIPHID2                         MTBDWT_PERIPHID_REG(MTBDWT,6)
N#define MTBDWT_PERIPHID3                         MTBDWT_PERIPHID_REG(MTBDWT,7)
N#define MTBDWT_COMPID0                           MTBDWT_COMPID_REG(MTBDWT,0)
N#define MTBDWT_COMPID1                           MTBDWT_COMPID_REG(MTBDWT,1)
N#define MTBDWT_COMPID2                           MTBDWT_COMPID_REG(MTBDWT,2)
N#define MTBDWT_COMPID3                           MTBDWT_COMPID_REG(MTBDWT,3)
N
N/* MTBDWT - Register array accessors */
N#define MTBDWT_COMP(index)                       MTBDWT_COMP_REG(MTBDWT,index)
N#define MTBDWT_MASK(index)                       MTBDWT_MASK_REG(MTBDWT,index)
N#define MTBDWT_FCT(index)                        MTBDWT_FCT_REG(MTBDWT,index)
N#define MTBDWT_PERIPHID(index)                   MTBDWT_PERIPHID_REG(MTBDWT,index)
N#define MTBDWT_COMPID(index)                     MTBDWT_COMPID_REG(MTBDWT,index)
N
N/*!
N * @}
N */ /* end of group MTBDWT_Register_Accessor_Macros */
N
N
N/*!
N * @}
N */ /* end of group MTBDWT_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- NV Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup NV_Peripheral_Access_Layer NV Peripheral Access Layer
N * @{
N */
N
N/** NV - Register Layout Typedef */
Ntypedef struct {
N  __I  uint8_t BACKKEY3;                           /**< Backdoor Comparison Key 3., offset: 0x0 */
X  volatile const  uint8_t BACKKEY3;                            
N  __I  uint8_t BACKKEY2;                           /**< Backdoor Comparison Key 2., offset: 0x1 */
X  volatile const  uint8_t BACKKEY2;                            
N  __I  uint8_t BACKKEY1;                           /**< Backdoor Comparison Key 1., offset: 0x2 */
X  volatile const  uint8_t BACKKEY1;                            
N  __I  uint8_t BACKKEY0;                           /**< Backdoor Comparison Key 0., offset: 0x3 */
X  volatile const  uint8_t BACKKEY0;                            
N  __I  uint8_t BACKKEY7;                           /**< Backdoor Comparison Key 7., offset: 0x4 */
X  volatile const  uint8_t BACKKEY7;                            
N  __I  uint8_t BACKKEY6;                           /**< Backdoor Comparison Key 6., offset: 0x5 */
X  volatile const  uint8_t BACKKEY6;                            
N  __I  uint8_t BACKKEY5;                           /**< Backdoor Comparison Key 5., offset: 0x6 */
X  volatile const  uint8_t BACKKEY5;                            
N  __I  uint8_t BACKKEY4;                           /**< Backdoor Comparison Key 4., offset: 0x7 */
X  volatile const  uint8_t BACKKEY4;                            
N  __I  uint8_t FPROT3;                             /**< Non-volatile P-Flash Protection 1 - Low Register, offset: 0x8 */
X  volatile const  uint8_t FPROT3;                              
N  __I  uint8_t FPROT2;                             /**< Non-volatile P-Flash Protection 1 - High Register, offset: 0x9 */
X  volatile const  uint8_t FPROT2;                              
N  __I  uint8_t FPROT1;                             /**< Non-volatile P-Flash Protection 0 - Low Register, offset: 0xA */
X  volatile const  uint8_t FPROT1;                              
N  __I  uint8_t FPROT0;                             /**< Non-volatile P-Flash Protection 0 - High Register, offset: 0xB */
X  volatile const  uint8_t FPROT0;                              
N  __I  uint8_t FSEC;                               /**< Non-volatile Flash Security Register, offset: 0xC */
X  volatile const  uint8_t FSEC;                                
N  __I  uint8_t FOPT;                               /**< Non-volatile Flash Option Register, offset: 0xD */
X  volatile const  uint8_t FOPT;                                
N} NV_Type, *NV_MemMapPtr;
N
N/* ----------------------------------------------------------------------------
N   -- NV - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup NV_Register_Accessor_Macros NV - Register accessor macros
N * @{
N */
N
N
N/* NV - Register accessors */
N#define NV_BACKKEY3_REG(base)                    ((base)->BACKKEY3)
N#define NV_BACKKEY2_REG(base)                    ((base)->BACKKEY2)
N#define NV_BACKKEY1_REG(base)                    ((base)->BACKKEY1)
N#define NV_BACKKEY0_REG(base)                    ((base)->BACKKEY0)
N#define NV_BACKKEY7_REG(base)                    ((base)->BACKKEY7)
N#define NV_BACKKEY6_REG(base)                    ((base)->BACKKEY6)
N#define NV_BACKKEY5_REG(base)                    ((base)->BACKKEY5)
N#define NV_BACKKEY4_REG(base)                    ((base)->BACKKEY4)
N#define NV_FPROT3_REG(base)                      ((base)->FPROT3)
N#define NV_FPROT2_REG(base)                      ((base)->FPROT2)
N#define NV_FPROT1_REG(base)                      ((base)->FPROT1)
N#define NV_FPROT0_REG(base)                      ((base)->FPROT0)
N#define NV_FSEC_REG(base)                        ((base)->FSEC)
N#define NV_FOPT_REG(base)                        ((base)->FOPT)
N
N/*!
N * @}
N */ /* end of group NV_Register_Accessor_Macros */
N
N
N/* ----------------------------------------------------------------------------
N   -- NV Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup NV_Register_Masks NV Register Masks
N * @{
N */
N
N/* BACKKEY3 Bit Fields */
N#define NV_BACKKEY3_KEY_MASK                     0xFFu
N#define NV_BACKKEY3_KEY_SHIFT                    0
N#define NV_BACKKEY3_KEY_WIDTH                    8
N#define NV_BACKKEY3_KEY(x)                       (((uint8_t)(((uint8_t)(x))<<NV_BACKKEY3_KEY_SHIFT))&NV_BACKKEY3_KEY_MASK)
N/* BACKKEY2 Bit Fields */
N#define NV_BACKKEY2_KEY_MASK                     0xFFu
N#define NV_BACKKEY2_KEY_SHIFT                    0
N#define NV_BACKKEY2_KEY_WIDTH                    8
N#define NV_BACKKEY2_KEY(x)                       (((uint8_t)(((uint8_t)(x))<<NV_BACKKEY2_KEY_SHIFT))&NV_BACKKEY2_KEY_MASK)
N/* BACKKEY1 Bit Fields */
N#define NV_BACKKEY1_KEY_MASK                     0xFFu
N#define NV_BACKKEY1_KEY_SHIFT                    0
N#define NV_BACKKEY1_KEY_WIDTH                    8
N#define NV_BACKKEY1_KEY(x)                       (((uint8_t)(((uint8_t)(x))<<NV_BACKKEY1_KEY_SHIFT))&NV_BACKKEY1_KEY_MASK)
N/* BACKKEY0 Bit Fields */
N#define NV_BACKKEY0_KEY_MASK                     0xFFu
N#define NV_BACKKEY0_KEY_SHIFT                    0
N#define NV_BACKKEY0_KEY_WIDTH                    8
N#define NV_BACKKEY0_KEY(x)                       (((uint8_t)(((uint8_t)(x))<<NV_BACKKEY0_KEY_SHIFT))&NV_BACKKEY0_KEY_MASK)
N/* BACKKEY7 Bit Fields */
N#define NV_BACKKEY7_KEY_MASK                     0xFFu
N#define NV_BACKKEY7_KEY_SHIFT                    0
N#define NV_BACKKEY7_KEY_WIDTH                    8
N#define NV_BACKKEY7_KEY(x)                       (((uint8_t)(((uint8_t)(x))<<NV_BACKKEY7_KEY_SHIFT))&NV_BACKKEY7_KEY_MASK)
N/* BACKKEY6 Bit Fields */
N#define NV_BACKKEY6_KEY_MASK                     0xFFu
N#define NV_BACKKEY6_KEY_SHIFT                    0
N#define NV_BACKKEY6_KEY_WIDTH                    8
N#define NV_BACKKEY6_KEY(x)                       (((uint8_t)(((uint8_t)(x))<<NV_BACKKEY6_KEY_SHIFT))&NV_BACKKEY6_KEY_MASK)
N/* BACKKEY5 Bit Fields */
N#define NV_BACKKEY5_KEY_MASK                     0xFFu
N#define NV_BACKKEY5_KEY_SHIFT                    0
N#define NV_BACKKEY5_KEY_WIDTH                    8
N#define NV_BACKKEY5_KEY(x)                       (((uint8_t)(((uint8_t)(x))<<NV_BACKKEY5_KEY_SHIFT))&NV_BACKKEY5_KEY_MASK)
N/* BACKKEY4 Bit Fields */
N#define NV_BACKKEY4_KEY_MASK                     0xFFu
N#define NV_BACKKEY4_KEY_SHIFT                    0
N#define NV_BACKKEY4_KEY_WIDTH                    8
N#define NV_BACKKEY4_KEY(x)                       (((uint8_t)(((uint8_t)(x))<<NV_BACKKEY4_KEY_SHIFT))&NV_BACKKEY4_KEY_MASK)
N/* FPROT3 Bit Fields */
N#define NV_FPROT3_PROT_MASK                      0xFFu
N#define NV_FPROT3_PROT_SHIFT                     0
N#define NV_FPROT3_PROT_WIDTH                     8
N#define NV_FPROT3_PROT(x)                        (((uint8_t)(((uint8_t)(x))<<NV_FPROT3_PROT_SHIFT))&NV_FPROT3_PROT_MASK)
N/* FPROT2 Bit Fields */
N#define NV_FPROT2_PROT_MASK                      0xFFu
N#define NV_FPROT2_PROT_SHIFT                     0
N#define NV_FPROT2_PROT_WIDTH                     8
N#define NV_FPROT2_PROT(x)                        (((uint8_t)(((uint8_t)(x))<<NV_FPROT2_PROT_SHIFT))&NV_FPROT2_PROT_MASK)
N/* FPROT1 Bit Fields */
N#define NV_FPROT1_PROT_MASK                      0xFFu
N#define NV_FPROT1_PROT_SHIFT                     0
N#define NV_FPROT1_PROT_WIDTH                     8
N#define NV_FPROT1_PROT(x)                        (((uint8_t)(((uint8_t)(x))<<NV_FPROT1_PROT_SHIFT))&NV_FPROT1_PROT_MASK)
N/* FPROT0 Bit Fields */
N#define NV_FPROT0_PROT_MASK                      0xFFu
N#define NV_FPROT0_PROT_SHIFT                     0
N#define NV_FPROT0_PROT_WIDTH                     8
N#define NV_FPROT0_PROT(x)                        (((uint8_t)(((uint8_t)(x))<<NV_FPROT0_PROT_SHIFT))&NV_FPROT0_PROT_MASK)
N/* FSEC Bit Fields */
N#define NV_FSEC_SEC_MASK                         0x3u
N#define NV_FSEC_SEC_SHIFT                        0
N#define NV_FSEC_SEC_WIDTH                        2
N#define NV_FSEC_SEC(x)                           (((uint8_t)(((uint8_t)(x))<<NV_FSEC_SEC_SHIFT))&NV_FSEC_SEC_MASK)
N#define NV_FSEC_FSLACC_MASK                      0xCu
N#define NV_FSEC_FSLACC_SHIFT                     2
N#define NV_FSEC_FSLACC_WIDTH                     2
N#define NV_FSEC_FSLACC(x)                        (((uint8_t)(((uint8_t)(x))<<NV_FSEC_FSLACC_SHIFT))&NV_FSEC_FSLACC_MASK)
N#define NV_FSEC_MEEN_MASK                        0x30u
N#define NV_FSEC_MEEN_SHIFT                       4
N#define NV_FSEC_MEEN_WIDTH                       2
N#define NV_FSEC_MEEN(x)                          (((uint8_t)(((uint8_t)(x))<<NV_FSEC_MEEN_SHIFT))&NV_FSEC_MEEN_MASK)
N#define NV_FSEC_KEYEN_MASK                       0xC0u
N#define NV_FSEC_KEYEN_SHIFT                      6
N#define NV_FSEC_KEYEN_WIDTH                      2
N#define NV_FSEC_KEYEN(x)                         (((uint8_t)(((uint8_t)(x))<<NV_FSEC_KEYEN_SHIFT))&NV_FSEC_KEYEN_MASK)
N/* FOPT Bit Fields */
N#define NV_FOPT_LPBOOT0_MASK                     0x1u
N#define NV_FOPT_LPBOOT0_SHIFT                    0
N#define NV_FOPT_LPBOOT0_WIDTH                    1
N#define NV_FOPT_LPBOOT0(x)                       (((uint8_t)(((uint8_t)(x))<<NV_FOPT_LPBOOT0_SHIFT))&NV_FOPT_LPBOOT0_MASK)
N#define NV_FOPT_NMI_DIS_MASK                     0x4u
N#define NV_FOPT_NMI_DIS_SHIFT                    2
N#define NV_FOPT_NMI_DIS_WIDTH                    1
N#define NV_FOPT_NMI_DIS(x)                       (((uint8_t)(((uint8_t)(x))<<NV_FOPT_NMI_DIS_SHIFT))&NV_FOPT_NMI_DIS_MASK)
N#define NV_FOPT_RESET_PIN_CFG_MASK               0x8u
N#define NV_FOPT_RESET_PIN_CFG_SHIFT              3
N#define NV_FOPT_RESET_PIN_CFG_WIDTH              1
N#define NV_FOPT_RESET_PIN_CFG(x)                 (((uint8_t)(((uint8_t)(x))<<NV_FOPT_RESET_PIN_CFG_SHIFT))&NV_FOPT_RESET_PIN_CFG_MASK)
N#define NV_FOPT_LPBOOT1_MASK                     0x10u
N#define NV_FOPT_LPBOOT1_SHIFT                    4
N#define NV_FOPT_LPBOOT1_WIDTH                    1
N#define NV_FOPT_LPBOOT1(x)                       (((uint8_t)(((uint8_t)(x))<<NV_FOPT_LPBOOT1_SHIFT))&NV_FOPT_LPBOOT1_MASK)
N#define NV_FOPT_FAST_INIT_MASK                   0x20u
N#define NV_FOPT_FAST_INIT_SHIFT                  5
N#define NV_FOPT_FAST_INIT_WIDTH                  1
N#define NV_FOPT_FAST_INIT(x)                     (((uint8_t)(((uint8_t)(x))<<NV_FOPT_FAST_INIT_SHIFT))&NV_FOPT_FAST_INIT_MASK)
N
N/*!
N * @}
N */ /* end of group NV_Register_Masks */
N
N
N/* NV - Peripheral instance base addresses */
N/** Peripheral FTFA_FlashConfig base address */
N#define FTFA_FlashConfig_BASE                    (0x400u)
N/** Peripheral FTFA_FlashConfig base pointer */
N#define FTFA_FlashConfig                         ((NV_Type *)FTFA_FlashConfig_BASE)
N#define FTFA_FlashConfig_BASE_PTR                (FTFA_FlashConfig)
N/** Array initializer of NV peripheral base addresses */
N#define NV_BASE_ADDRS                            { FTFA_FlashConfig_BASE }
N/** Array initializer of NV peripheral base pointers */
N#define NV_BASE_PTRS                             { FTFA_FlashConfig }
N
N/* ----------------------------------------------------------------------------
N   -- NV - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup NV_Register_Accessor_Macros NV - Register accessor macros
N * @{
N */
N
N
N/* NV - Register instance definitions */
N/* FTFA_FlashConfig */
N#define NV_BACKKEY3                              NV_BACKKEY3_REG(FTFA_FlashConfig)
N#define NV_BACKKEY2                              NV_BACKKEY2_REG(FTFA_FlashConfig)
N#define NV_BACKKEY1                              NV_BACKKEY1_REG(FTFA_FlashConfig)
N#define NV_BACKKEY0                              NV_BACKKEY0_REG(FTFA_FlashConfig)
N#define NV_BACKKEY7                              NV_BACKKEY7_REG(FTFA_FlashConfig)
N#define NV_BACKKEY6                              NV_BACKKEY6_REG(FTFA_FlashConfig)
N#define NV_BACKKEY5                              NV_BACKKEY5_REG(FTFA_FlashConfig)
N#define NV_BACKKEY4                              NV_BACKKEY4_REG(FTFA_FlashConfig)
N#define NV_FPROT3                                NV_FPROT3_REG(FTFA_FlashConfig)
N#define NV_FPROT2                                NV_FPROT2_REG(FTFA_FlashConfig)
N#define NV_FPROT1                                NV_FPROT1_REG(FTFA_FlashConfig)
N#define NV_FPROT0                                NV_FPROT0_REG(FTFA_FlashConfig)
N#define NV_FSEC                                  NV_FSEC_REG(FTFA_FlashConfig)
N#define NV_FOPT                                  NV_FOPT_REG(FTFA_FlashConfig)
N
N/*!
N * @}
N */ /* end of group NV_Register_Accessor_Macros */
N
N
N/*!
N * @}
N */ /* end of group NV_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- OSC Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup OSC_Peripheral_Access_Layer OSC Peripheral Access Layer
N * @{
N */
N
N/** OSC - Register Layout Typedef */
Ntypedef struct {
N  __IO uint8_t CR;                                 /**< OSC Control Register, offset: 0x0 */
X  volatile uint8_t CR;                                  
N} OSC_Type, *OSC_MemMapPtr;
N
N/* ----------------------------------------------------------------------------
N   -- OSC - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup OSC_Register_Accessor_Macros OSC - Register accessor macros
N * @{
N */
N
N
N/* OSC - Register accessors */
N#define OSC_CR_REG(base)                         ((base)->CR)
N
N/*!
N * @}
N */ /* end of group OSC_Register_Accessor_Macros */
N
N
N/* ----------------------------------------------------------------------------
N   -- OSC Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup OSC_Register_Masks OSC Register Masks
N * @{
N */
N
N/* CR Bit Fields */
N#define OSC_CR_SC16P_MASK                        0x1u
N#define OSC_CR_SC16P_SHIFT                       0
N#define OSC_CR_SC16P_WIDTH                       1
N#define OSC_CR_SC16P(x)                          (((uint8_t)(((uint8_t)(x))<<OSC_CR_SC16P_SHIFT))&OSC_CR_SC16P_MASK)
N#define OSC_CR_SC8P_MASK                         0x2u
N#define OSC_CR_SC8P_SHIFT                        1
N#define OSC_CR_SC8P_WIDTH                        1
N#define OSC_CR_SC8P(x)                           (((uint8_t)(((uint8_t)(x))<<OSC_CR_SC8P_SHIFT))&OSC_CR_SC8P_MASK)
N#define OSC_CR_SC4P_MASK                         0x4u
N#define OSC_CR_SC4P_SHIFT                        2
N#define OSC_CR_SC4P_WIDTH                        1
N#define OSC_CR_SC4P(x)                           (((uint8_t)(((uint8_t)(x))<<OSC_CR_SC4P_SHIFT))&OSC_CR_SC4P_MASK)
N#define OSC_CR_SC2P_MASK                         0x8u
N#define OSC_CR_SC2P_SHIFT                        3
N#define OSC_CR_SC2P_WIDTH                        1
N#define OSC_CR_SC2P(x)                           (((uint8_t)(((uint8_t)(x))<<OSC_CR_SC2P_SHIFT))&OSC_CR_SC2P_MASK)
N#define OSC_CR_EREFSTEN_MASK                     0x20u
N#define OSC_CR_EREFSTEN_SHIFT                    5
N#define OSC_CR_EREFSTEN_WIDTH                    1
N#define OSC_CR_EREFSTEN(x)                       (((uint8_t)(((uint8_t)(x))<<OSC_CR_EREFSTEN_SHIFT))&OSC_CR_EREFSTEN_MASK)
N#define OSC_CR_ERCLKEN_MASK                      0x80u
N#define OSC_CR_ERCLKEN_SHIFT                     7
N#define OSC_CR_ERCLKEN_WIDTH                     1
N#define OSC_CR_ERCLKEN(x)                        (((uint8_t)(((uint8_t)(x))<<OSC_CR_ERCLKEN_SHIFT))&OSC_CR_ERCLKEN_MASK)
N
N/*!
N * @}
N */ /* end of group OSC_Register_Masks */
N
N
N/* OSC - Peripheral instance base addresses */
N/** Peripheral OSC0 base address */
N#define OSC0_BASE                                (0x40065000u)
N/** Peripheral OSC0 base pointer */
N#define OSC0                                     ((OSC_Type *)OSC0_BASE)
N#define OSC0_BASE_PTR                            (OSC0)
N/** Array initializer of OSC peripheral base addresses */
N#define OSC_BASE_ADDRS                           { OSC0_BASE }
N/** Array initializer of OSC peripheral base pointers */
N#define OSC_BASE_PTRS                            { OSC0 }
N
N/* ----------------------------------------------------------------------------
N   -- OSC - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup OSC_Register_Accessor_Macros OSC - Register accessor macros
N * @{
N */
N
N
N/* OSC - Register instance definitions */
N/* OSC0 */
N#define OSC0_CR                                  OSC_CR_REG(OSC0)
N
N/*!
N * @}
N */ /* end of group OSC_Register_Accessor_Macros */
N
N
N/*!
N * @}
N */ /* end of group OSC_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- PIT Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup PIT_Peripheral_Access_Layer PIT Peripheral Access Layer
N * @{
N */
N
N/** PIT - Register Layout Typedef */
Ntypedef struct {
N  __IO uint32_t MCR;                               /**< PIT Module Control Register, offset: 0x0 */
X  volatile uint32_t MCR;                                
N       uint8_t RESERVED_0[220];
N  __I  uint32_t LTMR64H;                           /**< PIT Upper Lifetime Timer Register, offset: 0xE0 */
X  volatile const  uint32_t LTMR64H;                            
N  __I  uint32_t LTMR64L;                           /**< PIT Lower Lifetime Timer Register, offset: 0xE4 */
X  volatile const  uint32_t LTMR64L;                            
N       uint8_t RESERVED_1[24];
N  struct {                                         /* offset: 0x100, array step: 0x10 */
N    __IO uint32_t LDVAL;                             /**< Timer Load Value Register, array offset: 0x100, array step: 0x10 */
X    volatile uint32_t LDVAL;                              
N    __I  uint32_t CVAL;                              /**< Current Timer Value Register, array offset: 0x104, array step: 0x10 */
X    volatile const  uint32_t CVAL;                               
N    __IO uint32_t TCTRL;                             /**< Timer Control Register, array offset: 0x108, array step: 0x10 */
X    volatile uint32_t TCTRL;                              
N    __IO uint32_t TFLG;                              /**< Timer Flag Register, array offset: 0x10C, array step: 0x10 */
X    volatile uint32_t TFLG;                               
N  } CHANNEL[2];
N} PIT_Type, *PIT_MemMapPtr;
N
N/* ----------------------------------------------------------------------------
N   -- PIT - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup PIT_Register_Accessor_Macros PIT - Register accessor macros
N * @{
N */
N
N
N/* PIT - Register accessors */
N#define PIT_MCR_REG(base)                        ((base)->MCR)
N#define PIT_LTMR64H_REG(base)                    ((base)->LTMR64H)
N#define PIT_LTMR64L_REG(base)                    ((base)->LTMR64L)
N#define PIT_LDVAL_REG(base,index)                ((base)->CHANNEL[index].LDVAL)
N#define PIT_LDVAL_COUNT                          2
N#define PIT_CVAL_REG(base,index)                 ((base)->CHANNEL[index].CVAL)
N#define PIT_CVAL_COUNT                           2
N#define PIT_TCTRL_REG(base,index)                ((base)->CHANNEL[index].TCTRL)
N#define PIT_TCTRL_COUNT                          2
N#define PIT_TFLG_REG(base,index)                 ((base)->CHANNEL[index].TFLG)
N#define PIT_TFLG_COUNT                           2
N
N/*!
N * @}
N */ /* end of group PIT_Register_Accessor_Macros */
N
N
N/* ----------------------------------------------------------------------------
N   -- PIT Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup PIT_Register_Masks PIT Register Masks
N * @{
N */
N
N/* MCR Bit Fields */
N#define PIT_MCR_FRZ_MASK                         0x1u
N#define PIT_MCR_FRZ_SHIFT                        0
N#define PIT_MCR_FRZ_WIDTH                        1
N#define PIT_MCR_FRZ(x)                           (((uint32_t)(((uint32_t)(x))<<PIT_MCR_FRZ_SHIFT))&PIT_MCR_FRZ_MASK)
N#define PIT_MCR_MDIS_MASK                        0x2u
N#define PIT_MCR_MDIS_SHIFT                       1
N#define PIT_MCR_MDIS_WIDTH                       1
N#define PIT_MCR_MDIS(x)                          (((uint32_t)(((uint32_t)(x))<<PIT_MCR_MDIS_SHIFT))&PIT_MCR_MDIS_MASK)
N/* LTMR64H Bit Fields */
N#define PIT_LTMR64H_LTH_MASK                     0xFFFFFFFFu
N#define PIT_LTMR64H_LTH_SHIFT                    0
N#define PIT_LTMR64H_LTH_WIDTH                    32
N#define PIT_LTMR64H_LTH(x)                       (((uint32_t)(((uint32_t)(x))<<PIT_LTMR64H_LTH_SHIFT))&PIT_LTMR64H_LTH_MASK)
N/* LTMR64L Bit Fields */
N#define PIT_LTMR64L_LTL_MASK                     0xFFFFFFFFu
N#define PIT_LTMR64L_LTL_SHIFT                    0
N#define PIT_LTMR64L_LTL_WIDTH                    32
N#define PIT_LTMR64L_LTL(x)                       (((uint32_t)(((uint32_t)(x))<<PIT_LTMR64L_LTL_SHIFT))&PIT_LTMR64L_LTL_MASK)
N/* LDVAL Bit Fields */
N#define PIT_LDVAL_TSV_MASK                       0xFFFFFFFFu
N#define PIT_LDVAL_TSV_SHIFT                      0
N#define PIT_LDVAL_TSV_WIDTH                      32
N#define PIT_LDVAL_TSV(x)                         (((uint32_t)(((uint32_t)(x))<<PIT_LDVAL_TSV_SHIFT))&PIT_LDVAL_TSV_MASK)
N/* CVAL Bit Fields */
N#define PIT_CVAL_TVL_MASK                        0xFFFFFFFFu
N#define PIT_CVAL_TVL_SHIFT                       0
N#define PIT_CVAL_TVL_WIDTH                       32
N#define PIT_CVAL_TVL(x)                          (((uint32_t)(((uint32_t)(x))<<PIT_CVAL_TVL_SHIFT))&PIT_CVAL_TVL_MASK)
N/* TCTRL Bit Fields */
N#define PIT_TCTRL_TEN_MASK                       0x1u
N#define PIT_TCTRL_TEN_SHIFT                      0
N#define PIT_TCTRL_TEN_WIDTH                      1
N#define PIT_TCTRL_TEN(x)                         (((uint32_t)(((uint32_t)(x))<<PIT_TCTRL_TEN_SHIFT))&PIT_TCTRL_TEN_MASK)
N#define PIT_TCTRL_TIE_MASK                       0x2u
N#define PIT_TCTRL_TIE_SHIFT                      1
N#define PIT_TCTRL_TIE_WIDTH                      1
N#define PIT_TCTRL_TIE(x)                         (((uint32_t)(((uint32_t)(x))<<PIT_TCTRL_TIE_SHIFT))&PIT_TCTRL_TIE_MASK)
N#define PIT_TCTRL_CHN_MASK                       0x4u
N#define PIT_TCTRL_CHN_SHIFT                      2
N#define PIT_TCTRL_CHN_WIDTH                      1
N#define PIT_TCTRL_CHN(x)                         (((uint32_t)(((uint32_t)(x))<<PIT_TCTRL_CHN_SHIFT))&PIT_TCTRL_CHN_MASK)
N/* TFLG Bit Fields */
N#define PIT_TFLG_TIF_MASK                        0x1u
N#define PIT_TFLG_TIF_SHIFT                       0
N#define PIT_TFLG_TIF_WIDTH                       1
N#define PIT_TFLG_TIF(x)                          (((uint32_t)(((uint32_t)(x))<<PIT_TFLG_TIF_SHIFT))&PIT_TFLG_TIF_MASK)
N
N/*!
N * @}
N */ /* end of group PIT_Register_Masks */
N
N
N/* PIT - Peripheral instance base addresses */
N/** Peripheral PIT base address */
N#define PIT_BASE                                 (0x40037000u)
N/** Peripheral PIT base pointer */
N#define PIT                                      ((PIT_Type *)PIT_BASE)
N#define PIT_BASE_PTR                             (PIT)
N/** Array initializer of PIT peripheral base addresses */
N#define PIT_BASE_ADDRS                           { PIT_BASE }
N/** Array initializer of PIT peripheral base pointers */
N#define PIT_BASE_PTRS                            { PIT }
N/** Interrupt vectors for the PIT peripheral type */
N#define PIT_IRQS                                 { PIT_IRQn, PIT_IRQn }
N
N/* ----------------------------------------------------------------------------
N   -- PIT - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup PIT_Register_Accessor_Macros PIT - Register accessor macros
N * @{
N */
N
N
N/* PIT - Register instance definitions */
N/* PIT */
N#define PIT_MCR                                  PIT_MCR_REG(PIT)
N#define PIT_LTMR64H                              PIT_LTMR64H_REG(PIT)
N#define PIT_LTMR64L                              PIT_LTMR64L_REG(PIT)
N#define PIT_LDVAL0                               PIT_LDVAL_REG(PIT,0)
N#define PIT_CVAL0                                PIT_CVAL_REG(PIT,0)
N#define PIT_TCTRL0                               PIT_TCTRL_REG(PIT,0)
N#define PIT_TFLG0                                PIT_TFLG_REG(PIT,0)
N#define PIT_LDVAL1                               PIT_LDVAL_REG(PIT,1)
N#define PIT_CVAL1                                PIT_CVAL_REG(PIT,1)
N#define PIT_TCTRL1                               PIT_TCTRL_REG(PIT,1)
N#define PIT_TFLG1                                PIT_TFLG_REG(PIT,1)
N
N/* PIT - Register array accessors */
N#define PIT_LDVAL(index)                         PIT_LDVAL_REG(PIT,index)
N#define PIT_CVAL(index)                          PIT_CVAL_REG(PIT,index)
N#define PIT_TCTRL(index)                         PIT_TCTRL_REG(PIT,index)
N#define PIT_TFLG(index)                          PIT_TFLG_REG(PIT,index)
N
N/*!
N * @}
N */ /* end of group PIT_Register_Accessor_Macros */
N
N
N/*!
N * @}
N */ /* end of group PIT_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- PMC Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup PMC_Peripheral_Access_Layer PMC Peripheral Access Layer
N * @{
N */
N
N/** PMC - Register Layout Typedef */
Ntypedef struct {
N  __IO uint8_t LVDSC1;                             /**< Low Voltage Detect Status And Control 1 register, offset: 0x0 */
X  volatile uint8_t LVDSC1;                              
N  __IO uint8_t LVDSC2;                             /**< Low Voltage Detect Status And Control 2 register, offset: 0x1 */
X  volatile uint8_t LVDSC2;                              
N  __IO uint8_t REGSC;                              /**< Regulator Status And Control register, offset: 0x2 */
X  volatile uint8_t REGSC;                               
N} PMC_Type, *PMC_MemMapPtr;
N
N/* ----------------------------------------------------------------------------
N   -- PMC - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup PMC_Register_Accessor_Macros PMC - Register accessor macros
N * @{
N */
N
N
N/* PMC - Register accessors */
N#define PMC_LVDSC1_REG(base)                     ((base)->LVDSC1)
N#define PMC_LVDSC2_REG(base)                     ((base)->LVDSC2)
N#define PMC_REGSC_REG(base)                      ((base)->REGSC)
N
N/*!
N * @}
N */ /* end of group PMC_Register_Accessor_Macros */
N
N
N/* ----------------------------------------------------------------------------
N   -- PMC Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup PMC_Register_Masks PMC Register Masks
N * @{
N */
N
N/* LVDSC1 Bit Fields */
N#define PMC_LVDSC1_LVDV_MASK                     0x3u
N#define PMC_LVDSC1_LVDV_SHIFT                    0
N#define PMC_LVDSC1_LVDV_WIDTH                    2
N#define PMC_LVDSC1_LVDV(x)                       (((uint8_t)(((uint8_t)(x))<<PMC_LVDSC1_LVDV_SHIFT))&PMC_LVDSC1_LVDV_MASK)
N#define PMC_LVDSC1_LVDRE_MASK                    0x10u
N#define PMC_LVDSC1_LVDRE_SHIFT                   4
N#define PMC_LVDSC1_LVDRE_WIDTH                   1
N#define PMC_LVDSC1_LVDRE(x)                      (((uint8_t)(((uint8_t)(x))<<PMC_LVDSC1_LVDRE_SHIFT))&PMC_LVDSC1_LVDRE_MASK)
N#define PMC_LVDSC1_LVDIE_MASK                    0x20u
N#define PMC_LVDSC1_LVDIE_SHIFT                   5
N#define PMC_LVDSC1_LVDIE_WIDTH                   1
N#define PMC_LVDSC1_LVDIE(x)                      (((uint8_t)(((uint8_t)(x))<<PMC_LVDSC1_LVDIE_SHIFT))&PMC_LVDSC1_LVDIE_MASK)
N#define PMC_LVDSC1_LVDACK_MASK                   0x40u
N#define PMC_LVDSC1_LVDACK_SHIFT                  6
N#define PMC_LVDSC1_LVDACK_WIDTH                  1
N#define PMC_LVDSC1_LVDACK(x)                     (((uint8_t)(((uint8_t)(x))<<PMC_LVDSC1_LVDACK_SHIFT))&PMC_LVDSC1_LVDACK_MASK)
N#define PMC_LVDSC1_LVDF_MASK                     0x80u
N#define PMC_LVDSC1_LVDF_SHIFT                    7
N#define PMC_LVDSC1_LVDF_WIDTH                    1
N#define PMC_LVDSC1_LVDF(x)                       (((uint8_t)(((uint8_t)(x))<<PMC_LVDSC1_LVDF_SHIFT))&PMC_LVDSC1_LVDF_MASK)
N/* LVDSC2 Bit Fields */
N#define PMC_LVDSC2_LVWV_MASK                     0x3u
N#define PMC_LVDSC2_LVWV_SHIFT                    0
N#define PMC_LVDSC2_LVWV_WIDTH                    2
N#define PMC_LVDSC2_LVWV(x)                       (((uint8_t)(((uint8_t)(x))<<PMC_LVDSC2_LVWV_SHIFT))&PMC_LVDSC2_LVWV_MASK)
N#define PMC_LVDSC2_LVWIE_MASK                    0x20u
N#define PMC_LVDSC2_LVWIE_SHIFT                   5
N#define PMC_LVDSC2_LVWIE_WIDTH                   1
N#define PMC_LVDSC2_LVWIE(x)                      (((uint8_t)(((uint8_t)(x))<<PMC_LVDSC2_LVWIE_SHIFT))&PMC_LVDSC2_LVWIE_MASK)
N#define PMC_LVDSC2_LVWACK_MASK                   0x40u
N#define PMC_LVDSC2_LVWACK_SHIFT                  6
N#define PMC_LVDSC2_LVWACK_WIDTH                  1
N#define PMC_LVDSC2_LVWACK(x)                     (((uint8_t)(((uint8_t)(x))<<PMC_LVDSC2_LVWACK_SHIFT))&PMC_LVDSC2_LVWACK_MASK)
N#define PMC_LVDSC2_LVWF_MASK                     0x80u
N#define PMC_LVDSC2_LVWF_SHIFT                    7
N#define PMC_LVDSC2_LVWF_WIDTH                    1
N#define PMC_LVDSC2_LVWF(x)                       (((uint8_t)(((uint8_t)(x))<<PMC_LVDSC2_LVWF_SHIFT))&PMC_LVDSC2_LVWF_MASK)
N/* REGSC Bit Fields */
N#define PMC_REGSC_BGBE_MASK                      0x1u
N#define PMC_REGSC_BGBE_SHIFT                     0
N#define PMC_REGSC_BGBE_WIDTH                     1
N#define PMC_REGSC_BGBE(x)                        (((uint8_t)(((uint8_t)(x))<<PMC_REGSC_BGBE_SHIFT))&PMC_REGSC_BGBE_MASK)
N#define PMC_REGSC_REGONS_MASK                    0x4u
N#define PMC_REGSC_REGONS_SHIFT                   2
N#define PMC_REGSC_REGONS_WIDTH                   1
N#define PMC_REGSC_REGONS(x)                      (((uint8_t)(((uint8_t)(x))<<PMC_REGSC_REGONS_SHIFT))&PMC_REGSC_REGONS_MASK)
N#define PMC_REGSC_ACKISO_MASK                    0x8u
N#define PMC_REGSC_ACKISO_SHIFT                   3
N#define PMC_REGSC_ACKISO_WIDTH                   1
N#define PMC_REGSC_ACKISO(x)                      (((uint8_t)(((uint8_t)(x))<<PMC_REGSC_ACKISO_SHIFT))&PMC_REGSC_ACKISO_MASK)
N#define PMC_REGSC_BGEN_MASK                      0x10u
N#define PMC_REGSC_BGEN_SHIFT                     4
N#define PMC_REGSC_BGEN_WIDTH                     1
N#define PMC_REGSC_BGEN(x)                        (((uint8_t)(((uint8_t)(x))<<PMC_REGSC_BGEN_SHIFT))&PMC_REGSC_BGEN_MASK)
N
N/*!
N * @}
N */ /* end of group PMC_Register_Masks */
N
N
N/* PMC - Peripheral instance base addresses */
N/** Peripheral PMC base address */
N#define PMC_BASE                                 (0x4007D000u)
N/** Peripheral PMC base pointer */
N#define PMC                                      ((PMC_Type *)PMC_BASE)
N#define PMC_BASE_PTR                             (PMC)
N/** Array initializer of PMC peripheral base addresses */
N#define PMC_BASE_ADDRS                           { PMC_BASE }
N/** Array initializer of PMC peripheral base pointers */
N#define PMC_BASE_PTRS                            { PMC }
N/** Interrupt vectors for the PMC peripheral type */
N#define PMC_IRQS                                 { LVD_LVW_IRQn }
N
N/* ----------------------------------------------------------------------------
N   -- PMC - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup PMC_Register_Accessor_Macros PMC - Register accessor macros
N * @{
N */
N
N
N/* PMC - Register instance definitions */
N/* PMC */
N#define PMC_LVDSC1                               PMC_LVDSC1_REG(PMC)
N#define PMC_LVDSC2                               PMC_LVDSC2_REG(PMC)
N#define PMC_REGSC                                PMC_REGSC_REG(PMC)
N
N/*!
N * @}
N */ /* end of group PMC_Register_Accessor_Macros */
N
N
N/*!
N * @}
N */ /* end of group PMC_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- PORT Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup PORT_Peripheral_Access_Layer PORT Peripheral Access Layer
N * @{
N */
N
N/** PORT - Register Layout Typedef */
Ntypedef struct {
N  __IO uint32_t PCR[32];                           /**< Pin Control Register n, array offset: 0x0, array step: 0x4 */
X  volatile uint32_t PCR[32];                            
N  __O  uint32_t GPCLR;                             /**< Global Pin Control Low Register, offset: 0x80 */
X  volatile  uint32_t GPCLR;                              
N  __O  uint32_t GPCHR;                             /**< Global Pin Control High Register, offset: 0x84 */
X  volatile  uint32_t GPCHR;                              
N       uint8_t RESERVED_0[24];
N  __IO uint32_t ISFR;                              /**< Interrupt Status Flag Register, offset: 0xA0 */
X  volatile uint32_t ISFR;                               
N} PORT_Type, *PORT_MemMapPtr;
N
N/* ----------------------------------------------------------------------------
N   -- PORT - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup PORT_Register_Accessor_Macros PORT - Register accessor macros
N * @{
N */
N
N
N/* PORT - Register accessors */
N#define PORT_PCR_REG(base,index)                 ((base)->PCR[index])
N#define PORT_PCR_COUNT                           32
N#define PORT_GPCLR_REG(base)                     ((base)->GPCLR)
N#define PORT_GPCHR_REG(base)                     ((base)->GPCHR)
N#define PORT_ISFR_REG(base)                      ((base)->ISFR)
N
N/*!
N * @}
N */ /* end of group PORT_Register_Accessor_Macros */
N
N
N/* ----------------------------------------------------------------------------
N   -- PORT Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup PORT_Register_Masks PORT Register Masks
N * @{
N */
N
N/* PCR Bit Fields */
N#define PORT_PCR_PS_MASK                         0x1u
N#define PORT_PCR_PS_SHIFT                        0
N#define PORT_PCR_PS_WIDTH                        1
N#define PORT_PCR_PS(x)                           (((uint32_t)(((uint32_t)(x))<<PORT_PCR_PS_SHIFT))&PORT_PCR_PS_MASK)
N#define PORT_PCR_PE_MASK                         0x2u
N#define PORT_PCR_PE_SHIFT                        1
N#define PORT_PCR_PE_WIDTH                        1
N#define PORT_PCR_PE(x)                           (((uint32_t)(((uint32_t)(x))<<PORT_PCR_PE_SHIFT))&PORT_PCR_PE_MASK)
N#define PORT_PCR_SRE_MASK                        0x4u
N#define PORT_PCR_SRE_SHIFT                       2
N#define PORT_PCR_SRE_WIDTH                       1
N#define PORT_PCR_SRE(x)                          (((uint32_t)(((uint32_t)(x))<<PORT_PCR_SRE_SHIFT))&PORT_PCR_SRE_MASK)
N#define PORT_PCR_PFE_MASK                        0x10u
N#define PORT_PCR_PFE_SHIFT                       4
N#define PORT_PCR_PFE_WIDTH                       1
N#define PORT_PCR_PFE(x)                          (((uint32_t)(((uint32_t)(x))<<PORT_PCR_PFE_SHIFT))&PORT_PCR_PFE_MASK)
N#define PORT_PCR_DSE_MASK                        0x40u
N#define PORT_PCR_DSE_SHIFT                       6
N#define PORT_PCR_DSE_WIDTH                       1
N#define PORT_PCR_DSE(x)                          (((uint32_t)(((uint32_t)(x))<<PORT_PCR_DSE_SHIFT))&PORT_PCR_DSE_MASK)
N#define PORT_PCR_MUX_MASK                        0x700u
N#define PORT_PCR_MUX_SHIFT                       8
N#define PORT_PCR_MUX_WIDTH                       3
N#define PORT_PCR_MUX(x)                          (((uint32_t)(((uint32_t)(x))<<PORT_PCR_MUX_SHIFT))&PORT_PCR_MUX_MASK)
N#define PORT_PCR_IRQC_MASK                       0xF0000u
N#define PORT_PCR_IRQC_SHIFT                      16
N#define PORT_PCR_IRQC_WIDTH                      4
N#define PORT_PCR_IRQC(x)                         (((uint32_t)(((uint32_t)(x))<<PORT_PCR_IRQC_SHIFT))&PORT_PCR_IRQC_MASK)
N#define PORT_PCR_ISF_MASK                        0x1000000u
N#define PORT_PCR_ISF_SHIFT                       24
N#define PORT_PCR_ISF_WIDTH                       1
N#define PORT_PCR_ISF(x)                          (((uint32_t)(((uint32_t)(x))<<PORT_PCR_ISF_SHIFT))&PORT_PCR_ISF_MASK)
N/* GPCLR Bit Fields */
N#define PORT_GPCLR_GPWD_MASK                     0xFFFFu
N#define PORT_GPCLR_GPWD_SHIFT                    0
N#define PORT_GPCLR_GPWD_WIDTH                    16
N#define PORT_GPCLR_GPWD(x)                       (((uint32_t)(((uint32_t)(x))<<PORT_GPCLR_GPWD_SHIFT))&PORT_GPCLR_GPWD_MASK)
N#define PORT_GPCLR_GPWE_MASK                     0xFFFF0000u
N#define PORT_GPCLR_GPWE_SHIFT                    16
N#define PORT_GPCLR_GPWE_WIDTH                    16
N#define PORT_GPCLR_GPWE(x)                       (((uint32_t)(((uint32_t)(x))<<PORT_GPCLR_GPWE_SHIFT))&PORT_GPCLR_GPWE_MASK)
N/* GPCHR Bit Fields */
N#define PORT_GPCHR_GPWD_MASK                     0xFFFFu
N#define PORT_GPCHR_GPWD_SHIFT                    0
N#define PORT_GPCHR_GPWD_WIDTH                    16
N#define PORT_GPCHR_GPWD(x)                       (((uint32_t)(((uint32_t)(x))<<PORT_GPCHR_GPWD_SHIFT))&PORT_GPCHR_GPWD_MASK)
N#define PORT_GPCHR_GPWE_MASK                     0xFFFF0000u
N#define PORT_GPCHR_GPWE_SHIFT                    16
N#define PORT_GPCHR_GPWE_WIDTH                    16
N#define PORT_GPCHR_GPWE(x)                       (((uint32_t)(((uint32_t)(x))<<PORT_GPCHR_GPWE_SHIFT))&PORT_GPCHR_GPWE_MASK)
N/* ISFR Bit Fields */
N#define PORT_ISFR_ISF_MASK                       0xFFFFFFFFu
N#define PORT_ISFR_ISF_SHIFT                      0
N#define PORT_ISFR_ISF_WIDTH                      32
N#define PORT_ISFR_ISF(x)                         (((uint32_t)(((uint32_t)(x))<<PORT_ISFR_ISF_SHIFT))&PORT_ISFR_ISF_MASK)
N
N/*!
N * @}
N */ /* end of group PORT_Register_Masks */
N
N
N/* PORT - Peripheral instance base addresses */
N/** Peripheral PORTA base address */
N#define PORTA_BASE                               (0x40049000u)
N/** Peripheral PORTA base pointer */
N#define PORTA                                    ((PORT_Type *)PORTA_BASE)
N#define PORTA_BASE_PTR                           (PORTA)
N/** Peripheral PORTB base address */
N#define PORTB_BASE                               (0x4004A000u)
N/** Peripheral PORTB base pointer */
N#define PORTB                                    ((PORT_Type *)PORTB_BASE)
N#define PORTB_BASE_PTR                           (PORTB)
N/** Peripheral PORTC base address */
N#define PORTC_BASE                               (0x4004B000u)
N/** Peripheral PORTC base pointer */
N#define PORTC                                    ((PORT_Type *)PORTC_BASE)
N#define PORTC_BASE_PTR                           (PORTC)
N/** Peripheral PORTD base address */
N#define PORTD_BASE                               (0x4004C000u)
N/** Peripheral PORTD base pointer */
N#define PORTD                                    ((PORT_Type *)PORTD_BASE)
N#define PORTD_BASE_PTR                           (PORTD)
N/** Peripheral PORTE base address */
N#define PORTE_BASE                               (0x4004D000u)
N/** Peripheral PORTE base pointer */
N#define PORTE                                    ((PORT_Type *)PORTE_BASE)
N#define PORTE_BASE_PTR                           (PORTE)
N/** Array initializer of PORT peripheral base addresses */
N#define PORT_BASE_ADDRS                          { PORTA_BASE, PORTB_BASE, PORTC_BASE, PORTD_BASE, PORTE_BASE }
N/** Array initializer of PORT peripheral base pointers */
N#define PORT_BASE_PTRS                           { PORTA, PORTB, PORTC, PORTD, PORTE }
N/** Interrupt vectors for the PORT peripheral type */
N#define PORT_IRQS                                { PORTA_IRQn, NotAvail_IRQn, NotAvail_IRQn, PORTD_IRQn, NotAvail_IRQn }
N
N/* ----------------------------------------------------------------------------
N   -- PORT - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup PORT_Register_Accessor_Macros PORT - Register accessor macros
N * @{
N */
N
N
N/* PORT - Register instance definitions */
N/* PORTA */
N#define PORTA_PCR0                               PORT_PCR_REG(PORTA,0)
N#define PORTA_PCR1                               PORT_PCR_REG(PORTA,1)
N#define PORTA_PCR2                               PORT_PCR_REG(PORTA,2)
N#define PORTA_PCR3                               PORT_PCR_REG(PORTA,3)
N#define PORTA_PCR4                               PORT_PCR_REG(PORTA,4)
N#define PORTA_PCR5                               PORT_PCR_REG(PORTA,5)
N#define PORTA_PCR6                               PORT_PCR_REG(PORTA,6)
N#define PORTA_PCR7                               PORT_PCR_REG(PORTA,7)
N#define PORTA_PCR8                               PORT_PCR_REG(PORTA,8)
N#define PORTA_PCR9                               PORT_PCR_REG(PORTA,9)
N#define PORTA_PCR10                              PORT_PCR_REG(PORTA,10)
N#define PORTA_PCR11                              PORT_PCR_REG(PORTA,11)
N#define PORTA_PCR12                              PORT_PCR_REG(PORTA,12)
N#define PORTA_PCR13                              PORT_PCR_REG(PORTA,13)
N#define PORTA_PCR14                              PORT_PCR_REG(PORTA,14)
N#define PORTA_PCR15                              PORT_PCR_REG(PORTA,15)
N#define PORTA_PCR16                              PORT_PCR_REG(PORTA,16)
N#define PORTA_PCR17                              PORT_PCR_REG(PORTA,17)
N#define PORTA_PCR18                              PORT_PCR_REG(PORTA,18)
N#define PORTA_PCR19                              PORT_PCR_REG(PORTA,19)
N#define PORTA_PCR20                              PORT_PCR_REG(PORTA,20)
N#define PORTA_PCR21                              PORT_PCR_REG(PORTA,21)
N#define PORTA_PCR22                              PORT_PCR_REG(PORTA,22)
N#define PORTA_PCR23                              PORT_PCR_REG(PORTA,23)
N#define PORTA_PCR24                              PORT_PCR_REG(PORTA,24)
N#define PORTA_PCR25                              PORT_PCR_REG(PORTA,25)
N#define PORTA_PCR26                              PORT_PCR_REG(PORTA,26)
N#define PORTA_PCR27                              PORT_PCR_REG(PORTA,27)
N#define PORTA_PCR28                              PORT_PCR_REG(PORTA,28)
N#define PORTA_PCR29                              PORT_PCR_REG(PORTA,29)
N#define PORTA_PCR30                              PORT_PCR_REG(PORTA,30)
N#define PORTA_PCR31                              PORT_PCR_REG(PORTA,31)
N#define PORTA_GPCLR                              PORT_GPCLR_REG(PORTA)
N#define PORTA_GPCHR                              PORT_GPCHR_REG(PORTA)
N#define PORTA_ISFR                               PORT_ISFR_REG(PORTA)
N/* PORTB */
N#define PORTB_PCR0                               PORT_PCR_REG(PORTB,0)
N#define PORTB_PCR1                               PORT_PCR_REG(PORTB,1)
N#define PORTB_PCR2                               PORT_PCR_REG(PORTB,2)
N#define PORTB_PCR3                               PORT_PCR_REG(PORTB,3)
N#define PORTB_PCR4                               PORT_PCR_REG(PORTB,4)
N#define PORTB_PCR5                               PORT_PCR_REG(PORTB,5)
N#define PORTB_PCR6                               PORT_PCR_REG(PORTB,6)
N#define PORTB_PCR7                               PORT_PCR_REG(PORTB,7)
N#define PORTB_PCR8                               PORT_PCR_REG(PORTB,8)
N#define PORTB_PCR9                               PORT_PCR_REG(PORTB,9)
N#define PORTB_PCR10                              PORT_PCR_REG(PORTB,10)
N#define PORTB_PCR11                              PORT_PCR_REG(PORTB,11)
N#define PORTB_PCR12                              PORT_PCR_REG(PORTB,12)
N#define PORTB_PCR13                              PORT_PCR_REG(PORTB,13)
N#define PORTB_PCR14                              PORT_PCR_REG(PORTB,14)
N#define PORTB_PCR15                              PORT_PCR_REG(PORTB,15)
N#define PORTB_PCR16                              PORT_PCR_REG(PORTB,16)
N#define PORTB_PCR17                              PORT_PCR_REG(PORTB,17)
N#define PORTB_PCR18                              PORT_PCR_REG(PORTB,18)
N#define PORTB_PCR19                              PORT_PCR_REG(PORTB,19)
N#define PORTB_PCR20                              PORT_PCR_REG(PORTB,20)
N#define PORTB_PCR21                              PORT_PCR_REG(PORTB,21)
N#define PORTB_PCR22                              PORT_PCR_REG(PORTB,22)
N#define PORTB_PCR23                              PORT_PCR_REG(PORTB,23)
N#define PORTB_PCR24                              PORT_PCR_REG(PORTB,24)
N#define PORTB_PCR25                              PORT_PCR_REG(PORTB,25)
N#define PORTB_PCR26                              PORT_PCR_REG(PORTB,26)
N#define PORTB_PCR27                              PORT_PCR_REG(PORTB,27)
N#define PORTB_PCR28                              PORT_PCR_REG(PORTB,28)
N#define PORTB_PCR29                              PORT_PCR_REG(PORTB,29)
N#define PORTB_PCR30                              PORT_PCR_REG(PORTB,30)
N#define PORTB_PCR31                              PORT_PCR_REG(PORTB,31)
N#define PORTB_GPCLR                              PORT_GPCLR_REG(PORTB)
N#define PORTB_GPCHR                              PORT_GPCHR_REG(PORTB)
N#define PORTB_ISFR                               PORT_ISFR_REG(PORTB)
N/* PORTC */
N#define PORTC_PCR0                               PORT_PCR_REG(PORTC,0)
N#define PORTC_PCR1                               PORT_PCR_REG(PORTC,1)
N#define PORTC_PCR2                               PORT_PCR_REG(PORTC,2)
N#define PORTC_PCR3                               PORT_PCR_REG(PORTC,3)
N#define PORTC_PCR4                               PORT_PCR_REG(PORTC,4)
N#define PORTC_PCR5                               PORT_PCR_REG(PORTC,5)
N#define PORTC_PCR6                               PORT_PCR_REG(PORTC,6)
N#define PORTC_PCR7                               PORT_PCR_REG(PORTC,7)
N#define PORTC_PCR8                               PORT_PCR_REG(PORTC,8)
N#define PORTC_PCR9                               PORT_PCR_REG(PORTC,9)
N#define PORTC_PCR10                              PORT_PCR_REG(PORTC,10)
N#define PORTC_PCR11                              PORT_PCR_REG(PORTC,11)
N#define PORTC_PCR12                              PORT_PCR_REG(PORTC,12)
N#define PORTC_PCR13                              PORT_PCR_REG(PORTC,13)
N#define PORTC_PCR14                              PORT_PCR_REG(PORTC,14)
N#define PORTC_PCR15                              PORT_PCR_REG(PORTC,15)
N#define PORTC_PCR16                              PORT_PCR_REG(PORTC,16)
N#define PORTC_PCR17                              PORT_PCR_REG(PORTC,17)
N#define PORTC_PCR18                              PORT_PCR_REG(PORTC,18)
N#define PORTC_PCR19                              PORT_PCR_REG(PORTC,19)
N#define PORTC_PCR20                              PORT_PCR_REG(PORTC,20)
N#define PORTC_PCR21                              PORT_PCR_REG(PORTC,21)
N#define PORTC_PCR22                              PORT_PCR_REG(PORTC,22)
N#define PORTC_PCR23                              PORT_PCR_REG(PORTC,23)
N#define PORTC_PCR24                              PORT_PCR_REG(PORTC,24)
N#define PORTC_PCR25                              PORT_PCR_REG(PORTC,25)
N#define PORTC_PCR26                              PORT_PCR_REG(PORTC,26)
N#define PORTC_PCR27                              PORT_PCR_REG(PORTC,27)
N#define PORTC_PCR28                              PORT_PCR_REG(PORTC,28)
N#define PORTC_PCR29                              PORT_PCR_REG(PORTC,29)
N#define PORTC_PCR30                              PORT_PCR_REG(PORTC,30)
N#define PORTC_PCR31                              PORT_PCR_REG(PORTC,31)
N#define PORTC_GPCLR                              PORT_GPCLR_REG(PORTC)
N#define PORTC_GPCHR                              PORT_GPCHR_REG(PORTC)
N#define PORTC_ISFR                               PORT_ISFR_REG(PORTC)
N/* PORTD */
N#define PORTD_PCR0                               PORT_PCR_REG(PORTD,0)
N#define PORTD_PCR1                               PORT_PCR_REG(PORTD,1)
N#define PORTD_PCR2                               PORT_PCR_REG(PORTD,2)
N#define PORTD_PCR3                               PORT_PCR_REG(PORTD,3)
N#define PORTD_PCR4                               PORT_PCR_REG(PORTD,4)
N#define PORTD_PCR5                               PORT_PCR_REG(PORTD,5)
N#define PORTD_PCR6                               PORT_PCR_REG(PORTD,6)
N#define PORTD_PCR7                               PORT_PCR_REG(PORTD,7)
N#define PORTD_PCR8                               PORT_PCR_REG(PORTD,8)
N#define PORTD_PCR9                               PORT_PCR_REG(PORTD,9)
N#define PORTD_PCR10                              PORT_PCR_REG(PORTD,10)
N#define PORTD_PCR11                              PORT_PCR_REG(PORTD,11)
N#define PORTD_PCR12                              PORT_PCR_REG(PORTD,12)
N#define PORTD_PCR13                              PORT_PCR_REG(PORTD,13)
N#define PORTD_PCR14                              PORT_PCR_REG(PORTD,14)
N#define PORTD_PCR15                              PORT_PCR_REG(PORTD,15)
N#define PORTD_PCR16                              PORT_PCR_REG(PORTD,16)
N#define PORTD_PCR17                              PORT_PCR_REG(PORTD,17)
N#define PORTD_PCR18                              PORT_PCR_REG(PORTD,18)
N#define PORTD_PCR19                              PORT_PCR_REG(PORTD,19)
N#define PORTD_PCR20                              PORT_PCR_REG(PORTD,20)
N#define PORTD_PCR21                              PORT_PCR_REG(PORTD,21)
N#define PORTD_PCR22                              PORT_PCR_REG(PORTD,22)
N#define PORTD_PCR23                              PORT_PCR_REG(PORTD,23)
N#define PORTD_PCR24                              PORT_PCR_REG(PORTD,24)
N#define PORTD_PCR25                              PORT_PCR_REG(PORTD,25)
N#define PORTD_PCR26                              PORT_PCR_REG(PORTD,26)
N#define PORTD_PCR27                              PORT_PCR_REG(PORTD,27)
N#define PORTD_PCR28                              PORT_PCR_REG(PORTD,28)
N#define PORTD_PCR29                              PORT_PCR_REG(PORTD,29)
N#define PORTD_PCR30                              PORT_PCR_REG(PORTD,30)
N#define PORTD_PCR31                              PORT_PCR_REG(PORTD,31)
N#define PORTD_GPCLR                              PORT_GPCLR_REG(PORTD)
N#define PORTD_GPCHR                              PORT_GPCHR_REG(PORTD)
N#define PORTD_ISFR                               PORT_ISFR_REG(PORTD)
N/* PORTE */
N#define PORTE_PCR0                               PORT_PCR_REG(PORTE,0)
N#define PORTE_PCR1                               PORT_PCR_REG(PORTE,1)
N#define PORTE_PCR2                               PORT_PCR_REG(PORTE,2)
N#define PORTE_PCR3                               PORT_PCR_REG(PORTE,3)
N#define PORTE_PCR4                               PORT_PCR_REG(PORTE,4)
N#define PORTE_PCR5                               PORT_PCR_REG(PORTE,5)
N#define PORTE_PCR6                               PORT_PCR_REG(PORTE,6)
N#define PORTE_PCR7                               PORT_PCR_REG(PORTE,7)
N#define PORTE_PCR8                               PORT_PCR_REG(PORTE,8)
N#define PORTE_PCR9                               PORT_PCR_REG(PORTE,9)
N#define PORTE_PCR10                              PORT_PCR_REG(PORTE,10)
N#define PORTE_PCR11                              PORT_PCR_REG(PORTE,11)
N#define PORTE_PCR12                              PORT_PCR_REG(PORTE,12)
N#define PORTE_PCR13                              PORT_PCR_REG(PORTE,13)
N#define PORTE_PCR14                              PORT_PCR_REG(PORTE,14)
N#define PORTE_PCR15                              PORT_PCR_REG(PORTE,15)
N#define PORTE_PCR16                              PORT_PCR_REG(PORTE,16)
N#define PORTE_PCR17                              PORT_PCR_REG(PORTE,17)
N#define PORTE_PCR18                              PORT_PCR_REG(PORTE,18)
N#define PORTE_PCR19                              PORT_PCR_REG(PORTE,19)
N#define PORTE_PCR20                              PORT_PCR_REG(PORTE,20)
N#define PORTE_PCR21                              PORT_PCR_REG(PORTE,21)
N#define PORTE_PCR22                              PORT_PCR_REG(PORTE,22)
N#define PORTE_PCR23                              PORT_PCR_REG(PORTE,23)
N#define PORTE_PCR24                              PORT_PCR_REG(PORTE,24)
N#define PORTE_PCR25                              PORT_PCR_REG(PORTE,25)
N#define PORTE_PCR26                              PORT_PCR_REG(PORTE,26)
N#define PORTE_PCR27                              PORT_PCR_REG(PORTE,27)
N#define PORTE_PCR28                              PORT_PCR_REG(PORTE,28)
N#define PORTE_PCR29                              PORT_PCR_REG(PORTE,29)
N#define PORTE_PCR30                              PORT_PCR_REG(PORTE,30)
N#define PORTE_PCR31                              PORT_PCR_REG(PORTE,31)
N#define PORTE_GPCLR                              PORT_GPCLR_REG(PORTE)
N#define PORTE_GPCHR                              PORT_GPCHR_REG(PORTE)
N#define PORTE_ISFR                               PORT_ISFR_REG(PORTE)
N
N/* PORT - Register array accessors */
N#define PORTA_PCR(index)                         PORT_PCR_REG(PORTA,index)
N#define PORTB_PCR(index)                         PORT_PCR_REG(PORTB,index)
N#define PORTC_PCR(index)                         PORT_PCR_REG(PORTC,index)
N#define PORTD_PCR(index)                         PORT_PCR_REG(PORTD,index)
N#define PORTE_PCR(index)                         PORT_PCR_REG(PORTE,index)
N
N/*!
N * @}
N */ /* end of group PORT_Register_Accessor_Macros */
N
N
N/*!
N * @}
N */ /* end of group PORT_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- RCM Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup RCM_Peripheral_Access_Layer RCM Peripheral Access Layer
N * @{
N */
N
N/** RCM - Register Layout Typedef */
Ntypedef struct {
N  __I  uint8_t SRS0;                               /**< System Reset Status Register 0, offset: 0x0 */
X  volatile const  uint8_t SRS0;                                
N  __I  uint8_t SRS1;                               /**< System Reset Status Register 1, offset: 0x1 */
X  volatile const  uint8_t SRS1;                                
N       uint8_t RESERVED_0[2];
N  __IO uint8_t RPFC;                               /**< Reset Pin Filter Control register, offset: 0x4 */
X  volatile uint8_t RPFC;                                
N  __IO uint8_t RPFW;                               /**< Reset Pin Filter Width register, offset: 0x5 */
X  volatile uint8_t RPFW;                                
N} RCM_Type, *RCM_MemMapPtr;
N
N/* ----------------------------------------------------------------------------
N   -- RCM - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup RCM_Register_Accessor_Macros RCM - Register accessor macros
N * @{
N */
N
N
N/* RCM - Register accessors */
N#define RCM_SRS0_REG(base)                       ((base)->SRS0)
N#define RCM_SRS1_REG(base)                       ((base)->SRS1)
N#define RCM_RPFC_REG(base)                       ((base)->RPFC)
N#define RCM_RPFW_REG(base)                       ((base)->RPFW)
N
N/*!
N * @}
N */ /* end of group RCM_Register_Accessor_Macros */
N
N
N/* ----------------------------------------------------------------------------
N   -- RCM Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup RCM_Register_Masks RCM Register Masks
N * @{
N */
N
N/* SRS0 Bit Fields */
N#define RCM_SRS0_WAKEUP_MASK                     0x1u
N#define RCM_SRS0_WAKEUP_SHIFT                    0
N#define RCM_SRS0_WAKEUP_WIDTH                    1
N#define RCM_SRS0_WAKEUP(x)                       (((uint8_t)(((uint8_t)(x))<<RCM_SRS0_WAKEUP_SHIFT))&RCM_SRS0_WAKEUP_MASK)
N#define RCM_SRS0_LVD_MASK                        0x2u
N#define RCM_SRS0_LVD_SHIFT                       1
N#define RCM_SRS0_LVD_WIDTH                       1
N#define RCM_SRS0_LVD(x)                          (((uint8_t)(((uint8_t)(x))<<RCM_SRS0_LVD_SHIFT))&RCM_SRS0_LVD_MASK)
N#define RCM_SRS0_LOC_MASK                        0x4u
N#define RCM_SRS0_LOC_SHIFT                       2
N#define RCM_SRS0_LOC_WIDTH                       1
N#define RCM_SRS0_LOC(x)                          (((uint8_t)(((uint8_t)(x))<<RCM_SRS0_LOC_SHIFT))&RCM_SRS0_LOC_MASK)
N#define RCM_SRS0_LOL_MASK                        0x8u
N#define RCM_SRS0_LOL_SHIFT                       3
N#define RCM_SRS0_LOL_WIDTH                       1
N#define RCM_SRS0_LOL(x)                          (((uint8_t)(((uint8_t)(x))<<RCM_SRS0_LOL_SHIFT))&RCM_SRS0_LOL_MASK)
N#define RCM_SRS0_WDOG_MASK                       0x20u
N#define RCM_SRS0_WDOG_SHIFT                      5
N#define RCM_SRS0_WDOG_WIDTH                      1
N#define RCM_SRS0_WDOG(x)                         (((uint8_t)(((uint8_t)(x))<<RCM_SRS0_WDOG_SHIFT))&RCM_SRS0_WDOG_MASK)
N#define RCM_SRS0_PIN_MASK                        0x40u
N#define RCM_SRS0_PIN_SHIFT                       6
N#define RCM_SRS0_PIN_WIDTH                       1
N#define RCM_SRS0_PIN(x)                          (((uint8_t)(((uint8_t)(x))<<RCM_SRS0_PIN_SHIFT))&RCM_SRS0_PIN_MASK)
N#define RCM_SRS0_POR_MASK                        0x80u
N#define RCM_SRS0_POR_SHIFT                       7
N#define RCM_SRS0_POR_WIDTH                       1
N#define RCM_SRS0_POR(x)                          (((uint8_t)(((uint8_t)(x))<<RCM_SRS0_POR_SHIFT))&RCM_SRS0_POR_MASK)
N/* SRS1 Bit Fields */
N#define RCM_SRS1_LOCKUP_MASK                     0x2u
N#define RCM_SRS1_LOCKUP_SHIFT                    1
N#define RCM_SRS1_LOCKUP_WIDTH                    1
N#define RCM_SRS1_LOCKUP(x)                       (((uint8_t)(((uint8_t)(x))<<RCM_SRS1_LOCKUP_SHIFT))&RCM_SRS1_LOCKUP_MASK)
N#define RCM_SRS1_SW_MASK                         0x4u
N#define RCM_SRS1_SW_SHIFT                        2
N#define RCM_SRS1_SW_WIDTH                        1
N#define RCM_SRS1_SW(x)                           (((uint8_t)(((uint8_t)(x))<<RCM_SRS1_SW_SHIFT))&RCM_SRS1_SW_MASK)
N#define RCM_SRS1_MDM_AP_MASK                     0x8u
N#define RCM_SRS1_MDM_AP_SHIFT                    3
N#define RCM_SRS1_MDM_AP_WIDTH                    1
N#define RCM_SRS1_MDM_AP(x)                       (((uint8_t)(((uint8_t)(x))<<RCM_SRS1_MDM_AP_SHIFT))&RCM_SRS1_MDM_AP_MASK)
N#define RCM_SRS1_SACKERR_MASK                    0x20u
N#define RCM_SRS1_SACKERR_SHIFT                   5
N#define RCM_SRS1_SACKERR_WIDTH                   1
N#define RCM_SRS1_SACKERR(x)                      (((uint8_t)(((uint8_t)(x))<<RCM_SRS1_SACKERR_SHIFT))&RCM_SRS1_SACKERR_MASK)
N/* RPFC Bit Fields */
N#define RCM_RPFC_RSTFLTSRW_MASK                  0x3u
N#define RCM_RPFC_RSTFLTSRW_SHIFT                 0
N#define RCM_RPFC_RSTFLTSRW_WIDTH                 2
N#define RCM_RPFC_RSTFLTSRW(x)                    (((uint8_t)(((uint8_t)(x))<<RCM_RPFC_RSTFLTSRW_SHIFT))&RCM_RPFC_RSTFLTSRW_MASK)
N#define RCM_RPFC_RSTFLTSS_MASK                   0x4u
N#define RCM_RPFC_RSTFLTSS_SHIFT                  2
N#define RCM_RPFC_RSTFLTSS_WIDTH                  1
N#define RCM_RPFC_RSTFLTSS(x)                     (((uint8_t)(((uint8_t)(x))<<RCM_RPFC_RSTFLTSS_SHIFT))&RCM_RPFC_RSTFLTSS_MASK)
N/* RPFW Bit Fields */
N#define RCM_RPFW_RSTFLTSEL_MASK                  0x1Fu
N#define RCM_RPFW_RSTFLTSEL_SHIFT                 0
N#define RCM_RPFW_RSTFLTSEL_WIDTH                 5
N#define RCM_RPFW_RSTFLTSEL(x)                    (((uint8_t)(((uint8_t)(x))<<RCM_RPFW_RSTFLTSEL_SHIFT))&RCM_RPFW_RSTFLTSEL_MASK)
N
N/*!
N * @}
N */ /* end of group RCM_Register_Masks */
N
N
N/* RCM - Peripheral instance base addresses */
N/** Peripheral RCM base address */
N#define RCM_BASE                                 (0x4007F000u)
N/** Peripheral RCM base pointer */
N#define RCM                                      ((RCM_Type *)RCM_BASE)
N#define RCM_BASE_PTR                             (RCM)
N/** Array initializer of RCM peripheral base addresses */
N#define RCM_BASE_ADDRS                           { RCM_BASE }
N/** Array initializer of RCM peripheral base pointers */
N#define RCM_BASE_PTRS                            { RCM }
N
N/* ----------------------------------------------------------------------------
N   -- RCM - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup RCM_Register_Accessor_Macros RCM - Register accessor macros
N * @{
N */
N
N
N/* RCM - Register instance definitions */
N/* RCM */
N#define RCM_SRS0                                 RCM_SRS0_REG(RCM)
N#define RCM_SRS1                                 RCM_SRS1_REG(RCM)
N#define RCM_RPFC                                 RCM_RPFC_REG(RCM)
N#define RCM_RPFW                                 RCM_RPFW_REG(RCM)
N
N/*!
N * @}
N */ /* end of group RCM_Register_Accessor_Macros */
N
N
N/*!
N * @}
N */ /* end of group RCM_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- ROM Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup ROM_Peripheral_Access_Layer ROM Peripheral Access Layer
N * @{
N */
N
N/** ROM - Register Layout Typedef */
Ntypedef struct {
N  __I  uint32_t ENTRY[3];                          /**< Entry, array offset: 0x0, array step: 0x4 */
X  volatile const  uint32_t ENTRY[3];                           
N  __I  uint32_t TABLEMARK;                         /**< End of Table Marker Register, offset: 0xC */
X  volatile const  uint32_t TABLEMARK;                          
N       uint8_t RESERVED_0[4028];
N  __I  uint32_t SYSACCESS;                         /**< System Access Register, offset: 0xFCC */
X  volatile const  uint32_t SYSACCESS;                          
N  __I  uint32_t PERIPHID4;                         /**< Peripheral ID Register, offset: 0xFD0 */
X  volatile const  uint32_t PERIPHID4;                          
N  __I  uint32_t PERIPHID5;                         /**< Peripheral ID Register, offset: 0xFD4 */
X  volatile const  uint32_t PERIPHID5;                          
N  __I  uint32_t PERIPHID6;                         /**< Peripheral ID Register, offset: 0xFD8 */
X  volatile const  uint32_t PERIPHID6;                          
N  __I  uint32_t PERIPHID7;                         /**< Peripheral ID Register, offset: 0xFDC */
X  volatile const  uint32_t PERIPHID7;                          
N  __I  uint32_t PERIPHID0;                         /**< Peripheral ID Register, offset: 0xFE0 */
X  volatile const  uint32_t PERIPHID0;                          
N  __I  uint32_t PERIPHID1;                         /**< Peripheral ID Register, offset: 0xFE4 */
X  volatile const  uint32_t PERIPHID1;                          
N  __I  uint32_t PERIPHID2;                         /**< Peripheral ID Register, offset: 0xFE8 */
X  volatile const  uint32_t PERIPHID2;                          
N  __I  uint32_t PERIPHID3;                         /**< Peripheral ID Register, offset: 0xFEC */
X  volatile const  uint32_t PERIPHID3;                          
N  __I  uint32_t COMPID[4];                         /**< Component ID Register, array offset: 0xFF0, array step: 0x4 */
X  volatile const  uint32_t COMPID[4];                          
N} ROM_Type, *ROM_MemMapPtr;
N
N/* ----------------------------------------------------------------------------
N   -- ROM - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup ROM_Register_Accessor_Macros ROM - Register accessor macros
N * @{
N */
N
N
N/* ROM - Register accessors */
N#define ROM_ENTRY_REG(base,index)                ((base)->ENTRY[index])
N#define ROM_ENTRY_COUNT                          3
N#define ROM_TABLEMARK_REG(base)                  ((base)->TABLEMARK)
N#define ROM_SYSACCESS_REG(base)                  ((base)->SYSACCESS)
N#define ROM_PERIPHID4_REG(base)                  ((base)->PERIPHID4)
N#define ROM_PERIPHID5_REG(base)                  ((base)->PERIPHID5)
N#define ROM_PERIPHID6_REG(base)                  ((base)->PERIPHID6)
N#define ROM_PERIPHID7_REG(base)                  ((base)->PERIPHID7)
N#define ROM_PERIPHID0_REG(base)                  ((base)->PERIPHID0)
N#define ROM_PERIPHID1_REG(base)                  ((base)->PERIPHID1)
N#define ROM_PERIPHID2_REG(base)                  ((base)->PERIPHID2)
N#define ROM_PERIPHID3_REG(base)                  ((base)->PERIPHID3)
N#define ROM_COMPID_REG(base,index)               ((base)->COMPID[index])
N#define ROM_COMPID_COUNT                         4
N
N/*!
N * @}
N */ /* end of group ROM_Register_Accessor_Macros */
N
N
N/* ----------------------------------------------------------------------------
N   -- ROM Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup ROM_Register_Masks ROM Register Masks
N * @{
N */
N
N/* ENTRY Bit Fields */
N#define ROM_ENTRY_ENTRY_MASK                     0xFFFFFFFFu
N#define ROM_ENTRY_ENTRY_SHIFT                    0
N#define ROM_ENTRY_ENTRY_WIDTH                    32
N#define ROM_ENTRY_ENTRY(x)                       (((uint32_t)(((uint32_t)(x))<<ROM_ENTRY_ENTRY_SHIFT))&ROM_ENTRY_ENTRY_MASK)
N/* TABLEMARK Bit Fields */
N#define ROM_TABLEMARK_MARK_MASK                  0xFFFFFFFFu
N#define ROM_TABLEMARK_MARK_SHIFT                 0
N#define ROM_TABLEMARK_MARK_WIDTH                 32
N#define ROM_TABLEMARK_MARK(x)                    (((uint32_t)(((uint32_t)(x))<<ROM_TABLEMARK_MARK_SHIFT))&ROM_TABLEMARK_MARK_MASK)
N/* SYSACCESS Bit Fields */
N#define ROM_SYSACCESS_SYSACCESS_MASK             0xFFFFFFFFu
N#define ROM_SYSACCESS_SYSACCESS_SHIFT            0
N#define ROM_SYSACCESS_SYSACCESS_WIDTH            32
N#define ROM_SYSACCESS_SYSACCESS(x)               (((uint32_t)(((uint32_t)(x))<<ROM_SYSACCESS_SYSACCESS_SHIFT))&ROM_SYSACCESS_SYSACCESS_MASK)
N/* PERIPHID4 Bit Fields */
N#define ROM_PERIPHID4_PERIPHID_MASK              0xFFFFFFFFu
N#define ROM_PERIPHID4_PERIPHID_SHIFT             0
N#define ROM_PERIPHID4_PERIPHID_WIDTH             32
N#define ROM_PERIPHID4_PERIPHID(x)                (((uint32_t)(((uint32_t)(x))<<ROM_PERIPHID4_PERIPHID_SHIFT))&ROM_PERIPHID4_PERIPHID_MASK)
N/* PERIPHID5 Bit Fields */
N#define ROM_PERIPHID5_PERIPHID_MASK              0xFFFFFFFFu
N#define ROM_PERIPHID5_PERIPHID_SHIFT             0
N#define ROM_PERIPHID5_PERIPHID_WIDTH             32
N#define ROM_PERIPHID5_PERIPHID(x)                (((uint32_t)(((uint32_t)(x))<<ROM_PERIPHID5_PERIPHID_SHIFT))&ROM_PERIPHID5_PERIPHID_MASK)
N/* PERIPHID6 Bit Fields */
N#define ROM_PERIPHID6_PERIPHID_MASK              0xFFFFFFFFu
N#define ROM_PERIPHID6_PERIPHID_SHIFT             0
N#define ROM_PERIPHID6_PERIPHID_WIDTH             32
N#define ROM_PERIPHID6_PERIPHID(x)                (((uint32_t)(((uint32_t)(x))<<ROM_PERIPHID6_PERIPHID_SHIFT))&ROM_PERIPHID6_PERIPHID_MASK)
N/* PERIPHID7 Bit Fields */
N#define ROM_PERIPHID7_PERIPHID_MASK              0xFFFFFFFFu
N#define ROM_PERIPHID7_PERIPHID_SHIFT             0
N#define ROM_PERIPHID7_PERIPHID_WIDTH             32
N#define ROM_PERIPHID7_PERIPHID(x)                (((uint32_t)(((uint32_t)(x))<<ROM_PERIPHID7_PERIPHID_SHIFT))&ROM_PERIPHID7_PERIPHID_MASK)
N/* PERIPHID0 Bit Fields */
N#define ROM_PERIPHID0_PERIPHID_MASK              0xFFFFFFFFu
N#define ROM_PERIPHID0_PERIPHID_SHIFT             0
N#define ROM_PERIPHID0_PERIPHID_WIDTH             32
N#define ROM_PERIPHID0_PERIPHID(x)                (((uint32_t)(((uint32_t)(x))<<ROM_PERIPHID0_PERIPHID_SHIFT))&ROM_PERIPHID0_PERIPHID_MASK)
N/* PERIPHID1 Bit Fields */
N#define ROM_PERIPHID1_PERIPHID_MASK              0xFFFFFFFFu
N#define ROM_PERIPHID1_PERIPHID_SHIFT             0
N#define ROM_PERIPHID1_PERIPHID_WIDTH             32
N#define ROM_PERIPHID1_PERIPHID(x)                (((uint32_t)(((uint32_t)(x))<<ROM_PERIPHID1_PERIPHID_SHIFT))&ROM_PERIPHID1_PERIPHID_MASK)
N/* PERIPHID2 Bit Fields */
N#define ROM_PERIPHID2_PERIPHID_MASK              0xFFFFFFFFu
N#define ROM_PERIPHID2_PERIPHID_SHIFT             0
N#define ROM_PERIPHID2_PERIPHID_WIDTH             32
N#define ROM_PERIPHID2_PERIPHID(x)                (((uint32_t)(((uint32_t)(x))<<ROM_PERIPHID2_PERIPHID_SHIFT))&ROM_PERIPHID2_PERIPHID_MASK)
N/* PERIPHID3 Bit Fields */
N#define ROM_PERIPHID3_PERIPHID_MASK              0xFFFFFFFFu
N#define ROM_PERIPHID3_PERIPHID_SHIFT             0
N#define ROM_PERIPHID3_PERIPHID_WIDTH             32
N#define ROM_PERIPHID3_PERIPHID(x)                (((uint32_t)(((uint32_t)(x))<<ROM_PERIPHID3_PERIPHID_SHIFT))&ROM_PERIPHID3_PERIPHID_MASK)
N/* COMPID Bit Fields */
N#define ROM_COMPID_COMPID_MASK                   0xFFFFFFFFu
N#define ROM_COMPID_COMPID_SHIFT                  0
N#define ROM_COMPID_COMPID_WIDTH                  32
N#define ROM_COMPID_COMPID(x)                     (((uint32_t)(((uint32_t)(x))<<ROM_COMPID_COMPID_SHIFT))&ROM_COMPID_COMPID_MASK)
N
N/*!
N * @}
N */ /* end of group ROM_Register_Masks */
N
N
N/* ROM - Peripheral instance base addresses */
N/** Peripheral ROM base address */
N#define ROM_BASE                                 (0xF0002000u)
N/** Peripheral ROM base pointer */
N#define ROM                                      ((ROM_Type *)ROM_BASE)
N#define ROM_BASE_PTR                             (ROM)
N/** Array initializer of ROM peripheral base addresses */
N#define ROM_BASE_ADDRS                           { ROM_BASE }
N/** Array initializer of ROM peripheral base pointers */
N#define ROM_BASE_PTRS                            { ROM }
N
N/* ----------------------------------------------------------------------------
N   -- ROM - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup ROM_Register_Accessor_Macros ROM - Register accessor macros
N * @{
N */
N
N
N/* ROM - Register instance definitions */
N/* ROM */
N#define ROM_ENTRY0                               ROM_ENTRY_REG(ROM,0)
N#define ROM_ENTRY1                               ROM_ENTRY_REG(ROM,1)
N#define ROM_ENTRY2                               ROM_ENTRY_REG(ROM,2)
N#define ROM_TABLEMARK                            ROM_TABLEMARK_REG(ROM)
N#define ROM_SYSACCESS                            ROM_SYSACCESS_REG(ROM)
N#define ROM_PERIPHID4                            ROM_PERIPHID4_REG(ROM)
N#define ROM_PERIPHID5                            ROM_PERIPHID5_REG(ROM)
N#define ROM_PERIPHID6                            ROM_PERIPHID6_REG(ROM)
N#define ROM_PERIPHID7                            ROM_PERIPHID7_REG(ROM)
N#define ROM_PERIPHID0                            ROM_PERIPHID0_REG(ROM)
N#define ROM_PERIPHID1                            ROM_PERIPHID1_REG(ROM)
N#define ROM_PERIPHID2                            ROM_PERIPHID2_REG(ROM)
N#define ROM_PERIPHID3                            ROM_PERIPHID3_REG(ROM)
N#define ROM_COMPID0                              ROM_COMPID_REG(ROM,0)
N#define ROM_COMPID1                              ROM_COMPID_REG(ROM,1)
N#define ROM_COMPID2                              ROM_COMPID_REG(ROM,2)
N#define ROM_COMPID3                              ROM_COMPID_REG(ROM,3)
N
N/* ROM - Register array accessors */
N#define ROM_ENTRY(index)                         ROM_ENTRY_REG(ROM,index)
N#define ROM_COMPID(index)                        ROM_COMPID_REG(ROM,index)
N
N/*!
N * @}
N */ /* end of group ROM_Register_Accessor_Macros */
N
N
N/*!
N * @}
N */ /* end of group ROM_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- RTC Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup RTC_Peripheral_Access_Layer RTC Peripheral Access Layer
N * @{
N */
N
N/** RTC - Register Layout Typedef */
Ntypedef struct {
N  __IO uint32_t TSR;                               /**< RTC Time Seconds Register, offset: 0x0 */
X  volatile uint32_t TSR;                                
N  __IO uint32_t TPR;                               /**< RTC Time Prescaler Register, offset: 0x4 */
X  volatile uint32_t TPR;                                
N  __IO uint32_t TAR;                               /**< RTC Time Alarm Register, offset: 0x8 */
X  volatile uint32_t TAR;                                
N  __IO uint32_t TCR;                               /**< RTC Time Compensation Register, offset: 0xC */
X  volatile uint32_t TCR;                                
N  __IO uint32_t CR;                                /**< RTC Control Register, offset: 0x10 */
X  volatile uint32_t CR;                                 
N  __IO uint32_t SR;                                /**< RTC Status Register, offset: 0x14 */
X  volatile uint32_t SR;                                 
N  __IO uint32_t LR;                                /**< RTC Lock Register, offset: 0x18 */
X  volatile uint32_t LR;                                 
N  __IO uint32_t IER;                               /**< RTC Interrupt Enable Register, offset: 0x1C */
X  volatile uint32_t IER;                                
N} RTC_Type, *RTC_MemMapPtr;
N
N/* ----------------------------------------------------------------------------
N   -- RTC - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup RTC_Register_Accessor_Macros RTC - Register accessor macros
N * @{
N */
N
N
N/* RTC - Register accessors */
N#define RTC_TSR_REG(base)                        ((base)->TSR)
N#define RTC_TPR_REG(base)                        ((base)->TPR)
N#define RTC_TAR_REG(base)                        ((base)->TAR)
N#define RTC_TCR_REG(base)                        ((base)->TCR)
N#define RTC_CR_REG(base)                         ((base)->CR)
N#define RTC_SR_REG(base)                         ((base)->SR)
N#define RTC_LR_REG(base)                         ((base)->LR)
N#define RTC_IER_REG(base)                        ((base)->IER)
N
N/*!
N * @}
N */ /* end of group RTC_Register_Accessor_Macros */
N
N
N/* ----------------------------------------------------------------------------
N   -- RTC Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup RTC_Register_Masks RTC Register Masks
N * @{
N */
N
N/* TSR Bit Fields */
N#define RTC_TSR_TSR_MASK                         0xFFFFFFFFu
N#define RTC_TSR_TSR_SHIFT                        0
N#define RTC_TSR_TSR_WIDTH                        32
N#define RTC_TSR_TSR(x)                           (((uint32_t)(((uint32_t)(x))<<RTC_TSR_TSR_SHIFT))&RTC_TSR_TSR_MASK)
N/* TPR Bit Fields */
N#define RTC_TPR_TPR_MASK                         0xFFFFu
N#define RTC_TPR_TPR_SHIFT                        0
N#define RTC_TPR_TPR_WIDTH                        16
N#define RTC_TPR_TPR(x)                           (((uint32_t)(((uint32_t)(x))<<RTC_TPR_TPR_SHIFT))&RTC_TPR_TPR_MASK)
N/* TAR Bit Fields */
N#define RTC_TAR_TAR_MASK                         0xFFFFFFFFu
N#define RTC_TAR_TAR_SHIFT                        0
N#define RTC_TAR_TAR_WIDTH                        32
N#define RTC_TAR_TAR(x)                           (((uint32_t)(((uint32_t)(x))<<RTC_TAR_TAR_SHIFT))&RTC_TAR_TAR_MASK)
N/* TCR Bit Fields */
N#define RTC_TCR_TCR_MASK                         0xFFu
N#define RTC_TCR_TCR_SHIFT                        0
N#define RTC_TCR_TCR_WIDTH                        8
N#define RTC_TCR_TCR(x)                           (((uint32_t)(((uint32_t)(x))<<RTC_TCR_TCR_SHIFT))&RTC_TCR_TCR_MASK)
N#define RTC_TCR_CIR_MASK                         0xFF00u
N#define RTC_TCR_CIR_SHIFT                        8
N#define RTC_TCR_CIR_WIDTH                        8
N#define RTC_TCR_CIR(x)                           (((uint32_t)(((uint32_t)(x))<<RTC_TCR_CIR_SHIFT))&RTC_TCR_CIR_MASK)
N#define RTC_TCR_TCV_MASK                         0xFF0000u
N#define RTC_TCR_TCV_SHIFT                        16
N#define RTC_TCR_TCV_WIDTH                        8
N#define RTC_TCR_TCV(x)                           (((uint32_t)(((uint32_t)(x))<<RTC_TCR_TCV_SHIFT))&RTC_TCR_TCV_MASK)
N#define RTC_TCR_CIC_MASK                         0xFF000000u
N#define RTC_TCR_CIC_SHIFT                        24
N#define RTC_TCR_CIC_WIDTH                        8
N#define RTC_TCR_CIC(x)                           (((uint32_t)(((uint32_t)(x))<<RTC_TCR_CIC_SHIFT))&RTC_TCR_CIC_MASK)
N/* CR Bit Fields */
N#define RTC_CR_SWR_MASK                          0x1u
N#define RTC_CR_SWR_SHIFT                         0
N#define RTC_CR_SWR_WIDTH                         1
N#define RTC_CR_SWR(x)                            (((uint32_t)(((uint32_t)(x))<<RTC_CR_SWR_SHIFT))&RTC_CR_SWR_MASK)
N#define RTC_CR_WPE_MASK                          0x2u
N#define RTC_CR_WPE_SHIFT                         1
N#define RTC_CR_WPE_WIDTH                         1
N#define RTC_CR_WPE(x)                            (((uint32_t)(((uint32_t)(x))<<RTC_CR_WPE_SHIFT))&RTC_CR_WPE_MASK)
N#define RTC_CR_SUP_MASK                          0x4u
N#define RTC_CR_SUP_SHIFT                         2
N#define RTC_CR_SUP_WIDTH                         1
N#define RTC_CR_SUP(x)                            (((uint32_t)(((uint32_t)(x))<<RTC_CR_SUP_SHIFT))&RTC_CR_SUP_MASK)
N#define RTC_CR_UM_MASK                           0x8u
N#define RTC_CR_UM_SHIFT                          3
N#define RTC_CR_UM_WIDTH                          1
N#define RTC_CR_UM(x)                             (((uint32_t)(((uint32_t)(x))<<RTC_CR_UM_SHIFT))&RTC_CR_UM_MASK)
N#define RTC_CR_OSCE_MASK                         0x100u
N#define RTC_CR_OSCE_SHIFT                        8
N#define RTC_CR_OSCE_WIDTH                        1
N#define RTC_CR_OSCE(x)                           (((uint32_t)(((uint32_t)(x))<<RTC_CR_OSCE_SHIFT))&RTC_CR_OSCE_MASK)
N#define RTC_CR_CLKO_MASK                         0x200u
N#define RTC_CR_CLKO_SHIFT                        9
N#define RTC_CR_CLKO_WIDTH                        1
N#define RTC_CR_CLKO(x)                           (((uint32_t)(((uint32_t)(x))<<RTC_CR_CLKO_SHIFT))&RTC_CR_CLKO_MASK)
N#define RTC_CR_SC16P_MASK                        0x400u
N#define RTC_CR_SC16P_SHIFT                       10
N#define RTC_CR_SC16P_WIDTH                       1
N#define RTC_CR_SC16P(x)                          (((uint32_t)(((uint32_t)(x))<<RTC_CR_SC16P_SHIFT))&RTC_CR_SC16P_MASK)
N#define RTC_CR_SC8P_MASK                         0x800u
N#define RTC_CR_SC8P_SHIFT                        11
N#define RTC_CR_SC8P_WIDTH                        1
N#define RTC_CR_SC8P(x)                           (((uint32_t)(((uint32_t)(x))<<RTC_CR_SC8P_SHIFT))&RTC_CR_SC8P_MASK)
N#define RTC_CR_SC4P_MASK                         0x1000u
N#define RTC_CR_SC4P_SHIFT                        12
N#define RTC_CR_SC4P_WIDTH                        1
N#define RTC_CR_SC4P(x)                           (((uint32_t)(((uint32_t)(x))<<RTC_CR_SC4P_SHIFT))&RTC_CR_SC4P_MASK)
N#define RTC_CR_SC2P_MASK                         0x2000u
N#define RTC_CR_SC2P_SHIFT                        13
N#define RTC_CR_SC2P_WIDTH                        1
N#define RTC_CR_SC2P(x)                           (((uint32_t)(((uint32_t)(x))<<RTC_CR_SC2P_SHIFT))&RTC_CR_SC2P_MASK)
N/* SR Bit Fields */
N#define RTC_SR_TIF_MASK                          0x1u
N#define RTC_SR_TIF_SHIFT                         0
N#define RTC_SR_TIF_WIDTH                         1
N#define RTC_SR_TIF(x)                            (((uint32_t)(((uint32_t)(x))<<RTC_SR_TIF_SHIFT))&RTC_SR_TIF_MASK)
N#define RTC_SR_TOF_MASK                          0x2u
N#define RTC_SR_TOF_SHIFT                         1
N#define RTC_SR_TOF_WIDTH                         1
N#define RTC_SR_TOF(x)                            (((uint32_t)(((uint32_t)(x))<<RTC_SR_TOF_SHIFT))&RTC_SR_TOF_MASK)
N#define RTC_SR_TAF_MASK                          0x4u
N#define RTC_SR_TAF_SHIFT                         2
N#define RTC_SR_TAF_WIDTH                         1
N#define RTC_SR_TAF(x)                            (((uint32_t)(((uint32_t)(x))<<RTC_SR_TAF_SHIFT))&RTC_SR_TAF_MASK)
N#define RTC_SR_TCE_MASK                          0x10u
N#define RTC_SR_TCE_SHIFT                         4
N#define RTC_SR_TCE_WIDTH                         1
N#define RTC_SR_TCE(x)                            (((uint32_t)(((uint32_t)(x))<<RTC_SR_TCE_SHIFT))&RTC_SR_TCE_MASK)
N/* LR Bit Fields */
N#define RTC_LR_TCL_MASK                          0x8u
N#define RTC_LR_TCL_SHIFT                         3
N#define RTC_LR_TCL_WIDTH                         1
N#define RTC_LR_TCL(x)                            (((uint32_t)(((uint32_t)(x))<<RTC_LR_TCL_SHIFT))&RTC_LR_TCL_MASK)
N#define RTC_LR_CRL_MASK                          0x10u
N#define RTC_LR_CRL_SHIFT                         4
N#define RTC_LR_CRL_WIDTH                         1
N#define RTC_LR_CRL(x)                            (((uint32_t)(((uint32_t)(x))<<RTC_LR_CRL_SHIFT))&RTC_LR_CRL_MASK)
N#define RTC_LR_SRL_MASK                          0x20u
N#define RTC_LR_SRL_SHIFT                         5
N#define RTC_LR_SRL_WIDTH                         1
N#define RTC_LR_SRL(x)                            (((uint32_t)(((uint32_t)(x))<<RTC_LR_SRL_SHIFT))&RTC_LR_SRL_MASK)
N#define RTC_LR_LRL_MASK                          0x40u
N#define RTC_LR_LRL_SHIFT                         6
N#define RTC_LR_LRL_WIDTH                         1
N#define RTC_LR_LRL(x)                            (((uint32_t)(((uint32_t)(x))<<RTC_LR_LRL_SHIFT))&RTC_LR_LRL_MASK)
N/* IER Bit Fields */
N#define RTC_IER_TIIE_MASK                        0x1u
N#define RTC_IER_TIIE_SHIFT                       0
N#define RTC_IER_TIIE_WIDTH                       1
N#define RTC_IER_TIIE(x)                          (((uint32_t)(((uint32_t)(x))<<RTC_IER_TIIE_SHIFT))&RTC_IER_TIIE_MASK)
N#define RTC_IER_TOIE_MASK                        0x2u
N#define RTC_IER_TOIE_SHIFT                       1
N#define RTC_IER_TOIE_WIDTH                       1
N#define RTC_IER_TOIE(x)                          (((uint32_t)(((uint32_t)(x))<<RTC_IER_TOIE_SHIFT))&RTC_IER_TOIE_MASK)
N#define RTC_IER_TAIE_MASK                        0x4u
N#define RTC_IER_TAIE_SHIFT                       2
N#define RTC_IER_TAIE_WIDTH                       1
N#define RTC_IER_TAIE(x)                          (((uint32_t)(((uint32_t)(x))<<RTC_IER_TAIE_SHIFT))&RTC_IER_TAIE_MASK)
N#define RTC_IER_TSIE_MASK                        0x10u
N#define RTC_IER_TSIE_SHIFT                       4
N#define RTC_IER_TSIE_WIDTH                       1
N#define RTC_IER_TSIE(x)                          (((uint32_t)(((uint32_t)(x))<<RTC_IER_TSIE_SHIFT))&RTC_IER_TSIE_MASK)
N#define RTC_IER_WPON_MASK                        0x80u
N#define RTC_IER_WPON_SHIFT                       7
N#define RTC_IER_WPON_WIDTH                       1
N#define RTC_IER_WPON(x)                          (((uint32_t)(((uint32_t)(x))<<RTC_IER_WPON_SHIFT))&RTC_IER_WPON_MASK)
N
N/*!
N * @}
N */ /* end of group RTC_Register_Masks */
N
N
N/* RTC - Peripheral instance base addresses */
N/** Peripheral RTC base address */
N#define RTC_BASE                                 (0x4003D000u)
N/** Peripheral RTC base pointer */
N#define RTC                                      ((RTC_Type *)RTC_BASE)
N#define RTC_BASE_PTR                             (RTC)
N/** Array initializer of RTC peripheral base addresses */
N#define RTC_BASE_ADDRS                           { RTC_BASE }
N/** Array initializer of RTC peripheral base pointers */
N#define RTC_BASE_PTRS                            { RTC }
N/** Interrupt vectors for the RTC peripheral type */
N#define RTC_IRQS                                 { RTC_IRQn }
N#define RTC_SECONDS_IRQS                         { RTC_Seconds_IRQn }
N
N/* ----------------------------------------------------------------------------
N   -- RTC - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup RTC_Register_Accessor_Macros RTC - Register accessor macros
N * @{
N */
N
N
N/* RTC - Register instance definitions */
N/* RTC */
N#define RTC_TSR                                  RTC_TSR_REG(RTC)
N#define RTC_TPR                                  RTC_TPR_REG(RTC)
N#define RTC_TAR                                  RTC_TAR_REG(RTC)
N#define RTC_TCR                                  RTC_TCR_REG(RTC)
N#define RTC_CR                                   RTC_CR_REG(RTC)
N#define RTC_SR                                   RTC_SR_REG(RTC)
N#define RTC_LR                                   RTC_LR_REG(RTC)
N#define RTC_IER                                  RTC_IER_REG(RTC)
N
N/*!
N * @}
N */ /* end of group RTC_Register_Accessor_Macros */
N
N
N/*!
N * @}
N */ /* end of group RTC_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- SIM Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup SIM_Peripheral_Access_Layer SIM Peripheral Access Layer
N * @{
N */
N
N/** SIM - Register Layout Typedef */
Ntypedef struct {
N  __IO uint32_t SOPT1;                             /**< System Options Register 1, offset: 0x0 */
X  volatile uint32_t SOPT1;                              
N  __IO uint32_t SOPT1CFG;                          /**< SOPT1 Configuration Register, offset: 0x4 */
X  volatile uint32_t SOPT1CFG;                           
N       uint8_t RESERVED_0[4092];
N  __IO uint32_t SOPT2;                             /**< System Options Register 2, offset: 0x1004 */
X  volatile uint32_t SOPT2;                              
N       uint8_t RESERVED_1[4];
N  __IO uint32_t SOPT4;                             /**< System Options Register 4, offset: 0x100C */
X  volatile uint32_t SOPT4;                              
N  __IO uint32_t SOPT5;                             /**< System Options Register 5, offset: 0x1010 */
X  volatile uint32_t SOPT5;                              
N       uint8_t RESERVED_2[4];
N  __IO uint32_t SOPT7;                             /**< System Options Register 7, offset: 0x1018 */
X  volatile uint32_t SOPT7;                              
N       uint8_t RESERVED_3[8];
N  __I  uint32_t SDID;                              /**< System Device Identification Register, offset: 0x1024 */
X  volatile const  uint32_t SDID;                               
N       uint8_t RESERVED_4[12];
N  __IO uint32_t SCGC4;                             /**< System Clock Gating Control Register 4, offset: 0x1034 */
X  volatile uint32_t SCGC4;                              
N  __IO uint32_t SCGC5;                             /**< System Clock Gating Control Register 5, offset: 0x1038 */
X  volatile uint32_t SCGC5;                              
N  __IO uint32_t SCGC6;                             /**< System Clock Gating Control Register 6, offset: 0x103C */
X  volatile uint32_t SCGC6;                              
N  __IO uint32_t SCGC7;                             /**< System Clock Gating Control Register 7, offset: 0x1040 */
X  volatile uint32_t SCGC7;                              
N  __IO uint32_t CLKDIV1;                           /**< System Clock Divider Register 1, offset: 0x1044 */
X  volatile uint32_t CLKDIV1;                            
N       uint8_t RESERVED_5[4];
N  __IO uint32_t FCFG1;                             /**< Flash Configuration Register 1, offset: 0x104C */
X  volatile uint32_t FCFG1;                              
N  __I  uint32_t FCFG2;                             /**< Flash Configuration Register 2, offset: 0x1050 */
X  volatile const  uint32_t FCFG2;                              
N       uint8_t RESERVED_6[4];
N  __I  uint32_t UIDMH;                             /**< Unique Identification Register Mid-High, offset: 0x1058 */
X  volatile const  uint32_t UIDMH;                              
N  __I  uint32_t UIDML;                             /**< Unique Identification Register Mid Low, offset: 0x105C */
X  volatile const  uint32_t UIDML;                              
N  __I  uint32_t UIDL;                              /**< Unique Identification Register Low, offset: 0x1060 */
X  volatile const  uint32_t UIDL;                               
N       uint8_t RESERVED_7[156];
N  __IO uint32_t COPC;                              /**< COP Control Register, offset: 0x1100 */
X  volatile uint32_t COPC;                               
N  __O  uint32_t SRVCOP;                            /**< Service COP Register, offset: 0x1104 */
X  volatile  uint32_t SRVCOP;                             
N} SIM_Type, *SIM_MemMapPtr;
N
N/* ----------------------------------------------------------------------------
N   -- SIM - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup SIM_Register_Accessor_Macros SIM - Register accessor macros
N * @{
N */
N
N
N/* SIM - Register accessors */
N#define SIM_SOPT1_REG(base)                      ((base)->SOPT1)
N#define SIM_SOPT1CFG_REG(base)                   ((base)->SOPT1CFG)
N#define SIM_SOPT2_REG(base)                      ((base)->SOPT2)
N#define SIM_SOPT4_REG(base)                      ((base)->SOPT4)
N#define SIM_SOPT5_REG(base)                      ((base)->SOPT5)
N#define SIM_SOPT7_REG(base)                      ((base)->SOPT7)
N#define SIM_SDID_REG(base)                       ((base)->SDID)
N#define SIM_SCGC4_REG(base)                      ((base)->SCGC4)
N#define SIM_SCGC5_REG(base)                      ((base)->SCGC5)
N#define SIM_SCGC6_REG(base)                      ((base)->SCGC6)
N#define SIM_SCGC7_REG(base)                      ((base)->SCGC7)
N#define SIM_CLKDIV1_REG(base)                    ((base)->CLKDIV1)
N#define SIM_FCFG1_REG(base)                      ((base)->FCFG1)
N#define SIM_FCFG2_REG(base)                      ((base)->FCFG2)
N#define SIM_UIDMH_REG(base)                      ((base)->UIDMH)
N#define SIM_UIDML_REG(base)                      ((base)->UIDML)
N#define SIM_UIDL_REG(base)                       ((base)->UIDL)
N#define SIM_COPC_REG(base)                       ((base)->COPC)
N#define SIM_SRVCOP_REG(base)                     ((base)->SRVCOP)
N
N/*!
N * @}
N */ /* end of group SIM_Register_Accessor_Macros */
N
N
N/* ----------------------------------------------------------------------------
N   -- SIM Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup SIM_Register_Masks SIM Register Masks
N * @{
N */
N
N/* SOPT1 Bit Fields */
N#define SIM_SOPT1_OSC32KSEL_MASK                 0xC0000u
N#define SIM_SOPT1_OSC32KSEL_SHIFT                18
N#define SIM_SOPT1_OSC32KSEL_WIDTH                2
N#define SIM_SOPT1_OSC32KSEL(x)                   (((uint32_t)(((uint32_t)(x))<<SIM_SOPT1_OSC32KSEL_SHIFT))&SIM_SOPT1_OSC32KSEL_MASK)
N#define SIM_SOPT1_USBVSTBY_MASK                  0x20000000u
N#define SIM_SOPT1_USBVSTBY_SHIFT                 29
N#define SIM_SOPT1_USBVSTBY_WIDTH                 1
N#define SIM_SOPT1_USBVSTBY(x)                    (((uint32_t)(((uint32_t)(x))<<SIM_SOPT1_USBVSTBY_SHIFT))&SIM_SOPT1_USBVSTBY_MASK)
N#define SIM_SOPT1_USBSSTBY_MASK                  0x40000000u
N#define SIM_SOPT1_USBSSTBY_SHIFT                 30
N#define SIM_SOPT1_USBSSTBY_WIDTH                 1
N#define SIM_SOPT1_USBSSTBY(x)                    (((uint32_t)(((uint32_t)(x))<<SIM_SOPT1_USBSSTBY_SHIFT))&SIM_SOPT1_USBSSTBY_MASK)
N#define SIM_SOPT1_USBREGEN_MASK                  0x80000000u
N#define SIM_SOPT1_USBREGEN_SHIFT                 31
N#define SIM_SOPT1_USBREGEN_WIDTH                 1
N#define SIM_SOPT1_USBREGEN(x)                    (((uint32_t)(((uint32_t)(x))<<SIM_SOPT1_USBREGEN_SHIFT))&SIM_SOPT1_USBREGEN_MASK)
N/* SOPT1CFG Bit Fields */
N#define SIM_SOPT1CFG_URWE_MASK                   0x1000000u
N#define SIM_SOPT1CFG_URWE_SHIFT                  24
N#define SIM_SOPT1CFG_URWE_WIDTH                  1
N#define SIM_SOPT1CFG_URWE(x)                     (((uint32_t)(((uint32_t)(x))<<SIM_SOPT1CFG_URWE_SHIFT))&SIM_SOPT1CFG_URWE_MASK)
N#define SIM_SOPT1CFG_UVSWE_MASK                  0x2000000u
N#define SIM_SOPT1CFG_UVSWE_SHIFT                 25
N#define SIM_SOPT1CFG_UVSWE_WIDTH                 1
N#define SIM_SOPT1CFG_UVSWE(x)                    (((uint32_t)(((uint32_t)(x))<<SIM_SOPT1CFG_UVSWE_SHIFT))&SIM_SOPT1CFG_UVSWE_MASK)
N#define SIM_SOPT1CFG_USSWE_MASK                  0x4000000u
N#define SIM_SOPT1CFG_USSWE_SHIFT                 26
N#define SIM_SOPT1CFG_USSWE_WIDTH                 1
N#define SIM_SOPT1CFG_USSWE(x)                    (((uint32_t)(((uint32_t)(x))<<SIM_SOPT1CFG_USSWE_SHIFT))&SIM_SOPT1CFG_USSWE_MASK)
N/* SOPT2 Bit Fields */
N#define SIM_SOPT2_RTCCLKOUTSEL_MASK              0x10u
N#define SIM_SOPT2_RTCCLKOUTSEL_SHIFT             4
N#define SIM_SOPT2_RTCCLKOUTSEL_WIDTH             1
N#define SIM_SOPT2_RTCCLKOUTSEL(x)                (((uint32_t)(((uint32_t)(x))<<SIM_SOPT2_RTCCLKOUTSEL_SHIFT))&SIM_SOPT2_RTCCLKOUTSEL_MASK)
N#define SIM_SOPT2_CLKOUTSEL_MASK                 0xE0u
N#define SIM_SOPT2_CLKOUTSEL_SHIFT                5
N#define SIM_SOPT2_CLKOUTSEL_WIDTH                3
N#define SIM_SOPT2_CLKOUTSEL(x)                   (((uint32_t)(((uint32_t)(x))<<SIM_SOPT2_CLKOUTSEL_SHIFT))&SIM_SOPT2_CLKOUTSEL_MASK)
N#define SIM_SOPT2_PLLFLLSEL_MASK                 0x10000u
N#define SIM_SOPT2_PLLFLLSEL_SHIFT                16
N#define SIM_SOPT2_PLLFLLSEL_WIDTH                1
N#define SIM_SOPT2_PLLFLLSEL(x)                   (((uint32_t)(((uint32_t)(x))<<SIM_SOPT2_PLLFLLSEL_SHIFT))&SIM_SOPT2_PLLFLLSEL_MASK)
N#define SIM_SOPT2_USBSRC_MASK                    0x40000u
N#define SIM_SOPT2_USBSRC_SHIFT                   18
N#define SIM_SOPT2_USBSRC_WIDTH                   1
N#define SIM_SOPT2_USBSRC(x)                      (((uint32_t)(((uint32_t)(x))<<SIM_SOPT2_USBSRC_SHIFT))&SIM_SOPT2_USBSRC_MASK)
N#define SIM_SOPT2_TPMSRC_MASK                    0x3000000u
N#define SIM_SOPT2_TPMSRC_SHIFT                   24
N#define SIM_SOPT2_TPMSRC_WIDTH                   2
N#define SIM_SOPT2_TPMSRC(x)                      (((uint32_t)(((uint32_t)(x))<<SIM_SOPT2_TPMSRC_SHIFT))&SIM_SOPT2_TPMSRC_MASK)
N#define SIM_SOPT2_UART0SRC_MASK                  0xC000000u
N#define SIM_SOPT2_UART0SRC_SHIFT                 26
N#define SIM_SOPT2_UART0SRC_WIDTH                 2
N#define SIM_SOPT2_UART0SRC(x)                    (((uint32_t)(((uint32_t)(x))<<SIM_SOPT2_UART0SRC_SHIFT))&SIM_SOPT2_UART0SRC_MASK)
N/* SOPT4 Bit Fields */
N#define SIM_SOPT4_TPM1CH0SRC_MASK                0x40000u
N#define SIM_SOPT4_TPM1CH0SRC_SHIFT               18
N#define SIM_SOPT4_TPM1CH0SRC_WIDTH               1
N#define SIM_SOPT4_TPM1CH0SRC(x)                  (((uint32_t)(((uint32_t)(x))<<SIM_SOPT4_TPM1CH0SRC_SHIFT))&SIM_SOPT4_TPM1CH0SRC_MASK)
N#define SIM_SOPT4_TPM2CH0SRC_MASK                0x100000u
N#define SIM_SOPT4_TPM2CH0SRC_SHIFT               20
N#define SIM_SOPT4_TPM2CH0SRC_WIDTH               1
N#define SIM_SOPT4_TPM2CH0SRC(x)                  (((uint32_t)(((uint32_t)(x))<<SIM_SOPT4_TPM2CH0SRC_SHIFT))&SIM_SOPT4_TPM2CH0SRC_MASK)
N#define SIM_SOPT4_TPM0CLKSEL_MASK                0x1000000u
N#define SIM_SOPT4_TPM0CLKSEL_SHIFT               24
N#define SIM_SOPT4_TPM0CLKSEL_WIDTH               1
N#define SIM_SOPT4_TPM0CLKSEL(x)                  (((uint32_t)(((uint32_t)(x))<<SIM_SOPT4_TPM0CLKSEL_SHIFT))&SIM_SOPT4_TPM0CLKSEL_MASK)
N#define SIM_SOPT4_TPM1CLKSEL_MASK                0x2000000u
N#define SIM_SOPT4_TPM1CLKSEL_SHIFT               25
N#define SIM_SOPT4_TPM1CLKSEL_WIDTH               1
N#define SIM_SOPT4_TPM1CLKSEL(x)                  (((uint32_t)(((uint32_t)(x))<<SIM_SOPT4_TPM1CLKSEL_SHIFT))&SIM_SOPT4_TPM1CLKSEL_MASK)
N#define SIM_SOPT4_TPM2CLKSEL_MASK                0x4000000u
N#define SIM_SOPT4_TPM2CLKSEL_SHIFT               26
N#define SIM_SOPT4_TPM2CLKSEL_WIDTH               1
N#define SIM_SOPT4_TPM2CLKSEL(x)                  (((uint32_t)(((uint32_t)(x))<<SIM_SOPT4_TPM2CLKSEL_SHIFT))&SIM_SOPT4_TPM2CLKSEL_MASK)
N/* SOPT5 Bit Fields */
N#define SIM_SOPT5_UART0TXSRC_MASK                0x3u
N#define SIM_SOPT5_UART0TXSRC_SHIFT               0
N#define SIM_SOPT5_UART0TXSRC_WIDTH               2
N#define SIM_SOPT5_UART0TXSRC(x)                  (((uint32_t)(((uint32_t)(x))<<SIM_SOPT5_UART0TXSRC_SHIFT))&SIM_SOPT5_UART0TXSRC_MASK)
N#define SIM_SOPT5_UART0RXSRC_MASK                0x4u
N#define SIM_SOPT5_UART0RXSRC_SHIFT               2
N#define SIM_SOPT5_UART0RXSRC_WIDTH               1
N#define SIM_SOPT5_UART0RXSRC(x)                  (((uint32_t)(((uint32_t)(x))<<SIM_SOPT5_UART0RXSRC_SHIFT))&SIM_SOPT5_UART0RXSRC_MASK)
N#define SIM_SOPT5_UART1TXSRC_MASK                0x30u
N#define SIM_SOPT5_UART1TXSRC_SHIFT               4
N#define SIM_SOPT5_UART1TXSRC_WIDTH               2
N#define SIM_SOPT5_UART1TXSRC(x)                  (((uint32_t)(((uint32_t)(x))<<SIM_SOPT5_UART1TXSRC_SHIFT))&SIM_SOPT5_UART1TXSRC_MASK)
N#define SIM_SOPT5_UART1RXSRC_MASK                0x40u
N#define SIM_SOPT5_UART1RXSRC_SHIFT               6
N#define SIM_SOPT5_UART1RXSRC_WIDTH               1
N#define SIM_SOPT5_UART1RXSRC(x)                  (((uint32_t)(((uint32_t)(x))<<SIM_SOPT5_UART1RXSRC_SHIFT))&SIM_SOPT5_UART1RXSRC_MASK)
N#define SIM_SOPT5_UART0ODE_MASK                  0x10000u
N#define SIM_SOPT5_UART0ODE_SHIFT                 16
N#define SIM_SOPT5_UART0ODE_WIDTH                 1
N#define SIM_SOPT5_UART0ODE(x)                    (((uint32_t)(((uint32_t)(x))<<SIM_SOPT5_UART0ODE_SHIFT))&SIM_SOPT5_UART0ODE_MASK)
N#define SIM_SOPT5_UART1ODE_MASK                  0x20000u
N#define SIM_SOPT5_UART1ODE_SHIFT                 17
N#define SIM_SOPT5_UART1ODE_WIDTH                 1
N#define SIM_SOPT5_UART1ODE(x)                    (((uint32_t)(((uint32_t)(x))<<SIM_SOPT5_UART1ODE_SHIFT))&SIM_SOPT5_UART1ODE_MASK)
N#define SIM_SOPT5_UART2ODE_MASK                  0x40000u
N#define SIM_SOPT5_UART2ODE_SHIFT                 18
N#define SIM_SOPT5_UART2ODE_WIDTH                 1
N#define SIM_SOPT5_UART2ODE(x)                    (((uint32_t)(((uint32_t)(x))<<SIM_SOPT5_UART2ODE_SHIFT))&SIM_SOPT5_UART2ODE_MASK)
N/* SOPT7 Bit Fields */
N#define SIM_SOPT7_ADC0TRGSEL_MASK                0xFu
N#define SIM_SOPT7_ADC0TRGSEL_SHIFT               0
N#define SIM_SOPT7_ADC0TRGSEL_WIDTH               4
N#define SIM_SOPT7_ADC0TRGSEL(x)                  (((uint32_t)(((uint32_t)(x))<<SIM_SOPT7_ADC0TRGSEL_SHIFT))&SIM_SOPT7_ADC0TRGSEL_MASK)
N#define SIM_SOPT7_ADC0PRETRGSEL_MASK             0x10u
N#define SIM_SOPT7_ADC0PRETRGSEL_SHIFT            4
N#define SIM_SOPT7_ADC0PRETRGSEL_WIDTH            1
N#define SIM_SOPT7_ADC0PRETRGSEL(x)               (((uint32_t)(((uint32_t)(x))<<SIM_SOPT7_ADC0PRETRGSEL_SHIFT))&SIM_SOPT7_ADC0PRETRGSEL_MASK)
N#define SIM_SOPT7_ADC0ALTTRGEN_MASK              0x80u
N#define SIM_SOPT7_ADC0ALTTRGEN_SHIFT             7
N#define SIM_SOPT7_ADC0ALTTRGEN_WIDTH             1
N#define SIM_SOPT7_ADC0ALTTRGEN(x)                (((uint32_t)(((uint32_t)(x))<<SIM_SOPT7_ADC0ALTTRGEN_SHIFT))&SIM_SOPT7_ADC0ALTTRGEN_MASK)
N/* SDID Bit Fields */
N#define SIM_SDID_PINID_MASK                      0xFu
N#define SIM_SDID_PINID_SHIFT                     0
N#define SIM_SDID_PINID_WIDTH                     4
N#define SIM_SDID_PINID(x)                        (((uint32_t)(((uint32_t)(x))<<SIM_SDID_PINID_SHIFT))&SIM_SDID_PINID_MASK)
N#define SIM_SDID_DIEID_MASK                      0xF80u
N#define SIM_SDID_DIEID_SHIFT                     7
N#define SIM_SDID_DIEID_WIDTH                     5
N#define SIM_SDID_DIEID(x)                        (((uint32_t)(((uint32_t)(x))<<SIM_SDID_DIEID_SHIFT))&SIM_SDID_DIEID_MASK)
N#define SIM_SDID_REVID_MASK                      0xF000u
N#define SIM_SDID_REVID_SHIFT                     12
N#define SIM_SDID_REVID_WIDTH                     4
N#define SIM_SDID_REVID(x)                        (((uint32_t)(((uint32_t)(x))<<SIM_SDID_REVID_SHIFT))&SIM_SDID_REVID_MASK)
N#define SIM_SDID_SRAMSIZE_MASK                   0xF0000u
N#define SIM_SDID_SRAMSIZE_SHIFT                  16
N#define SIM_SDID_SRAMSIZE_WIDTH                  4
N#define SIM_SDID_SRAMSIZE(x)                     (((uint32_t)(((uint32_t)(x))<<SIM_SDID_SRAMSIZE_SHIFT))&SIM_SDID_SRAMSIZE_MASK)
N#define SIM_SDID_SERIESID_MASK                   0xF00000u
N#define SIM_SDID_SERIESID_SHIFT                  20
N#define SIM_SDID_SERIESID_WIDTH                  4
N#define SIM_SDID_SERIESID(x)                     (((uint32_t)(((uint32_t)(x))<<SIM_SDID_SERIESID_SHIFT))&SIM_SDID_SERIESID_MASK)
N#define SIM_SDID_SUBFAMID_MASK                   0xF000000u
N#define SIM_SDID_SUBFAMID_SHIFT                  24
N#define SIM_SDID_SUBFAMID_WIDTH                  4
N#define SIM_SDID_SUBFAMID(x)                     (((uint32_t)(((uint32_t)(x))<<SIM_SDID_SUBFAMID_SHIFT))&SIM_SDID_SUBFAMID_MASK)
N#define SIM_SDID_FAMID_MASK                      0xF0000000u
N#define SIM_SDID_FAMID_SHIFT                     28
N#define SIM_SDID_FAMID_WIDTH                     4
N#define SIM_SDID_FAMID(x)                        (((uint32_t)(((uint32_t)(x))<<SIM_SDID_FAMID_SHIFT))&SIM_SDID_FAMID_MASK)
N/* SCGC4 Bit Fields */
N#define SIM_SCGC4_I2C0_MASK                      0x40u
N#define SIM_SCGC4_I2C0_SHIFT                     6
N#define SIM_SCGC4_I2C0_WIDTH                     1
N#define SIM_SCGC4_I2C0(x)                        (((uint32_t)(((uint32_t)(x))<<SIM_SCGC4_I2C0_SHIFT))&SIM_SCGC4_I2C0_MASK)
N#define SIM_SCGC4_I2C1_MASK                      0x80u
N#define SIM_SCGC4_I2C1_SHIFT                     7
N#define SIM_SCGC4_I2C1_WIDTH                     1
N#define SIM_SCGC4_I2C1(x)                        (((uint32_t)(((uint32_t)(x))<<SIM_SCGC4_I2C1_SHIFT))&SIM_SCGC4_I2C1_MASK)
N#define SIM_SCGC4_UART0_MASK                     0x400u
N#define SIM_SCGC4_UART0_SHIFT                    10
N#define SIM_SCGC4_UART0_WIDTH                    1
N#define SIM_SCGC4_UART0(x)                       (((uint32_t)(((uint32_t)(x))<<SIM_SCGC4_UART0_SHIFT))&SIM_SCGC4_UART0_MASK)
N#define SIM_SCGC4_UART1_MASK                     0x800u
N#define SIM_SCGC4_UART1_SHIFT                    11
N#define SIM_SCGC4_UART1_WIDTH                    1
N#define SIM_SCGC4_UART1(x)                       (((uint32_t)(((uint32_t)(x))<<SIM_SCGC4_UART1_SHIFT))&SIM_SCGC4_UART1_MASK)
N#define SIM_SCGC4_UART2_MASK                     0x1000u
N#define SIM_SCGC4_UART2_SHIFT                    12
N#define SIM_SCGC4_UART2_WIDTH                    1
N#define SIM_SCGC4_UART2(x)                       (((uint32_t)(((uint32_t)(x))<<SIM_SCGC4_UART2_SHIFT))&SIM_SCGC4_UART2_MASK)
N#define SIM_SCGC4_USBOTG_MASK                    0x40000u
N#define SIM_SCGC4_USBOTG_SHIFT                   18
N#define SIM_SCGC4_USBOTG_WIDTH                   1
N#define SIM_SCGC4_USBOTG(x)                      (((uint32_t)(((uint32_t)(x))<<SIM_SCGC4_USBOTG_SHIFT))&SIM_SCGC4_USBOTG_MASK)
N#define SIM_SCGC4_CMP_MASK                       0x80000u
N#define SIM_SCGC4_CMP_SHIFT                      19
N#define SIM_SCGC4_CMP_WIDTH                      1
N#define SIM_SCGC4_CMP(x)                         (((uint32_t)(((uint32_t)(x))<<SIM_SCGC4_CMP_SHIFT))&SIM_SCGC4_CMP_MASK)
N#define SIM_SCGC4_SPI0_MASK                      0x400000u
N#define SIM_SCGC4_SPI0_SHIFT                     22
N#define SIM_SCGC4_SPI0_WIDTH                     1
N#define SIM_SCGC4_SPI0(x)                        (((uint32_t)(((uint32_t)(x))<<SIM_SCGC4_SPI0_SHIFT))&SIM_SCGC4_SPI0_MASK)
N#define SIM_SCGC4_SPI1_MASK                      0x800000u
N#define SIM_SCGC4_SPI1_SHIFT                     23
N#define SIM_SCGC4_SPI1_WIDTH                     1
N#define SIM_SCGC4_SPI1(x)                        (((uint32_t)(((uint32_t)(x))<<SIM_SCGC4_SPI1_SHIFT))&SIM_SCGC4_SPI1_MASK)
N/* SCGC5 Bit Fields */
N#define SIM_SCGC5_LPTMR_MASK                     0x1u
N#define SIM_SCGC5_LPTMR_SHIFT                    0
N#define SIM_SCGC5_LPTMR_WIDTH                    1
N#define SIM_SCGC5_LPTMR(x)                       (((uint32_t)(((uint32_t)(x))<<SIM_SCGC5_LPTMR_SHIFT))&SIM_SCGC5_LPTMR_MASK)
N#define SIM_SCGC5_TSI_MASK                       0x20u
N#define SIM_SCGC5_TSI_SHIFT                      5
N#define SIM_SCGC5_TSI_WIDTH                      1
N#define SIM_SCGC5_TSI(x)                         (((uint32_t)(((uint32_t)(x))<<SIM_SCGC5_TSI_SHIFT))&SIM_SCGC5_TSI_MASK)
N#define SIM_SCGC5_PORTA_MASK                     0x200u
N#define SIM_SCGC5_PORTA_SHIFT                    9
N#define SIM_SCGC5_PORTA_WIDTH                    1
N#define SIM_SCGC5_PORTA(x)                       (((uint32_t)(((uint32_t)(x))<<SIM_SCGC5_PORTA_SHIFT))&SIM_SCGC5_PORTA_MASK)
N#define SIM_SCGC5_PORTB_MASK                     0x400u
N#define SIM_SCGC5_PORTB_SHIFT                    10
N#define SIM_SCGC5_PORTB_WIDTH                    1
N#define SIM_SCGC5_PORTB(x)                       (((uint32_t)(((uint32_t)(x))<<SIM_SCGC5_PORTB_SHIFT))&SIM_SCGC5_PORTB_MASK)
N#define SIM_SCGC5_PORTC_MASK                     0x800u
N#define SIM_SCGC5_PORTC_SHIFT                    11
N#define SIM_SCGC5_PORTC_WIDTH                    1
N#define SIM_SCGC5_PORTC(x)                       (((uint32_t)(((uint32_t)(x))<<SIM_SCGC5_PORTC_SHIFT))&SIM_SCGC5_PORTC_MASK)
N#define SIM_SCGC5_PORTD_MASK                     0x1000u
N#define SIM_SCGC5_PORTD_SHIFT                    12
N#define SIM_SCGC5_PORTD_WIDTH                    1
N#define SIM_SCGC5_PORTD(x)                       (((uint32_t)(((uint32_t)(x))<<SIM_SCGC5_PORTD_SHIFT))&SIM_SCGC5_PORTD_MASK)
N#define SIM_SCGC5_PORTE_MASK                     0x2000u
N#define SIM_SCGC5_PORTE_SHIFT                    13
N#define SIM_SCGC5_PORTE_WIDTH                    1
N#define SIM_SCGC5_PORTE(x)                       (((uint32_t)(((uint32_t)(x))<<SIM_SCGC5_PORTE_SHIFT))&SIM_SCGC5_PORTE_MASK)
N/* SCGC6 Bit Fields */
N#define SIM_SCGC6_FTF_MASK                       0x1u
N#define SIM_SCGC6_FTF_SHIFT                      0
N#define SIM_SCGC6_FTF_WIDTH                      1
N#define SIM_SCGC6_FTF(x)                         (((uint32_t)(((uint32_t)(x))<<SIM_SCGC6_FTF_SHIFT))&SIM_SCGC6_FTF_MASK)
N#define SIM_SCGC6_DMAMUX_MASK                    0x2u
N#define SIM_SCGC6_DMAMUX_SHIFT                   1
N#define SIM_SCGC6_DMAMUX_WIDTH                   1
N#define SIM_SCGC6_DMAMUX(x)                      (((uint32_t)(((uint32_t)(x))<<SIM_SCGC6_DMAMUX_SHIFT))&SIM_SCGC6_DMAMUX_MASK)
N#define SIM_SCGC6_PIT_MASK                       0x800000u
N#define SIM_SCGC6_PIT_SHIFT                      23
N#define SIM_SCGC6_PIT_WIDTH                      1
N#define SIM_SCGC6_PIT(x)                         (((uint32_t)(((uint32_t)(x))<<SIM_SCGC6_PIT_SHIFT))&SIM_SCGC6_PIT_MASK)
N#define SIM_SCGC6_TPM0_MASK                      0x1000000u
N#define SIM_SCGC6_TPM0_SHIFT                     24
N#define SIM_SCGC6_TPM0_WIDTH                     1
N#define SIM_SCGC6_TPM0(x)                        (((uint32_t)(((uint32_t)(x))<<SIM_SCGC6_TPM0_SHIFT))&SIM_SCGC6_TPM0_MASK)
N#define SIM_SCGC6_TPM1_MASK                      0x2000000u
N#define SIM_SCGC6_TPM1_SHIFT                     25
N#define SIM_SCGC6_TPM1_WIDTH                     1
N#define SIM_SCGC6_TPM1(x)                        (((uint32_t)(((uint32_t)(x))<<SIM_SCGC6_TPM1_SHIFT))&SIM_SCGC6_TPM1_MASK)
N#define SIM_SCGC6_TPM2_MASK                      0x4000000u
N#define SIM_SCGC6_TPM2_SHIFT                     26
N#define SIM_SCGC6_TPM2_WIDTH                     1
N#define SIM_SCGC6_TPM2(x)                        (((uint32_t)(((uint32_t)(x))<<SIM_SCGC6_TPM2_SHIFT))&SIM_SCGC6_TPM2_MASK)
N#define SIM_SCGC6_ADC0_MASK                      0x8000000u
N#define SIM_SCGC6_ADC0_SHIFT                     27
N#define SIM_SCGC6_ADC0_WIDTH                     1
N#define SIM_SCGC6_ADC0(x)                        (((uint32_t)(((uint32_t)(x))<<SIM_SCGC6_ADC0_SHIFT))&SIM_SCGC6_ADC0_MASK)
N#define SIM_SCGC6_RTC_MASK                       0x20000000u
N#define SIM_SCGC6_RTC_SHIFT                      29
N#define SIM_SCGC6_RTC_WIDTH                      1
N#define SIM_SCGC6_RTC(x)                         (((uint32_t)(((uint32_t)(x))<<SIM_SCGC6_RTC_SHIFT))&SIM_SCGC6_RTC_MASK)
N#define SIM_SCGC6_DAC0_MASK                      0x80000000u
N#define SIM_SCGC6_DAC0_SHIFT                     31
N#define SIM_SCGC6_DAC0_WIDTH                     1
N#define SIM_SCGC6_DAC0(x)                        (((uint32_t)(((uint32_t)(x))<<SIM_SCGC6_DAC0_SHIFT))&SIM_SCGC6_DAC0_MASK)
N/* SCGC7 Bit Fields */
N#define SIM_SCGC7_DMA_MASK                       0x100u
N#define SIM_SCGC7_DMA_SHIFT                      8
N#define SIM_SCGC7_DMA_WIDTH                      1
N#define SIM_SCGC7_DMA(x)                         (((uint32_t)(((uint32_t)(x))<<SIM_SCGC7_DMA_SHIFT))&SIM_SCGC7_DMA_MASK)
N/* CLKDIV1 Bit Fields */
N#define SIM_CLKDIV1_OUTDIV4_MASK                 0x70000u
N#define SIM_CLKDIV1_OUTDIV4_SHIFT                16
N#define SIM_CLKDIV1_OUTDIV4_WIDTH                3
N#define SIM_CLKDIV1_OUTDIV4(x)                   (((uint32_t)(((uint32_t)(x))<<SIM_CLKDIV1_OUTDIV4_SHIFT))&SIM_CLKDIV1_OUTDIV4_MASK)
N#define SIM_CLKDIV1_OUTDIV1_MASK                 0xF0000000u
N#define SIM_CLKDIV1_OUTDIV1_SHIFT                28
N#define SIM_CLKDIV1_OUTDIV1_WIDTH                4
N#define SIM_CLKDIV1_OUTDIV1(x)                   (((uint32_t)(((uint32_t)(x))<<SIM_CLKDIV1_OUTDIV1_SHIFT))&SIM_CLKDIV1_OUTDIV1_MASK)
N/* FCFG1 Bit Fields */
N#define SIM_FCFG1_FLASHDIS_MASK                  0x1u
N#define SIM_FCFG1_FLASHDIS_SHIFT                 0
N#define SIM_FCFG1_FLASHDIS_WIDTH                 1
N#define SIM_FCFG1_FLASHDIS(x)                    (((uint32_t)(((uint32_t)(x))<<SIM_FCFG1_FLASHDIS_SHIFT))&SIM_FCFG1_FLASHDIS_MASK)
N#define SIM_FCFG1_FLASHDOZE_MASK                 0x2u
N#define SIM_FCFG1_FLASHDOZE_SHIFT                1
N#define SIM_FCFG1_FLASHDOZE_WIDTH                1
N#define SIM_FCFG1_FLASHDOZE(x)                   (((uint32_t)(((uint32_t)(x))<<SIM_FCFG1_FLASHDOZE_SHIFT))&SIM_FCFG1_FLASHDOZE_MASK)
N#define SIM_FCFG1_PFSIZE_MASK                    0xF000000u
N#define SIM_FCFG1_PFSIZE_SHIFT                   24
N#define SIM_FCFG1_PFSIZE_WIDTH                   4
N#define SIM_FCFG1_PFSIZE(x)                      (((uint32_t)(((uint32_t)(x))<<SIM_FCFG1_PFSIZE_SHIFT))&SIM_FCFG1_PFSIZE_MASK)
N/* FCFG2 Bit Fields */
N#define SIM_FCFG2_MAXADDR0_MASK                  0x7F000000u
N#define SIM_FCFG2_MAXADDR0_SHIFT                 24
N#define SIM_FCFG2_MAXADDR0_WIDTH                 7
N#define SIM_FCFG2_MAXADDR0(x)                    (((uint32_t)(((uint32_t)(x))<<SIM_FCFG2_MAXADDR0_SHIFT))&SIM_FCFG2_MAXADDR0_MASK)
N/* UIDMH Bit Fields */
N#define SIM_UIDMH_UID_MASK                       0xFFFFu
N#define SIM_UIDMH_UID_SHIFT                      0
N#define SIM_UIDMH_UID_WIDTH                      16
N#define SIM_UIDMH_UID(x)                         (((uint32_t)(((uint32_t)(x))<<SIM_UIDMH_UID_SHIFT))&SIM_UIDMH_UID_MASK)
N/* UIDML Bit Fields */
N#define SIM_UIDML_UID_MASK                       0xFFFFFFFFu
N#define SIM_UIDML_UID_SHIFT                      0
N#define SIM_UIDML_UID_WIDTH                      32
N#define SIM_UIDML_UID(x)                         (((uint32_t)(((uint32_t)(x))<<SIM_UIDML_UID_SHIFT))&SIM_UIDML_UID_MASK)
N/* UIDL Bit Fields */
N#define SIM_UIDL_UID_MASK                        0xFFFFFFFFu
N#define SIM_UIDL_UID_SHIFT                       0
N#define SIM_UIDL_UID_WIDTH                       32
N#define SIM_UIDL_UID(x)                          (((uint32_t)(((uint32_t)(x))<<SIM_UIDL_UID_SHIFT))&SIM_UIDL_UID_MASK)
N/* COPC Bit Fields */
N#define SIM_COPC_COPW_MASK                       0x1u
N#define SIM_COPC_COPW_SHIFT                      0
N#define SIM_COPC_COPW_WIDTH                      1
N#define SIM_COPC_COPW(x)                         (((uint32_t)(((uint32_t)(x))<<SIM_COPC_COPW_SHIFT))&SIM_COPC_COPW_MASK)
N#define SIM_COPC_COPCLKS_MASK                    0x2u
N#define SIM_COPC_COPCLKS_SHIFT                   1
N#define SIM_COPC_COPCLKS_WIDTH                   1
N#define SIM_COPC_COPCLKS(x)                      (((uint32_t)(((uint32_t)(x))<<SIM_COPC_COPCLKS_SHIFT))&SIM_COPC_COPCLKS_MASK)
N#define SIM_COPC_COPT_MASK                       0xCu
N#define SIM_COPC_COPT_SHIFT                      2
N#define SIM_COPC_COPT_WIDTH                      2
N#define SIM_COPC_COPT(x)                         (((uint32_t)(((uint32_t)(x))<<SIM_COPC_COPT_SHIFT))&SIM_COPC_COPT_MASK)
N/* SRVCOP Bit Fields */
N#define SIM_SRVCOP_SRVCOP_MASK                   0xFFu
N#define SIM_SRVCOP_SRVCOP_SHIFT                  0
N#define SIM_SRVCOP_SRVCOP_WIDTH                  8
N#define SIM_SRVCOP_SRVCOP(x)                     (((uint32_t)(((uint32_t)(x))<<SIM_SRVCOP_SRVCOP_SHIFT))&SIM_SRVCOP_SRVCOP_MASK)
N
N/*!
N * @}
N */ /* end of group SIM_Register_Masks */
N
N
N/* SIM - Peripheral instance base addresses */
N/** Peripheral SIM base address */
N#define SIM_BASE                                 (0x40047000u)
N/** Peripheral SIM base pointer */
N#define SIM                                      ((SIM_Type *)SIM_BASE)
N#define SIM_BASE_PTR                             (SIM)
N/** Array initializer of SIM peripheral base addresses */
N#define SIM_BASE_ADDRS                           { SIM_BASE }
N/** Array initializer of SIM peripheral base pointers */
N#define SIM_BASE_PTRS                            { SIM }
N
N/* ----------------------------------------------------------------------------
N   -- SIM - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup SIM_Register_Accessor_Macros SIM - Register accessor macros
N * @{
N */
N
N
N/* SIM - Register instance definitions */
N/* SIM */
N#define SIM_SOPT1                                SIM_SOPT1_REG(SIM)
N#define SIM_SOPT1CFG                             SIM_SOPT1CFG_REG(SIM)
N#define SIM_SOPT2                                SIM_SOPT2_REG(SIM)
N#define SIM_SOPT4                                SIM_SOPT4_REG(SIM)
N#define SIM_SOPT5                                SIM_SOPT5_REG(SIM)
N#define SIM_SOPT7                                SIM_SOPT7_REG(SIM)
N#define SIM_SDID                                 SIM_SDID_REG(SIM)
N#define SIM_SCGC4                                SIM_SCGC4_REG(SIM)
N#define SIM_SCGC5                                SIM_SCGC5_REG(SIM)
N#define SIM_SCGC6                                SIM_SCGC6_REG(SIM)
N#define SIM_SCGC7                                SIM_SCGC7_REG(SIM)
N#define SIM_CLKDIV1                              SIM_CLKDIV1_REG(SIM)
N#define SIM_FCFG1                                SIM_FCFG1_REG(SIM)
N#define SIM_FCFG2                                SIM_FCFG2_REG(SIM)
N#define SIM_UIDMH                                SIM_UIDMH_REG(SIM)
N#define SIM_UIDML                                SIM_UIDML_REG(SIM)
N#define SIM_UIDL                                 SIM_UIDL_REG(SIM)
N#define SIM_COPC                                 SIM_COPC_REG(SIM)
N#define SIM_SRVCOP                               SIM_SRVCOP_REG(SIM)
N
N/*!
N * @}
N */ /* end of group SIM_Register_Accessor_Macros */
N
N
N/*!
N * @}
N */ /* end of group SIM_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- SMC Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup SMC_Peripheral_Access_Layer SMC Peripheral Access Layer
N * @{
N */
N
N/** SMC - Register Layout Typedef */
Ntypedef struct {
N  __IO uint8_t PMPROT;                             /**< Power Mode Protection register, offset: 0x0 */
X  volatile uint8_t PMPROT;                              
N  __IO uint8_t PMCTRL;                             /**< Power Mode Control register, offset: 0x1 */
X  volatile uint8_t PMCTRL;                              
N  __IO uint8_t STOPCTRL;                           /**< Stop Control Register, offset: 0x2 */
X  volatile uint8_t STOPCTRL;                            
N  __I  uint8_t PMSTAT;                             /**< Power Mode Status register, offset: 0x3 */
X  volatile const  uint8_t PMSTAT;                              
N} SMC_Type, *SMC_MemMapPtr;
N
N/* ----------------------------------------------------------------------------
N   -- SMC - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup SMC_Register_Accessor_Macros SMC - Register accessor macros
N * @{
N */
N
N
N/* SMC - Register accessors */
N#define SMC_PMPROT_REG(base)                     ((base)->PMPROT)
N#define SMC_PMCTRL_REG(base)                     ((base)->PMCTRL)
N#define SMC_STOPCTRL_REG(base)                   ((base)->STOPCTRL)
N#define SMC_PMSTAT_REG(base)                     ((base)->PMSTAT)
N
N/*!
N * @}
N */ /* end of group SMC_Register_Accessor_Macros */
N
N
N/* ----------------------------------------------------------------------------
N   -- SMC Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup SMC_Register_Masks SMC Register Masks
N * @{
N */
N
N/* PMPROT Bit Fields */
N#define SMC_PMPROT_AVLLS_MASK                    0x2u
N#define SMC_PMPROT_AVLLS_SHIFT                   1
N#define SMC_PMPROT_AVLLS_WIDTH                   1
N#define SMC_PMPROT_AVLLS(x)                      (((uint8_t)(((uint8_t)(x))<<SMC_PMPROT_AVLLS_SHIFT))&SMC_PMPROT_AVLLS_MASK)
N#define SMC_PMPROT_ALLS_MASK                     0x8u
N#define SMC_PMPROT_ALLS_SHIFT                    3
N#define SMC_PMPROT_ALLS_WIDTH                    1
N#define SMC_PMPROT_ALLS(x)                       (((uint8_t)(((uint8_t)(x))<<SMC_PMPROT_ALLS_SHIFT))&SMC_PMPROT_ALLS_MASK)
N#define SMC_PMPROT_AVLP_MASK                     0x20u
N#define SMC_PMPROT_AVLP_SHIFT                    5
N#define SMC_PMPROT_AVLP_WIDTH                    1
N#define SMC_PMPROT_AVLP(x)                       (((uint8_t)(((uint8_t)(x))<<SMC_PMPROT_AVLP_SHIFT))&SMC_PMPROT_AVLP_MASK)
N/* PMCTRL Bit Fields */
N#define SMC_PMCTRL_STOPM_MASK                    0x7u
N#define SMC_PMCTRL_STOPM_SHIFT                   0
N#define SMC_PMCTRL_STOPM_WIDTH                   3
N#define SMC_PMCTRL_STOPM(x)                      (((uint8_t)(((uint8_t)(x))<<SMC_PMCTRL_STOPM_SHIFT))&SMC_PMCTRL_STOPM_MASK)
N#define SMC_PMCTRL_STOPA_MASK                    0x8u
N#define SMC_PMCTRL_STOPA_SHIFT                   3
N#define SMC_PMCTRL_STOPA_WIDTH                   1
N#define SMC_PMCTRL_STOPA(x)                      (((uint8_t)(((uint8_t)(x))<<SMC_PMCTRL_STOPA_SHIFT))&SMC_PMCTRL_STOPA_MASK)
N#define SMC_PMCTRL_RUNM_MASK                     0x60u
N#define SMC_PMCTRL_RUNM_SHIFT                    5
N#define SMC_PMCTRL_RUNM_WIDTH                    2
N#define SMC_PMCTRL_RUNM(x)                       (((uint8_t)(((uint8_t)(x))<<SMC_PMCTRL_RUNM_SHIFT))&SMC_PMCTRL_RUNM_MASK)
N/* STOPCTRL Bit Fields */
N#define SMC_STOPCTRL_VLLSM_MASK                  0x7u
N#define SMC_STOPCTRL_VLLSM_SHIFT                 0
N#define SMC_STOPCTRL_VLLSM_WIDTH                 3
N#define SMC_STOPCTRL_VLLSM(x)                    (((uint8_t)(((uint8_t)(x))<<SMC_STOPCTRL_VLLSM_SHIFT))&SMC_STOPCTRL_VLLSM_MASK)
N#define SMC_STOPCTRL_PORPO_MASK                  0x20u
N#define SMC_STOPCTRL_PORPO_SHIFT                 5
N#define SMC_STOPCTRL_PORPO_WIDTH                 1
N#define SMC_STOPCTRL_PORPO(x)                    (((uint8_t)(((uint8_t)(x))<<SMC_STOPCTRL_PORPO_SHIFT))&SMC_STOPCTRL_PORPO_MASK)
N#define SMC_STOPCTRL_PSTOPO_MASK                 0xC0u
N#define SMC_STOPCTRL_PSTOPO_SHIFT                6
N#define SMC_STOPCTRL_PSTOPO_WIDTH                2
N#define SMC_STOPCTRL_PSTOPO(x)                   (((uint8_t)(((uint8_t)(x))<<SMC_STOPCTRL_PSTOPO_SHIFT))&SMC_STOPCTRL_PSTOPO_MASK)
N/* PMSTAT Bit Fields */
N#define SMC_PMSTAT_PMSTAT_MASK                   0x7Fu
N#define SMC_PMSTAT_PMSTAT_SHIFT                  0
N#define SMC_PMSTAT_PMSTAT_WIDTH                  7
N#define SMC_PMSTAT_PMSTAT(x)                     (((uint8_t)(((uint8_t)(x))<<SMC_PMSTAT_PMSTAT_SHIFT))&SMC_PMSTAT_PMSTAT_MASK)
N
N/*!
N * @}
N */ /* end of group SMC_Register_Masks */
N
N
N/* SMC - Peripheral instance base addresses */
N/** Peripheral SMC base address */
N#define SMC_BASE                                 (0x4007E000u)
N/** Peripheral SMC base pointer */
N#define SMC                                      ((SMC_Type *)SMC_BASE)
N#define SMC_BASE_PTR                             (SMC)
N/** Array initializer of SMC peripheral base addresses */
N#define SMC_BASE_ADDRS                           { SMC_BASE }
N/** Array initializer of SMC peripheral base pointers */
N#define SMC_BASE_PTRS                            { SMC }
N
N/* ----------------------------------------------------------------------------
N   -- SMC - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup SMC_Register_Accessor_Macros SMC - Register accessor macros
N * @{
N */
N
N
N/* SMC - Register instance definitions */
N/* SMC */
N#define SMC_PMPROT                               SMC_PMPROT_REG(SMC)
N#define SMC_PMCTRL                               SMC_PMCTRL_REG(SMC)
N#define SMC_STOPCTRL                             SMC_STOPCTRL_REG(SMC)
N#define SMC_PMSTAT                               SMC_PMSTAT_REG(SMC)
N
N/*!
N * @}
N */ /* end of group SMC_Register_Accessor_Macros */
N
N
N/*!
N * @}
N */ /* end of group SMC_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- SPI Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup SPI_Peripheral_Access_Layer SPI Peripheral Access Layer
N * @{
N */
N
N/** SPI - Register Layout Typedef */
Ntypedef struct {
N  __IO uint8_t C1;                                 /**< SPI control register 1, offset: 0x0 */
X  volatile uint8_t C1;                                  
N  __IO uint8_t C2;                                 /**< SPI control register 2, offset: 0x1 */
X  volatile uint8_t C2;                                  
N  __IO uint8_t BR;                                 /**< SPI baud rate register, offset: 0x2 */
X  volatile uint8_t BR;                                  
N  __IO uint8_t S;                                  /**< SPI status register, offset: 0x3 */
X  volatile uint8_t S;                                   
N       uint8_t RESERVED_0[1];
N  __IO uint8_t D;                                  /**< SPI data register, offset: 0x5 */
X  volatile uint8_t D;                                   
N       uint8_t RESERVED_1[1];
N  __IO uint8_t M;                                  /**< SPI match register, offset: 0x7 */
X  volatile uint8_t M;                                   
N} SPI_Type, *SPI_MemMapPtr;
N
N/* ----------------------------------------------------------------------------
N   -- SPI - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup SPI_Register_Accessor_Macros SPI - Register accessor macros
N * @{
N */
N
N
N/* SPI - Register accessors */
N#define SPI_C1_REG(base)                         ((base)->C1)
N#define SPI_C2_REG(base)                         ((base)->C2)
N#define SPI_BR_REG(base)                         ((base)->BR)
N#define SPI_S_REG(base)                          ((base)->S)
N#define SPI_D_REG(base)                          ((base)->D)
N#define SPI_M_REG(base)                          ((base)->M)
N
N/*!
N * @}
N */ /* end of group SPI_Register_Accessor_Macros */
N
N
N/* ----------------------------------------------------------------------------
N   -- SPI Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup SPI_Register_Masks SPI Register Masks
N * @{
N */
N
N/* C1 Bit Fields */
N#define SPI_C1_LSBFE_MASK                        0x1u
N#define SPI_C1_LSBFE_SHIFT                       0
N#define SPI_C1_LSBFE_WIDTH                       1
N#define SPI_C1_LSBFE(x)                          (((uint8_t)(((uint8_t)(x))<<SPI_C1_LSBFE_SHIFT))&SPI_C1_LSBFE_MASK)
N#define SPI_C1_SSOE_MASK                         0x2u
N#define SPI_C1_SSOE_SHIFT                        1
N#define SPI_C1_SSOE_WIDTH                        1
N#define SPI_C1_SSOE(x)                           (((uint8_t)(((uint8_t)(x))<<SPI_C1_SSOE_SHIFT))&SPI_C1_SSOE_MASK)
N#define SPI_C1_CPHA_MASK                         0x4u
N#define SPI_C1_CPHA_SHIFT                        2
N#define SPI_C1_CPHA_WIDTH                        1
N#define SPI_C1_CPHA(x)                           (((uint8_t)(((uint8_t)(x))<<SPI_C1_CPHA_SHIFT))&SPI_C1_CPHA_MASK)
N#define SPI_C1_CPOL_MASK                         0x8u
N#define SPI_C1_CPOL_SHIFT                        3
N#define SPI_C1_CPOL_WIDTH                        1
N#define SPI_C1_CPOL(x)                           (((uint8_t)(((uint8_t)(x))<<SPI_C1_CPOL_SHIFT))&SPI_C1_CPOL_MASK)
N#define SPI_C1_MSTR_MASK                         0x10u
N#define SPI_C1_MSTR_SHIFT                        4
N#define SPI_C1_MSTR_WIDTH                        1
N#define SPI_C1_MSTR(x)                           (((uint8_t)(((uint8_t)(x))<<SPI_C1_MSTR_SHIFT))&SPI_C1_MSTR_MASK)
N#define SPI_C1_SPTIE_MASK                        0x20u
N#define SPI_C1_SPTIE_SHIFT                       5
N#define SPI_C1_SPTIE_WIDTH                       1
N#define SPI_C1_SPTIE(x)                          (((uint8_t)(((uint8_t)(x))<<SPI_C1_SPTIE_SHIFT))&SPI_C1_SPTIE_MASK)
N#define SPI_C1_SPE_MASK                          0x40u
N#define SPI_C1_SPE_SHIFT                         6
N#define SPI_C1_SPE_WIDTH                         1
N#define SPI_C1_SPE(x)                            (((uint8_t)(((uint8_t)(x))<<SPI_C1_SPE_SHIFT))&SPI_C1_SPE_MASK)
N#define SPI_C1_SPIE_MASK                         0x80u
N#define SPI_C1_SPIE_SHIFT                        7
N#define SPI_C1_SPIE_WIDTH                        1
N#define SPI_C1_SPIE(x)                           (((uint8_t)(((uint8_t)(x))<<SPI_C1_SPIE_SHIFT))&SPI_C1_SPIE_MASK)
N/* C2 Bit Fields */
N#define SPI_C2_SPC0_MASK                         0x1u
N#define SPI_C2_SPC0_SHIFT                        0
N#define SPI_C2_SPC0_WIDTH                        1
N#define SPI_C2_SPC0(x)                           (((uint8_t)(((uint8_t)(x))<<SPI_C2_SPC0_SHIFT))&SPI_C2_SPC0_MASK)
N#define SPI_C2_SPISWAI_MASK                      0x2u
N#define SPI_C2_SPISWAI_SHIFT                     1
N#define SPI_C2_SPISWAI_WIDTH                     1
N#define SPI_C2_SPISWAI(x)                        (((uint8_t)(((uint8_t)(x))<<SPI_C2_SPISWAI_SHIFT))&SPI_C2_SPISWAI_MASK)
N#define SPI_C2_RXDMAE_MASK                       0x4u
N#define SPI_C2_RXDMAE_SHIFT                      2
N#define SPI_C2_RXDMAE_WIDTH                      1
N#define SPI_C2_RXDMAE(x)                         (((uint8_t)(((uint8_t)(x))<<SPI_C2_RXDMAE_SHIFT))&SPI_C2_RXDMAE_MASK)
N#define SPI_C2_BIDIROE_MASK                      0x8u
N#define SPI_C2_BIDIROE_SHIFT                     3
N#define SPI_C2_BIDIROE_WIDTH                     1
N#define SPI_C2_BIDIROE(x)                        (((uint8_t)(((uint8_t)(x))<<SPI_C2_BIDIROE_SHIFT))&SPI_C2_BIDIROE_MASK)
N#define SPI_C2_MODFEN_MASK                       0x10u
N#define SPI_C2_MODFEN_SHIFT                      4
N#define SPI_C2_MODFEN_WIDTH                      1
N#define SPI_C2_MODFEN(x)                         (((uint8_t)(((uint8_t)(x))<<SPI_C2_MODFEN_SHIFT))&SPI_C2_MODFEN_MASK)
N#define SPI_C2_TXDMAE_MASK                       0x20u
N#define SPI_C2_TXDMAE_SHIFT                      5
N#define SPI_C2_TXDMAE_WIDTH                      1
N#define SPI_C2_TXDMAE(x)                         (((uint8_t)(((uint8_t)(x))<<SPI_C2_TXDMAE_SHIFT))&SPI_C2_TXDMAE_MASK)
N#define SPI_C2_SPMIE_MASK                        0x80u
N#define SPI_C2_SPMIE_SHIFT                       7
N#define SPI_C2_SPMIE_WIDTH                       1
N#define SPI_C2_SPMIE(x)                          (((uint8_t)(((uint8_t)(x))<<SPI_C2_SPMIE_SHIFT))&SPI_C2_SPMIE_MASK)
N/* BR Bit Fields */
N#define SPI_BR_SPR_MASK                          0xFu
N#define SPI_BR_SPR_SHIFT                         0
N#define SPI_BR_SPR_WIDTH                         4
N#define SPI_BR_SPR(x)                            (((uint8_t)(((uint8_t)(x))<<SPI_BR_SPR_SHIFT))&SPI_BR_SPR_MASK)
N#define SPI_BR_SPPR_MASK                         0x70u
N#define SPI_BR_SPPR_SHIFT                        4
N#define SPI_BR_SPPR_WIDTH                        3
N#define SPI_BR_SPPR(x)                           (((uint8_t)(((uint8_t)(x))<<SPI_BR_SPPR_SHIFT))&SPI_BR_SPPR_MASK)
N/* S Bit Fields */
N#define SPI_S_MODF_MASK                          0x10u
N#define SPI_S_MODF_SHIFT                         4
N#define SPI_S_MODF_WIDTH                         1
N#define SPI_S_MODF(x)                            (((uint8_t)(((uint8_t)(x))<<SPI_S_MODF_SHIFT))&SPI_S_MODF_MASK)
N#define SPI_S_SPTEF_MASK                         0x20u
N#define SPI_S_SPTEF_SHIFT                        5
N#define SPI_S_SPTEF_WIDTH                        1
N#define SPI_S_SPTEF(x)                           (((uint8_t)(((uint8_t)(x))<<SPI_S_SPTEF_SHIFT))&SPI_S_SPTEF_MASK)
N#define SPI_S_SPMF_MASK                          0x40u
N#define SPI_S_SPMF_SHIFT                         6
N#define SPI_S_SPMF_WIDTH                         1
N#define SPI_S_SPMF(x)                            (((uint8_t)(((uint8_t)(x))<<SPI_S_SPMF_SHIFT))&SPI_S_SPMF_MASK)
N#define SPI_S_SPRF_MASK                          0x80u
N#define SPI_S_SPRF_SHIFT                         7
N#define SPI_S_SPRF_WIDTH                         1
N#define SPI_S_SPRF(x)                            (((uint8_t)(((uint8_t)(x))<<SPI_S_SPRF_SHIFT))&SPI_S_SPRF_MASK)
N/* D Bit Fields */
N#define SPI_D_Bits_MASK                          0xFFu
N#define SPI_D_Bits_SHIFT                         0
N#define SPI_D_Bits_WIDTH                         8
N#define SPI_D_Bits(x)                            (((uint8_t)(((uint8_t)(x))<<SPI_D_Bits_SHIFT))&SPI_D_Bits_MASK)
N/* M Bit Fields */
N#define SPI_M_Bits_MASK                          0xFFu
N#define SPI_M_Bits_SHIFT                         0
N#define SPI_M_Bits_WIDTH                         8
N#define SPI_M_Bits(x)                            (((uint8_t)(((uint8_t)(x))<<SPI_M_Bits_SHIFT))&SPI_M_Bits_MASK)
N
N/*!
N * @}
N */ /* end of group SPI_Register_Masks */
N
N
N/* SPI - Peripheral instance base addresses */
N/** Peripheral SPI0 base address */
N#define SPI0_BASE                                (0x40076000u)
N/** Peripheral SPI0 base pointer */
N#define SPI0                                     ((SPI_Type *)SPI0_BASE)
N#define SPI0_BASE_PTR                            (SPI0)
N/** Peripheral SPI1 base address */
N#define SPI1_BASE                                (0x40077000u)
N/** Peripheral SPI1 base pointer */
N#define SPI1                                     ((SPI_Type *)SPI1_BASE)
N#define SPI1_BASE_PTR                            (SPI1)
N/** Array initializer of SPI peripheral base addresses */
N#define SPI_BASE_ADDRS                           { SPI0_BASE, SPI1_BASE }
N/** Array initializer of SPI peripheral base pointers */
N#define SPI_BASE_PTRS                            { SPI0, SPI1 }
N/** Interrupt vectors for the SPI peripheral type */
N#define SPI_IRQS                                 { SPI0_IRQn, SPI1_IRQn }
N
N/* ----------------------------------------------------------------------------
N   -- SPI - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup SPI_Register_Accessor_Macros SPI - Register accessor macros
N * @{
N */
N
N
N/* SPI - Register instance definitions */
N/* SPI0 */
N#define SPI0_C1                                  SPI_C1_REG(SPI0)
N#define SPI0_C2                                  SPI_C2_REG(SPI0)
N#define SPI0_BR                                  SPI_BR_REG(SPI0)
N#define SPI0_S                                   SPI_S_REG(SPI0)
N#define SPI0_D                                   SPI_D_REG(SPI0)
N#define SPI0_M                                   SPI_M_REG(SPI0)
N/* SPI1 */
N#define SPI1_C1                                  SPI_C1_REG(SPI1)
N#define SPI1_C2                                  SPI_C2_REG(SPI1)
N#define SPI1_BR                                  SPI_BR_REG(SPI1)
N#define SPI1_S                                   SPI_S_REG(SPI1)
N#define SPI1_D                                   SPI_D_REG(SPI1)
N#define SPI1_M                                   SPI_M_REG(SPI1)
N
N/*!
N * @}
N */ /* end of group SPI_Register_Accessor_Macros */
N
N
N/*!
N * @}
N */ /* end of group SPI_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- TPM Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup TPM_Peripheral_Access_Layer TPM Peripheral Access Layer
N * @{
N */
N
N/** TPM - Register Layout Typedef */
Ntypedef struct {
N  __IO uint32_t SC;                                /**< Status and Control, offset: 0x0 */
X  volatile uint32_t SC;                                 
N  __IO uint32_t CNT;                               /**< Counter, offset: 0x4 */
X  volatile uint32_t CNT;                                
N  __IO uint32_t MOD;                               /**< Modulo, offset: 0x8 */
X  volatile uint32_t MOD;                                
N  struct {                                         /* offset: 0xC, array step: 0x8 */
N    __IO uint32_t CnSC;                              /**< Channel (n) Status and Control, array offset: 0xC, array step: 0x8 */
X    volatile uint32_t CnSC;                               
N    __IO uint32_t CnV;                               /**< Channel (n) Value, array offset: 0x10, array step: 0x8 */
X    volatile uint32_t CnV;                                
N  } CONTROLS[6];
N       uint8_t RESERVED_0[20];
N  __IO uint32_t STATUS;                            /**< Capture and Compare Status, offset: 0x50 */
X  volatile uint32_t STATUS;                             
N       uint8_t RESERVED_1[48];
N  __IO uint32_t CONF;                              /**< Configuration, offset: 0x84 */
X  volatile uint32_t CONF;                               
N} TPM_Type, *TPM_MemMapPtr;
N
N/* ----------------------------------------------------------------------------
N   -- TPM - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup TPM_Register_Accessor_Macros TPM - Register accessor macros
N * @{
N */
N
N
N/* TPM - Register accessors */
N#define TPM_SC_REG(base)                         ((base)->SC)
N#define TPM_CNT_REG(base)                        ((base)->CNT)
N#define TPM_MOD_REG(base)                        ((base)->MOD)
N#define TPM_CnSC_REG(base,index)                 ((base)->CONTROLS[index].CnSC)
N#define TPM_CnSC_COUNT                           6
N#define TPM_CnV_REG(base,index)                  ((base)->CONTROLS[index].CnV)
N#define TPM_CnV_COUNT                            6
N#define TPM_STATUS_REG(base)                     ((base)->STATUS)
N#define TPM_CONF_REG(base)                       ((base)->CONF)
N
N/*!
N * @}
N */ /* end of group TPM_Register_Accessor_Macros */
N
N
N/* ----------------------------------------------------------------------------
N   -- TPM Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup TPM_Register_Masks TPM Register Masks
N * @{
N */
N
N/* SC Bit Fields */
N#define TPM_SC_PS_MASK                           0x7u
N#define TPM_SC_PS_SHIFT                          0
N#define TPM_SC_PS_WIDTH                          3
N#define TPM_SC_PS(x)                             (((uint32_t)(((uint32_t)(x))<<TPM_SC_PS_SHIFT))&TPM_SC_PS_MASK)
N#define TPM_SC_CMOD_MASK                         0x18u
N#define TPM_SC_CMOD_SHIFT                        3
N#define TPM_SC_CMOD_WIDTH                        2
N#define TPM_SC_CMOD(x)                           (((uint32_t)(((uint32_t)(x))<<TPM_SC_CMOD_SHIFT))&TPM_SC_CMOD_MASK)
N#define TPM_SC_CPWMS_MASK                        0x20u
N#define TPM_SC_CPWMS_SHIFT                       5
N#define TPM_SC_CPWMS_WIDTH                       1
N#define TPM_SC_CPWMS(x)                          (((uint32_t)(((uint32_t)(x))<<TPM_SC_CPWMS_SHIFT))&TPM_SC_CPWMS_MASK)
N#define TPM_SC_TOIE_MASK                         0x40u
N#define TPM_SC_TOIE_SHIFT                        6
N#define TPM_SC_TOIE_WIDTH                        1
N#define TPM_SC_TOIE(x)                           (((uint32_t)(((uint32_t)(x))<<TPM_SC_TOIE_SHIFT))&TPM_SC_TOIE_MASK)
N#define TPM_SC_TOF_MASK                          0x80u
N#define TPM_SC_TOF_SHIFT                         7
N#define TPM_SC_TOF_WIDTH                         1
N#define TPM_SC_TOF(x)                            (((uint32_t)(((uint32_t)(x))<<TPM_SC_TOF_SHIFT))&TPM_SC_TOF_MASK)
N#define TPM_SC_DMA_MASK                          0x100u
N#define TPM_SC_DMA_SHIFT                         8
N#define TPM_SC_DMA_WIDTH                         1
N#define TPM_SC_DMA(x)                            (((uint32_t)(((uint32_t)(x))<<TPM_SC_DMA_SHIFT))&TPM_SC_DMA_MASK)
N/* CNT Bit Fields */
N#define TPM_CNT_COUNT_MASK                       0xFFFFu
N#define TPM_CNT_COUNT_SHIFT                      0
N#define TPM_CNT_COUNT_WIDTH                      16
N#define TPM_CNT_COUNT(x)                         (((uint32_t)(((uint32_t)(x))<<TPM_CNT_COUNT_SHIFT))&TPM_CNT_COUNT_MASK)
N/* MOD Bit Fields */
N#define TPM_MOD_MOD_MASK                         0xFFFFu
N#define TPM_MOD_MOD_SHIFT                        0
N#define TPM_MOD_MOD_WIDTH                        16
N#define TPM_MOD_MOD(x)                           (((uint32_t)(((uint32_t)(x))<<TPM_MOD_MOD_SHIFT))&TPM_MOD_MOD_MASK)
N/* CnSC Bit Fields */
N#define TPM_CnSC_DMA_MASK                        0x1u
N#define TPM_CnSC_DMA_SHIFT                       0
N#define TPM_CnSC_DMA_WIDTH                       1
N#define TPM_CnSC_DMA(x)                          (((uint32_t)(((uint32_t)(x))<<TPM_CnSC_DMA_SHIFT))&TPM_CnSC_DMA_MASK)
N#define TPM_CnSC_ELSA_MASK                       0x4u
N#define TPM_CnSC_ELSA_SHIFT                      2
N#define TPM_CnSC_ELSA_WIDTH                      1
N#define TPM_CnSC_ELSA(x)                         (((uint32_t)(((uint32_t)(x))<<TPM_CnSC_ELSA_SHIFT))&TPM_CnSC_ELSA_MASK)
N#define TPM_CnSC_ELSB_MASK                       0x8u
N#define TPM_CnSC_ELSB_SHIFT                      3
N#define TPM_CnSC_ELSB_WIDTH                      1
N#define TPM_CnSC_ELSB(x)                         (((uint32_t)(((uint32_t)(x))<<TPM_CnSC_ELSB_SHIFT))&TPM_CnSC_ELSB_MASK)
N#define TPM_CnSC_MSA_MASK                        0x10u
N#define TPM_CnSC_MSA_SHIFT                       4
N#define TPM_CnSC_MSA_WIDTH                       1
N#define TPM_CnSC_MSA(x)                          (((uint32_t)(((uint32_t)(x))<<TPM_CnSC_MSA_SHIFT))&TPM_CnSC_MSA_MASK)
N#define TPM_CnSC_MSB_MASK                        0x20u
N#define TPM_CnSC_MSB_SHIFT                       5
N#define TPM_CnSC_MSB_WIDTH                       1
N#define TPM_CnSC_MSB(x)                          (((uint32_t)(((uint32_t)(x))<<TPM_CnSC_MSB_SHIFT))&TPM_CnSC_MSB_MASK)
N#define TPM_CnSC_CHIE_MASK                       0x40u
N#define TPM_CnSC_CHIE_SHIFT                      6
N#define TPM_CnSC_CHIE_WIDTH                      1
N#define TPM_CnSC_CHIE(x)                         (((uint32_t)(((uint32_t)(x))<<TPM_CnSC_CHIE_SHIFT))&TPM_CnSC_CHIE_MASK)
N#define TPM_CnSC_CHF_MASK                        0x80u
N#define TPM_CnSC_CHF_SHIFT                       7
N#define TPM_CnSC_CHF_WIDTH                       1
N#define TPM_CnSC_CHF(x)                          (((uint32_t)(((uint32_t)(x))<<TPM_CnSC_CHF_SHIFT))&TPM_CnSC_CHF_MASK)
N/* CnV Bit Fields */
N#define TPM_CnV_VAL_MASK                         0xFFFFu
N#define TPM_CnV_VAL_SHIFT                        0
N#define TPM_CnV_VAL_WIDTH                        16
N#define TPM_CnV_VAL(x)                           (((uint32_t)(((uint32_t)(x))<<TPM_CnV_VAL_SHIFT))&TPM_CnV_VAL_MASK)
N/* STATUS Bit Fields */
N#define TPM_STATUS_CH0F_MASK                     0x1u
N#define TPM_STATUS_CH0F_SHIFT                    0
N#define TPM_STATUS_CH0F_WIDTH                    1
N#define TPM_STATUS_CH0F(x)                       (((uint32_t)(((uint32_t)(x))<<TPM_STATUS_CH0F_SHIFT))&TPM_STATUS_CH0F_MASK)
N#define TPM_STATUS_CH1F_MASK                     0x2u
N#define TPM_STATUS_CH1F_SHIFT                    1
N#define TPM_STATUS_CH1F_WIDTH                    1
N#define TPM_STATUS_CH1F(x)                       (((uint32_t)(((uint32_t)(x))<<TPM_STATUS_CH1F_SHIFT))&TPM_STATUS_CH1F_MASK)
N#define TPM_STATUS_CH2F_MASK                     0x4u
N#define TPM_STATUS_CH2F_SHIFT                    2
N#define TPM_STATUS_CH2F_WIDTH                    1
N#define TPM_STATUS_CH2F(x)                       (((uint32_t)(((uint32_t)(x))<<TPM_STATUS_CH2F_SHIFT))&TPM_STATUS_CH2F_MASK)
N#define TPM_STATUS_CH3F_MASK                     0x8u
N#define TPM_STATUS_CH3F_SHIFT                    3
N#define TPM_STATUS_CH3F_WIDTH                    1
N#define TPM_STATUS_CH3F(x)                       (((uint32_t)(((uint32_t)(x))<<TPM_STATUS_CH3F_SHIFT))&TPM_STATUS_CH3F_MASK)
N#define TPM_STATUS_CH4F_MASK                     0x10u
N#define TPM_STATUS_CH4F_SHIFT                    4
N#define TPM_STATUS_CH4F_WIDTH                    1
N#define TPM_STATUS_CH4F(x)                       (((uint32_t)(((uint32_t)(x))<<TPM_STATUS_CH4F_SHIFT))&TPM_STATUS_CH4F_MASK)
N#define TPM_STATUS_CH5F_MASK                     0x20u
N#define TPM_STATUS_CH5F_SHIFT                    5
N#define TPM_STATUS_CH5F_WIDTH                    1
N#define TPM_STATUS_CH5F(x)                       (((uint32_t)(((uint32_t)(x))<<TPM_STATUS_CH5F_SHIFT))&TPM_STATUS_CH5F_MASK)
N#define TPM_STATUS_TOF_MASK                      0x100u
N#define TPM_STATUS_TOF_SHIFT                     8
N#define TPM_STATUS_TOF_WIDTH                     1
N#define TPM_STATUS_TOF(x)                        (((uint32_t)(((uint32_t)(x))<<TPM_STATUS_TOF_SHIFT))&TPM_STATUS_TOF_MASK)
N/* CONF Bit Fields */
N#define TPM_CONF_DOZEEN_MASK                     0x20u
N#define TPM_CONF_DOZEEN_SHIFT                    5
N#define TPM_CONF_DOZEEN_WIDTH                    1
N#define TPM_CONF_DOZEEN(x)                       (((uint32_t)(((uint32_t)(x))<<TPM_CONF_DOZEEN_SHIFT))&TPM_CONF_DOZEEN_MASK)
N#define TPM_CONF_DBGMODE_MASK                    0xC0u
N#define TPM_CONF_DBGMODE_SHIFT                   6
N#define TPM_CONF_DBGMODE_WIDTH                   2
N#define TPM_CONF_DBGMODE(x)                      (((uint32_t)(((uint32_t)(x))<<TPM_CONF_DBGMODE_SHIFT))&TPM_CONF_DBGMODE_MASK)
N#define TPM_CONF_GTBEEN_MASK                     0x200u
N#define TPM_CONF_GTBEEN_SHIFT                    9
N#define TPM_CONF_GTBEEN_WIDTH                    1
N#define TPM_CONF_GTBEEN(x)                       (((uint32_t)(((uint32_t)(x))<<TPM_CONF_GTBEEN_SHIFT))&TPM_CONF_GTBEEN_MASK)
N#define TPM_CONF_CSOT_MASK                       0x10000u
N#define TPM_CONF_CSOT_SHIFT                      16
N#define TPM_CONF_CSOT_WIDTH                      1
N#define TPM_CONF_CSOT(x)                         (((uint32_t)(((uint32_t)(x))<<TPM_CONF_CSOT_SHIFT))&TPM_CONF_CSOT_MASK)
N#define TPM_CONF_CSOO_MASK                       0x20000u
N#define TPM_CONF_CSOO_SHIFT                      17
N#define TPM_CONF_CSOO_WIDTH                      1
N#define TPM_CONF_CSOO(x)                         (((uint32_t)(((uint32_t)(x))<<TPM_CONF_CSOO_SHIFT))&TPM_CONF_CSOO_MASK)
N#define TPM_CONF_CROT_MASK                       0x40000u
N#define TPM_CONF_CROT_SHIFT                      18
N#define TPM_CONF_CROT_WIDTH                      1
N#define TPM_CONF_CROT(x)                         (((uint32_t)(((uint32_t)(x))<<TPM_CONF_CROT_SHIFT))&TPM_CONF_CROT_MASK)
N#define TPM_CONF_TRGSEL_MASK                     0xF000000u
N#define TPM_CONF_TRGSEL_SHIFT                    24
N#define TPM_CONF_TRGSEL_WIDTH                    4
N#define TPM_CONF_TRGSEL(x)                       (((uint32_t)(((uint32_t)(x))<<TPM_CONF_TRGSEL_SHIFT))&TPM_CONF_TRGSEL_MASK)
N
N/*!
N * @}
N */ /* end of group TPM_Register_Masks */
N
N
N/* TPM - Peripheral instance base addresses */
N/** Peripheral TPM0 base address */
N#define TPM0_BASE                                (0x40038000u)
N/** Peripheral TPM0 base pointer */
N#define TPM0                                     ((TPM_Type *)TPM0_BASE)
N#define TPM0_BASE_PTR                            (TPM0)
N/** Peripheral TPM1 base address */
N#define TPM1_BASE                                (0x40039000u)
N/** Peripheral TPM1 base pointer */
N#define TPM1                                     ((TPM_Type *)TPM1_BASE)
N#define TPM1_BASE_PTR                            (TPM1)
N/** Peripheral TPM2 base address */
N#define TPM2_BASE                                (0x4003A000u)
N/** Peripheral TPM2 base pointer */
N#define TPM2                                     ((TPM_Type *)TPM2_BASE)
N#define TPM2_BASE_PTR                            (TPM2)
N/** Array initializer of TPM peripheral base addresses */
N#define TPM_BASE_ADDRS                           { TPM0_BASE, TPM1_BASE, TPM2_BASE }
N/** Array initializer of TPM peripheral base pointers */
N#define TPM_BASE_PTRS                            { TPM0, TPM1, TPM2 }
N/** Interrupt vectors for the TPM peripheral type */
N#define TPM_IRQS                                 { TPM0_IRQn, TPM1_IRQn, TPM2_IRQn }
N
N/* ----------------------------------------------------------------------------
N   -- TPM - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup TPM_Register_Accessor_Macros TPM - Register accessor macros
N * @{
N */
N
N
N/* TPM - Register instance definitions */
N/* TPM0 */
N#define TPM0_SC                                  TPM_SC_REG(TPM0)
N#define TPM0_CNT                                 TPM_CNT_REG(TPM0)
N#define TPM0_MOD                                 TPM_MOD_REG(TPM0)
N#define TPM0_C0SC                                TPM_CnSC_REG(TPM0,0)
N#define TPM0_C0V                                 TPM_CnV_REG(TPM0,0)
N#define TPM0_C1SC                                TPM_CnSC_REG(TPM0,1)
N#define TPM0_C1V                                 TPM_CnV_REG(TPM0,1)
N#define TPM0_C2SC                                TPM_CnSC_REG(TPM0,2)
N#define TPM0_C2V                                 TPM_CnV_REG(TPM0,2)
N#define TPM0_C3SC                                TPM_CnSC_REG(TPM0,3)
N#define TPM0_C3V                                 TPM_CnV_REG(TPM0,3)
N#define TPM0_C4SC                                TPM_CnSC_REG(TPM0,4)
N#define TPM0_C4V                                 TPM_CnV_REG(TPM0,4)
N#define TPM0_C5SC                                TPM_CnSC_REG(TPM0,5)
N#define TPM0_C5V                                 TPM_CnV_REG(TPM0,5)
N#define TPM0_STATUS                              TPM_STATUS_REG(TPM0)
N#define TPM0_CONF                                TPM_CONF_REG(TPM0)
N/* TPM1 */
N#define TPM1_SC                                  TPM_SC_REG(TPM1)
N#define TPM1_CNT                                 TPM_CNT_REG(TPM1)
N#define TPM1_MOD                                 TPM_MOD_REG(TPM1)
N#define TPM1_C0SC                                TPM_CnSC_REG(TPM1,0)
N#define TPM1_C0V                                 TPM_CnV_REG(TPM1,0)
N#define TPM1_C1SC                                TPM_CnSC_REG(TPM1,1)
N#define TPM1_C1V                                 TPM_CnV_REG(TPM1,1)
N#define TPM1_STATUS                              TPM_STATUS_REG(TPM1)
N#define TPM1_CONF                                TPM_CONF_REG(TPM1)
N/* TPM2 */
N#define TPM2_SC                                  TPM_SC_REG(TPM2)
N#define TPM2_CNT                                 TPM_CNT_REG(TPM2)
N#define TPM2_MOD                                 TPM_MOD_REG(TPM2)
N#define TPM2_C0SC                                TPM_CnSC_REG(TPM2,0)
N#define TPM2_C0V                                 TPM_CnV_REG(TPM2,0)
N#define TPM2_C1SC                                TPM_CnSC_REG(TPM2,1)
N#define TPM2_C1V                                 TPM_CnV_REG(TPM2,1)
N#define TPM2_STATUS                              TPM_STATUS_REG(TPM2)
N#define TPM2_CONF                                TPM_CONF_REG(TPM2)
N
N/* TPM - Register array accessors */
N#define TPM0_CnSC(index)                         TPM_CnSC_REG(TPM0,index)
N#define TPM1_CnSC(index)                         TPM_CnSC_REG(TPM1,index)
N#define TPM2_CnSC(index)                         TPM_CnSC_REG(TPM2,index)
N#define TPM0_CnV(index)                          TPM_CnV_REG(TPM0,index)
N#define TPM1_CnV(index)                          TPM_CnV_REG(TPM1,index)
N#define TPM2_CnV(index)                          TPM_CnV_REG(TPM2,index)
N
N/*!
N * @}
N */ /* end of group TPM_Register_Accessor_Macros */
N
N
N/*!
N * @}
N */ /* end of group TPM_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- TSI Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup TSI_Peripheral_Access_Layer TSI Peripheral Access Layer
N * @{
N */
N
N/** TSI - Register Layout Typedef */
Ntypedef struct {
N  __IO uint32_t GENCS;                             /**< TSI General Control and Status Register, offset: 0x0 */
X  volatile uint32_t GENCS;                              
N  __IO uint32_t DATA;                              /**< TSI DATA Register, offset: 0x4 */
X  volatile uint32_t DATA;                               
N  __IO uint32_t TSHD;                              /**< TSI Threshold Register, offset: 0x8 */
X  volatile uint32_t TSHD;                               
N} TSI_Type, *TSI_MemMapPtr;
N
N/* ----------------------------------------------------------------------------
N   -- TSI - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup TSI_Register_Accessor_Macros TSI - Register accessor macros
N * @{
N */
N
N
N/* TSI - Register accessors */
N#define TSI_GENCS_REG(base)                      ((base)->GENCS)
N#define TSI_DATA_REG(base)                       ((base)->DATA)
N#define TSI_TSHD_REG(base)                       ((base)->TSHD)
N
N/*!
N * @}
N */ /* end of group TSI_Register_Accessor_Macros */
N
N
N/* ----------------------------------------------------------------------------
N   -- TSI Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup TSI_Register_Masks TSI Register Masks
N * @{
N */
N
N/* GENCS Bit Fields */
N#define TSI_GENCS_CURSW_MASK                     0x2u
N#define TSI_GENCS_CURSW_SHIFT                    1
N#define TSI_GENCS_CURSW_WIDTH                    1
N#define TSI_GENCS_CURSW(x)                       (((uint32_t)(((uint32_t)(x))<<TSI_GENCS_CURSW_SHIFT))&TSI_GENCS_CURSW_MASK)
N#define TSI_GENCS_EOSF_MASK                      0x4u
N#define TSI_GENCS_EOSF_SHIFT                     2
N#define TSI_GENCS_EOSF_WIDTH                     1
N#define TSI_GENCS_EOSF(x)                        (((uint32_t)(((uint32_t)(x))<<TSI_GENCS_EOSF_SHIFT))&TSI_GENCS_EOSF_MASK)
N#define TSI_GENCS_SCNIP_MASK                     0x8u
N#define TSI_GENCS_SCNIP_SHIFT                    3
N#define TSI_GENCS_SCNIP_WIDTH                    1
N#define TSI_GENCS_SCNIP(x)                       (((uint32_t)(((uint32_t)(x))<<TSI_GENCS_SCNIP_SHIFT))&TSI_GENCS_SCNIP_MASK)
N#define TSI_GENCS_STM_MASK                       0x10u
N#define TSI_GENCS_STM_SHIFT                      4
N#define TSI_GENCS_STM_WIDTH                      1
N#define TSI_GENCS_STM(x)                         (((uint32_t)(((uint32_t)(x))<<TSI_GENCS_STM_SHIFT))&TSI_GENCS_STM_MASK)
N#define TSI_GENCS_STPE_MASK                      0x20u
N#define TSI_GENCS_STPE_SHIFT                     5
N#define TSI_GENCS_STPE_WIDTH                     1
N#define TSI_GENCS_STPE(x)                        (((uint32_t)(((uint32_t)(x))<<TSI_GENCS_STPE_SHIFT))&TSI_GENCS_STPE_MASK)
N#define TSI_GENCS_TSIIEN_MASK                    0x40u
N#define TSI_GENCS_TSIIEN_SHIFT                   6
N#define TSI_GENCS_TSIIEN_WIDTH                   1
N#define TSI_GENCS_TSIIEN(x)                      (((uint32_t)(((uint32_t)(x))<<TSI_GENCS_TSIIEN_SHIFT))&TSI_GENCS_TSIIEN_MASK)
N#define TSI_GENCS_TSIEN_MASK                     0x80u
N#define TSI_GENCS_TSIEN_SHIFT                    7
N#define TSI_GENCS_TSIEN_WIDTH                    1
N#define TSI_GENCS_TSIEN(x)                       (((uint32_t)(((uint32_t)(x))<<TSI_GENCS_TSIEN_SHIFT))&TSI_GENCS_TSIEN_MASK)
N#define TSI_GENCS_NSCN_MASK                      0x1F00u
N#define TSI_GENCS_NSCN_SHIFT                     8
N#define TSI_GENCS_NSCN_WIDTH                     5
N#define TSI_GENCS_NSCN(x)                        (((uint32_t)(((uint32_t)(x))<<TSI_GENCS_NSCN_SHIFT))&TSI_GENCS_NSCN_MASK)
N#define TSI_GENCS_PS_MASK                        0xE000u
N#define TSI_GENCS_PS_SHIFT                       13
N#define TSI_GENCS_PS_WIDTH                       3
N#define TSI_GENCS_PS(x)                          (((uint32_t)(((uint32_t)(x))<<TSI_GENCS_PS_SHIFT))&TSI_GENCS_PS_MASK)
N#define TSI_GENCS_EXTCHRG_MASK                   0x70000u
N#define TSI_GENCS_EXTCHRG_SHIFT                  16
N#define TSI_GENCS_EXTCHRG_WIDTH                  3
N#define TSI_GENCS_EXTCHRG(x)                     (((uint32_t)(((uint32_t)(x))<<TSI_GENCS_EXTCHRG_SHIFT))&TSI_GENCS_EXTCHRG_MASK)
N#define TSI_GENCS_DVOLT_MASK                     0x180000u
N#define TSI_GENCS_DVOLT_SHIFT                    19
N#define TSI_GENCS_DVOLT_WIDTH                    2
N#define TSI_GENCS_DVOLT(x)                       (((uint32_t)(((uint32_t)(x))<<TSI_GENCS_DVOLT_SHIFT))&TSI_GENCS_DVOLT_MASK)
N#define TSI_GENCS_REFCHRG_MASK                   0xE00000u
N#define TSI_GENCS_REFCHRG_SHIFT                  21
N#define TSI_GENCS_REFCHRG_WIDTH                  3
N#define TSI_GENCS_REFCHRG(x)                     (((uint32_t)(((uint32_t)(x))<<TSI_GENCS_REFCHRG_SHIFT))&TSI_GENCS_REFCHRG_MASK)
N#define TSI_GENCS_MODE_MASK                      0xF000000u
N#define TSI_GENCS_MODE_SHIFT                     24
N#define TSI_GENCS_MODE_WIDTH                     4
N#define TSI_GENCS_MODE(x)                        (((uint32_t)(((uint32_t)(x))<<TSI_GENCS_MODE_SHIFT))&TSI_GENCS_MODE_MASK)
N#define TSI_GENCS_ESOR_MASK                      0x10000000u
N#define TSI_GENCS_ESOR_SHIFT                     28
N#define TSI_GENCS_ESOR_WIDTH                     1
N#define TSI_GENCS_ESOR(x)                        (((uint32_t)(((uint32_t)(x))<<TSI_GENCS_ESOR_SHIFT))&TSI_GENCS_ESOR_MASK)
N#define TSI_GENCS_OUTRGF_MASK                    0x80000000u
N#define TSI_GENCS_OUTRGF_SHIFT                   31
N#define TSI_GENCS_OUTRGF_WIDTH                   1
N#define TSI_GENCS_OUTRGF(x)                      (((uint32_t)(((uint32_t)(x))<<TSI_GENCS_OUTRGF_SHIFT))&TSI_GENCS_OUTRGF_MASK)
N/* DATA Bit Fields */
N#define TSI_DATA_TSICNT_MASK                     0xFFFFu
N#define TSI_DATA_TSICNT_SHIFT                    0
N#define TSI_DATA_TSICNT_WIDTH                    16
N#define TSI_DATA_TSICNT(x)                       (((uint32_t)(((uint32_t)(x))<<TSI_DATA_TSICNT_SHIFT))&TSI_DATA_TSICNT_MASK)
N#define TSI_DATA_SWTS_MASK                       0x400000u
N#define TSI_DATA_SWTS_SHIFT                      22
N#define TSI_DATA_SWTS_WIDTH                      1
N#define TSI_DATA_SWTS(x)                         (((uint32_t)(((uint32_t)(x))<<TSI_DATA_SWTS_SHIFT))&TSI_DATA_SWTS_MASK)
N#define TSI_DATA_DMAEN_MASK                      0x800000u
N#define TSI_DATA_DMAEN_SHIFT                     23
N#define TSI_DATA_DMAEN_WIDTH                     1
N#define TSI_DATA_DMAEN(x)                        (((uint32_t)(((uint32_t)(x))<<TSI_DATA_DMAEN_SHIFT))&TSI_DATA_DMAEN_MASK)
N#define TSI_DATA_TSICH_MASK                      0xF0000000u
N#define TSI_DATA_TSICH_SHIFT                     28
N#define TSI_DATA_TSICH_WIDTH                     4
N#define TSI_DATA_TSICH(x)                        (((uint32_t)(((uint32_t)(x))<<TSI_DATA_TSICH_SHIFT))&TSI_DATA_TSICH_MASK)
N/* TSHD Bit Fields */
N#define TSI_TSHD_THRESL_MASK                     0xFFFFu
N#define TSI_TSHD_THRESL_SHIFT                    0
N#define TSI_TSHD_THRESL_WIDTH                    16
N#define TSI_TSHD_THRESL(x)                       (((uint32_t)(((uint32_t)(x))<<TSI_TSHD_THRESL_SHIFT))&TSI_TSHD_THRESL_MASK)
N#define TSI_TSHD_THRESH_MASK                     0xFFFF0000u
N#define TSI_TSHD_THRESH_SHIFT                    16
N#define TSI_TSHD_THRESH_WIDTH                    16
N#define TSI_TSHD_THRESH(x)                       (((uint32_t)(((uint32_t)(x))<<TSI_TSHD_THRESH_SHIFT))&TSI_TSHD_THRESH_MASK)
N
N/*!
N * @}
N */ /* end of group TSI_Register_Masks */
N
N
N/* TSI - Peripheral instance base addresses */
N/** Peripheral TSI0 base address */
N#define TSI0_BASE                                (0x40045000u)
N/** Peripheral TSI0 base pointer */
N#define TSI0                                     ((TSI_Type *)TSI0_BASE)
N#define TSI0_BASE_PTR                            (TSI0)
N/** Array initializer of TSI peripheral base addresses */
N#define TSI_BASE_ADDRS                           { TSI0_BASE }
N/** Array initializer of TSI peripheral base pointers */
N#define TSI_BASE_PTRS                            { TSI0 }
N/** Interrupt vectors for the TSI peripheral type */
N#define TSI_IRQS                                 { TSI0_IRQn }
N
N/* ----------------------------------------------------------------------------
N   -- TSI - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup TSI_Register_Accessor_Macros TSI - Register accessor macros
N * @{
N */
N
N
N/* TSI - Register instance definitions */
N/* TSI0 */
N#define TSI0_GENCS                               TSI_GENCS_REG(TSI0)
N#define TSI0_DATA                                TSI_DATA_REG(TSI0)
N#define TSI0_TSHD                                TSI_TSHD_REG(TSI0)
N
N/*!
N * @}
N */ /* end of group TSI_Register_Accessor_Macros */
N
N
N/*!
N * @}
N */ /* end of group TSI_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- UART Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup UART_Peripheral_Access_Layer UART Peripheral Access Layer
N * @{
N */
N
N/** UART - Register Layout Typedef */
Ntypedef struct {
N  __IO uint8_t BDH;                                /**< UART Baud Rate Register: High, offset: 0x0 */
X  volatile uint8_t BDH;                                 
N  __IO uint8_t BDL;                                /**< UART Baud Rate Register: Low, offset: 0x1 */
X  volatile uint8_t BDL;                                 
N  __IO uint8_t C1;                                 /**< UART Control Register 1, offset: 0x2 */
X  volatile uint8_t C1;                                  
N  __IO uint8_t C2;                                 /**< UART Control Register 2, offset: 0x3 */
X  volatile uint8_t C2;                                  
N  __I  uint8_t S1;                                 /**< UART Status Register 1, offset: 0x4 */
X  volatile const  uint8_t S1;                                  
N  __IO uint8_t S2;                                 /**< UART Status Register 2, offset: 0x5 */
X  volatile uint8_t S2;                                  
N  __IO uint8_t C3;                                 /**< UART Control Register 3, offset: 0x6 */
X  volatile uint8_t C3;                                  
N  __IO uint8_t D;                                  /**< UART Data Register, offset: 0x7 */
X  volatile uint8_t D;                                   
N  __IO uint8_t C4;                                 /**< UART Control Register 4, offset: 0x8 */
X  volatile uint8_t C4;                                  
N} UART_Type, *UART_MemMapPtr;
N
N/* ----------------------------------------------------------------------------
N   -- UART - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup UART_Register_Accessor_Macros UART - Register accessor macros
N * @{
N */
N
N
N/* UART - Register accessors */
N#define UART_BDH_REG(base)                       ((base)->BDH)
N#define UART_BDL_REG(base)                       ((base)->BDL)
N#define UART_C1_REG(base)                        ((base)->C1)
N#define UART_C2_REG(base)                        ((base)->C2)
N#define UART_S1_REG(base)                        ((base)->S1)
N#define UART_S2_REG(base)                        ((base)->S2)
N#define UART_C3_REG(base)                        ((base)->C3)
N#define UART_D_REG(base)                         ((base)->D)
N#define UART_C4_REG(base)                        ((base)->C4)
N
N/*!
N * @}
N */ /* end of group UART_Register_Accessor_Macros */
N
N
N/* ----------------------------------------------------------------------------
N   -- UART Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup UART_Register_Masks UART Register Masks
N * @{
N */
N
N/* BDH Bit Fields */
N#define UART_BDH_SBR_MASK                        0x1Fu
N#define UART_BDH_SBR_SHIFT                       0
N#define UART_BDH_SBR_WIDTH                       5
N#define UART_BDH_SBR(x)                          (((uint8_t)(((uint8_t)(x))<<UART_BDH_SBR_SHIFT))&UART_BDH_SBR_MASK)
N#define UART_BDH_SBNS_MASK                       0x20u
N#define UART_BDH_SBNS_SHIFT                      5
N#define UART_BDH_SBNS_WIDTH                      1
N#define UART_BDH_SBNS(x)                         (((uint8_t)(((uint8_t)(x))<<UART_BDH_SBNS_SHIFT))&UART_BDH_SBNS_MASK)
N#define UART_BDH_RXEDGIE_MASK                    0x40u
N#define UART_BDH_RXEDGIE_SHIFT                   6
N#define UART_BDH_RXEDGIE_WIDTH                   1
N#define UART_BDH_RXEDGIE(x)                      (((uint8_t)(((uint8_t)(x))<<UART_BDH_RXEDGIE_SHIFT))&UART_BDH_RXEDGIE_MASK)
N#define UART_BDH_LBKDIE_MASK                     0x80u
N#define UART_BDH_LBKDIE_SHIFT                    7
N#define UART_BDH_LBKDIE_WIDTH                    1
N#define UART_BDH_LBKDIE(x)                       (((uint8_t)(((uint8_t)(x))<<UART_BDH_LBKDIE_SHIFT))&UART_BDH_LBKDIE_MASK)
N/* BDL Bit Fields */
N#define UART_BDL_SBR_MASK                        0xFFu
N#define UART_BDL_SBR_SHIFT                       0
N#define UART_BDL_SBR_WIDTH                       8
N#define UART_BDL_SBR(x)                          (((uint8_t)(((uint8_t)(x))<<UART_BDL_SBR_SHIFT))&UART_BDL_SBR_MASK)
N/* C1 Bit Fields */
N#define UART_C1_PT_MASK                          0x1u
N#define UART_C1_PT_SHIFT                         0
N#define UART_C1_PT_WIDTH                         1
N#define UART_C1_PT(x)                            (((uint8_t)(((uint8_t)(x))<<UART_C1_PT_SHIFT))&UART_C1_PT_MASK)
N#define UART_C1_PE_MASK                          0x2u
N#define UART_C1_PE_SHIFT                         1
N#define UART_C1_PE_WIDTH                         1
N#define UART_C1_PE(x)                            (((uint8_t)(((uint8_t)(x))<<UART_C1_PE_SHIFT))&UART_C1_PE_MASK)
N#define UART_C1_ILT_MASK                         0x4u
N#define UART_C1_ILT_SHIFT                        2
N#define UART_C1_ILT_WIDTH                        1
N#define UART_C1_ILT(x)                           (((uint8_t)(((uint8_t)(x))<<UART_C1_ILT_SHIFT))&UART_C1_ILT_MASK)
N#define UART_C1_WAKE_MASK                        0x8u
N#define UART_C1_WAKE_SHIFT                       3
N#define UART_C1_WAKE_WIDTH                       1
N#define UART_C1_WAKE(x)                          (((uint8_t)(((uint8_t)(x))<<UART_C1_WAKE_SHIFT))&UART_C1_WAKE_MASK)
N#define UART_C1_M_MASK                           0x10u
N#define UART_C1_M_SHIFT                          4
N#define UART_C1_M_WIDTH                          1
N#define UART_C1_M(x)                             (((uint8_t)(((uint8_t)(x))<<UART_C1_M_SHIFT))&UART_C1_M_MASK)
N#define UART_C1_RSRC_MASK                        0x20u
N#define UART_C1_RSRC_SHIFT                       5
N#define UART_C1_RSRC_WIDTH                       1
N#define UART_C1_RSRC(x)                          (((uint8_t)(((uint8_t)(x))<<UART_C1_RSRC_SHIFT))&UART_C1_RSRC_MASK)
N#define UART_C1_UARTSWAI_MASK                    0x40u
N#define UART_C1_UARTSWAI_SHIFT                   6
N#define UART_C1_UARTSWAI_WIDTH                   1
N#define UART_C1_UARTSWAI(x)                      (((uint8_t)(((uint8_t)(x))<<UART_C1_UARTSWAI_SHIFT))&UART_C1_UARTSWAI_MASK)
N#define UART_C1_LOOPS_MASK                       0x80u
N#define UART_C1_LOOPS_SHIFT                      7
N#define UART_C1_LOOPS_WIDTH                      1
N#define UART_C1_LOOPS(x)                         (((uint8_t)(((uint8_t)(x))<<UART_C1_LOOPS_SHIFT))&UART_C1_LOOPS_MASK)
N/* C2 Bit Fields */
N#define UART_C2_SBK_MASK                         0x1u
N#define UART_C2_SBK_SHIFT                        0
N#define UART_C2_SBK_WIDTH                        1
N#define UART_C2_SBK(x)                           (((uint8_t)(((uint8_t)(x))<<UART_C2_SBK_SHIFT))&UART_C2_SBK_MASK)
N#define UART_C2_RWU_MASK                         0x2u
N#define UART_C2_RWU_SHIFT                        1
N#define UART_C2_RWU_WIDTH                        1
N#define UART_C2_RWU(x)                           (((uint8_t)(((uint8_t)(x))<<UART_C2_RWU_SHIFT))&UART_C2_RWU_MASK)
N#define UART_C2_RE_MASK                          0x4u
N#define UART_C2_RE_SHIFT                         2
N#define UART_C2_RE_WIDTH                         1
N#define UART_C2_RE(x)                            (((uint8_t)(((uint8_t)(x))<<UART_C2_RE_SHIFT))&UART_C2_RE_MASK)
N#define UART_C2_TE_MASK                          0x8u
N#define UART_C2_TE_SHIFT                         3
N#define UART_C2_TE_WIDTH                         1
N#define UART_C2_TE(x)                            (((uint8_t)(((uint8_t)(x))<<UART_C2_TE_SHIFT))&UART_C2_TE_MASK)
N#define UART_C2_ILIE_MASK                        0x10u
N#define UART_C2_ILIE_SHIFT                       4
N#define UART_C2_ILIE_WIDTH                       1
N#define UART_C2_ILIE(x)                          (((uint8_t)(((uint8_t)(x))<<UART_C2_ILIE_SHIFT))&UART_C2_ILIE_MASK)
N#define UART_C2_RIE_MASK                         0x20u
N#define UART_C2_RIE_SHIFT                        5
N#define UART_C2_RIE_WIDTH                        1
N#define UART_C2_RIE(x)                           (((uint8_t)(((uint8_t)(x))<<UART_C2_RIE_SHIFT))&UART_C2_RIE_MASK)
N#define UART_C2_TCIE_MASK                        0x40u
N#define UART_C2_TCIE_SHIFT                       6
N#define UART_C2_TCIE_WIDTH                       1
N#define UART_C2_TCIE(x)                          (((uint8_t)(((uint8_t)(x))<<UART_C2_TCIE_SHIFT))&UART_C2_TCIE_MASK)
N#define UART_C2_TIE_MASK                         0x80u
N#define UART_C2_TIE_SHIFT                        7
N#define UART_C2_TIE_WIDTH                        1
N#define UART_C2_TIE(x)                           (((uint8_t)(((uint8_t)(x))<<UART_C2_TIE_SHIFT))&UART_C2_TIE_MASK)
N/* S1 Bit Fields */
N#define UART_S1_PF_MASK                          0x1u
N#define UART_S1_PF_SHIFT                         0
N#define UART_S1_PF_WIDTH                         1
N#define UART_S1_PF(x)                            (((uint8_t)(((uint8_t)(x))<<UART_S1_PF_SHIFT))&UART_S1_PF_MASK)
N#define UART_S1_FE_MASK                          0x2u
N#define UART_S1_FE_SHIFT                         1
N#define UART_S1_FE_WIDTH                         1
N#define UART_S1_FE(x)                            (((uint8_t)(((uint8_t)(x))<<UART_S1_FE_SHIFT))&UART_S1_FE_MASK)
N#define UART_S1_NF_MASK                          0x4u
N#define UART_S1_NF_SHIFT                         2
N#define UART_S1_NF_WIDTH                         1
N#define UART_S1_NF(x)                            (((uint8_t)(((uint8_t)(x))<<UART_S1_NF_SHIFT))&UART_S1_NF_MASK)
N#define UART_S1_OR_MASK                          0x8u
N#define UART_S1_OR_SHIFT                         3
N#define UART_S1_OR_WIDTH                         1
N#define UART_S1_OR(x)                            (((uint8_t)(((uint8_t)(x))<<UART_S1_OR_SHIFT))&UART_S1_OR_MASK)
N#define UART_S1_IDLE_MASK                        0x10u
N#define UART_S1_IDLE_SHIFT                       4
N#define UART_S1_IDLE_WIDTH                       1
N#define UART_S1_IDLE(x)                          (((uint8_t)(((uint8_t)(x))<<UART_S1_IDLE_SHIFT))&UART_S1_IDLE_MASK)
N#define UART_S1_RDRF_MASK                        0x20u
N#define UART_S1_RDRF_SHIFT                       5
N#define UART_S1_RDRF_WIDTH                       1
N#define UART_S1_RDRF(x)                          (((uint8_t)(((uint8_t)(x))<<UART_S1_RDRF_SHIFT))&UART_S1_RDRF_MASK)
N#define UART_S1_TC_MASK                          0x40u
N#define UART_S1_TC_SHIFT                         6
N#define UART_S1_TC_WIDTH                         1
N#define UART_S1_TC(x)                            (((uint8_t)(((uint8_t)(x))<<UART_S1_TC_SHIFT))&UART_S1_TC_MASK)
N#define UART_S1_TDRE_MASK                        0x80u
N#define UART_S1_TDRE_SHIFT                       7
N#define UART_S1_TDRE_WIDTH                       1
N#define UART_S1_TDRE(x)                          (((uint8_t)(((uint8_t)(x))<<UART_S1_TDRE_SHIFT))&UART_S1_TDRE_MASK)
N/* S2 Bit Fields */
N#define UART_S2_RAF_MASK                         0x1u
N#define UART_S2_RAF_SHIFT                        0
N#define UART_S2_RAF_WIDTH                        1
N#define UART_S2_RAF(x)                           (((uint8_t)(((uint8_t)(x))<<UART_S2_RAF_SHIFT))&UART_S2_RAF_MASK)
N#define UART_S2_LBKDE_MASK                       0x2u
N#define UART_S2_LBKDE_SHIFT                      1
N#define UART_S2_LBKDE_WIDTH                      1
N#define UART_S2_LBKDE(x)                         (((uint8_t)(((uint8_t)(x))<<UART_S2_LBKDE_SHIFT))&UART_S2_LBKDE_MASK)
N#define UART_S2_BRK13_MASK                       0x4u
N#define UART_S2_BRK13_SHIFT                      2
N#define UART_S2_BRK13_WIDTH                      1
N#define UART_S2_BRK13(x)                         (((uint8_t)(((uint8_t)(x))<<UART_S2_BRK13_SHIFT))&UART_S2_BRK13_MASK)
N#define UART_S2_RWUID_MASK                       0x8u
N#define UART_S2_RWUID_SHIFT                      3
N#define UART_S2_RWUID_WIDTH                      1
N#define UART_S2_RWUID(x)                         (((uint8_t)(((uint8_t)(x))<<UART_S2_RWUID_SHIFT))&UART_S2_RWUID_MASK)
N#define UART_S2_RXINV_MASK                       0x10u
N#define UART_S2_RXINV_SHIFT                      4
N#define UART_S2_RXINV_WIDTH                      1
N#define UART_S2_RXINV(x)                         (((uint8_t)(((uint8_t)(x))<<UART_S2_RXINV_SHIFT))&UART_S2_RXINV_MASK)
N#define UART_S2_RXEDGIF_MASK                     0x40u
N#define UART_S2_RXEDGIF_SHIFT                    6
N#define UART_S2_RXEDGIF_WIDTH                    1
N#define UART_S2_RXEDGIF(x)                       (((uint8_t)(((uint8_t)(x))<<UART_S2_RXEDGIF_SHIFT))&UART_S2_RXEDGIF_MASK)
N#define UART_S2_LBKDIF_MASK                      0x80u
N#define UART_S2_LBKDIF_SHIFT                     7
N#define UART_S2_LBKDIF_WIDTH                     1
N#define UART_S2_LBKDIF(x)                        (((uint8_t)(((uint8_t)(x))<<UART_S2_LBKDIF_SHIFT))&UART_S2_LBKDIF_MASK)
N/* C3 Bit Fields */
N#define UART_C3_PEIE_MASK                        0x1u
N#define UART_C3_PEIE_SHIFT                       0
N#define UART_C3_PEIE_WIDTH                       1
N#define UART_C3_PEIE(x)                          (((uint8_t)(((uint8_t)(x))<<UART_C3_PEIE_SHIFT))&UART_C3_PEIE_MASK)
N#define UART_C3_FEIE_MASK                        0x2u
N#define UART_C3_FEIE_SHIFT                       1
N#define UART_C3_FEIE_WIDTH                       1
N#define UART_C3_FEIE(x)                          (((uint8_t)(((uint8_t)(x))<<UART_C3_FEIE_SHIFT))&UART_C3_FEIE_MASK)
N#define UART_C3_NEIE_MASK                        0x4u
N#define UART_C3_NEIE_SHIFT                       2
N#define UART_C3_NEIE_WIDTH                       1
N#define UART_C3_NEIE(x)                          (((uint8_t)(((uint8_t)(x))<<UART_C3_NEIE_SHIFT))&UART_C3_NEIE_MASK)
N#define UART_C3_ORIE_MASK                        0x8u
N#define UART_C3_ORIE_SHIFT                       3
N#define UART_C3_ORIE_WIDTH                       1
N#define UART_C3_ORIE(x)                          (((uint8_t)(((uint8_t)(x))<<UART_C3_ORIE_SHIFT))&UART_C3_ORIE_MASK)
N#define UART_C3_TXINV_MASK                       0x10u
N#define UART_C3_TXINV_SHIFT                      4
N#define UART_C3_TXINV_WIDTH                      1
N#define UART_C3_TXINV(x)                         (((uint8_t)(((uint8_t)(x))<<UART_C3_TXINV_SHIFT))&UART_C3_TXINV_MASK)
N#define UART_C3_TXDIR_MASK                       0x20u
N#define UART_C3_TXDIR_SHIFT                      5
N#define UART_C3_TXDIR_WIDTH                      1
N#define UART_C3_TXDIR(x)                         (((uint8_t)(((uint8_t)(x))<<UART_C3_TXDIR_SHIFT))&UART_C3_TXDIR_MASK)
N#define UART_C3_T8_MASK                          0x40u
N#define UART_C3_T8_SHIFT                         6
N#define UART_C3_T8_WIDTH                         1
N#define UART_C3_T8(x)                            (((uint8_t)(((uint8_t)(x))<<UART_C3_T8_SHIFT))&UART_C3_T8_MASK)
N#define UART_C3_R8_MASK                          0x80u
N#define UART_C3_R8_SHIFT                         7
N#define UART_C3_R8_WIDTH                         1
N#define UART_C3_R8(x)                            (((uint8_t)(((uint8_t)(x))<<UART_C3_R8_SHIFT))&UART_C3_R8_MASK)
N/* D Bit Fields */
N#define UART_D_R0T0_MASK                         0x1u
N#define UART_D_R0T0_SHIFT                        0
N#define UART_D_R0T0_WIDTH                        1
N#define UART_D_R0T0(x)                           (((uint8_t)(((uint8_t)(x))<<UART_D_R0T0_SHIFT))&UART_D_R0T0_MASK)
N#define UART_D_R1T1_MASK                         0x2u
N#define UART_D_R1T1_SHIFT                        1
N#define UART_D_R1T1_WIDTH                        1
N#define UART_D_R1T1(x)                           (((uint8_t)(((uint8_t)(x))<<UART_D_R1T1_SHIFT))&UART_D_R1T1_MASK)
N#define UART_D_R2T2_MASK                         0x4u
N#define UART_D_R2T2_SHIFT                        2
N#define UART_D_R2T2_WIDTH                        1
N#define UART_D_R2T2(x)                           (((uint8_t)(((uint8_t)(x))<<UART_D_R2T2_SHIFT))&UART_D_R2T2_MASK)
N#define UART_D_R3T3_MASK                         0x8u
N#define UART_D_R3T3_SHIFT                        3
N#define UART_D_R3T3_WIDTH                        1
N#define UART_D_R3T3(x)                           (((uint8_t)(((uint8_t)(x))<<UART_D_R3T3_SHIFT))&UART_D_R3T3_MASK)
N#define UART_D_R4T4_MASK                         0x10u
N#define UART_D_R4T4_SHIFT                        4
N#define UART_D_R4T4_WIDTH                        1
N#define UART_D_R4T4(x)                           (((uint8_t)(((uint8_t)(x))<<UART_D_R4T4_SHIFT))&UART_D_R4T4_MASK)
N#define UART_D_R5T5_MASK                         0x20u
N#define UART_D_R5T5_SHIFT                        5
N#define UART_D_R5T5_WIDTH                        1
N#define UART_D_R5T5(x)                           (((uint8_t)(((uint8_t)(x))<<UART_D_R5T5_SHIFT))&UART_D_R5T5_MASK)
N#define UART_D_R6T6_MASK                         0x40u
N#define UART_D_R6T6_SHIFT                        6
N#define UART_D_R6T6_WIDTH                        1
N#define UART_D_R6T6(x)                           (((uint8_t)(((uint8_t)(x))<<UART_D_R6T6_SHIFT))&UART_D_R6T6_MASK)
N#define UART_D_R7T7_MASK                         0x80u
N#define UART_D_R7T7_SHIFT                        7
N#define UART_D_R7T7_WIDTH                        1
N#define UART_D_R7T7(x)                           (((uint8_t)(((uint8_t)(x))<<UART_D_R7T7_SHIFT))&UART_D_R7T7_MASK)
N/* C4 Bit Fields */
N#define UART_C4_RDMAS_MASK                       0x20u
N#define UART_C4_RDMAS_SHIFT                      5
N#define UART_C4_RDMAS_WIDTH                      1
N#define UART_C4_RDMAS(x)                         (((uint8_t)(((uint8_t)(x))<<UART_C4_RDMAS_SHIFT))&UART_C4_RDMAS_MASK)
N#define UART_C4_TDMAS_MASK                       0x80u
N#define UART_C4_TDMAS_SHIFT                      7
N#define UART_C4_TDMAS_WIDTH                      1
N#define UART_C4_TDMAS(x)                         (((uint8_t)(((uint8_t)(x))<<UART_C4_TDMAS_SHIFT))&UART_C4_TDMAS_MASK)
N
N/*!
N * @}
N */ /* end of group UART_Register_Masks */
N
N
N/* UART - Peripheral instance base addresses */
N/** Peripheral UART1 base address */
N#define UART1_BASE                               (0x4006B000u)
N/** Peripheral UART1 base pointer */
N#define UART1                                    ((UART_Type *)UART1_BASE)
N#define UART1_BASE_PTR                           (UART1)
N/** Peripheral UART2 base address */
N#define UART2_BASE                               (0x4006C000u)
N/** Peripheral UART2 base pointer */
N#define UART2                                    ((UART_Type *)UART2_BASE)
N#define UART2_BASE_PTR                           (UART2)
N/** Array initializer of UART peripheral base addresses */
N#define UART_BASE_ADDRS                          { 0u, UART1_BASE, UART2_BASE }
N/** Array initializer of UART peripheral base pointers */
N#define UART_BASE_PTRS                           { (UART_Type *)0u, UART1, UART2 }
N/** Interrupt vectors for the UART peripheral type */
N#define UART_RX_TX_IRQS                          { NotAvail_IRQn, UART1_IRQn, UART2_IRQn }
N#define UART_ERR_IRQS                            { NotAvail_IRQn, UART1_IRQn, UART2_IRQn }
N
N/* ----------------------------------------------------------------------------
N   -- UART - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup UART_Register_Accessor_Macros UART - Register accessor macros
N * @{
N */
N
N
N/* UART - Register instance definitions */
N/* UART1 */
N#define UART1_BDH                                UART_BDH_REG(UART1)
N#define UART1_BDL                                UART_BDL_REG(UART1)
N#define UART1_C1                                 UART_C1_REG(UART1)
N#define UART1_C2                                 UART_C2_REG(UART1)
N#define UART1_S1                                 UART_S1_REG(UART1)
N#define UART1_S2                                 UART_S2_REG(UART1)
N#define UART1_C3                                 UART_C3_REG(UART1)
N#define UART1_D                                  UART_D_REG(UART1)
N#define UART1_C4                                 UART_C4_REG(UART1)
N/* UART2 */
N#define UART2_BDH                                UART_BDH_REG(UART2)
N#define UART2_BDL                                UART_BDL_REG(UART2)
N#define UART2_C1                                 UART_C1_REG(UART2)
N#define UART2_C2                                 UART_C2_REG(UART2)
N#define UART2_S1                                 UART_S1_REG(UART2)
N#define UART2_S2                                 UART_S2_REG(UART2)
N#define UART2_C3                                 UART_C3_REG(UART2)
N#define UART2_D                                  UART_D_REG(UART2)
N#define UART2_C4                                 UART_C4_REG(UART2)
N
N/*!
N * @}
N */ /* end of group UART_Register_Accessor_Macros */
N
N
N/*!
N * @}
N */ /* end of group UART_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- UART0 Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup UART0_Peripheral_Access_Layer UART0 Peripheral Access Layer
N * @{
N */
N
N/** UART0 - Register Layout Typedef */
Ntypedef struct {
N  __IO uint8_t BDH;                                /**< UART Baud Rate Register High, offset: 0x0 */
X  volatile uint8_t BDH;                                 
N  __IO uint8_t BDL;                                /**< UART Baud Rate Register Low, offset: 0x1 */
X  volatile uint8_t BDL;                                 
N  __IO uint8_t C1;                                 /**< UART Control Register 1, offset: 0x2 */
X  volatile uint8_t C1;                                  
N  __IO uint8_t C2;                                 /**< UART Control Register 2, offset: 0x3 */
X  volatile uint8_t C2;                                  
N  __IO uint8_t S1;                                 /**< UART Status Register 1, offset: 0x4 */
X  volatile uint8_t S1;                                  
N  __IO uint8_t S2;                                 /**< UART Status Register 2, offset: 0x5 */
X  volatile uint8_t S2;                                  
N  __IO uint8_t C3;                                 /**< UART Control Register 3, offset: 0x6 */
X  volatile uint8_t C3;                                  
N  __IO uint8_t D;                                  /**< UART Data Register, offset: 0x7 */
X  volatile uint8_t D;                                   
N  __IO uint8_t MA1;                                /**< UART Match Address Registers 1, offset: 0x8 */
X  volatile uint8_t MA1;                                 
N  __IO uint8_t MA2;                                /**< UART Match Address Registers 2, offset: 0x9 */
X  volatile uint8_t MA2;                                 
N  __IO uint8_t C4;                                 /**< UART Control Register 4, offset: 0xA */
X  volatile uint8_t C4;                                  
N  __IO uint8_t C5;                                 /**< UART Control Register 5, offset: 0xB */
X  volatile uint8_t C5;                                  
N} UART0_Type, *UART0_MemMapPtr;
N
N/* ----------------------------------------------------------------------------
N   -- UART0 - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup UART0_Register_Accessor_Macros UART0 - Register accessor macros
N * @{
N */
N
N
N/* UART0 - Register accessors */
N#define UART0_BDH_REG(base)                      ((base)->BDH)
N#define UART0_BDL_REG(base)                      ((base)->BDL)
N#define UART0_C1_REG(base)                       ((base)->C1)
N#define UART0_C2_REG(base)                       ((base)->C2)
N#define UART0_S1_REG(base)                       ((base)->S1)
N#define UART0_S2_REG(base)                       ((base)->S2)
N#define UART0_C3_REG(base)                       ((base)->C3)
N#define UART0_D_REG(base)                        ((base)->D)
N#define UART0_MA1_REG(base)                      ((base)->MA1)
N#define UART0_MA2_REG(base)                      ((base)->MA2)
N#define UART0_C4_REG(base)                       ((base)->C4)
N#define UART0_C5_REG(base)                       ((base)->C5)
N
N/*!
N * @}
N */ /* end of group UART0_Register_Accessor_Macros */
N
N
N/* ----------------------------------------------------------------------------
N   -- UART0 Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup UART0_Register_Masks UART0 Register Masks
N * @{
N */
N
N/* BDH Bit Fields */
N#define UART0_BDH_SBR_MASK                       0x1Fu
N#define UART0_BDH_SBR_SHIFT                      0
N#define UART0_BDH_SBR_WIDTH                      5
N#define UART0_BDH_SBR(x)                         (((uint8_t)(((uint8_t)(x))<<UART0_BDH_SBR_SHIFT))&UART0_BDH_SBR_MASK)
N#define UART0_BDH_SBNS_MASK                      0x20u
N#define UART0_BDH_SBNS_SHIFT                     5
N#define UART0_BDH_SBNS_WIDTH                     1
N#define UART0_BDH_SBNS(x)                        (((uint8_t)(((uint8_t)(x))<<UART0_BDH_SBNS_SHIFT))&UART0_BDH_SBNS_MASK)
N#define UART0_BDH_RXEDGIE_MASK                   0x40u
N#define UART0_BDH_RXEDGIE_SHIFT                  6
N#define UART0_BDH_RXEDGIE_WIDTH                  1
N#define UART0_BDH_RXEDGIE(x)                     (((uint8_t)(((uint8_t)(x))<<UART0_BDH_RXEDGIE_SHIFT))&UART0_BDH_RXEDGIE_MASK)
N#define UART0_BDH_LBKDIE_MASK                    0x80u
N#define UART0_BDH_LBKDIE_SHIFT                   7
N#define UART0_BDH_LBKDIE_WIDTH                   1
N#define UART0_BDH_LBKDIE(x)                      (((uint8_t)(((uint8_t)(x))<<UART0_BDH_LBKDIE_SHIFT))&UART0_BDH_LBKDIE_MASK)
N/* BDL Bit Fields */
N#define UART0_BDL_SBR_MASK                       0xFFu
N#define UART0_BDL_SBR_SHIFT                      0
N#define UART0_BDL_SBR_WIDTH                      8
N#define UART0_BDL_SBR(x)                         (((uint8_t)(((uint8_t)(x))<<UART0_BDL_SBR_SHIFT))&UART0_BDL_SBR_MASK)
N/* C1 Bit Fields */
N#define UART0_C1_PT_MASK                         0x1u
N#define UART0_C1_PT_SHIFT                        0
N#define UART0_C1_PT_WIDTH                        1
N#define UART0_C1_PT(x)                           (((uint8_t)(((uint8_t)(x))<<UART0_C1_PT_SHIFT))&UART0_C1_PT_MASK)
N#define UART0_C1_PE_MASK                         0x2u
N#define UART0_C1_PE_SHIFT                        1
N#define UART0_C1_PE_WIDTH                        1
N#define UART0_C1_PE(x)                           (((uint8_t)(((uint8_t)(x))<<UART0_C1_PE_SHIFT))&UART0_C1_PE_MASK)
N#define UART0_C1_ILT_MASK                        0x4u
N#define UART0_C1_ILT_SHIFT                       2
N#define UART0_C1_ILT_WIDTH                       1
N#define UART0_C1_ILT(x)                          (((uint8_t)(((uint8_t)(x))<<UART0_C1_ILT_SHIFT))&UART0_C1_ILT_MASK)
N#define UART0_C1_WAKE_MASK                       0x8u
N#define UART0_C1_WAKE_SHIFT                      3
N#define UART0_C1_WAKE_WIDTH                      1
N#define UART0_C1_WAKE(x)                         (((uint8_t)(((uint8_t)(x))<<UART0_C1_WAKE_SHIFT))&UART0_C1_WAKE_MASK)
N#define UART0_C1_M_MASK                          0x10u
N#define UART0_C1_M_SHIFT                         4
N#define UART0_C1_M_WIDTH                         1
N#define UART0_C1_M(x)                            (((uint8_t)(((uint8_t)(x))<<UART0_C1_M_SHIFT))&UART0_C1_M_MASK)
N#define UART0_C1_RSRC_MASK                       0x20u
N#define UART0_C1_RSRC_SHIFT                      5
N#define UART0_C1_RSRC_WIDTH                      1
N#define UART0_C1_RSRC(x)                         (((uint8_t)(((uint8_t)(x))<<UART0_C1_RSRC_SHIFT))&UART0_C1_RSRC_MASK)
N#define UART0_C1_DOZEEN_MASK                     0x40u
N#define UART0_C1_DOZEEN_SHIFT                    6
N#define UART0_C1_DOZEEN_WIDTH                    1
N#define UART0_C1_DOZEEN(x)                       (((uint8_t)(((uint8_t)(x))<<UART0_C1_DOZEEN_SHIFT))&UART0_C1_DOZEEN_MASK)
N#define UART0_C1_LOOPS_MASK                      0x80u
N#define UART0_C1_LOOPS_SHIFT                     7
N#define UART0_C1_LOOPS_WIDTH                     1
N#define UART0_C1_LOOPS(x)                        (((uint8_t)(((uint8_t)(x))<<UART0_C1_LOOPS_SHIFT))&UART0_C1_LOOPS_MASK)
N/* C2 Bit Fields */
N#define UART0_C2_SBK_MASK                        0x1u
N#define UART0_C2_SBK_SHIFT                       0
N#define UART0_C2_SBK_WIDTH                       1
N#define UART0_C2_SBK(x)                          (((uint8_t)(((uint8_t)(x))<<UART0_C2_SBK_SHIFT))&UART0_C2_SBK_MASK)
N#define UART0_C2_RWU_MASK                        0x2u
N#define UART0_C2_RWU_SHIFT                       1
N#define UART0_C2_RWU_WIDTH                       1
N#define UART0_C2_RWU(x)                          (((uint8_t)(((uint8_t)(x))<<UART0_C2_RWU_SHIFT))&UART0_C2_RWU_MASK)
N#define UART0_C2_RE_MASK                         0x4u
N#define UART0_C2_RE_SHIFT                        2
N#define UART0_C2_RE_WIDTH                        1
N#define UART0_C2_RE(x)                           (((uint8_t)(((uint8_t)(x))<<UART0_C2_RE_SHIFT))&UART0_C2_RE_MASK)
N#define UART0_C2_TE_MASK                         0x8u
N#define UART0_C2_TE_SHIFT                        3
N#define UART0_C2_TE_WIDTH                        1
N#define UART0_C2_TE(x)                           (((uint8_t)(((uint8_t)(x))<<UART0_C2_TE_SHIFT))&UART0_C2_TE_MASK)
N#define UART0_C2_ILIE_MASK                       0x10u
N#define UART0_C2_ILIE_SHIFT                      4
N#define UART0_C2_ILIE_WIDTH                      1
N#define UART0_C2_ILIE(x)                         (((uint8_t)(((uint8_t)(x))<<UART0_C2_ILIE_SHIFT))&UART0_C2_ILIE_MASK)
N#define UART0_C2_RIE_MASK                        0x20u
N#define UART0_C2_RIE_SHIFT                       5
N#define UART0_C2_RIE_WIDTH                       1
N#define UART0_C2_RIE(x)                          (((uint8_t)(((uint8_t)(x))<<UART0_C2_RIE_SHIFT))&UART0_C2_RIE_MASK)
N#define UART0_C2_TCIE_MASK                       0x40u
N#define UART0_C2_TCIE_SHIFT                      6
N#define UART0_C2_TCIE_WIDTH                      1
N#define UART0_C2_TCIE(x)                         (((uint8_t)(((uint8_t)(x))<<UART0_C2_TCIE_SHIFT))&UART0_C2_TCIE_MASK)
N#define UART0_C2_TIE_MASK                        0x80u
N#define UART0_C2_TIE_SHIFT                       7
N#define UART0_C2_TIE_WIDTH                       1
N#define UART0_C2_TIE(x)                          (((uint8_t)(((uint8_t)(x))<<UART0_C2_TIE_SHIFT))&UART0_C2_TIE_MASK)
N/* S1 Bit Fields */
N#define UART0_S1_PF_MASK                         0x1u
N#define UART0_S1_PF_SHIFT                        0
N#define UART0_S1_PF_WIDTH                        1
N#define UART0_S1_PF(x)                           (((uint8_t)(((uint8_t)(x))<<UART0_S1_PF_SHIFT))&UART0_S1_PF_MASK)
N#define UART0_S1_FE_MASK                         0x2u
N#define UART0_S1_FE_SHIFT                        1
N#define UART0_S1_FE_WIDTH                        1
N#define UART0_S1_FE(x)                           (((uint8_t)(((uint8_t)(x))<<UART0_S1_FE_SHIFT))&UART0_S1_FE_MASK)
N#define UART0_S1_NF_MASK                         0x4u
N#define UART0_S1_NF_SHIFT                        2
N#define UART0_S1_NF_WIDTH                        1
N#define UART0_S1_NF(x)                           (((uint8_t)(((uint8_t)(x))<<UART0_S1_NF_SHIFT))&UART0_S1_NF_MASK)
N#define UART0_S1_OR_MASK                         0x8u
N#define UART0_S1_OR_SHIFT                        3
N#define UART0_S1_OR_WIDTH                        1
N#define UART0_S1_OR(x)                           (((uint8_t)(((uint8_t)(x))<<UART0_S1_OR_SHIFT))&UART0_S1_OR_MASK)
N#define UART0_S1_IDLE_MASK                       0x10u
N#define UART0_S1_IDLE_SHIFT                      4
N#define UART0_S1_IDLE_WIDTH                      1
N#define UART0_S1_IDLE(x)                         (((uint8_t)(((uint8_t)(x))<<UART0_S1_IDLE_SHIFT))&UART0_S1_IDLE_MASK)
N#define UART0_S1_RDRF_MASK                       0x20u
N#define UART0_S1_RDRF_SHIFT                      5
N#define UART0_S1_RDRF_WIDTH                      1
N#define UART0_S1_RDRF(x)                         (((uint8_t)(((uint8_t)(x))<<UART0_S1_RDRF_SHIFT))&UART0_S1_RDRF_MASK)
N#define UART0_S1_TC_MASK                         0x40u
N#define UART0_S1_TC_SHIFT                        6
N#define UART0_S1_TC_WIDTH                        1
N#define UART0_S1_TC(x)                           (((uint8_t)(((uint8_t)(x))<<UART0_S1_TC_SHIFT))&UART0_S1_TC_MASK)
N#define UART0_S1_TDRE_MASK                       0x80u
N#define UART0_S1_TDRE_SHIFT                      7
N#define UART0_S1_TDRE_WIDTH                      1
N#define UART0_S1_TDRE(x)                         (((uint8_t)(((uint8_t)(x))<<UART0_S1_TDRE_SHIFT))&UART0_S1_TDRE_MASK)
N/* S2 Bit Fields */
N#define UART0_S2_RAF_MASK                        0x1u
N#define UART0_S2_RAF_SHIFT                       0
N#define UART0_S2_RAF_WIDTH                       1
N#define UART0_S2_RAF(x)                          (((uint8_t)(((uint8_t)(x))<<UART0_S2_RAF_SHIFT))&UART0_S2_RAF_MASK)
N#define UART0_S2_LBKDE_MASK                      0x2u
N#define UART0_S2_LBKDE_SHIFT                     1
N#define UART0_S2_LBKDE_WIDTH                     1
N#define UART0_S2_LBKDE(x)                        (((uint8_t)(((uint8_t)(x))<<UART0_S2_LBKDE_SHIFT))&UART0_S2_LBKDE_MASK)
N#define UART0_S2_BRK13_MASK                      0x4u
N#define UART0_S2_BRK13_SHIFT                     2
N#define UART0_S2_BRK13_WIDTH                     1
N#define UART0_S2_BRK13(x)                        (((uint8_t)(((uint8_t)(x))<<UART0_S2_BRK13_SHIFT))&UART0_S2_BRK13_MASK)
N#define UART0_S2_RWUID_MASK                      0x8u
N#define UART0_S2_RWUID_SHIFT                     3
N#define UART0_S2_RWUID_WIDTH                     1
N#define UART0_S2_RWUID(x)                        (((uint8_t)(((uint8_t)(x))<<UART0_S2_RWUID_SHIFT))&UART0_S2_RWUID_MASK)
N#define UART0_S2_RXINV_MASK                      0x10u
N#define UART0_S2_RXINV_SHIFT                     4
N#define UART0_S2_RXINV_WIDTH                     1
N#define UART0_S2_RXINV(x)                        (((uint8_t)(((uint8_t)(x))<<UART0_S2_RXINV_SHIFT))&UART0_S2_RXINV_MASK)
N#define UART0_S2_MSBF_MASK                       0x20u
N#define UART0_S2_MSBF_SHIFT                      5
N#define UART0_S2_MSBF_WIDTH                      1
N#define UART0_S2_MSBF(x)                         (((uint8_t)(((uint8_t)(x))<<UART0_S2_MSBF_SHIFT))&UART0_S2_MSBF_MASK)
N#define UART0_S2_RXEDGIF_MASK                    0x40u
N#define UART0_S2_RXEDGIF_SHIFT                   6
N#define UART0_S2_RXEDGIF_WIDTH                   1
N#define UART0_S2_RXEDGIF(x)                      (((uint8_t)(((uint8_t)(x))<<UART0_S2_RXEDGIF_SHIFT))&UART0_S2_RXEDGIF_MASK)
N#define UART0_S2_LBKDIF_MASK                     0x80u
N#define UART0_S2_LBKDIF_SHIFT                    7
N#define UART0_S2_LBKDIF_WIDTH                    1
N#define UART0_S2_LBKDIF(x)                       (((uint8_t)(((uint8_t)(x))<<UART0_S2_LBKDIF_SHIFT))&UART0_S2_LBKDIF_MASK)
N/* C3 Bit Fields */
N#define UART0_C3_PEIE_MASK                       0x1u
N#define UART0_C3_PEIE_SHIFT                      0
N#define UART0_C3_PEIE_WIDTH                      1
N#define UART0_C3_PEIE(x)                         (((uint8_t)(((uint8_t)(x))<<UART0_C3_PEIE_SHIFT))&UART0_C3_PEIE_MASK)
N#define UART0_C3_FEIE_MASK                       0x2u
N#define UART0_C3_FEIE_SHIFT                      1
N#define UART0_C3_FEIE_WIDTH                      1
N#define UART0_C3_FEIE(x)                         (((uint8_t)(((uint8_t)(x))<<UART0_C3_FEIE_SHIFT))&UART0_C3_FEIE_MASK)
N#define UART0_C3_NEIE_MASK                       0x4u
N#define UART0_C3_NEIE_SHIFT                      2
N#define UART0_C3_NEIE_WIDTH                      1
N#define UART0_C3_NEIE(x)                         (((uint8_t)(((uint8_t)(x))<<UART0_C3_NEIE_SHIFT))&UART0_C3_NEIE_MASK)
N#define UART0_C3_ORIE_MASK                       0x8u
N#define UART0_C3_ORIE_SHIFT                      3
N#define UART0_C3_ORIE_WIDTH                      1
N#define UART0_C3_ORIE(x)                         (((uint8_t)(((uint8_t)(x))<<UART0_C3_ORIE_SHIFT))&UART0_C3_ORIE_MASK)
N#define UART0_C3_TXINV_MASK                      0x10u
N#define UART0_C3_TXINV_SHIFT                     4
N#define UART0_C3_TXINV_WIDTH                     1
N#define UART0_C3_TXINV(x)                        (((uint8_t)(((uint8_t)(x))<<UART0_C3_TXINV_SHIFT))&UART0_C3_TXINV_MASK)
N#define UART0_C3_TXDIR_MASK                      0x20u
N#define UART0_C3_TXDIR_SHIFT                     5
N#define UART0_C3_TXDIR_WIDTH                     1
N#define UART0_C3_TXDIR(x)                        (((uint8_t)(((uint8_t)(x))<<UART0_C3_TXDIR_SHIFT))&UART0_C3_TXDIR_MASK)
N#define UART0_C3_R9T8_MASK                       0x40u
N#define UART0_C3_R9T8_SHIFT                      6
N#define UART0_C3_R9T8_WIDTH                      1
N#define UART0_C3_R9T8(x)                         (((uint8_t)(((uint8_t)(x))<<UART0_C3_R9T8_SHIFT))&UART0_C3_R9T8_MASK)
N#define UART0_C3_R8T9_MASK                       0x80u
N#define UART0_C3_R8T9_SHIFT                      7
N#define UART0_C3_R8T9_WIDTH                      1
N#define UART0_C3_R8T9(x)                         (((uint8_t)(((uint8_t)(x))<<UART0_C3_R8T9_SHIFT))&UART0_C3_R8T9_MASK)
N/* D Bit Fields */
N#define UART0_D_R0T0_MASK                        0x1u
N#define UART0_D_R0T0_SHIFT                       0
N#define UART0_D_R0T0_WIDTH                       1
N#define UART0_D_R0T0(x)                          (((uint8_t)(((uint8_t)(x))<<UART0_D_R0T0_SHIFT))&UART0_D_R0T0_MASK)
N#define UART0_D_R1T1_MASK                        0x2u
N#define UART0_D_R1T1_SHIFT                       1
N#define UART0_D_R1T1_WIDTH                       1
N#define UART0_D_R1T1(x)                          (((uint8_t)(((uint8_t)(x))<<UART0_D_R1T1_SHIFT))&UART0_D_R1T1_MASK)
N#define UART0_D_R2T2_MASK                        0x4u
N#define UART0_D_R2T2_SHIFT                       2
N#define UART0_D_R2T2_WIDTH                       1
N#define UART0_D_R2T2(x)                          (((uint8_t)(((uint8_t)(x))<<UART0_D_R2T2_SHIFT))&UART0_D_R2T2_MASK)
N#define UART0_D_R3T3_MASK                        0x8u
N#define UART0_D_R3T3_SHIFT                       3
N#define UART0_D_R3T3_WIDTH                       1
N#define UART0_D_R3T3(x)                          (((uint8_t)(((uint8_t)(x))<<UART0_D_R3T3_SHIFT))&UART0_D_R3T3_MASK)
N#define UART0_D_R4T4_MASK                        0x10u
N#define UART0_D_R4T4_SHIFT                       4
N#define UART0_D_R4T4_WIDTH                       1
N#define UART0_D_R4T4(x)                          (((uint8_t)(((uint8_t)(x))<<UART0_D_R4T4_SHIFT))&UART0_D_R4T4_MASK)
N#define UART0_D_R5T5_MASK                        0x20u
N#define UART0_D_R5T5_SHIFT                       5
N#define UART0_D_R5T5_WIDTH                       1
N#define UART0_D_R5T5(x)                          (((uint8_t)(((uint8_t)(x))<<UART0_D_R5T5_SHIFT))&UART0_D_R5T5_MASK)
N#define UART0_D_R6T6_MASK                        0x40u
N#define UART0_D_R6T6_SHIFT                       6
N#define UART0_D_R6T6_WIDTH                       1
N#define UART0_D_R6T6(x)                          (((uint8_t)(((uint8_t)(x))<<UART0_D_R6T6_SHIFT))&UART0_D_R6T6_MASK)
N#define UART0_D_R7T7_MASK                        0x80u
N#define UART0_D_R7T7_SHIFT                       7
N#define UART0_D_R7T7_WIDTH                       1
N#define UART0_D_R7T7(x)                          (((uint8_t)(((uint8_t)(x))<<UART0_D_R7T7_SHIFT))&UART0_D_R7T7_MASK)
N/* MA1 Bit Fields */
N#define UART0_MA1_MA_MASK                        0xFFu
N#define UART0_MA1_MA_SHIFT                       0
N#define UART0_MA1_MA_WIDTH                       8
N#define UART0_MA1_MA(x)                          (((uint8_t)(((uint8_t)(x))<<UART0_MA1_MA_SHIFT))&UART0_MA1_MA_MASK)
N/* MA2 Bit Fields */
N#define UART0_MA2_MA_MASK                        0xFFu
N#define UART0_MA2_MA_SHIFT                       0
N#define UART0_MA2_MA_WIDTH                       8
N#define UART0_MA2_MA(x)                          (((uint8_t)(((uint8_t)(x))<<UART0_MA2_MA_SHIFT))&UART0_MA2_MA_MASK)
N/* C4 Bit Fields */
N#define UART0_C4_OSR_MASK                        0x1Fu
N#define UART0_C4_OSR_SHIFT                       0
N#define UART0_C4_OSR_WIDTH                       5
N#define UART0_C4_OSR(x)                          (((uint8_t)(((uint8_t)(x))<<UART0_C4_OSR_SHIFT))&UART0_C4_OSR_MASK)
N#define UART0_C4_M10_MASK                        0x20u
N#define UART0_C4_M10_SHIFT                       5
N#define UART0_C4_M10_WIDTH                       1
N#define UART0_C4_M10(x)                          (((uint8_t)(((uint8_t)(x))<<UART0_C4_M10_SHIFT))&UART0_C4_M10_MASK)
N#define UART0_C4_MAEN2_MASK                      0x40u
N#define UART0_C4_MAEN2_SHIFT                     6
N#define UART0_C4_MAEN2_WIDTH                     1
N#define UART0_C4_MAEN2(x)                        (((uint8_t)(((uint8_t)(x))<<UART0_C4_MAEN2_SHIFT))&UART0_C4_MAEN2_MASK)
N#define UART0_C4_MAEN1_MASK                      0x80u
N#define UART0_C4_MAEN1_SHIFT                     7
N#define UART0_C4_MAEN1_WIDTH                     1
N#define UART0_C4_MAEN1(x)                        (((uint8_t)(((uint8_t)(x))<<UART0_C4_MAEN1_SHIFT))&UART0_C4_MAEN1_MASK)
N/* C5 Bit Fields */
N#define UART0_C5_RESYNCDIS_MASK                  0x1u
N#define UART0_C5_RESYNCDIS_SHIFT                 0
N#define UART0_C5_RESYNCDIS_WIDTH                 1
N#define UART0_C5_RESYNCDIS(x)                    (((uint8_t)(((uint8_t)(x))<<UART0_C5_RESYNCDIS_SHIFT))&UART0_C5_RESYNCDIS_MASK)
N#define UART0_C5_BOTHEDGE_MASK                   0x2u
N#define UART0_C5_BOTHEDGE_SHIFT                  1
N#define UART0_C5_BOTHEDGE_WIDTH                  1
N#define UART0_C5_BOTHEDGE(x)                     (((uint8_t)(((uint8_t)(x))<<UART0_C5_BOTHEDGE_SHIFT))&UART0_C5_BOTHEDGE_MASK)
N#define UART0_C5_RDMAE_MASK                      0x20u
N#define UART0_C5_RDMAE_SHIFT                     5
N#define UART0_C5_RDMAE_WIDTH                     1
N#define UART0_C5_RDMAE(x)                        (((uint8_t)(((uint8_t)(x))<<UART0_C5_RDMAE_SHIFT))&UART0_C5_RDMAE_MASK)
N#define UART0_C5_TDMAE_MASK                      0x80u
N#define UART0_C5_TDMAE_SHIFT                     7
N#define UART0_C5_TDMAE_WIDTH                     1
N#define UART0_C5_TDMAE(x)                        (((uint8_t)(((uint8_t)(x))<<UART0_C5_TDMAE_SHIFT))&UART0_C5_TDMAE_MASK)
N
N/*!
N * @}
N */ /* end of group UART0_Register_Masks */
N
N
N/* UART0 - Peripheral instance base addresses */
N/** Peripheral UART0 base address */
N#define UART0_BASE                               (0x4006A000u)
N/** Peripheral UART0 base pointer */
N#define UART0                                    ((UART0_Type *)UART0_BASE)
N#define UART0_BASE_PTR                           (UART0)
N/** Array initializer of UART0 peripheral base addresses */
N#define UART0_BASE_ADDRS                         { UART0_BASE }
N/** Array initializer of UART0 peripheral base pointers */
N#define UART0_BASE_PTRS                          { UART0 }
N/** Interrupt vectors for the UART0 peripheral type */
N#define UART0_RX_TX_IRQS                         { UART0_IRQn }
N#define UART0_ERR_IRQS                           { UART0_IRQn }
N
N/* ----------------------------------------------------------------------------
N   -- UART0 - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup UART0_Register_Accessor_Macros UART0 - Register accessor macros
N * @{
N */
N
N
N/* UART0 - Register instance definitions */
N/* UART0 */
N#define UART0_BDH                                UART0_BDH_REG(UART0)
N#define UART0_BDL                                UART0_BDL_REG(UART0)
N#define UART0_C1                                 UART0_C1_REG(UART0)
N#define UART0_C2                                 UART0_C2_REG(UART0)
N#define UART0_S1                                 UART0_S1_REG(UART0)
N#define UART0_S2                                 UART0_S2_REG(UART0)
N#define UART0_C3                                 UART0_C3_REG(UART0)
N#define UART0_D                                  UART0_D_REG(UART0)
N#define UART0_MA1                                UART0_MA1_REG(UART0)
N#define UART0_MA2                                UART0_MA2_REG(UART0)
N#define UART0_C4                                 UART0_C4_REG(UART0)
N#define UART0_C5                                 UART0_C5_REG(UART0)
N
N/*!
N * @}
N */ /* end of group UART0_Register_Accessor_Macros */
N
N
N/*!
N * @}
N */ /* end of group UART0_Peripheral_Access_Layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- USB Peripheral Access Layer
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup USB_Peripheral_Access_Layer USB Peripheral Access Layer
N * @{
N */
N
N/** USB - Register Layout Typedef */
Ntypedef struct {
N  __I  uint8_t PERID;                              /**< Peripheral ID register, offset: 0x0 */
X  volatile const  uint8_t PERID;                               
N       uint8_t RESERVED_0[3];
N  __I  uint8_t IDCOMP;                             /**< Peripheral ID Complement register, offset: 0x4 */
X  volatile const  uint8_t IDCOMP;                              
N       uint8_t RESERVED_1[3];
N  __I  uint8_t REV;                                /**< Peripheral Revision register, offset: 0x8 */
X  volatile const  uint8_t REV;                                 
N       uint8_t RESERVED_2[3];
N  __I  uint8_t ADDINFO;                            /**< Peripheral Additional Info register, offset: 0xC */
X  volatile const  uint8_t ADDINFO;                             
N       uint8_t RESERVED_3[3];
N  __IO uint8_t OTGISTAT;                           /**< OTG Interrupt Status register, offset: 0x10 */
X  volatile uint8_t OTGISTAT;                            
N       uint8_t RESERVED_4[3];
N  __IO uint8_t OTGICR;                             /**< OTG Interrupt Control Register, offset: 0x14 */
X  volatile uint8_t OTGICR;                              
N       uint8_t RESERVED_5[3];
N  __IO uint8_t OTGSTAT;                            /**< OTG Status register, offset: 0x18 */
X  volatile uint8_t OTGSTAT;                             
N       uint8_t RESERVED_6[3];
N  __IO uint8_t OTGCTL;                             /**< OTG Control register, offset: 0x1C */
X  volatile uint8_t OTGCTL;                              
N       uint8_t RESERVED_7[99];
N  __IO uint8_t ISTAT;                              /**< Interrupt Status register, offset: 0x80 */
X  volatile uint8_t ISTAT;                               
N       uint8_t RESERVED_8[3];
N  __IO uint8_t INTEN;                              /**< Interrupt Enable register, offset: 0x84 */
X  volatile uint8_t INTEN;                               
N       uint8_t RESERVED_9[3];
N  __IO uint8_t ERRSTAT;                            /**< Error Interrupt Status register, offset: 0x88 */
X  volatile uint8_t ERRSTAT;                             
N       uint8_t RESERVED_10[3];
N  __IO uint8_t ERREN;                              /**< Error Interrupt Enable register, offset: 0x8C */
X  volatile uint8_t ERREN;                               
N       uint8_t RESERVED_11[3];
N  __I  uint8_t STAT;                               /**< Status register, offset: 0x90 */
X  volatile const  uint8_t STAT;                                
N       uint8_t RESERVED_12[3];
N  __IO uint8_t CTL;                                /**< Control register, offset: 0x94 */
X  volatile uint8_t CTL;                                 
N       uint8_t RESERVED_13[3];
N  __IO uint8_t ADDR;                               /**< Address register, offset: 0x98 */
X  volatile uint8_t ADDR;                                
N       uint8_t RESERVED_14[3];
N  __IO uint8_t BDTPAGE1;                           /**< BDT Page Register 1, offset: 0x9C */
X  volatile uint8_t BDTPAGE1;                            
N       uint8_t RESERVED_15[3];
N  __IO uint8_t FRMNUML;                            /**< Frame Number Register Low, offset: 0xA0 */
X  volatile uint8_t FRMNUML;                             
N       uint8_t RESERVED_16[3];
N  __IO uint8_t FRMNUMH;                            /**< Frame Number Register High, offset: 0xA4 */
X  volatile uint8_t FRMNUMH;                             
N       uint8_t RESERVED_17[3];
N  __IO uint8_t TOKEN;                              /**< Token register, offset: 0xA8 */
X  volatile uint8_t TOKEN;                               
N       uint8_t RESERVED_18[3];
N  __IO uint8_t SOFTHLD;                            /**< SOF Threshold Register, offset: 0xAC */
X  volatile uint8_t SOFTHLD;                             
N       uint8_t RESERVED_19[3];
N  __IO uint8_t BDTPAGE2;                           /**< BDT Page Register 2, offset: 0xB0 */
X  volatile uint8_t BDTPAGE2;                            
N       uint8_t RESERVED_20[3];
N  __IO uint8_t BDTPAGE3;                           /**< BDT Page Register 3, offset: 0xB4 */
X  volatile uint8_t BDTPAGE3;                            
N       uint8_t RESERVED_21[11];
N  struct {                                         /* offset: 0xC0, array step: 0x4 */
N    __IO uint8_t ENDPT;                              /**< Endpoint Control register, array offset: 0xC0, array step: 0x4 */
X    volatile uint8_t ENDPT;                               
N         uint8_t RESERVED_0[3];
N  } ENDPOINT[16];
N  __IO uint8_t USBCTRL;                            /**< USB Control register, offset: 0x100 */
X  volatile uint8_t USBCTRL;                             
N       uint8_t RESERVED_22[3];
N  __I  uint8_t OBSERVE;                            /**< USB OTG Observe register, offset: 0x104 */
X  volatile const  uint8_t OBSERVE;                             
N       uint8_t RESERVED_23[3];
N  __IO uint8_t CONTROL;                            /**< USB OTG Control register, offset: 0x108 */
X  volatile uint8_t CONTROL;                             
N       uint8_t RESERVED_24[3];
N  __IO uint8_t USBTRC0;                            /**< USB Transceiver Control Register 0, offset: 0x10C */
X  volatile uint8_t USBTRC0;                             
N       uint8_t RESERVED_25[7];
N  __IO uint8_t USBFRMADJUST;                       /**< Frame Adjust Register, offset: 0x114 */
X  volatile uint8_t USBFRMADJUST;                        
N} USB_Type, *USB_MemMapPtr;
N
N/* ----------------------------------------------------------------------------
N   -- USB - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup USB_Register_Accessor_Macros USB - Register accessor macros
N * @{
N */
N
N
N/* USB - Register accessors */
N#define USB_PERID_REG(base)                      ((base)->PERID)
N#define USB_IDCOMP_REG(base)                     ((base)->IDCOMP)
N#define USB_REV_REG(base)                        ((base)->REV)
N#define USB_ADDINFO_REG(base)                    ((base)->ADDINFO)
N#define USB_OTGISTAT_REG(base)                   ((base)->OTGISTAT)
N#define USB_OTGICR_REG(base)                     ((base)->OTGICR)
N#define USB_OTGSTAT_REG(base)                    ((base)->OTGSTAT)
N#define USB_OTGCTL_REG(base)                     ((base)->OTGCTL)
N#define USB_ISTAT_REG(base)                      ((base)->ISTAT)
N#define USB_INTEN_REG(base)                      ((base)->INTEN)
N#define USB_ERRSTAT_REG(base)                    ((base)->ERRSTAT)
N#define USB_ERREN_REG(base)                      ((base)->ERREN)
N#define USB_STAT_REG(base)                       ((base)->STAT)
N#define USB_CTL_REG(base)                        ((base)->CTL)
N#define USB_ADDR_REG(base)                       ((base)->ADDR)
N#define USB_BDTPAGE1_REG(base)                   ((base)->BDTPAGE1)
N#define USB_FRMNUML_REG(base)                    ((base)->FRMNUML)
N#define USB_FRMNUMH_REG(base)                    ((base)->FRMNUMH)
N#define USB_TOKEN_REG(base)                      ((base)->TOKEN)
N#define USB_SOFTHLD_REG(base)                    ((base)->SOFTHLD)
N#define USB_BDTPAGE2_REG(base)                   ((base)->BDTPAGE2)
N#define USB_BDTPAGE3_REG(base)                   ((base)->BDTPAGE3)
N#define USB_ENDPT_REG(base,index)                ((base)->ENDPOINT[index].ENDPT)
N#define USB_ENDPT_COUNT                          16
N#define USB_USBCTRL_REG(base)                    ((base)->USBCTRL)
N#define USB_OBSERVE_REG(base)                    ((base)->OBSERVE)
N#define USB_CONTROL_REG(base)                    ((base)->CONTROL)
N#define USB_USBTRC0_REG(base)                    ((base)->USBTRC0)
N#define USB_USBFRMADJUST_REG(base)               ((base)->USBFRMADJUST)
N
N/*!
N * @}
N */ /* end of group USB_Register_Accessor_Macros */
N
N
N/* ----------------------------------------------------------------------------
N   -- USB Register Masks
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup USB_Register_Masks USB Register Masks
N * @{
N */
N
N/* PERID Bit Fields */
N#define USB_PERID_ID_MASK                        0x3Fu
N#define USB_PERID_ID_SHIFT                       0
N#define USB_PERID_ID_WIDTH                       6
N#define USB_PERID_ID(x)                          (((uint8_t)(((uint8_t)(x))<<USB_PERID_ID_SHIFT))&USB_PERID_ID_MASK)
N/* IDCOMP Bit Fields */
N#define USB_IDCOMP_NID_MASK                      0x3Fu
N#define USB_IDCOMP_NID_SHIFT                     0
N#define USB_IDCOMP_NID_WIDTH                     6
N#define USB_IDCOMP_NID(x)                        (((uint8_t)(((uint8_t)(x))<<USB_IDCOMP_NID_SHIFT))&USB_IDCOMP_NID_MASK)
N/* REV Bit Fields */
N#define USB_REV_REV_MASK                         0xFFu
N#define USB_REV_REV_SHIFT                        0
N#define USB_REV_REV_WIDTH                        8
N#define USB_REV_REV(x)                           (((uint8_t)(((uint8_t)(x))<<USB_REV_REV_SHIFT))&USB_REV_REV_MASK)
N/* ADDINFO Bit Fields */
N#define USB_ADDINFO_IEHOST_MASK                  0x1u
N#define USB_ADDINFO_IEHOST_SHIFT                 0
N#define USB_ADDINFO_IEHOST_WIDTH                 1
N#define USB_ADDINFO_IEHOST(x)                    (((uint8_t)(((uint8_t)(x))<<USB_ADDINFO_IEHOST_SHIFT))&USB_ADDINFO_IEHOST_MASK)
N#define USB_ADDINFO_IRQNUM_MASK                  0xF8u
N#define USB_ADDINFO_IRQNUM_SHIFT                 3
N#define USB_ADDINFO_IRQNUM_WIDTH                 5
N#define USB_ADDINFO_IRQNUM(x)                    (((uint8_t)(((uint8_t)(x))<<USB_ADDINFO_IRQNUM_SHIFT))&USB_ADDINFO_IRQNUM_MASK)
N/* OTGISTAT Bit Fields */
N#define USB_OTGISTAT_AVBUSCHG_MASK               0x1u
N#define USB_OTGISTAT_AVBUSCHG_SHIFT              0
N#define USB_OTGISTAT_AVBUSCHG_WIDTH              1
N#define USB_OTGISTAT_AVBUSCHG(x)                 (((uint8_t)(((uint8_t)(x))<<USB_OTGISTAT_AVBUSCHG_SHIFT))&USB_OTGISTAT_AVBUSCHG_MASK)
N#define USB_OTGISTAT_B_SESS_CHG_MASK             0x4u
N#define USB_OTGISTAT_B_SESS_CHG_SHIFT            2
N#define USB_OTGISTAT_B_SESS_CHG_WIDTH            1
N#define USB_OTGISTAT_B_SESS_CHG(x)               (((uint8_t)(((uint8_t)(x))<<USB_OTGISTAT_B_SESS_CHG_SHIFT))&USB_OTGISTAT_B_SESS_CHG_MASK)
N#define USB_OTGISTAT_SESSVLDCHG_MASK             0x8u
N#define USB_OTGISTAT_SESSVLDCHG_SHIFT            3
N#define USB_OTGISTAT_SESSVLDCHG_WIDTH            1
N#define USB_OTGISTAT_SESSVLDCHG(x)               (((uint8_t)(((uint8_t)(x))<<USB_OTGISTAT_SESSVLDCHG_SHIFT))&USB_OTGISTAT_SESSVLDCHG_MASK)
N#define USB_OTGISTAT_LINE_STATE_CHG_MASK         0x20u
N#define USB_OTGISTAT_LINE_STATE_CHG_SHIFT        5
N#define USB_OTGISTAT_LINE_STATE_CHG_WIDTH        1
N#define USB_OTGISTAT_LINE_STATE_CHG(x)           (((uint8_t)(((uint8_t)(x))<<USB_OTGISTAT_LINE_STATE_CHG_SHIFT))&USB_OTGISTAT_LINE_STATE_CHG_MASK)
N#define USB_OTGISTAT_ONEMSEC_MASK                0x40u
N#define USB_OTGISTAT_ONEMSEC_SHIFT               6
N#define USB_OTGISTAT_ONEMSEC_WIDTH               1
N#define USB_OTGISTAT_ONEMSEC(x)                  (((uint8_t)(((uint8_t)(x))<<USB_OTGISTAT_ONEMSEC_SHIFT))&USB_OTGISTAT_ONEMSEC_MASK)
N#define USB_OTGISTAT_IDCHG_MASK                  0x80u
N#define USB_OTGISTAT_IDCHG_SHIFT                 7
N#define USB_OTGISTAT_IDCHG_WIDTH                 1
N#define USB_OTGISTAT_IDCHG(x)                    (((uint8_t)(((uint8_t)(x))<<USB_OTGISTAT_IDCHG_SHIFT))&USB_OTGISTAT_IDCHG_MASK)
N/* OTGICR Bit Fields */
N#define USB_OTGICR_AVBUSEN_MASK                  0x1u
N#define USB_OTGICR_AVBUSEN_SHIFT                 0
N#define USB_OTGICR_AVBUSEN_WIDTH                 1
N#define USB_OTGICR_AVBUSEN(x)                    (((uint8_t)(((uint8_t)(x))<<USB_OTGICR_AVBUSEN_SHIFT))&USB_OTGICR_AVBUSEN_MASK)
N#define USB_OTGICR_BSESSEN_MASK                  0x4u
N#define USB_OTGICR_BSESSEN_SHIFT                 2
N#define USB_OTGICR_BSESSEN_WIDTH                 1
N#define USB_OTGICR_BSESSEN(x)                    (((uint8_t)(((uint8_t)(x))<<USB_OTGICR_BSESSEN_SHIFT))&USB_OTGICR_BSESSEN_MASK)
N#define USB_OTGICR_SESSVLDEN_MASK                0x8u
N#define USB_OTGICR_SESSVLDEN_SHIFT               3
N#define USB_OTGICR_SESSVLDEN_WIDTH               1
N#define USB_OTGICR_SESSVLDEN(x)                  (((uint8_t)(((uint8_t)(x))<<USB_OTGICR_SESSVLDEN_SHIFT))&USB_OTGICR_SESSVLDEN_MASK)
N#define USB_OTGICR_LINESTATEEN_MASK              0x20u
N#define USB_OTGICR_LINESTATEEN_SHIFT             5
N#define USB_OTGICR_LINESTATEEN_WIDTH             1
N#define USB_OTGICR_LINESTATEEN(x)                (((uint8_t)(((uint8_t)(x))<<USB_OTGICR_LINESTATEEN_SHIFT))&USB_OTGICR_LINESTATEEN_MASK)
N#define USB_OTGICR_ONEMSECEN_MASK                0x40u
N#define USB_OTGICR_ONEMSECEN_SHIFT               6
N#define USB_OTGICR_ONEMSECEN_WIDTH               1
N#define USB_OTGICR_ONEMSECEN(x)                  (((uint8_t)(((uint8_t)(x))<<USB_OTGICR_ONEMSECEN_SHIFT))&USB_OTGICR_ONEMSECEN_MASK)
N#define USB_OTGICR_IDEN_MASK                     0x80u
N#define USB_OTGICR_IDEN_SHIFT                    7
N#define USB_OTGICR_IDEN_WIDTH                    1
N#define USB_OTGICR_IDEN(x)                       (((uint8_t)(((uint8_t)(x))<<USB_OTGICR_IDEN_SHIFT))&USB_OTGICR_IDEN_MASK)
N/* OTGSTAT Bit Fields */
N#define USB_OTGSTAT_AVBUSVLD_MASK                0x1u
N#define USB_OTGSTAT_AVBUSVLD_SHIFT               0
N#define USB_OTGSTAT_AVBUSVLD_WIDTH               1
N#define USB_OTGSTAT_AVBUSVLD(x)                  (((uint8_t)(((uint8_t)(x))<<USB_OTGSTAT_AVBUSVLD_SHIFT))&USB_OTGSTAT_AVBUSVLD_MASK)
N#define USB_OTGSTAT_BSESSEND_MASK                0x4u
N#define USB_OTGSTAT_BSESSEND_SHIFT               2
N#define USB_OTGSTAT_BSESSEND_WIDTH               1
N#define USB_OTGSTAT_BSESSEND(x)                  (((uint8_t)(((uint8_t)(x))<<USB_OTGSTAT_BSESSEND_SHIFT))&USB_OTGSTAT_BSESSEND_MASK)
N#define USB_OTGSTAT_SESS_VLD_MASK                0x8u
N#define USB_OTGSTAT_SESS_VLD_SHIFT               3
N#define USB_OTGSTAT_SESS_VLD_WIDTH               1
N#define USB_OTGSTAT_SESS_VLD(x)                  (((uint8_t)(((uint8_t)(x))<<USB_OTGSTAT_SESS_VLD_SHIFT))&USB_OTGSTAT_SESS_VLD_MASK)
N#define USB_OTGSTAT_LINESTATESTABLE_MASK         0x20u
N#define USB_OTGSTAT_LINESTATESTABLE_SHIFT        5
N#define USB_OTGSTAT_LINESTATESTABLE_WIDTH        1
N#define USB_OTGSTAT_LINESTATESTABLE(x)           (((uint8_t)(((uint8_t)(x))<<USB_OTGSTAT_LINESTATESTABLE_SHIFT))&USB_OTGSTAT_LINESTATESTABLE_MASK)
N#define USB_OTGSTAT_ONEMSECEN_MASK               0x40u
N#define USB_OTGSTAT_ONEMSECEN_SHIFT              6
N#define USB_OTGSTAT_ONEMSECEN_WIDTH              1
N#define USB_OTGSTAT_ONEMSECEN(x)                 (((uint8_t)(((uint8_t)(x))<<USB_OTGSTAT_ONEMSECEN_SHIFT))&USB_OTGSTAT_ONEMSECEN_MASK)
N#define USB_OTGSTAT_ID_MASK                      0x80u
N#define USB_OTGSTAT_ID_SHIFT                     7
N#define USB_OTGSTAT_ID_WIDTH                     1
N#define USB_OTGSTAT_ID(x)                        (((uint8_t)(((uint8_t)(x))<<USB_OTGSTAT_ID_SHIFT))&USB_OTGSTAT_ID_MASK)
N/* OTGCTL Bit Fields */
N#define USB_OTGCTL_OTGEN_MASK                    0x4u
N#define USB_OTGCTL_OTGEN_SHIFT                   2
N#define USB_OTGCTL_OTGEN_WIDTH                   1
N#define USB_OTGCTL_OTGEN(x)                      (((uint8_t)(((uint8_t)(x))<<USB_OTGCTL_OTGEN_SHIFT))&USB_OTGCTL_OTGEN_MASK)
N#define USB_OTGCTL_DMLOW_MASK                    0x10u
N#define USB_OTGCTL_DMLOW_SHIFT                   4
N#define USB_OTGCTL_DMLOW_WIDTH                   1
N#define USB_OTGCTL_DMLOW(x)                      (((uint8_t)(((uint8_t)(x))<<USB_OTGCTL_DMLOW_SHIFT))&USB_OTGCTL_DMLOW_MASK)
N#define USB_OTGCTL_DPLOW_MASK                    0x20u
N#define USB_OTGCTL_DPLOW_SHIFT                   5
N#define USB_OTGCTL_DPLOW_WIDTH                   1
N#define USB_OTGCTL_DPLOW(x)                      (((uint8_t)(((uint8_t)(x))<<USB_OTGCTL_DPLOW_SHIFT))&USB_OTGCTL_DPLOW_MASK)
N#define USB_OTGCTL_DPHIGH_MASK                   0x80u
N#define USB_OTGCTL_DPHIGH_SHIFT                  7
N#define USB_OTGCTL_DPHIGH_WIDTH                  1
N#define USB_OTGCTL_DPHIGH(x)                     (((uint8_t)(((uint8_t)(x))<<USB_OTGCTL_DPHIGH_SHIFT))&USB_OTGCTL_DPHIGH_MASK)
N/* ISTAT Bit Fields */
N#define USB_ISTAT_USBRST_MASK                    0x1u
N#define USB_ISTAT_USBRST_SHIFT                   0
N#define USB_ISTAT_USBRST_WIDTH                   1
N#define USB_ISTAT_USBRST(x)                      (((uint8_t)(((uint8_t)(x))<<USB_ISTAT_USBRST_SHIFT))&USB_ISTAT_USBRST_MASK)
N#define USB_ISTAT_ERROR_MASK                     0x2u
N#define USB_ISTAT_ERROR_SHIFT                    1
N#define USB_ISTAT_ERROR_WIDTH                    1
N#define USB_ISTAT_ERROR(x)                       (((uint8_t)(((uint8_t)(x))<<USB_ISTAT_ERROR_SHIFT))&USB_ISTAT_ERROR_MASK)
N#define USB_ISTAT_SOFTOK_MASK                    0x4u
N#define USB_ISTAT_SOFTOK_SHIFT                   2
N#define USB_ISTAT_SOFTOK_WIDTH                   1
N#define USB_ISTAT_SOFTOK(x)                      (((uint8_t)(((uint8_t)(x))<<USB_ISTAT_SOFTOK_SHIFT))&USB_ISTAT_SOFTOK_MASK)
N#define USB_ISTAT_TOKDNE_MASK                    0x8u
N#define USB_ISTAT_TOKDNE_SHIFT                   3
N#define USB_ISTAT_TOKDNE_WIDTH                   1
N#define USB_ISTAT_TOKDNE(x)                      (((uint8_t)(((uint8_t)(x))<<USB_ISTAT_TOKDNE_SHIFT))&USB_ISTAT_TOKDNE_MASK)
N#define USB_ISTAT_SLEEP_MASK                     0x10u
N#define USB_ISTAT_SLEEP_SHIFT                    4
N#define USB_ISTAT_SLEEP_WIDTH                    1
N#define USB_ISTAT_SLEEP(x)                       (((uint8_t)(((uint8_t)(x))<<USB_ISTAT_SLEEP_SHIFT))&USB_ISTAT_SLEEP_MASK)
N#define USB_ISTAT_RESUME_MASK                    0x20u
N#define USB_ISTAT_RESUME_SHIFT                   5
N#define USB_ISTAT_RESUME_WIDTH                   1
N#define USB_ISTAT_RESUME(x)                      (((uint8_t)(((uint8_t)(x))<<USB_ISTAT_RESUME_SHIFT))&USB_ISTAT_RESUME_MASK)
N#define USB_ISTAT_ATTACH_MASK                    0x40u
N#define USB_ISTAT_ATTACH_SHIFT                   6
N#define USB_ISTAT_ATTACH_WIDTH                   1
N#define USB_ISTAT_ATTACH(x)                      (((uint8_t)(((uint8_t)(x))<<USB_ISTAT_ATTACH_SHIFT))&USB_ISTAT_ATTACH_MASK)
N#define USB_ISTAT_STALL_MASK                     0x80u
N#define USB_ISTAT_STALL_SHIFT                    7
N#define USB_ISTAT_STALL_WIDTH                    1
N#define USB_ISTAT_STALL(x)                       (((uint8_t)(((uint8_t)(x))<<USB_ISTAT_STALL_SHIFT))&USB_ISTAT_STALL_MASK)
N/* INTEN Bit Fields */
N#define USB_INTEN_USBRSTEN_MASK                  0x1u
N#define USB_INTEN_USBRSTEN_SHIFT                 0
N#define USB_INTEN_USBRSTEN_WIDTH                 1
N#define USB_INTEN_USBRSTEN(x)                    (((uint8_t)(((uint8_t)(x))<<USB_INTEN_USBRSTEN_SHIFT))&USB_INTEN_USBRSTEN_MASK)
N#define USB_INTEN_ERROREN_MASK                   0x2u
N#define USB_INTEN_ERROREN_SHIFT                  1
N#define USB_INTEN_ERROREN_WIDTH                  1
N#define USB_INTEN_ERROREN(x)                     (((uint8_t)(((uint8_t)(x))<<USB_INTEN_ERROREN_SHIFT))&USB_INTEN_ERROREN_MASK)
N#define USB_INTEN_SOFTOKEN_MASK                  0x4u
N#define USB_INTEN_SOFTOKEN_SHIFT                 2
N#define USB_INTEN_SOFTOKEN_WIDTH                 1
N#define USB_INTEN_SOFTOKEN(x)                    (((uint8_t)(((uint8_t)(x))<<USB_INTEN_SOFTOKEN_SHIFT))&USB_INTEN_SOFTOKEN_MASK)
N#define USB_INTEN_TOKDNEEN_MASK                  0x8u
N#define USB_INTEN_TOKDNEEN_SHIFT                 3
N#define USB_INTEN_TOKDNEEN_WIDTH                 1
N#define USB_INTEN_TOKDNEEN(x)                    (((uint8_t)(((uint8_t)(x))<<USB_INTEN_TOKDNEEN_SHIFT))&USB_INTEN_TOKDNEEN_MASK)
N#define USB_INTEN_SLEEPEN_MASK                   0x10u
N#define USB_INTEN_SLEEPEN_SHIFT                  4
N#define USB_INTEN_SLEEPEN_WIDTH                  1
N#define USB_INTEN_SLEEPEN(x)                     (((uint8_t)(((uint8_t)(x))<<USB_INTEN_SLEEPEN_SHIFT))&USB_INTEN_SLEEPEN_MASK)
N#define USB_INTEN_RESUMEEN_MASK                  0x20u
N#define USB_INTEN_RESUMEEN_SHIFT                 5
N#define USB_INTEN_RESUMEEN_WIDTH                 1
N#define USB_INTEN_RESUMEEN(x)                    (((uint8_t)(((uint8_t)(x))<<USB_INTEN_RESUMEEN_SHIFT))&USB_INTEN_RESUMEEN_MASK)
N#define USB_INTEN_ATTACHEN_MASK                  0x40u
N#define USB_INTEN_ATTACHEN_SHIFT                 6
N#define USB_INTEN_ATTACHEN_WIDTH                 1
N#define USB_INTEN_ATTACHEN(x)                    (((uint8_t)(((uint8_t)(x))<<USB_INTEN_ATTACHEN_SHIFT))&USB_INTEN_ATTACHEN_MASK)
N#define USB_INTEN_STALLEN_MASK                   0x80u
N#define USB_INTEN_STALLEN_SHIFT                  7
N#define USB_INTEN_STALLEN_WIDTH                  1
N#define USB_INTEN_STALLEN(x)                     (((uint8_t)(((uint8_t)(x))<<USB_INTEN_STALLEN_SHIFT))&USB_INTEN_STALLEN_MASK)
N/* ERRSTAT Bit Fields */
N#define USB_ERRSTAT_PIDERR_MASK                  0x1u
N#define USB_ERRSTAT_PIDERR_SHIFT                 0
N#define USB_ERRSTAT_PIDERR_WIDTH                 1
N#define USB_ERRSTAT_PIDERR(x)                    (((uint8_t)(((uint8_t)(x))<<USB_ERRSTAT_PIDERR_SHIFT))&USB_ERRSTAT_PIDERR_MASK)
N#define USB_ERRSTAT_CRC5EOF_MASK                 0x2u
N#define USB_ERRSTAT_CRC5EOF_SHIFT                1
N#define USB_ERRSTAT_CRC5EOF_WIDTH                1
N#define USB_ERRSTAT_CRC5EOF(x)                   (((uint8_t)(((uint8_t)(x))<<USB_ERRSTAT_CRC5EOF_SHIFT))&USB_ERRSTAT_CRC5EOF_MASK)
N#define USB_ERRSTAT_CRC16_MASK                   0x4u
N#define USB_ERRSTAT_CRC16_SHIFT                  2
N#define USB_ERRSTAT_CRC16_WIDTH                  1
N#define USB_ERRSTAT_CRC16(x)                     (((uint8_t)(((uint8_t)(x))<<USB_ERRSTAT_CRC16_SHIFT))&USB_ERRSTAT_CRC16_MASK)
N#define USB_ERRSTAT_DFN8_MASK                    0x8u
N#define USB_ERRSTAT_DFN8_SHIFT                   3
N#define USB_ERRSTAT_DFN8_WIDTH                   1
N#define USB_ERRSTAT_DFN8(x)                      (((uint8_t)(((uint8_t)(x))<<USB_ERRSTAT_DFN8_SHIFT))&USB_ERRSTAT_DFN8_MASK)
N#define USB_ERRSTAT_BTOERR_MASK                  0x10u
N#define USB_ERRSTAT_BTOERR_SHIFT                 4
N#define USB_ERRSTAT_BTOERR_WIDTH                 1
N#define USB_ERRSTAT_BTOERR(x)                    (((uint8_t)(((uint8_t)(x))<<USB_ERRSTAT_BTOERR_SHIFT))&USB_ERRSTAT_BTOERR_MASK)
N#define USB_ERRSTAT_DMAERR_MASK                  0x20u
N#define USB_ERRSTAT_DMAERR_SHIFT                 5
N#define USB_ERRSTAT_DMAERR_WIDTH                 1
N#define USB_ERRSTAT_DMAERR(x)                    (((uint8_t)(((uint8_t)(x))<<USB_ERRSTAT_DMAERR_SHIFT))&USB_ERRSTAT_DMAERR_MASK)
N#define USB_ERRSTAT_BTSERR_MASK                  0x80u
N#define USB_ERRSTAT_BTSERR_SHIFT                 7
N#define USB_ERRSTAT_BTSERR_WIDTH                 1
N#define USB_ERRSTAT_BTSERR(x)                    (((uint8_t)(((uint8_t)(x))<<USB_ERRSTAT_BTSERR_SHIFT))&USB_ERRSTAT_BTSERR_MASK)
N/* ERREN Bit Fields */
N#define USB_ERREN_PIDERREN_MASK                  0x1u
N#define USB_ERREN_PIDERREN_SHIFT                 0
N#define USB_ERREN_PIDERREN_WIDTH                 1
N#define USB_ERREN_PIDERREN(x)                    (((uint8_t)(((uint8_t)(x))<<USB_ERREN_PIDERREN_SHIFT))&USB_ERREN_PIDERREN_MASK)
N#define USB_ERREN_CRC5EOFEN_MASK                 0x2u
N#define USB_ERREN_CRC5EOFEN_SHIFT                1
N#define USB_ERREN_CRC5EOFEN_WIDTH                1
N#define USB_ERREN_CRC5EOFEN(x)                   (((uint8_t)(((uint8_t)(x))<<USB_ERREN_CRC5EOFEN_SHIFT))&USB_ERREN_CRC5EOFEN_MASK)
N#define USB_ERREN_CRC16EN_MASK                   0x4u
N#define USB_ERREN_CRC16EN_SHIFT                  2
N#define USB_ERREN_CRC16EN_WIDTH                  1
N#define USB_ERREN_CRC16EN(x)                     (((uint8_t)(((uint8_t)(x))<<USB_ERREN_CRC16EN_SHIFT))&USB_ERREN_CRC16EN_MASK)
N#define USB_ERREN_DFN8EN_MASK                    0x8u
N#define USB_ERREN_DFN8EN_SHIFT                   3
N#define USB_ERREN_DFN8EN_WIDTH                   1
N#define USB_ERREN_DFN8EN(x)                      (((uint8_t)(((uint8_t)(x))<<USB_ERREN_DFN8EN_SHIFT))&USB_ERREN_DFN8EN_MASK)
N#define USB_ERREN_BTOERREN_MASK                  0x10u
N#define USB_ERREN_BTOERREN_SHIFT                 4
N#define USB_ERREN_BTOERREN_WIDTH                 1
N#define USB_ERREN_BTOERREN(x)                    (((uint8_t)(((uint8_t)(x))<<USB_ERREN_BTOERREN_SHIFT))&USB_ERREN_BTOERREN_MASK)
N#define USB_ERREN_DMAERREN_MASK                  0x20u
N#define USB_ERREN_DMAERREN_SHIFT                 5
N#define USB_ERREN_DMAERREN_WIDTH                 1
N#define USB_ERREN_DMAERREN(x)                    (((uint8_t)(((uint8_t)(x))<<USB_ERREN_DMAERREN_SHIFT))&USB_ERREN_DMAERREN_MASK)
N#define USB_ERREN_BTSERREN_MASK                  0x80u
N#define USB_ERREN_BTSERREN_SHIFT                 7
N#define USB_ERREN_BTSERREN_WIDTH                 1
N#define USB_ERREN_BTSERREN(x)                    (((uint8_t)(((uint8_t)(x))<<USB_ERREN_BTSERREN_SHIFT))&USB_ERREN_BTSERREN_MASK)
N/* STAT Bit Fields */
N#define USB_STAT_ODD_MASK                        0x4u
N#define USB_STAT_ODD_SHIFT                       2
N#define USB_STAT_ODD_WIDTH                       1
N#define USB_STAT_ODD(x)                          (((uint8_t)(((uint8_t)(x))<<USB_STAT_ODD_SHIFT))&USB_STAT_ODD_MASK)
N#define USB_STAT_TX_MASK                         0x8u
N#define USB_STAT_TX_SHIFT                        3
N#define USB_STAT_TX_WIDTH                        1
N#define USB_STAT_TX(x)                           (((uint8_t)(((uint8_t)(x))<<USB_STAT_TX_SHIFT))&USB_STAT_TX_MASK)
N#define USB_STAT_ENDP_MASK                       0xF0u
N#define USB_STAT_ENDP_SHIFT                      4
N#define USB_STAT_ENDP_WIDTH                      4
N#define USB_STAT_ENDP(x)                         (((uint8_t)(((uint8_t)(x))<<USB_STAT_ENDP_SHIFT))&USB_STAT_ENDP_MASK)
N/* CTL Bit Fields */
N#define USB_CTL_USBENSOFEN_MASK                  0x1u
N#define USB_CTL_USBENSOFEN_SHIFT                 0
N#define USB_CTL_USBENSOFEN_WIDTH                 1
N#define USB_CTL_USBENSOFEN(x)                    (((uint8_t)(((uint8_t)(x))<<USB_CTL_USBENSOFEN_SHIFT))&USB_CTL_USBENSOFEN_MASK)
N#define USB_CTL_ODDRST_MASK                      0x2u
N#define USB_CTL_ODDRST_SHIFT                     1
N#define USB_CTL_ODDRST_WIDTH                     1
N#define USB_CTL_ODDRST(x)                        (((uint8_t)(((uint8_t)(x))<<USB_CTL_ODDRST_SHIFT))&USB_CTL_ODDRST_MASK)
N#define USB_CTL_RESUME_MASK                      0x4u
N#define USB_CTL_RESUME_SHIFT                     2
N#define USB_CTL_RESUME_WIDTH                     1
N#define USB_CTL_RESUME(x)                        (((uint8_t)(((uint8_t)(x))<<USB_CTL_RESUME_SHIFT))&USB_CTL_RESUME_MASK)
N#define USB_CTL_HOSTMODEEN_MASK                  0x8u
N#define USB_CTL_HOSTMODEEN_SHIFT                 3
N#define USB_CTL_HOSTMODEEN_WIDTH                 1
N#define USB_CTL_HOSTMODEEN(x)                    (((uint8_t)(((uint8_t)(x))<<USB_CTL_HOSTMODEEN_SHIFT))&USB_CTL_HOSTMODEEN_MASK)
N#define USB_CTL_RESET_MASK                       0x10u
N#define USB_CTL_RESET_SHIFT                      4
N#define USB_CTL_RESET_WIDTH                      1
N#define USB_CTL_RESET(x)                         (((uint8_t)(((uint8_t)(x))<<USB_CTL_RESET_SHIFT))&USB_CTL_RESET_MASK)
N#define USB_CTL_TXSUSPENDTOKENBUSY_MASK          0x20u
N#define USB_CTL_TXSUSPENDTOKENBUSY_SHIFT         5
N#define USB_CTL_TXSUSPENDTOKENBUSY_WIDTH         1
N#define USB_CTL_TXSUSPENDTOKENBUSY(x)            (((uint8_t)(((uint8_t)(x))<<USB_CTL_TXSUSPENDTOKENBUSY_SHIFT))&USB_CTL_TXSUSPENDTOKENBUSY_MASK)
N#define USB_CTL_SE0_MASK                         0x40u
N#define USB_CTL_SE0_SHIFT                        6
N#define USB_CTL_SE0_WIDTH                        1
N#define USB_CTL_SE0(x)                           (((uint8_t)(((uint8_t)(x))<<USB_CTL_SE0_SHIFT))&USB_CTL_SE0_MASK)
N#define USB_CTL_JSTATE_MASK                      0x80u
N#define USB_CTL_JSTATE_SHIFT                     7
N#define USB_CTL_JSTATE_WIDTH                     1
N#define USB_CTL_JSTATE(x)                        (((uint8_t)(((uint8_t)(x))<<USB_CTL_JSTATE_SHIFT))&USB_CTL_JSTATE_MASK)
N/* ADDR Bit Fields */
N#define USB_ADDR_ADDR_MASK                       0x7Fu
N#define USB_ADDR_ADDR_SHIFT                      0
N#define USB_ADDR_ADDR_WIDTH                      7
N#define USB_ADDR_ADDR(x)                         (((uint8_t)(((uint8_t)(x))<<USB_ADDR_ADDR_SHIFT))&USB_ADDR_ADDR_MASK)
N#define USB_ADDR_LSEN_MASK                       0x80u
N#define USB_ADDR_LSEN_SHIFT                      7
N#define USB_ADDR_LSEN_WIDTH                      1
N#define USB_ADDR_LSEN(x)                         (((uint8_t)(((uint8_t)(x))<<USB_ADDR_LSEN_SHIFT))&USB_ADDR_LSEN_MASK)
N/* BDTPAGE1 Bit Fields */
N#define USB_BDTPAGE1_BDTBA_MASK                  0xFEu
N#define USB_BDTPAGE1_BDTBA_SHIFT                 1
N#define USB_BDTPAGE1_BDTBA_WIDTH                 7
N#define USB_BDTPAGE1_BDTBA(x)                    (((uint8_t)(((uint8_t)(x))<<USB_BDTPAGE1_BDTBA_SHIFT))&USB_BDTPAGE1_BDTBA_MASK)
N/* FRMNUML Bit Fields */
N#define USB_FRMNUML_FRM_MASK                     0xFFu
N#define USB_FRMNUML_FRM_SHIFT                    0
N#define USB_FRMNUML_FRM_WIDTH                    8
N#define USB_FRMNUML_FRM(x)                       (((uint8_t)(((uint8_t)(x))<<USB_FRMNUML_FRM_SHIFT))&USB_FRMNUML_FRM_MASK)
N/* FRMNUMH Bit Fields */
N#define USB_FRMNUMH_FRM_MASK                     0x7u
N#define USB_FRMNUMH_FRM_SHIFT                    0
N#define USB_FRMNUMH_FRM_WIDTH                    3
N#define USB_FRMNUMH_FRM(x)                       (((uint8_t)(((uint8_t)(x))<<USB_FRMNUMH_FRM_SHIFT))&USB_FRMNUMH_FRM_MASK)
N/* TOKEN Bit Fields */
N#define USB_TOKEN_TOKENENDPT_MASK                0xFu
N#define USB_TOKEN_TOKENENDPT_SHIFT               0
N#define USB_TOKEN_TOKENENDPT_WIDTH               4
N#define USB_TOKEN_TOKENENDPT(x)                  (((uint8_t)(((uint8_t)(x))<<USB_TOKEN_TOKENENDPT_SHIFT))&USB_TOKEN_TOKENENDPT_MASK)
N#define USB_TOKEN_TOKENPID_MASK                  0xF0u
N#define USB_TOKEN_TOKENPID_SHIFT                 4
N#define USB_TOKEN_TOKENPID_WIDTH                 4
N#define USB_TOKEN_TOKENPID(x)                    (((uint8_t)(((uint8_t)(x))<<USB_TOKEN_TOKENPID_SHIFT))&USB_TOKEN_TOKENPID_MASK)
N/* SOFTHLD Bit Fields */
N#define USB_SOFTHLD_CNT_MASK                     0xFFu
N#define USB_SOFTHLD_CNT_SHIFT                    0
N#define USB_SOFTHLD_CNT_WIDTH                    8
N#define USB_SOFTHLD_CNT(x)                       (((uint8_t)(((uint8_t)(x))<<USB_SOFTHLD_CNT_SHIFT))&USB_SOFTHLD_CNT_MASK)
N/* BDTPAGE2 Bit Fields */
N#define USB_BDTPAGE2_BDTBA_MASK                  0xFFu
N#define USB_BDTPAGE2_BDTBA_SHIFT                 0
N#define USB_BDTPAGE2_BDTBA_WIDTH                 8
N#define USB_BDTPAGE2_BDTBA(x)                    (((uint8_t)(((uint8_t)(x))<<USB_BDTPAGE2_BDTBA_SHIFT))&USB_BDTPAGE2_BDTBA_MASK)
N/* BDTPAGE3 Bit Fields */
N#define USB_BDTPAGE3_BDTBA_MASK                  0xFFu
N#define USB_BDTPAGE3_BDTBA_SHIFT                 0
N#define USB_BDTPAGE3_BDTBA_WIDTH                 8
N#define USB_BDTPAGE3_BDTBA(x)                    (((uint8_t)(((uint8_t)(x))<<USB_BDTPAGE3_BDTBA_SHIFT))&USB_BDTPAGE3_BDTBA_MASK)
N/* ENDPT Bit Fields */
N#define USB_ENDPT_EPHSHK_MASK                    0x1u
N#define USB_ENDPT_EPHSHK_SHIFT                   0
N#define USB_ENDPT_EPHSHK_WIDTH                   1
N#define USB_ENDPT_EPHSHK(x)                      (((uint8_t)(((uint8_t)(x))<<USB_ENDPT_EPHSHK_SHIFT))&USB_ENDPT_EPHSHK_MASK)
N#define USB_ENDPT_EPSTALL_MASK                   0x2u
N#define USB_ENDPT_EPSTALL_SHIFT                  1
N#define USB_ENDPT_EPSTALL_WIDTH                  1
N#define USB_ENDPT_EPSTALL(x)                     (((uint8_t)(((uint8_t)(x))<<USB_ENDPT_EPSTALL_SHIFT))&USB_ENDPT_EPSTALL_MASK)
N#define USB_ENDPT_EPTXEN_MASK                    0x4u
N#define USB_ENDPT_EPTXEN_SHIFT                   2
N#define USB_ENDPT_EPTXEN_WIDTH                   1
N#define USB_ENDPT_EPTXEN(x)                      (((uint8_t)(((uint8_t)(x))<<USB_ENDPT_EPTXEN_SHIFT))&USB_ENDPT_EPTXEN_MASK)
N#define USB_ENDPT_EPRXEN_MASK                    0x8u
N#define USB_ENDPT_EPRXEN_SHIFT                   3
N#define USB_ENDPT_EPRXEN_WIDTH                   1
N#define USB_ENDPT_EPRXEN(x)                      (((uint8_t)(((uint8_t)(x))<<USB_ENDPT_EPRXEN_SHIFT))&USB_ENDPT_EPRXEN_MASK)
N#define USB_ENDPT_EPCTLDIS_MASK                  0x10u
N#define USB_ENDPT_EPCTLDIS_SHIFT                 4
N#define USB_ENDPT_EPCTLDIS_WIDTH                 1
N#define USB_ENDPT_EPCTLDIS(x)                    (((uint8_t)(((uint8_t)(x))<<USB_ENDPT_EPCTLDIS_SHIFT))&USB_ENDPT_EPCTLDIS_MASK)
N#define USB_ENDPT_RETRYDIS_MASK                  0x40u
N#define USB_ENDPT_RETRYDIS_SHIFT                 6
N#define USB_ENDPT_RETRYDIS_WIDTH                 1
N#define USB_ENDPT_RETRYDIS(x)                    (((uint8_t)(((uint8_t)(x))<<USB_ENDPT_RETRYDIS_SHIFT))&USB_ENDPT_RETRYDIS_MASK)
N#define USB_ENDPT_HOSTWOHUB_MASK                 0x80u
N#define USB_ENDPT_HOSTWOHUB_SHIFT                7
N#define USB_ENDPT_HOSTWOHUB_WIDTH                1
N#define USB_ENDPT_HOSTWOHUB(x)                   (((uint8_t)(((uint8_t)(x))<<USB_ENDPT_HOSTWOHUB_SHIFT))&USB_ENDPT_HOSTWOHUB_MASK)
N/* USBCTRL Bit Fields */
N#define USB_USBCTRL_PDE_MASK                     0x40u
N#define USB_USBCTRL_PDE_SHIFT                    6
N#define USB_USBCTRL_PDE_WIDTH                    1
N#define USB_USBCTRL_PDE(x)                       (((uint8_t)(((uint8_t)(x))<<USB_USBCTRL_PDE_SHIFT))&USB_USBCTRL_PDE_MASK)
N#define USB_USBCTRL_SUSP_MASK                    0x80u
N#define USB_USBCTRL_SUSP_SHIFT                   7
N#define USB_USBCTRL_SUSP_WIDTH                   1
N#define USB_USBCTRL_SUSP(x)                      (((uint8_t)(((uint8_t)(x))<<USB_USBCTRL_SUSP_SHIFT))&USB_USBCTRL_SUSP_MASK)
N/* OBSERVE Bit Fields */
N#define USB_OBSERVE_DMPD_MASK                    0x10u
N#define USB_OBSERVE_DMPD_SHIFT                   4
N#define USB_OBSERVE_DMPD_WIDTH                   1
N#define USB_OBSERVE_DMPD(x)                      (((uint8_t)(((uint8_t)(x))<<USB_OBSERVE_DMPD_SHIFT))&USB_OBSERVE_DMPD_MASK)
N#define USB_OBSERVE_DPPD_MASK                    0x40u
N#define USB_OBSERVE_DPPD_SHIFT                   6
N#define USB_OBSERVE_DPPD_WIDTH                   1
N#define USB_OBSERVE_DPPD(x)                      (((uint8_t)(((uint8_t)(x))<<USB_OBSERVE_DPPD_SHIFT))&USB_OBSERVE_DPPD_MASK)
N#define USB_OBSERVE_DPPU_MASK                    0x80u
N#define USB_OBSERVE_DPPU_SHIFT                   7
N#define USB_OBSERVE_DPPU_WIDTH                   1
N#define USB_OBSERVE_DPPU(x)                      (((uint8_t)(((uint8_t)(x))<<USB_OBSERVE_DPPU_SHIFT))&USB_OBSERVE_DPPU_MASK)
N/* CONTROL Bit Fields */
N#define USB_CONTROL_DPPULLUPNONOTG_MASK          0x10u
N#define USB_CONTROL_DPPULLUPNONOTG_SHIFT         4
N#define USB_CONTROL_DPPULLUPNONOTG_WIDTH         1
N#define USB_CONTROL_DPPULLUPNONOTG(x)            (((uint8_t)(((uint8_t)(x))<<USB_CONTROL_DPPULLUPNONOTG_SHIFT))&USB_CONTROL_DPPULLUPNONOTG_MASK)
N/* USBTRC0 Bit Fields */
N#define USB_USBTRC0_USB_RESUME_INT_MASK          0x1u
N#define USB_USBTRC0_USB_RESUME_INT_SHIFT         0
N#define USB_USBTRC0_USB_RESUME_INT_WIDTH         1
N#define USB_USBTRC0_USB_RESUME_INT(x)            (((uint8_t)(((uint8_t)(x))<<USB_USBTRC0_USB_RESUME_INT_SHIFT))&USB_USBTRC0_USB_RESUME_INT_MASK)
N#define USB_USBTRC0_SYNC_DET_MASK                0x2u
N#define USB_USBTRC0_SYNC_DET_SHIFT               1
N#define USB_USBTRC0_SYNC_DET_WIDTH               1
N#define USB_USBTRC0_SYNC_DET(x)                  (((uint8_t)(((uint8_t)(x))<<USB_USBTRC0_SYNC_DET_SHIFT))&USB_USBTRC0_SYNC_DET_MASK)
N#define USB_USBTRC0_USBRESMEN_MASK               0x20u
N#define USB_USBTRC0_USBRESMEN_SHIFT              5
N#define USB_USBTRC0_USBRESMEN_WIDTH              1
N#define USB_USBTRC0_USBRESMEN(x)                 (((uint8_t)(((uint8_t)(x))<<USB_USBTRC0_USBRESMEN_SHIFT))&USB_USBTRC0_USBRESMEN_MASK)
N#define USB_USBTRC0_USBRESET_MASK                0x80u
N#define USB_USBTRC0_USBRESET_SHIFT               7
N#define USB_USBTRC0_USBRESET_WIDTH               1
N#define USB_USBTRC0_USBRESET(x)                  (((uint8_t)(((uint8_t)(x))<<USB_USBTRC0_USBRESET_SHIFT))&USB_USBTRC0_USBRESET_MASK)
N/* USBFRMADJUST Bit Fields */
N#define USB_USBFRMADJUST_ADJ_MASK                0xFFu
N#define USB_USBFRMADJUST_ADJ_SHIFT               0
N#define USB_USBFRMADJUST_ADJ_WIDTH               8
N#define USB_USBFRMADJUST_ADJ(x)                  (((uint8_t)(((uint8_t)(x))<<USB_USBFRMADJUST_ADJ_SHIFT))&USB_USBFRMADJUST_ADJ_MASK)
N
N/*!
N * @}
N */ /* end of group USB_Register_Masks */
N
N
N/* USB - Peripheral instance base addresses */
N/** Peripheral USB0 base address */
N#define USB0_BASE                                (0x40072000u)
N/** Peripheral USB0 base pointer */
N#define USB0                                     ((USB_Type *)USB0_BASE)
N#define USB0_BASE_PTR                            (USB0)
N/** Array initializer of USB peripheral base addresses */
N#define USB_BASE_ADDRS                           { USB0_BASE }
N/** Array initializer of USB peripheral base pointers */
N#define USB_BASE_PTRS                            { USB0 }
N/** Interrupt vectors for the USB peripheral type */
N#define USB_IRQS                                 { USB0_IRQn }
N
N/* ----------------------------------------------------------------------------
N   -- USB - Register accessor macros
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup USB_Register_Accessor_Macros USB - Register accessor macros
N * @{
N */
N
N
N/* USB - Register instance definitions */
N/* USB0 */
N#define USB0_PERID                               USB_PERID_REG(USB0)
N#define USB0_IDCOMP                              USB_IDCOMP_REG(USB0)
N#define USB0_REV                                 USB_REV_REG(USB0)
N#define USB0_ADDINFO                             USB_ADDINFO_REG(USB0)
N#define USB0_OTGISTAT                            USB_OTGISTAT_REG(USB0)
N#define USB0_OTGICR                              USB_OTGICR_REG(USB0)
N#define USB0_OTGSTAT                             USB_OTGSTAT_REG(USB0)
N#define USB0_OTGCTL                              USB_OTGCTL_REG(USB0)
N#define USB0_ISTAT                               USB_ISTAT_REG(USB0)
N#define USB0_INTEN                               USB_INTEN_REG(USB0)
N#define USB0_ERRSTAT                             USB_ERRSTAT_REG(USB0)
N#define USB0_ERREN                               USB_ERREN_REG(USB0)
N#define USB0_STAT                                USB_STAT_REG(USB0)
N#define USB0_CTL                                 USB_CTL_REG(USB0)
N#define USB0_ADDR                                USB_ADDR_REG(USB0)
N#define USB0_BDTPAGE1                            USB_BDTPAGE1_REG(USB0)
N#define USB0_FRMNUML                             USB_FRMNUML_REG(USB0)
N#define USB0_FRMNUMH                             USB_FRMNUMH_REG(USB0)
N#define USB0_TOKEN                               USB_TOKEN_REG(USB0)
N#define USB0_SOFTHLD                             USB_SOFTHLD_REG(USB0)
N#define USB0_BDTPAGE2                            USB_BDTPAGE2_REG(USB0)
N#define USB0_BDTPAGE3                            USB_BDTPAGE3_REG(USB0)
N#define USB0_ENDPT0                              USB_ENDPT_REG(USB0,0)
N#define USB0_ENDPT1                              USB_ENDPT_REG(USB0,1)
N#define USB0_ENDPT2                              USB_ENDPT_REG(USB0,2)
N#define USB0_ENDPT3                              USB_ENDPT_REG(USB0,3)
N#define USB0_ENDPT4                              USB_ENDPT_REG(USB0,4)
N#define USB0_ENDPT5                              USB_ENDPT_REG(USB0,5)
N#define USB0_ENDPT6                              USB_ENDPT_REG(USB0,6)
N#define USB0_ENDPT7                              USB_ENDPT_REG(USB0,7)
N#define USB0_ENDPT8                              USB_ENDPT_REG(USB0,8)
N#define USB0_ENDPT9                              USB_ENDPT_REG(USB0,9)
N#define USB0_ENDPT10                             USB_ENDPT_REG(USB0,10)
N#define USB0_ENDPT11                             USB_ENDPT_REG(USB0,11)
N#define USB0_ENDPT12                             USB_ENDPT_REG(USB0,12)
N#define USB0_ENDPT13                             USB_ENDPT_REG(USB0,13)
N#define USB0_ENDPT14                             USB_ENDPT_REG(USB0,14)
N#define USB0_ENDPT15                             USB_ENDPT_REG(USB0,15)
N#define USB0_USBCTRL                             USB_USBCTRL_REG(USB0)
N#define USB0_OBSERVE                             USB_OBSERVE_REG(USB0)
N#define USB0_CONTROL                             USB_CONTROL_REG(USB0)
N#define USB0_USBTRC0                             USB_USBTRC0_REG(USB0)
N#define USB0_USBFRMADJUST                        USB_USBFRMADJUST_REG(USB0)
N
N/* USB - Register array accessors */
N#define USB0_ENDPT(index)                        USB_ENDPT_REG(USB0,index)
N
N/*!
N * @}
N */ /* end of group USB_Register_Accessor_Macros */
N
N
N/*!
N * @}
N */ /* end of group USB_Peripheral_Access_Layer */
N
N
N/*
N** End of section using anonymous unions
N*/
N
N#if defined(__CC_ARM)
X#if 1L
N  #pragma pop
N#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
S  #pragma clang diagnostic pop
S#elif defined(__CWCC__)
S  #pragma pop
S#elif defined(__GNUC__)
S  /* leave anonymous unions enabled */
S#elif defined(__IAR_SYSTEMS_ICC__)
S  #pragma language=default
S#else
S  #error Not supported compiler type
N#endif
N
N/*!
N * @}
N */ /* end of group Peripheral_access_layer */
N
N
N/* ----------------------------------------------------------------------------
N   -- Backward Compatibility
N   ---------------------------------------------------------------------------- */
N
N/*!
N * @addtogroup Backward_Compatibility_Symbols Backward Compatibility
N * @{
N */
N
N#define DMA_REQC_ARR_DMAC_MASK                   This_symbol_has_been_deprecated
N#define DMA_REQC_ARR_DMAC_SHIFT                  This_symbol_has_been_deprecated
N#define DMA_REQC_ARR_DMAC(x)                     This_symbol_has_been_deprecated
N#define DMA_REQC_ARR_CFSM_MASK                   This_symbol_has_been_deprecated
N#define DMA_REQC_ARR_CFSM_SHIFT                  This_symbol_has_been_deprecated
N#define DMA_REQC0                                This_symbol_has_been_deprecated
N#define DMA_REQC1                                This_symbol_has_been_deprecated
N#define DMA_REQC2                                This_symbol_has_been_deprecated
N#define DMA_REQC3                                This_symbol_has_been_deprecated
N#define MCG_S_LOLS_MASK                          MCG_S_LOLS0_MASK
N#define MCG_S_LOLS_SHIFT                         MCG_S_LOLS0_SHIFT
N#define SIM_FCFG2_MAXADDR_MASK                   SIM_FCFG2_MAXADDR0_MASK
N#define SIM_FCFG2_MAXADDR_SHIFT                  SIM_FCFG2_MAXADDR0_SHIFT
N#define SIM_FCFG2_MAXADDR                        SIM_FCFG2_MAXADDR0
N#define SPI_C2_SPLPIE_MASK                       This_symbol_has_been_deprecated
N#define SPI_C2_SPLPIE_SHIFT                      This_symbol_has_been_deprecated
N#define UART_C4_LBKDDMAS_MASK                    This_symbol_has_been_deprecated
N#define UART_C4_LBKDDMAS_SHIFT                   This_symbol_has_been_deprecated
N#define UART_C4_ILDMAS_MASK                      This_symbol_has_been_deprecated
N#define UART_C4_ILDMAS_SHIFT                     This_symbol_has_been_deprecated
N#define UART_C4_TCDMAS_MASK                      This_symbol_has_been_deprecated
N#define UART_C4_TCDMAS_SHIFT                     This_symbol_has_been_deprecated
N#define UARTLP_Type                              UART0_Type
N#define UARTLP_BDH_REG                           UART0_BDH_REG
N#define UARTLP_BDL_REG                           UART0_BDL_REG
N#define UARTLP_C1_REG                            UART0_C1_REG
N#define UARTLP_C2_REG                            UART0_C2_REG
N#define UARTLP_S1_REG                            UART0_S1_REG
N#define UARTLP_S2_REG                            UART0_S2_REG
N#define UARTLP_C3_REG                            UART0_C3_REG
N#define UARTLP_D_REG                             UART0_D_REG
N#define UARTLP_MA1_REG                           UART0_MA1_REG
N#define UARTLP_MA2_REG                           UART0_MA2_REG
N#define UARTLP_C4_REG                            UART0_C4_REG
N#define UARTLP_C5_REG                            UART0_C5_REG
N#define UARTLP_BDH_SBR_MASK                      UART0_BDH_SBR_MASK
N#define UARTLP_BDH_SBR_SHIFT                     UART0_BDH_SBR_SHIFT
N#define UARTLP_BDH_SBR(x)                        UART0_BDH_SBR(x)
N#define UARTLP_BDH_SBNS_MASK                     UART0_BDH_SBNS_MASK
N#define UARTLP_BDH_SBNS_SHIFT                    UART0_BDH_SBNS_SHIFT
N#define UARTLP_BDH_RXEDGIE_MASK                  UART0_BDH_RXEDGIE_MASK
N#define UARTLP_BDH_RXEDGIE_SHIFT                 UART0_BDH_RXEDGIE_SHIFT
N#define UARTLP_BDH_LBKDIE_MASK                   UART0_BDH_LBKDIE_MASK
N#define UARTLP_BDH_LBKDIE_SHIFT                  UART0_BDH_LBKDIE_SHIFT
N#define UARTLP_BDL_SBR_MASK                      UART0_BDL_SBR_MASK
N#define UARTLP_BDL_SBR_SHIFT                     UART0_BDL_SBR_SHIFT
N#define UARTLP_BDL_SBR(x)                        UART0_BDL_SBR(x)
N#define UARTLP_C1_PT_MASK                        UART0_C1_PT_MASK
N#define UARTLP_C1_PT_SHIFT                       UART0_C1_PT_SHIFT
N#define UARTLP_C1_PE_MASK                        UART0_C1_PE_MASK
N#define UARTLP_C1_PE_SHIFT                       UART0_C1_PE_SHIFT
N#define UARTLP_C1_ILT_MASK                       UART0_C1_ILT_MASK
N#define UARTLP_C1_ILT_SHIFT                      UART0_C1_ILT_SHIFT
N#define UARTLP_C1_WAKE_MASK                      UART0_C1_WAKE_MASK
N#define UARTLP_C1_WAKE_SHIFT                     UART0_C1_WAKE_SHIFT
N#define UARTLP_C1_M_MASK                         UART0_C1_M_MASK
N#define UARTLP_C1_M_SHIFT                        UART0_C1_M_SHIFT
N#define UARTLP_C1_RSRC_MASK                      UART0_C1_RSRC_MASK
N#define UARTLP_C1_RSRC_SHIFT                     UART0_C1_RSRC_SHIFT
N#define UARTLP_C1_DOZEEN_MASK                    UART0_C1_DOZEEN_MASK
N#define UARTLP_C1_DOZEEN_SHIFT                   UART0_C1_DOZEEN_SHIFT
N#define UARTLP_C1_LOOPS_MASK                     UART0_C1_LOOPS_MASK
N#define UARTLP_C1_LOOPS_SHIFT                    UART0_C1_LOOPS_SHIFT
N#define UARTLP_C2_SBK_MASK                       UART0_C2_SBK_MASK
N#define UARTLP_C2_SBK_SHIFT                      UART0_C2_SBK_SHIFT
N#define UARTLP_C2_RWU_MASK                       UART0_C2_RWU_MASK
N#define UARTLP_C2_RWU_SHIFT                      UART0_C2_RWU_SHIFT
N#define UARTLP_C2_RE_MASK                        UART0_C2_RE_MASK
N#define UARTLP_C2_RE_SHIFT                       UART0_C2_RE_SHIFT
N#define UARTLP_C2_TE_MASK                        UART0_C2_TE_MASK
N#define UARTLP_C2_TE_SHIFT                       UART0_C2_TE_SHIFT
N#define UARTLP_C2_ILIE_MASK                      UART0_C2_ILIE_MASK
N#define UARTLP_C2_ILIE_SHIFT                     UART0_C2_ILIE_SHIFT
N#define UARTLP_C2_RIE_MASK                       UART0_C2_RIE_MASK
N#define UARTLP_C2_RIE_SHIFT                      UART0_C2_RIE_SHIFT
N#define UARTLP_C2_TCIE_MASK                      UART0_C2_TCIE_MASK
N#define UARTLP_C2_TCIE_SHIFT                     UART0_C2_TCIE_SHIFT
N#define UARTLP_C2_TIE_MASK                       UART0_C2_TIE_MASK
N#define UARTLP_C2_TIE_SHIFT                      UART0_C2_TIE_SHIFT
N#define UARTLP_S1_PF_MASK                        UART0_S1_PF_MASK
N#define UARTLP_S1_PF_SHIFT                       UART0_S1_PF_SHIFT
N#define UARTLP_S1_FE_MASK                        UART0_S1_FE_MASK
N#define UARTLP_S1_FE_SHIFT                       UART0_S1_FE_SHIFT
N#define UARTLP_S1_NF_MASK                        UART0_S1_NF_MASK
N#define UARTLP_S1_NF_SHIFT                       UART0_S1_NF_SHIFT
N#define UARTLP_S1_OR_MASK                        UART0_S1_OR_MASK
N#define UARTLP_S1_OR_SHIFT                       UART0_S1_OR_SHIFT
N#define UARTLP_S1_IDLE_MASK                      UART0_S1_IDLE_MASK
N#define UARTLP_S1_IDLE_SHIFT                     UART0_S1_IDLE_SHIFT
N#define UARTLP_S1_RDRF_MASK                      UART0_S1_RDRF_MASK
N#define UARTLP_S1_RDRF_SHIFT                     UART0_S1_RDRF_SHIFT
N#define UARTLP_S1_TC_MASK                        UART0_S1_TC_MASK
N#define UARTLP_S1_TC_SHIFT                       UART0_S1_TC_SHIFT
N#define UARTLP_S1_TDRE_MASK                      UART0_S1_TDRE_MASK
N#define UARTLP_S1_TDRE_SHIFT                     UART0_S1_TDRE_SHIFT
N#define UARTLP_S2_RAF_MASK                       UART0_S2_RAF_MASK
N#define UARTLP_S2_RAF_SHIFT                      UART0_S2_RAF_SHIFT
N#define UARTLP_S2_LBKDE_MASK                     UART0_S2_LBKDE_MASK
N#define UARTLP_S2_LBKDE_SHIFT                    UART0_S2_LBKDE_SHIFT
N#define UARTLP_S2_BRK13_MASK                     UART0_S2_BRK13_MASK
N#define UARTLP_S2_BRK13_SHIFT                    UART0_S2_BRK13_SHIFT
N#define UARTLP_S2_RWUID_MASK                     UART0_S2_RWUID_MASK
N#define UARTLP_S2_RWUID_SHIFT                    UART0_S2_RWUID_SHIFT
N#define UARTLP_S2_RXINV_MASK                     UART0_S2_RXINV_MASK
N#define UARTLP_S2_RXINV_SHIFT                    UART0_S2_RXINV_SHIFT
N#define UARTLP_S2_MSBF_MASK                      UART0_S2_MSBF_MASK
N#define UARTLP_S2_MSBF_SHIFT                     UART0_S2_MSBF_SHIFT
N#define UARTLP_S2_RXEDGIF_MASK                   UART0_S2_RXEDGIF_MASK
N#define UARTLP_S2_RXEDGIF_SHIFT                  UART0_S2_RXEDGIF_SHIFT
N#define UARTLP_S2_LBKDIF_MASK                    UART0_S2_LBKDIF_MASK
N#define UARTLP_S2_LBKDIF_SHIFT                   UART0_S2_LBKDIF_SHIFT
N#define UARTLP_C3_PEIE_MASK                      UART0_C3_PEIE_MASK
N#define UARTLP_C3_PEIE_SHIFT                     UART0_C3_PEIE_SHIFT
N#define UARTLP_C3_FEIE_MASK                      UART0_C3_FEIE_MASK
N#define UARTLP_C3_FEIE_SHIFT                     UART0_C3_FEIE_SHIFT
N#define UARTLP_C3_NEIE_MASK                      UART0_C3_NEIE_MASK
N#define UARTLP_C3_NEIE_SHIFT                     UART0_C3_NEIE_SHIFT
N#define UARTLP_C3_ORIE_MASK                      UART0_C3_ORIE_MASK
N#define UARTLP_C3_ORIE_SHIFT                     UART0_C3_ORIE_SHIFT
N#define UARTLP_C3_TXINV_MASK                     UART0_C3_TXINV_MASK
N#define UARTLP_C3_TXINV_SHIFT                    UART0_C3_TXINV_SHIFT
N#define UARTLP_C3_TXDIR_MASK                     UART0_C3_TXDIR_MASK
N#define UARTLP_C3_TXDIR_SHIFT                    UART0_C3_TXDIR_SHIFT
N#define UARTLP_C3_R9T8_MASK                      UART0_C3_R9T8_MASK
N#define UARTLP_C3_R9T8_SHIFT                     UART0_C3_R9T8_SHIFT
N#define UARTLP_C3_R8T9_MASK                      UART0_C3_R8T9_MASK
N#define UARTLP_C3_R8T9_SHIFT                     UART0_C3_R8T9_SHIFT
N#define UARTLP_D_R0T0_MASK                       UART0_D_R0T0_MASK
N#define UARTLP_D_R0T0_SHIFT                      UART0_D_R0T0_SHIFT
N#define UARTLP_D_R1T1_MASK                       UART0_D_R1T1_MASK
N#define UARTLP_D_R1T1_SHIFT                      UART0_D_R1T1_SHIFT
N#define UARTLP_D_R2T2_MASK                       UART0_D_R2T2_MASK
N#define UARTLP_D_R2T2_SHIFT                      UART0_D_R2T2_SHIFT
N#define UARTLP_D_R3T3_MASK                       UART0_D_R3T3_MASK
N#define UARTLP_D_R3T3_SHIFT                      UART0_D_R3T3_SHIFT
N#define UARTLP_D_R4T4_MASK                       UART0_D_R4T4_MASK
N#define UARTLP_D_R4T4_SHIFT                      UART0_D_R4T4_SHIFT
N#define UARTLP_D_R5T5_MASK                       UART0_D_R5T5_MASK
N#define UARTLP_D_R5T5_SHIFT                      UART0_D_R5T5_SHIFT
N#define UARTLP_D_R6T6_MASK                       UART0_D_R6T6_MASK
N#define UARTLP_D_R6T6_SHIFT                      UART0_D_R6T6_SHIFT
N#define UARTLP_D_R7T7_MASK                       UART0_D_R7T7_MASK
N#define UARTLP_D_R7T7_SHIFT                      UART0_D_R7T7_SHIFT
N#define UARTLP_MA1_MA_MASK                       UART0_MA1_MA_MASK
N#define UARTLP_MA1_MA_SHIFT                      UART0_MA1_MA_SHIFT
N#define UARTLP_MA1_MA(x)                         UART0_MA1_MA(x)
N#define UARTLP_MA2_MA_MASK                       UART0_MA2_MA_MASK
N#define UARTLP_MA2_MA_SHIFT                      UART0_MA2_MA_SHIFT
N#define UARTLP_MA2_MA(x)                         UART0_MA2_MA(x)
N#define UARTLP_C4_OSR_MASK                       UART0_C4_OSR_MASK
N#define UARTLP_C4_OSR_SHIFT                      UART0_C4_OSR_SHIFT
N#define UARTLP_C4_OSR(x)                         UART0_C4_OSR(x)
N#define UARTLP_C4_M10_MASK                       UART0_C4_M10_MASK
N#define UARTLP_C4_M10_SHIFT                      UART0_C4_M10_SHIFT
N#define UARTLP_C4_MAEN2_MASK                     UART0_C4_MAEN2_MASK
N#define UARTLP_C4_MAEN2_SHIFT                    UART0_C4_MAEN2_SHIFT
N#define UARTLP_C4_MAEN1_MASK                     UART0_C4_MAEN1_MASK
N#define UARTLP_C4_MAEN1_SHIFT                    UART0_C4_MAEN1_SHIFT
N#define UARTLP_C5_RESYNCDIS_MASK                 UART0_C5_RESYNCDIS_MASK
N#define UARTLP_C5_RESYNCDIS_SHIFT                UART0_C5_RESYNCDIS_SHIFT
N#define UARTLP_C5_BOTHEDGE_MASK                  UART0_C5_BOTHEDGE_MASK
N#define UARTLP_C5_BOTHEDGE_SHIFT                 UART0_C5_BOTHEDGE_SHIFT
N#define UARTLP_C5_RDMAE_MASK                     UART0_C5_RDMAE_MASK
N#define UARTLP_C5_RDMAE_SHIFT                    UART0_C5_RDMAE_SHIFT
N#define UARTLP_C5_TDMAE_MASK                     UART0_C5_TDMAE_MASK
N#define UARTLP_C5_TDMAE_SHIFT                    UART0_C5_TDMAE_SHIFT
N#define UARTLP_BASES                             UARTLP_BASES
N#define NV_FOPT_EZPORT_DIS_MASK                  This_symbol_has_been_deprecated
N#define NV_FOPT_EZPORT_DIS_SHIFT                 This_symbol_has_been_deprecated
N#define ADC_BASES                                ADC_BASE_PTRS
N#define CMP_BASES                                CMP_BASE_PTRS
N#define DAC_BASES                                DAC_BASE_PTRS
N#define DMA_BASES                                DMA_BASE_PTRS
N#define DMAMUX_BASES                             DMAMUX_BASE_PTRS
N#define FPTA_BASE_PTR                            FGPIOA_BASE_PTR
N#define FPTA_BASE                                FGPIOA_BASE
N#define FPTA                                     FGPIOA
N#define FPTB_BASE_PTR                            FGPIOB_BASE_PTR
N#define FPTB_BASE                                FGPIOB_BASE
N#define FPTB                                     FGPIOB
N#define FPTC_BASE_PTR                            FGPIOC_BASE_PTR
N#define FPTC_BASE                                FGPIOC_BASE
N#define FPTC                                     FGPIOC
N#define FPTD_BASE_PTR                            FGPIOD_BASE_PTR
N#define FPTD_BASE                                FGPIOD_BASE
N#define FPTD                                     FGPIOD
N#define FPTE_BASE_PTR                            FGPIOE_BASE_PTR
N#define FPTE_BASE                                FGPIOE_BASE
N#define FPTE                                     FGPIOE
N#define FGPIO_BASES                              FGPIO_BASE_PTRS
N#define FTFA_BASES                               FTFA_BASE_PTRS
N#define PTA_BASE_PTR                             GPIOA_BASE_PTR
N#define PTA_BASE                                 GPIOA_BASE
N#define PTA                                      GPIOA
N#define PTB_BASE_PTR                             GPIOB_BASE_PTR
N#define PTB_BASE                                 GPIOB_BASE
N#define PTB                                      GPIOB
N#define PTC_BASE_PTR                             GPIOC_BASE_PTR
N#define PTC_BASE                                 GPIOC_BASE
N#define PTC                                      GPIOC
N#define PTD_BASE_PTR                             GPIOD_BASE_PTR
N#define PTD_BASE                                 GPIOD_BASE
N#define PTD                                      GPIOD
N#define PTE_BASE_PTR                             GPIOE_BASE_PTR
N#define PTE_BASE                                 GPIOE_BASE
N#define PTE                                      GPIOE
N#define GPIO_BASES                               GPIO_BASE_PTRS
N#define I2C_BASES                                I2C_BASE_PTRS
N#define LLWU_BASES                               LLWU_BASE_PTRS
N#define LPTMR_BASES                              LPTMR_BASE_PTRS
N#define MCG_BASES                                MCG_BASE_PTRS
N#define MCM_BASES                                MCM_BASE_PTRS
N#define MTB_BASES                                MTB_BASE_PTRS
N#define MTBDWT_BASES                             MTBDWT_BASE_PTRS
N#define NV_BASES                                 NV_BASES
N#define OSC_BASES                                OSC_BASE_PTRS
N#define PIT_BASES                                PIT_BASE_PTRS
N#define PMC_BASES                                PMC_BASE_PTRS
N#define PORT_BASES                               PORT_BASE_PTRS
N#define RCM_BASES                                RCM_BASE_PTRS
N#define ROM_BASES                                ROM_BASE_PTRS
N#define RTC_BASES                                RTC_BASE_PTRS
N#define SIM_BASES                                SIM_BASE_PTRS
N#define SMC_BASES                                SMC_BASE_PTRS
N#define SPI_BASES                                SPI_BASE_PTRS
N#define TPM_BASES                                TPM_BASE_PTRS
N#define TSI_BASES                                TSI_BASE_PTRS
N#define UART_BASES                               UART_BASE_PTRS
N#define UART0_BASES                              UART0_BASE_PTRS
N#define USB_BASES                                USB_BASE_PTRS
N#define LPTimer_IRQn                             LPTMR0_IRQn
N#define LPTimer_IRQHandler                       LPTMR0_IRQHandler
N#define LLW_IRQn                                 LLWU_IRQn
N#define LLW_IRQHandler                           LLWU_IRQHandler
N
N/*!
N * @}
N */ /* end of group Backward_Compatibility_Symbols */
N
N
N#else /* #if !defined(MKL25Z4_H_) */
S  /* There is already included the same memory map. Check if it is compatible (has the same major version) */
S  #if (MCU_MEM_MAP_VERSION != 0x0200u)
S    #if (!defined(MCU_MEM_MAP_SUPPRESS_VERSION_WARNING))
S      #warning There are included two not compatible versions of memory maps. Please check possible differences.
S    #endif /* (!defined(MCU_MEM_MAP_SUPPRESS_VERSION_WARNING)) */
S  #endif /* (MCU_MEM_MAP_VERSION != 0x0200u) */
N#endif  /* #if !defined(MKL25Z4_H_) */
N
N/* MKL25Z4.h, eof. */
L 4 "Source\Profiler\PIT.h" 2
N
Nvoid PIT_Init(unsigned period);
Nvoid PIT_Start(void);
Nvoid PIT_Stop(void);
N
N#endif
L 2 "Source\Profiler\PIT.c" 2
N#include "MKL25Z4.h"
L 1 "C:\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.13.0\Device\Include\MKL25Z4.h" 1
N/*
N** ###################################################################
N**     Processors:          MKL25Z128FM4
N**                          MKL25Z128FT4
N**                          MKL25Z128LH4
N**                          MKL25Z128VLK4
N**
N**     Compilers:           Keil ARM C/C++ Compiler
N**                          Freescale C/C++ for Embedded ARM
N**                          GNU C Compiler
N**                          GNU C Compiler - CodeSourcery Sourcery G++
N**                          IAR ANSI C/C++ Compiler for ARM
N**
N**     Reference manual:    KL25P80M48SF0RM, Rev.3, Sep 2012
N**     Version:             rev. 2.5, 2015-02-19
N**     Build:               b150721
N**
N**     Abstract:
N**         CMSIS Peripheral Access Layer for MKL25Z4
N**
N**     Copyright (c) 1997 - 2015 Freescale Semiconductor, Inc.
N**     All rights reserved.
N**
N**     Redistribution and use in source and binary forms, with or without modification,
N**     are permitted provided that the following conditions are met:
N**
N**     o Redistributions of source code must retain the above copyright notice, this list
N**       of conditions and the following disclaimer.
N**
N**     o Redistributions in binary form must reproduce the above copyright notice, this
N**       list of conditions and the following disclaimer in the documentation and/or
N**       other materials provided with the distribution.
N**
N**     o Neither the name of Freescale Semiconductor, Inc. nor the names of its
N**       contributors may be used to endorse or promote products derived from this
N**       software without specific prior written permission.
N**
N**     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
N**     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
N**     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
N**     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
N**     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
N**     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
N**     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
N**     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N**     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
N**     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N**
N**     http:                 www.freescale.com
N**     mail:                 support@freescale.com
N**
N**     Revisions:
N**     - rev. 1.0 (2012-06-13)
N**         Initial version.
N**     - rev. 1.1 (2012-06-21)
N**         Update according to reference manual rev. 1.
N**     - rev. 1.2 (2012-08-01)
N**         Device type UARTLP changed to UART0.
N**     - rev. 1.3 (2012-10-04)
N**         Update according to reference manual rev. 3.
N**     - rev. 1.4 (2012-11-22)
N**         MCG module - bit LOLS in MCG_S register renamed to LOLS0.
N**         NV registers - bit EZPORT_DIS in NV_FOPT register removed.
N**     - rev. 1.5 (2013-04-05)
N**         Changed start of doxygen comment.
N**     - rev. 2.0 (2013-10-29)
N**         Register accessor macros added to the memory map.
N**         Symbols for Processor Expert memory map compatibility added to the memory map.
N**         Startup file for gcc has been updated according to CMSIS 3.2.
N**         System initialization updated.
N**     - rev. 2.1 (2014-07-16)
N**         Module access macro module_BASES replaced by module_BASE_PTRS.
N**         System initialization and startup updated.
N**     - rev. 2.2 (2014-08-22)
N**         System initialization updated - default clock config changed.
N**     - rev. 2.3 (2014-08-28)
N**         Update of startup files - possibility to override DefaultISR added.
N**     - rev. 2.4 (2014-10-14)
N**         Interrupt INT_LPTimer renamed to INT_LPTMR0.
N**     - rev. 2.5 (2015-02-19)
N**         Renamed interrupt vector LLW to LLWU.
N**
N** ###################################################################
N*/
N
N/*!
N * @file MKL25Z4.h
N * @version 2.5
N * @date 2015-02-19
N * @brief CMSIS Peripheral Access Layer for MKL25Z4
N *
N * CMSIS Peripheral Access Layer for MKL25Z4
N */
N
N
N/* ----------------------------------------------------------------------------
N   -- MCU activation
N   ---------------------------------------------------------------------------- */
N
N/* Prevention from multiple including the same memory map */
N#if !defined(MKL25Z4_H_)  /* Check if memory map has not been already included */
X#if !1L   
S#define MKL25Z4_H_
S#define MCU_MKL25Z4
S
S/* Check if another memory map has not been also included */
S#if (defined(MCU_ACTIVE))
S  #error MKL25Z4 memory map: There is already included another memory map. Only one memory map can be included.
S#endif /* (defined(MCU_ACTIVE)) */
S#define MCU_ACTIVE
S
S#include <stdint.h>
S
S/** Memory map major version (memory maps with equal major version number are
S * compatible) */
S#define MCU_MEM_MAP_VERSION 0x0200u
S/** Memory map minor version */
S#define MCU_MEM_MAP_VERSION_MINOR 0x0005u
S
S
S/* ----------------------------------------------------------------------------
S   -- Interrupt vector numbers
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup Interrupt_vector_numbers Interrupt vector numbers
S * @{
S */
S
S/** Interrupt Number Definitions */
S#define NUMBER_OF_INT_VECTORS 48                 /**< Number of interrupts in the Vector table */
S
Stypedef enum IRQn {
S  /* Auxiliary constants */
S  NotAvail_IRQn                = -128,             /**< Not available device specific interrupt */
S
S  /* Core interrupts */
S  NonMaskableInt_IRQn          = -14,              /**< Non Maskable Interrupt */
S  HardFault_IRQn               = -13,              /**< Cortex-M0 SV Hard Fault Interrupt */
S  SVCall_IRQn                  = -5,               /**< Cortex-M0 SV Call Interrupt */
S  PendSV_IRQn                  = -2,               /**< Cortex-M0 Pend SV Interrupt */
S  SysTick_IRQn                 = -1,               /**< Cortex-M0 System Tick Interrupt */
S
S  /* Device specific interrupts */
S  DMA0_IRQn                    = 0,                /**< DMA channel 0 transfer complete */
S  DMA1_IRQn                    = 1,                /**< DMA channel 1 transfer complete */
S  DMA2_IRQn                    = 2,                /**< DMA channel 2 transfer complete */
S  DMA3_IRQn                    = 3,                /**< DMA channel 3 transfer complete */
S  Reserved20_IRQn              = 4,                /**< Reserved interrupt */
S  FTFA_IRQn                    = 5,                /**< Command complete and read collision */
S  LVD_LVW_IRQn                 = 6,                /**< Low-voltage detect, low-voltage warning */
S  LLWU_IRQn                    = 7,                /**< Low leakage wakeup Unit */
S  I2C0_IRQn                    = 8,                /**< I2C0 interrupt */
S  I2C1_IRQn                    = 9,                /**< I2C1 interrupt */
S  SPI0_IRQn                    = 10,               /**< SPI0 single interrupt vector for all sources */
S  SPI1_IRQn                    = 11,               /**< SPI1 single interrupt vector for all sources */
S  UART0_IRQn                   = 12,               /**< UART0 status and error */
S  UART1_IRQn                   = 13,               /**< UART1 status and error */
S  UART2_IRQn                   = 14,               /**< UART2 status and error */
S  ADC0_IRQn                    = 15,               /**< ADC0 interrupt */
S  CMP0_IRQn                    = 16,               /**< CMP0 interrupt */
S  TPM0_IRQn                    = 17,               /**< TPM0 single interrupt vector for all sources */
S  TPM1_IRQn                    = 18,               /**< TPM1 single interrupt vector for all sources */
S  TPM2_IRQn                    = 19,               /**< TPM2 single interrupt vector for all sources */
S  RTC_IRQn                     = 20,               /**< RTC alarm */
S  RTC_Seconds_IRQn             = 21,               /**< RTC seconds */
S  PIT_IRQn                     = 22,               /**< PIT interrupt */
S  Reserved39_IRQn              = 23,               /**< Reserved interrupt */
S  USB0_IRQn                    = 24,               /**< USB0 interrupt */
S  DAC0_IRQn                    = 25,               /**< DAC0 interrupt */
S  TSI0_IRQn                    = 26,               /**< TSI0 interrupt */
S  MCG_IRQn                     = 27,               /**< MCG interrupt */
S  LPTMR0_IRQn                  = 28,               /**< LPTMR0 interrupt */
S  Reserved45_IRQn              = 29,               /**< Reserved interrupt */
S  PORTA_IRQn                   = 30,               /**< PORTA Pin detect */
S  PORTD_IRQn                   = 31                /**< PORTD Pin detect */
S} IRQn_Type;
S
S/*!
S * @}
S */ /* end of group Interrupt_vector_numbers */
S
S
S/* ----------------------------------------------------------------------------
S   -- Cortex M0 Core Configuration
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup Cortex_Core_Configuration Cortex M0 Core Configuration
S * @{
S */
S
S#define __CM0PLUS_REV                  0x0000    /**< Core revision r0p0 */
S#define __MPU_PRESENT                  0         /**< Defines if an MPU is present or not */
S#define __VTOR_PRESENT                 1         /**< Defines if an MPU is present or not */
S#define __NVIC_PRIO_BITS               2         /**< Number of priority bits implemented in the NVIC */
S#define __Vendor_SysTickConfig         0         /**< Vendor specific implementation of SysTickConfig is defined */
S
S#include "core_cm0plus.h"              /* Core Peripheral Access Layer */
S#include "system_MKL25Z4.h"            /* Device specific configuration file */
S
S/*!
S * @}
S */ /* end of group Cortex_Core_Configuration */
S
S
S/* ----------------------------------------------------------------------------
S   -- Device Peripheral Access Layer
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup Peripheral_access_layer Device Peripheral Access Layer
S * @{
S */
S
S
S/*
S** Start of section using anonymous unions
S*/
S
S#if defined(__CC_ARM)
S  #pragma push
S  #pragma anon_unions
S#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
S  #pragma clang diagnostic push
S  #pragma clang diagnostic ignored "-Wc11-extensions"
S  #pragma clang diagnostic ignored "-Wreserved-id-macro"
S  #pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
S  #pragma clang diagnostic ignored "-Wnested-anon-types"
S#elif defined(__CWCC__)
S  #pragma push
S  #pragma cpp_extensions on
S#elif defined(__GNUC__)
S  /* anonymous unions are enabled by default */
S#elif defined(__IAR_SYSTEMS_ICC__)
S  #pragma language=extended
S#else
S  #error Not supported compiler type
S#endif
S
S/* ----------------------------------------------------------------------------
S   -- ADC Peripheral Access Layer
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup ADC_Peripheral_Access_Layer ADC Peripheral Access Layer
S * @{
S */
S
S/** ADC - Register Layout Typedef */
Stypedef struct {
S  __IO uint32_t SC1[2];                            /**< ADC Status and Control Registers 1, array offset: 0x0, array step: 0x4 */
S  __IO uint32_t CFG1;                              /**< ADC Configuration Register 1, offset: 0x8 */
S  __IO uint32_t CFG2;                              /**< ADC Configuration Register 2, offset: 0xC */
S  __I  uint32_t R[2];                              /**< ADC Data Result Register, array offset: 0x10, array step: 0x4 */
S  __IO uint32_t CV1;                               /**< Compare Value Registers, offset: 0x18 */
S  __IO uint32_t CV2;                               /**< Compare Value Registers, offset: 0x1C */
S  __IO uint32_t SC2;                               /**< Status and Control Register 2, offset: 0x20 */
S  __IO uint32_t SC3;                               /**< Status and Control Register 3, offset: 0x24 */
S  __IO uint32_t OFS;                               /**< ADC Offset Correction Register, offset: 0x28 */
S  __IO uint32_t PG;                                /**< ADC Plus-Side Gain Register, offset: 0x2C */
S  __IO uint32_t MG;                                /**< ADC Minus-Side Gain Register, offset: 0x30 */
S  __IO uint32_t CLPD;                              /**< ADC Plus-Side General Calibration Value Register, offset: 0x34 */
S  __IO uint32_t CLPS;                              /**< ADC Plus-Side General Calibration Value Register, offset: 0x38 */
S  __IO uint32_t CLP4;                              /**< ADC Plus-Side General Calibration Value Register, offset: 0x3C */
S  __IO uint32_t CLP3;                              /**< ADC Plus-Side General Calibration Value Register, offset: 0x40 */
S  __IO uint32_t CLP2;                              /**< ADC Plus-Side General Calibration Value Register, offset: 0x44 */
S  __IO uint32_t CLP1;                              /**< ADC Plus-Side General Calibration Value Register, offset: 0x48 */
S  __IO uint32_t CLP0;                              /**< ADC Plus-Side General Calibration Value Register, offset: 0x4C */
S       uint8_t RESERVED_0[4];
S  __IO uint32_t CLMD;                              /**< ADC Minus-Side General Calibration Value Register, offset: 0x54 */
S  __IO uint32_t CLMS;                              /**< ADC Minus-Side General Calibration Value Register, offset: 0x58 */
S  __IO uint32_t CLM4;                              /**< ADC Minus-Side General Calibration Value Register, offset: 0x5C */
S  __IO uint32_t CLM3;                              /**< ADC Minus-Side General Calibration Value Register, offset: 0x60 */
S  __IO uint32_t CLM2;                              /**< ADC Minus-Side General Calibration Value Register, offset: 0x64 */
S  __IO uint32_t CLM1;                              /**< ADC Minus-Side General Calibration Value Register, offset: 0x68 */
S  __IO uint32_t CLM0;                              /**< ADC Minus-Side General Calibration Value Register, offset: 0x6C */
S} ADC_Type, *ADC_MemMapPtr;
S
S/* ----------------------------------------------------------------------------
S   -- ADC - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup ADC_Register_Accessor_Macros ADC - Register accessor macros
S * @{
S */
S
S
S/* ADC - Register accessors */
S#define ADC_SC1_REG(base,index)                  ((base)->SC1[index])
S#define ADC_SC1_COUNT                            2
S#define ADC_CFG1_REG(base)                       ((base)->CFG1)
S#define ADC_CFG2_REG(base)                       ((base)->CFG2)
S#define ADC_R_REG(base,index)                    ((base)->R[index])
S#define ADC_R_COUNT                              2
S#define ADC_CV1_REG(base)                        ((base)->CV1)
S#define ADC_CV2_REG(base)                        ((base)->CV2)
S#define ADC_SC2_REG(base)                        ((base)->SC2)
S#define ADC_SC3_REG(base)                        ((base)->SC3)
S#define ADC_OFS_REG(base)                        ((base)->OFS)
S#define ADC_PG_REG(base)                         ((base)->PG)
S#define ADC_MG_REG(base)                         ((base)->MG)
S#define ADC_CLPD_REG(base)                       ((base)->CLPD)
S#define ADC_CLPS_REG(base)                       ((base)->CLPS)
S#define ADC_CLP4_REG(base)                       ((base)->CLP4)
S#define ADC_CLP3_REG(base)                       ((base)->CLP3)
S#define ADC_CLP2_REG(base)                       ((base)->CLP2)
S#define ADC_CLP1_REG(base)                       ((base)->CLP1)
S#define ADC_CLP0_REG(base)                       ((base)->CLP0)
S#define ADC_CLMD_REG(base)                       ((base)->CLMD)
S#define ADC_CLMS_REG(base)                       ((base)->CLMS)
S#define ADC_CLM4_REG(base)                       ((base)->CLM4)
S#define ADC_CLM3_REG(base)                       ((base)->CLM3)
S#define ADC_CLM2_REG(base)                       ((base)->CLM2)
S#define ADC_CLM1_REG(base)                       ((base)->CLM1)
S#define ADC_CLM0_REG(base)                       ((base)->CLM0)
S
S/*!
S * @}
S */ /* end of group ADC_Register_Accessor_Macros */
S
S
S/* ----------------------------------------------------------------------------
S   -- ADC Register Masks
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup ADC_Register_Masks ADC Register Masks
S * @{
S */
S
S/* SC1 Bit Fields */
S#define ADC_SC1_ADCH_MASK                        0x1Fu
S#define ADC_SC1_ADCH_SHIFT                       0
S#define ADC_SC1_ADCH_WIDTH                       5
S#define ADC_SC1_ADCH(x)                          (((uint32_t)(((uint32_t)(x))<<ADC_SC1_ADCH_SHIFT))&ADC_SC1_ADCH_MASK)
S#define ADC_SC1_DIFF_MASK                        0x20u
S#define ADC_SC1_DIFF_SHIFT                       5
S#define ADC_SC1_DIFF_WIDTH                       1
S#define ADC_SC1_DIFF(x)                          (((uint32_t)(((uint32_t)(x))<<ADC_SC1_DIFF_SHIFT))&ADC_SC1_DIFF_MASK)
S#define ADC_SC1_AIEN_MASK                        0x40u
S#define ADC_SC1_AIEN_SHIFT                       6
S#define ADC_SC1_AIEN_WIDTH                       1
S#define ADC_SC1_AIEN(x)                          (((uint32_t)(((uint32_t)(x))<<ADC_SC1_AIEN_SHIFT))&ADC_SC1_AIEN_MASK)
S#define ADC_SC1_COCO_MASK                        0x80u
S#define ADC_SC1_COCO_SHIFT                       7
S#define ADC_SC1_COCO_WIDTH                       1
S#define ADC_SC1_COCO(x)                          (((uint32_t)(((uint32_t)(x))<<ADC_SC1_COCO_SHIFT))&ADC_SC1_COCO_MASK)
S/* CFG1 Bit Fields */
S#define ADC_CFG1_ADICLK_MASK                     0x3u
S#define ADC_CFG1_ADICLK_SHIFT                    0
S#define ADC_CFG1_ADICLK_WIDTH                    2
S#define ADC_CFG1_ADICLK(x)                       (((uint32_t)(((uint32_t)(x))<<ADC_CFG1_ADICLK_SHIFT))&ADC_CFG1_ADICLK_MASK)
S#define ADC_CFG1_MODE_MASK                       0xCu
S#define ADC_CFG1_MODE_SHIFT                      2
S#define ADC_CFG1_MODE_WIDTH                      2
S#define ADC_CFG1_MODE(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CFG1_MODE_SHIFT))&ADC_CFG1_MODE_MASK)
S#define ADC_CFG1_ADLSMP_MASK                     0x10u
S#define ADC_CFG1_ADLSMP_SHIFT                    4
S#define ADC_CFG1_ADLSMP_WIDTH                    1
S#define ADC_CFG1_ADLSMP(x)                       (((uint32_t)(((uint32_t)(x))<<ADC_CFG1_ADLSMP_SHIFT))&ADC_CFG1_ADLSMP_MASK)
S#define ADC_CFG1_ADIV_MASK                       0x60u
S#define ADC_CFG1_ADIV_SHIFT                      5
S#define ADC_CFG1_ADIV_WIDTH                      2
S#define ADC_CFG1_ADIV(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CFG1_ADIV_SHIFT))&ADC_CFG1_ADIV_MASK)
S#define ADC_CFG1_ADLPC_MASK                      0x80u
S#define ADC_CFG1_ADLPC_SHIFT                     7
S#define ADC_CFG1_ADLPC_WIDTH                     1
S#define ADC_CFG1_ADLPC(x)                        (((uint32_t)(((uint32_t)(x))<<ADC_CFG1_ADLPC_SHIFT))&ADC_CFG1_ADLPC_MASK)
S/* CFG2 Bit Fields */
S#define ADC_CFG2_ADLSTS_MASK                     0x3u
S#define ADC_CFG2_ADLSTS_SHIFT                    0
S#define ADC_CFG2_ADLSTS_WIDTH                    2
S#define ADC_CFG2_ADLSTS(x)                       (((uint32_t)(((uint32_t)(x))<<ADC_CFG2_ADLSTS_SHIFT))&ADC_CFG2_ADLSTS_MASK)
S#define ADC_CFG2_ADHSC_MASK                      0x4u
S#define ADC_CFG2_ADHSC_SHIFT                     2
S#define ADC_CFG2_ADHSC_WIDTH                     1
S#define ADC_CFG2_ADHSC(x)                        (((uint32_t)(((uint32_t)(x))<<ADC_CFG2_ADHSC_SHIFT))&ADC_CFG2_ADHSC_MASK)
S#define ADC_CFG2_ADACKEN_MASK                    0x8u
S#define ADC_CFG2_ADACKEN_SHIFT                   3
S#define ADC_CFG2_ADACKEN_WIDTH                   1
S#define ADC_CFG2_ADACKEN(x)                      (((uint32_t)(((uint32_t)(x))<<ADC_CFG2_ADACKEN_SHIFT))&ADC_CFG2_ADACKEN_MASK)
S#define ADC_CFG2_MUXSEL_MASK                     0x10u
S#define ADC_CFG2_MUXSEL_SHIFT                    4
S#define ADC_CFG2_MUXSEL_WIDTH                    1
S#define ADC_CFG2_MUXSEL(x)                       (((uint32_t)(((uint32_t)(x))<<ADC_CFG2_MUXSEL_SHIFT))&ADC_CFG2_MUXSEL_MASK)
S/* R Bit Fields */
S#define ADC_R_D_MASK                             0xFFFFu
S#define ADC_R_D_SHIFT                            0
S#define ADC_R_D_WIDTH                            16
S#define ADC_R_D(x)                               (((uint32_t)(((uint32_t)(x))<<ADC_R_D_SHIFT))&ADC_R_D_MASK)
S/* CV1 Bit Fields */
S#define ADC_CV1_CV_MASK                          0xFFFFu
S#define ADC_CV1_CV_SHIFT                         0
S#define ADC_CV1_CV_WIDTH                         16
S#define ADC_CV1_CV(x)                            (((uint32_t)(((uint32_t)(x))<<ADC_CV1_CV_SHIFT))&ADC_CV1_CV_MASK)
S/* CV2 Bit Fields */
S#define ADC_CV2_CV_MASK                          0xFFFFu
S#define ADC_CV2_CV_SHIFT                         0
S#define ADC_CV2_CV_WIDTH                         16
S#define ADC_CV2_CV(x)                            (((uint32_t)(((uint32_t)(x))<<ADC_CV2_CV_SHIFT))&ADC_CV2_CV_MASK)
S/* SC2 Bit Fields */
S#define ADC_SC2_REFSEL_MASK                      0x3u
S#define ADC_SC2_REFSEL_SHIFT                     0
S#define ADC_SC2_REFSEL_WIDTH                     2
S#define ADC_SC2_REFSEL(x)                        (((uint32_t)(((uint32_t)(x))<<ADC_SC2_REFSEL_SHIFT))&ADC_SC2_REFSEL_MASK)
S#define ADC_SC2_DMAEN_MASK                       0x4u
S#define ADC_SC2_DMAEN_SHIFT                      2
S#define ADC_SC2_DMAEN_WIDTH                      1
S#define ADC_SC2_DMAEN(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_SC2_DMAEN_SHIFT))&ADC_SC2_DMAEN_MASK)
S#define ADC_SC2_ACREN_MASK                       0x8u
S#define ADC_SC2_ACREN_SHIFT                      3
S#define ADC_SC2_ACREN_WIDTH                      1
S#define ADC_SC2_ACREN(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_SC2_ACREN_SHIFT))&ADC_SC2_ACREN_MASK)
S#define ADC_SC2_ACFGT_MASK                       0x10u
S#define ADC_SC2_ACFGT_SHIFT                      4
S#define ADC_SC2_ACFGT_WIDTH                      1
S#define ADC_SC2_ACFGT(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_SC2_ACFGT_SHIFT))&ADC_SC2_ACFGT_MASK)
S#define ADC_SC2_ACFE_MASK                        0x20u
S#define ADC_SC2_ACFE_SHIFT                       5
S#define ADC_SC2_ACFE_WIDTH                       1
S#define ADC_SC2_ACFE(x)                          (((uint32_t)(((uint32_t)(x))<<ADC_SC2_ACFE_SHIFT))&ADC_SC2_ACFE_MASK)
S#define ADC_SC2_ADTRG_MASK                       0x40u
S#define ADC_SC2_ADTRG_SHIFT                      6
S#define ADC_SC2_ADTRG_WIDTH                      1
S#define ADC_SC2_ADTRG(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_SC2_ADTRG_SHIFT))&ADC_SC2_ADTRG_MASK)
S#define ADC_SC2_ADACT_MASK                       0x80u
S#define ADC_SC2_ADACT_SHIFT                      7
S#define ADC_SC2_ADACT_WIDTH                      1
S#define ADC_SC2_ADACT(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_SC2_ADACT_SHIFT))&ADC_SC2_ADACT_MASK)
S/* SC3 Bit Fields */
S#define ADC_SC3_AVGS_MASK                        0x3u
S#define ADC_SC3_AVGS_SHIFT                       0
S#define ADC_SC3_AVGS_WIDTH                       2
S#define ADC_SC3_AVGS(x)                          (((uint32_t)(((uint32_t)(x))<<ADC_SC3_AVGS_SHIFT))&ADC_SC3_AVGS_MASK)
S#define ADC_SC3_AVGE_MASK                        0x4u
S#define ADC_SC3_AVGE_SHIFT                       2
S#define ADC_SC3_AVGE_WIDTH                       1
S#define ADC_SC3_AVGE(x)                          (((uint32_t)(((uint32_t)(x))<<ADC_SC3_AVGE_SHIFT))&ADC_SC3_AVGE_MASK)
S#define ADC_SC3_ADCO_MASK                        0x8u
S#define ADC_SC3_ADCO_SHIFT                       3
S#define ADC_SC3_ADCO_WIDTH                       1
S#define ADC_SC3_ADCO(x)                          (((uint32_t)(((uint32_t)(x))<<ADC_SC3_ADCO_SHIFT))&ADC_SC3_ADCO_MASK)
S#define ADC_SC3_CALF_MASK                        0x40u
S#define ADC_SC3_CALF_SHIFT                       6
S#define ADC_SC3_CALF_WIDTH                       1
S#define ADC_SC3_CALF(x)                          (((uint32_t)(((uint32_t)(x))<<ADC_SC3_CALF_SHIFT))&ADC_SC3_CALF_MASK)
S#define ADC_SC3_CAL_MASK                         0x80u
S#define ADC_SC3_CAL_SHIFT                        7
S#define ADC_SC3_CAL_WIDTH                        1
S#define ADC_SC3_CAL(x)                           (((uint32_t)(((uint32_t)(x))<<ADC_SC3_CAL_SHIFT))&ADC_SC3_CAL_MASK)
S/* OFS Bit Fields */
S#define ADC_OFS_OFS_MASK                         0xFFFFu
S#define ADC_OFS_OFS_SHIFT                        0
S#define ADC_OFS_OFS_WIDTH                        16
S#define ADC_OFS_OFS(x)                           (((uint32_t)(((uint32_t)(x))<<ADC_OFS_OFS_SHIFT))&ADC_OFS_OFS_MASK)
S/* PG Bit Fields */
S#define ADC_PG_PG_MASK                           0xFFFFu
S#define ADC_PG_PG_SHIFT                          0
S#define ADC_PG_PG_WIDTH                          16
S#define ADC_PG_PG(x)                             (((uint32_t)(((uint32_t)(x))<<ADC_PG_PG_SHIFT))&ADC_PG_PG_MASK)
S/* MG Bit Fields */
S#define ADC_MG_MG_MASK                           0xFFFFu
S#define ADC_MG_MG_SHIFT                          0
S#define ADC_MG_MG_WIDTH                          16
S#define ADC_MG_MG(x)                             (((uint32_t)(((uint32_t)(x))<<ADC_MG_MG_SHIFT))&ADC_MG_MG_MASK)
S/* CLPD Bit Fields */
S#define ADC_CLPD_CLPD_MASK                       0x3Fu
S#define ADC_CLPD_CLPD_SHIFT                      0
S#define ADC_CLPD_CLPD_WIDTH                      6
S#define ADC_CLPD_CLPD(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CLPD_CLPD_SHIFT))&ADC_CLPD_CLPD_MASK)
S/* CLPS Bit Fields */
S#define ADC_CLPS_CLPS_MASK                       0x3Fu
S#define ADC_CLPS_CLPS_SHIFT                      0
S#define ADC_CLPS_CLPS_WIDTH                      6
S#define ADC_CLPS_CLPS(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CLPS_CLPS_SHIFT))&ADC_CLPS_CLPS_MASK)
S/* CLP4 Bit Fields */
S#define ADC_CLP4_CLP4_MASK                       0x3FFu
S#define ADC_CLP4_CLP4_SHIFT                      0
S#define ADC_CLP4_CLP4_WIDTH                      10
S#define ADC_CLP4_CLP4(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CLP4_CLP4_SHIFT))&ADC_CLP4_CLP4_MASK)
S/* CLP3 Bit Fields */
S#define ADC_CLP3_CLP3_MASK                       0x1FFu
S#define ADC_CLP3_CLP3_SHIFT                      0
S#define ADC_CLP3_CLP3_WIDTH                      9
S#define ADC_CLP3_CLP3(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CLP3_CLP3_SHIFT))&ADC_CLP3_CLP3_MASK)
S/* CLP2 Bit Fields */
S#define ADC_CLP2_CLP2_MASK                       0xFFu
S#define ADC_CLP2_CLP2_SHIFT                      0
S#define ADC_CLP2_CLP2_WIDTH                      8
S#define ADC_CLP2_CLP2(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CLP2_CLP2_SHIFT))&ADC_CLP2_CLP2_MASK)
S/* CLP1 Bit Fields */
S#define ADC_CLP1_CLP1_MASK                       0x7Fu
S#define ADC_CLP1_CLP1_SHIFT                      0
S#define ADC_CLP1_CLP1_WIDTH                      7
S#define ADC_CLP1_CLP1(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CLP1_CLP1_SHIFT))&ADC_CLP1_CLP1_MASK)
S/* CLP0 Bit Fields */
S#define ADC_CLP0_CLP0_MASK                       0x3Fu
S#define ADC_CLP0_CLP0_SHIFT                      0
S#define ADC_CLP0_CLP0_WIDTH                      6
S#define ADC_CLP0_CLP0(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CLP0_CLP0_SHIFT))&ADC_CLP0_CLP0_MASK)
S/* CLMD Bit Fields */
S#define ADC_CLMD_CLMD_MASK                       0x3Fu
S#define ADC_CLMD_CLMD_SHIFT                      0
S#define ADC_CLMD_CLMD_WIDTH                      6
S#define ADC_CLMD_CLMD(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CLMD_CLMD_SHIFT))&ADC_CLMD_CLMD_MASK)
S/* CLMS Bit Fields */
S#define ADC_CLMS_CLMS_MASK                       0x3Fu
S#define ADC_CLMS_CLMS_SHIFT                      0
S#define ADC_CLMS_CLMS_WIDTH                      6
S#define ADC_CLMS_CLMS(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CLMS_CLMS_SHIFT))&ADC_CLMS_CLMS_MASK)
S/* CLM4 Bit Fields */
S#define ADC_CLM4_CLM4_MASK                       0x3FFu
S#define ADC_CLM4_CLM4_SHIFT                      0
S#define ADC_CLM4_CLM4_WIDTH                      10
S#define ADC_CLM4_CLM4(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CLM4_CLM4_SHIFT))&ADC_CLM4_CLM4_MASK)
S/* CLM3 Bit Fields */
S#define ADC_CLM3_CLM3_MASK                       0x1FFu
S#define ADC_CLM3_CLM3_SHIFT                      0
S#define ADC_CLM3_CLM3_WIDTH                      9
S#define ADC_CLM3_CLM3(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CLM3_CLM3_SHIFT))&ADC_CLM3_CLM3_MASK)
S/* CLM2 Bit Fields */
S#define ADC_CLM2_CLM2_MASK                       0xFFu
S#define ADC_CLM2_CLM2_SHIFT                      0
S#define ADC_CLM2_CLM2_WIDTH                      8
S#define ADC_CLM2_CLM2(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CLM2_CLM2_SHIFT))&ADC_CLM2_CLM2_MASK)
S/* CLM1 Bit Fields */
S#define ADC_CLM1_CLM1_MASK                       0x7Fu
S#define ADC_CLM1_CLM1_SHIFT                      0
S#define ADC_CLM1_CLM1_WIDTH                      7
S#define ADC_CLM1_CLM1(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CLM1_CLM1_SHIFT))&ADC_CLM1_CLM1_MASK)
S/* CLM0 Bit Fields */
S#define ADC_CLM0_CLM0_MASK                       0x3Fu
S#define ADC_CLM0_CLM0_SHIFT                      0
S#define ADC_CLM0_CLM0_WIDTH                      6
S#define ADC_CLM0_CLM0(x)                         (((uint32_t)(((uint32_t)(x))<<ADC_CLM0_CLM0_SHIFT))&ADC_CLM0_CLM0_MASK)
S
S/*!
S * @}
S */ /* end of group ADC_Register_Masks */
S
S
S/* ADC - Peripheral instance base addresses */
S/** Peripheral ADC0 base address */
S#define ADC0_BASE                                (0x4003B000u)
S/** Peripheral ADC0 base pointer */
S#define ADC0                                     ((ADC_Type *)ADC0_BASE)
S#define ADC0_BASE_PTR                            (ADC0)
S/** Array initializer of ADC peripheral base addresses */
S#define ADC_BASE_ADDRS                           { ADC0_BASE }
S/** Array initializer of ADC peripheral base pointers */
S#define ADC_BASE_PTRS                            { ADC0 }
S/** Interrupt vectors for the ADC peripheral type */
S#define ADC_IRQS                                 { ADC0_IRQn }
S
S/* ----------------------------------------------------------------------------
S   -- ADC - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup ADC_Register_Accessor_Macros ADC - Register accessor macros
S * @{
S */
S
S
S/* ADC - Register instance definitions */
S/* ADC0 */
S#define ADC0_SC1A                                ADC_SC1_REG(ADC0,0)
S#define ADC0_SC1B                                ADC_SC1_REG(ADC0,1)
S#define ADC0_CFG1                                ADC_CFG1_REG(ADC0)
S#define ADC0_CFG2                                ADC_CFG2_REG(ADC0)
S#define ADC0_RA                                  ADC_R_REG(ADC0,0)
S#define ADC0_RB                                  ADC_R_REG(ADC0,1)
S#define ADC0_CV1                                 ADC_CV1_REG(ADC0)
S#define ADC0_CV2                                 ADC_CV2_REG(ADC0)
S#define ADC0_SC2                                 ADC_SC2_REG(ADC0)
S#define ADC0_SC3                                 ADC_SC3_REG(ADC0)
S#define ADC0_OFS                                 ADC_OFS_REG(ADC0)
S#define ADC0_PG                                  ADC_PG_REG(ADC0)
S#define ADC0_MG                                  ADC_MG_REG(ADC0)
S#define ADC0_CLPD                                ADC_CLPD_REG(ADC0)
S#define ADC0_CLPS                                ADC_CLPS_REG(ADC0)
S#define ADC0_CLP4                                ADC_CLP4_REG(ADC0)
S#define ADC0_CLP3                                ADC_CLP3_REG(ADC0)
S#define ADC0_CLP2                                ADC_CLP2_REG(ADC0)
S#define ADC0_CLP1                                ADC_CLP1_REG(ADC0)
S#define ADC0_CLP0                                ADC_CLP0_REG(ADC0)
S#define ADC0_CLMD                                ADC_CLMD_REG(ADC0)
S#define ADC0_CLMS                                ADC_CLMS_REG(ADC0)
S#define ADC0_CLM4                                ADC_CLM4_REG(ADC0)
S#define ADC0_CLM3                                ADC_CLM3_REG(ADC0)
S#define ADC0_CLM2                                ADC_CLM2_REG(ADC0)
S#define ADC0_CLM1                                ADC_CLM1_REG(ADC0)
S#define ADC0_CLM0                                ADC_CLM0_REG(ADC0)
S
S/* ADC - Register array accessors */
S#define ADC0_SC1(index)                          ADC_SC1_REG(ADC0,index)
S#define ADC0_R(index)                            ADC_R_REG(ADC0,index)
S
S/*!
S * @}
S */ /* end of group ADC_Register_Accessor_Macros */
S
S
S/*!
S * @}
S */ /* end of group ADC_Peripheral_Access_Layer */
S
S
S/* ----------------------------------------------------------------------------
S   -- CMP Peripheral Access Layer
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup CMP_Peripheral_Access_Layer CMP Peripheral Access Layer
S * @{
S */
S
S/** CMP - Register Layout Typedef */
Stypedef struct {
S  __IO uint8_t CR0;                                /**< CMP Control Register 0, offset: 0x0 */
S  __IO uint8_t CR1;                                /**< CMP Control Register 1, offset: 0x1 */
S  __IO uint8_t FPR;                                /**< CMP Filter Period Register, offset: 0x2 */
S  __IO uint8_t SCR;                                /**< CMP Status and Control Register, offset: 0x3 */
S  __IO uint8_t DACCR;                              /**< DAC Control Register, offset: 0x4 */
S  __IO uint8_t MUXCR;                              /**< MUX Control Register, offset: 0x5 */
S} CMP_Type, *CMP_MemMapPtr;
S
S/* ----------------------------------------------------------------------------
S   -- CMP - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup CMP_Register_Accessor_Macros CMP - Register accessor macros
S * @{
S */
S
S
S/* CMP - Register accessors */
S#define CMP_CR0_REG(base)                        ((base)->CR0)
S#define CMP_CR1_REG(base)                        ((base)->CR1)
S#define CMP_FPR_REG(base)                        ((base)->FPR)
S#define CMP_SCR_REG(base)                        ((base)->SCR)
S#define CMP_DACCR_REG(base)                      ((base)->DACCR)
S#define CMP_MUXCR_REG(base)                      ((base)->MUXCR)
S
S/*!
S * @}
S */ /* end of group CMP_Register_Accessor_Macros */
S
S
S/* ----------------------------------------------------------------------------
S   -- CMP Register Masks
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup CMP_Register_Masks CMP Register Masks
S * @{
S */
S
S/* CR0 Bit Fields */
S#define CMP_CR0_HYSTCTR_MASK                     0x3u
S#define CMP_CR0_HYSTCTR_SHIFT                    0
S#define CMP_CR0_HYSTCTR_WIDTH                    2
S#define CMP_CR0_HYSTCTR(x)                       (((uint8_t)(((uint8_t)(x))<<CMP_CR0_HYSTCTR_SHIFT))&CMP_CR0_HYSTCTR_MASK)
S#define CMP_CR0_FILTER_CNT_MASK                  0x70u
S#define CMP_CR0_FILTER_CNT_SHIFT                 4
S#define CMP_CR0_FILTER_CNT_WIDTH                 3
S#define CMP_CR0_FILTER_CNT(x)                    (((uint8_t)(((uint8_t)(x))<<CMP_CR0_FILTER_CNT_SHIFT))&CMP_CR0_FILTER_CNT_MASK)
S/* CR1 Bit Fields */
S#define CMP_CR1_EN_MASK                          0x1u
S#define CMP_CR1_EN_SHIFT                         0
S#define CMP_CR1_EN_WIDTH                         1
S#define CMP_CR1_EN(x)                            (((uint8_t)(((uint8_t)(x))<<CMP_CR1_EN_SHIFT))&CMP_CR1_EN_MASK)
S#define CMP_CR1_OPE_MASK                         0x2u
S#define CMP_CR1_OPE_SHIFT                        1
S#define CMP_CR1_OPE_WIDTH                        1
S#define CMP_CR1_OPE(x)                           (((uint8_t)(((uint8_t)(x))<<CMP_CR1_OPE_SHIFT))&CMP_CR1_OPE_MASK)
S#define CMP_CR1_COS_MASK                         0x4u
S#define CMP_CR1_COS_SHIFT                        2
S#define CMP_CR1_COS_WIDTH                        1
S#define CMP_CR1_COS(x)                           (((uint8_t)(((uint8_t)(x))<<CMP_CR1_COS_SHIFT))&CMP_CR1_COS_MASK)
S#define CMP_CR1_INV_MASK                         0x8u
S#define CMP_CR1_INV_SHIFT                        3
S#define CMP_CR1_INV_WIDTH                        1
S#define CMP_CR1_INV(x)                           (((uint8_t)(((uint8_t)(x))<<CMP_CR1_INV_SHIFT))&CMP_CR1_INV_MASK)
S#define CMP_CR1_PMODE_MASK                       0x10u
S#define CMP_CR1_PMODE_SHIFT                      4
S#define CMP_CR1_PMODE_WIDTH                      1
S#define CMP_CR1_PMODE(x)                         (((uint8_t)(((uint8_t)(x))<<CMP_CR1_PMODE_SHIFT))&CMP_CR1_PMODE_MASK)
S#define CMP_CR1_TRIGM_MASK                       0x20u
S#define CMP_CR1_TRIGM_SHIFT                      5
S#define CMP_CR1_TRIGM_WIDTH                      1
S#define CMP_CR1_TRIGM(x)                         (((uint8_t)(((uint8_t)(x))<<CMP_CR1_TRIGM_SHIFT))&CMP_CR1_TRIGM_MASK)
S#define CMP_CR1_WE_MASK                          0x40u
S#define CMP_CR1_WE_SHIFT                         6
S#define CMP_CR1_WE_WIDTH                         1
S#define CMP_CR1_WE(x)                            (((uint8_t)(((uint8_t)(x))<<CMP_CR1_WE_SHIFT))&CMP_CR1_WE_MASK)
S#define CMP_CR1_SE_MASK                          0x80u
S#define CMP_CR1_SE_SHIFT                         7
S#define CMP_CR1_SE_WIDTH                         1
S#define CMP_CR1_SE(x)                            (((uint8_t)(((uint8_t)(x))<<CMP_CR1_SE_SHIFT))&CMP_CR1_SE_MASK)
S/* FPR Bit Fields */
S#define CMP_FPR_FILT_PER_MASK                    0xFFu
S#define CMP_FPR_FILT_PER_SHIFT                   0
S#define CMP_FPR_FILT_PER_WIDTH                   8
S#define CMP_FPR_FILT_PER(x)                      (((uint8_t)(((uint8_t)(x))<<CMP_FPR_FILT_PER_SHIFT))&CMP_FPR_FILT_PER_MASK)
S/* SCR Bit Fields */
S#define CMP_SCR_COUT_MASK                        0x1u
S#define CMP_SCR_COUT_SHIFT                       0
S#define CMP_SCR_COUT_WIDTH                       1
S#define CMP_SCR_COUT(x)                          (((uint8_t)(((uint8_t)(x))<<CMP_SCR_COUT_SHIFT))&CMP_SCR_COUT_MASK)
S#define CMP_SCR_CFF_MASK                         0x2u
S#define CMP_SCR_CFF_SHIFT                        1
S#define CMP_SCR_CFF_WIDTH                        1
S#define CMP_SCR_CFF(x)                           (((uint8_t)(((uint8_t)(x))<<CMP_SCR_CFF_SHIFT))&CMP_SCR_CFF_MASK)
S#define CMP_SCR_CFR_MASK                         0x4u
S#define CMP_SCR_CFR_SHIFT                        2
S#define CMP_SCR_CFR_WIDTH                        1
S#define CMP_SCR_CFR(x)                           (((uint8_t)(((uint8_t)(x))<<CMP_SCR_CFR_SHIFT))&CMP_SCR_CFR_MASK)
S#define CMP_SCR_IEF_MASK                         0x8u
S#define CMP_SCR_IEF_SHIFT                        3
S#define CMP_SCR_IEF_WIDTH                        1
S#define CMP_SCR_IEF(x)                           (((uint8_t)(((uint8_t)(x))<<CMP_SCR_IEF_SHIFT))&CMP_SCR_IEF_MASK)
S#define CMP_SCR_IER_MASK                         0x10u
S#define CMP_SCR_IER_SHIFT                        4
S#define CMP_SCR_IER_WIDTH                        1
S#define CMP_SCR_IER(x)                           (((uint8_t)(((uint8_t)(x))<<CMP_SCR_IER_SHIFT))&CMP_SCR_IER_MASK)
S#define CMP_SCR_DMAEN_MASK                       0x40u
S#define CMP_SCR_DMAEN_SHIFT                      6
S#define CMP_SCR_DMAEN_WIDTH                      1
S#define CMP_SCR_DMAEN(x)                         (((uint8_t)(((uint8_t)(x))<<CMP_SCR_DMAEN_SHIFT))&CMP_SCR_DMAEN_MASK)
S/* DACCR Bit Fields */
S#define CMP_DACCR_VOSEL_MASK                     0x3Fu
S#define CMP_DACCR_VOSEL_SHIFT                    0
S#define CMP_DACCR_VOSEL_WIDTH                    6
S#define CMP_DACCR_VOSEL(x)                       (((uint8_t)(((uint8_t)(x))<<CMP_DACCR_VOSEL_SHIFT))&CMP_DACCR_VOSEL_MASK)
S#define CMP_DACCR_VRSEL_MASK                     0x40u
S#define CMP_DACCR_VRSEL_SHIFT                    6
S#define CMP_DACCR_VRSEL_WIDTH                    1
S#define CMP_DACCR_VRSEL(x)                       (((uint8_t)(((uint8_t)(x))<<CMP_DACCR_VRSEL_SHIFT))&CMP_DACCR_VRSEL_MASK)
S#define CMP_DACCR_DACEN_MASK                     0x80u
S#define CMP_DACCR_DACEN_SHIFT                    7
S#define CMP_DACCR_DACEN_WIDTH                    1
S#define CMP_DACCR_DACEN(x)                       (((uint8_t)(((uint8_t)(x))<<CMP_DACCR_DACEN_SHIFT))&CMP_DACCR_DACEN_MASK)
S/* MUXCR Bit Fields */
S#define CMP_MUXCR_MSEL_MASK                      0x7u
S#define CMP_MUXCR_MSEL_SHIFT                     0
S#define CMP_MUXCR_MSEL_WIDTH                     3
S#define CMP_MUXCR_MSEL(x)                        (((uint8_t)(((uint8_t)(x))<<CMP_MUXCR_MSEL_SHIFT))&CMP_MUXCR_MSEL_MASK)
S#define CMP_MUXCR_PSEL_MASK                      0x38u
S#define CMP_MUXCR_PSEL_SHIFT                     3
S#define CMP_MUXCR_PSEL_WIDTH                     3
S#define CMP_MUXCR_PSEL(x)                        (((uint8_t)(((uint8_t)(x))<<CMP_MUXCR_PSEL_SHIFT))&CMP_MUXCR_PSEL_MASK)
S#define CMP_MUXCR_PSTM_MASK                      0x80u
S#define CMP_MUXCR_PSTM_SHIFT                     7
S#define CMP_MUXCR_PSTM_WIDTH                     1
S#define CMP_MUXCR_PSTM(x)                        (((uint8_t)(((uint8_t)(x))<<CMP_MUXCR_PSTM_SHIFT))&CMP_MUXCR_PSTM_MASK)
S
S/*!
S * @}
S */ /* end of group CMP_Register_Masks */
S
S
S/* CMP - Peripheral instance base addresses */
S/** Peripheral CMP0 base address */
S#define CMP0_BASE                                (0x40073000u)
S/** Peripheral CMP0 base pointer */
S#define CMP0                                     ((CMP_Type *)CMP0_BASE)
S#define CMP0_BASE_PTR                            (CMP0)
S/** Array initializer of CMP peripheral base addresses */
S#define CMP_BASE_ADDRS                           { CMP0_BASE }
S/** Array initializer of CMP peripheral base pointers */
S#define CMP_BASE_PTRS                            { CMP0 }
S/** Interrupt vectors for the CMP peripheral type */
S#define CMP_IRQS                                 { CMP0_IRQn }
S
S/* ----------------------------------------------------------------------------
S   -- CMP - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup CMP_Register_Accessor_Macros CMP - Register accessor macros
S * @{
S */
S
S
S/* CMP - Register instance definitions */
S/* CMP0 */
S#define CMP0_CR0                                 CMP_CR0_REG(CMP0)
S#define CMP0_CR1                                 CMP_CR1_REG(CMP0)
S#define CMP0_FPR                                 CMP_FPR_REG(CMP0)
S#define CMP0_SCR                                 CMP_SCR_REG(CMP0)
S#define CMP0_DACCR                               CMP_DACCR_REG(CMP0)
S#define CMP0_MUXCR                               CMP_MUXCR_REG(CMP0)
S
S/*!
S * @}
S */ /* end of group CMP_Register_Accessor_Macros */
S
S
S/*!
S * @}
S */ /* end of group CMP_Peripheral_Access_Layer */
S
S
S/* ----------------------------------------------------------------------------
S   -- DAC Peripheral Access Layer
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup DAC_Peripheral_Access_Layer DAC Peripheral Access Layer
S * @{
S */
S
S/** DAC - Register Layout Typedef */
Stypedef struct {
S  struct {                                         /* offset: 0x0, array step: 0x2 */
S    __IO uint8_t DATL;                               /**< DAC Data Low Register, array offset: 0x0, array step: 0x2 */
S    __IO uint8_t DATH;                               /**< DAC Data High Register, array offset: 0x1, array step: 0x2 */
S  } DAT[2];
S       uint8_t RESERVED_0[28];
S  __IO uint8_t SR;                                 /**< DAC Status Register, offset: 0x20 */
S  __IO uint8_t C0;                                 /**< DAC Control Register, offset: 0x21 */
S  __IO uint8_t C1;                                 /**< DAC Control Register 1, offset: 0x22 */
S  __IO uint8_t C2;                                 /**< DAC Control Register 2, offset: 0x23 */
S} DAC_Type, *DAC_MemMapPtr;
S
S/* ----------------------------------------------------------------------------
S   -- DAC - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup DAC_Register_Accessor_Macros DAC - Register accessor macros
S * @{
S */
S
S
S/* DAC - Register accessors */
S#define DAC_DATL_REG(base,index)                 ((base)->DAT[index].DATL)
S#define DAC_DATL_COUNT                           2
S#define DAC_DATH_REG(base,index)                 ((base)->DAT[index].DATH)
S#define DAC_DATH_COUNT                           2
S#define DAC_SR_REG(base)                         ((base)->SR)
S#define DAC_C0_REG(base)                         ((base)->C0)
S#define DAC_C1_REG(base)                         ((base)->C1)
S#define DAC_C2_REG(base)                         ((base)->C2)
S
S/*!
S * @}
S */ /* end of group DAC_Register_Accessor_Macros */
S
S
S/* ----------------------------------------------------------------------------
S   -- DAC Register Masks
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup DAC_Register_Masks DAC Register Masks
S * @{
S */
S
S/* DATL Bit Fields */
S#define DAC_DATL_DATA0_MASK                      0xFFu
S#define DAC_DATL_DATA0_SHIFT                     0
S#define DAC_DATL_DATA0_WIDTH                     8
S#define DAC_DATL_DATA0(x)                        (((uint8_t)(((uint8_t)(x))<<DAC_DATL_DATA0_SHIFT))&DAC_DATL_DATA0_MASK)
S/* DATH Bit Fields */
S#define DAC_DATH_DATA1_MASK                      0xFu
S#define DAC_DATH_DATA1_SHIFT                     0
S#define DAC_DATH_DATA1_WIDTH                     4
S#define DAC_DATH_DATA1(x)                        (((uint8_t)(((uint8_t)(x))<<DAC_DATH_DATA1_SHIFT))&DAC_DATH_DATA1_MASK)
S/* SR Bit Fields */
S#define DAC_SR_DACBFRPBF_MASK                    0x1u
S#define DAC_SR_DACBFRPBF_SHIFT                   0
S#define DAC_SR_DACBFRPBF_WIDTH                   1
S#define DAC_SR_DACBFRPBF(x)                      (((uint8_t)(((uint8_t)(x))<<DAC_SR_DACBFRPBF_SHIFT))&DAC_SR_DACBFRPBF_MASK)
S#define DAC_SR_DACBFRPTF_MASK                    0x2u
S#define DAC_SR_DACBFRPTF_SHIFT                   1
S#define DAC_SR_DACBFRPTF_WIDTH                   1
S#define DAC_SR_DACBFRPTF(x)                      (((uint8_t)(((uint8_t)(x))<<DAC_SR_DACBFRPTF_SHIFT))&DAC_SR_DACBFRPTF_MASK)
S/* C0 Bit Fields */
S#define DAC_C0_DACBBIEN_MASK                     0x1u
S#define DAC_C0_DACBBIEN_SHIFT                    0
S#define DAC_C0_DACBBIEN_WIDTH                    1
S#define DAC_C0_DACBBIEN(x)                       (((uint8_t)(((uint8_t)(x))<<DAC_C0_DACBBIEN_SHIFT))&DAC_C0_DACBBIEN_MASK)
S#define DAC_C0_DACBTIEN_MASK                     0x2u
S#define DAC_C0_DACBTIEN_SHIFT                    1
S#define DAC_C0_DACBTIEN_WIDTH                    1
S#define DAC_C0_DACBTIEN(x)                       (((uint8_t)(((uint8_t)(x))<<DAC_C0_DACBTIEN_SHIFT))&DAC_C0_DACBTIEN_MASK)
S#define DAC_C0_LPEN_MASK                         0x8u
S#define DAC_C0_LPEN_SHIFT                        3
S#define DAC_C0_LPEN_WIDTH                        1
S#define DAC_C0_LPEN(x)                           (((uint8_t)(((uint8_t)(x))<<DAC_C0_LPEN_SHIFT))&DAC_C0_LPEN_MASK)
S#define DAC_C0_DACSWTRG_MASK                     0x10u
S#define DAC_C0_DACSWTRG_SHIFT                    4
S#define DAC_C0_DACSWTRG_WIDTH                    1
S#define DAC_C0_DACSWTRG(x)                       (((uint8_t)(((uint8_t)(x))<<DAC_C0_DACSWTRG_SHIFT))&DAC_C0_DACSWTRG_MASK)
S#define DAC_C0_DACTRGSEL_MASK                    0x20u
S#define DAC_C0_DACTRGSEL_SHIFT                   5
S#define DAC_C0_DACTRGSEL_WIDTH                   1
S#define DAC_C0_DACTRGSEL(x)                      (((uint8_t)(((uint8_t)(x))<<DAC_C0_DACTRGSEL_SHIFT))&DAC_C0_DACTRGSEL_MASK)
S#define DAC_C0_DACRFS_MASK                       0x40u
S#define DAC_C0_DACRFS_SHIFT                      6
S#define DAC_C0_DACRFS_WIDTH                      1
S#define DAC_C0_DACRFS(x)                         (((uint8_t)(((uint8_t)(x))<<DAC_C0_DACRFS_SHIFT))&DAC_C0_DACRFS_MASK)
S#define DAC_C0_DACEN_MASK                        0x80u
S#define DAC_C0_DACEN_SHIFT                       7
S#define DAC_C0_DACEN_WIDTH                       1
S#define DAC_C0_DACEN(x)                          (((uint8_t)(((uint8_t)(x))<<DAC_C0_DACEN_SHIFT))&DAC_C0_DACEN_MASK)
S/* C1 Bit Fields */
S#define DAC_C1_DACBFEN_MASK                      0x1u
S#define DAC_C1_DACBFEN_SHIFT                     0
S#define DAC_C1_DACBFEN_WIDTH                     1
S#define DAC_C1_DACBFEN(x)                        (((uint8_t)(((uint8_t)(x))<<DAC_C1_DACBFEN_SHIFT))&DAC_C1_DACBFEN_MASK)
S#define DAC_C1_DACBFMD_MASK                      0x4u
S#define DAC_C1_DACBFMD_SHIFT                     2
S#define DAC_C1_DACBFMD_WIDTH                     1
S#define DAC_C1_DACBFMD(x)                        (((uint8_t)(((uint8_t)(x))<<DAC_C1_DACBFMD_SHIFT))&DAC_C1_DACBFMD_MASK)
S#define DAC_C1_DMAEN_MASK                        0x80u
S#define DAC_C1_DMAEN_SHIFT                       7
S#define DAC_C1_DMAEN_WIDTH                       1
S#define DAC_C1_DMAEN(x)                          (((uint8_t)(((uint8_t)(x))<<DAC_C1_DMAEN_SHIFT))&DAC_C1_DMAEN_MASK)
S/* C2 Bit Fields */
S#define DAC_C2_DACBFUP_MASK                      0x1u
S#define DAC_C2_DACBFUP_SHIFT                     0
S#define DAC_C2_DACBFUP_WIDTH                     1
S#define DAC_C2_DACBFUP(x)                        (((uint8_t)(((uint8_t)(x))<<DAC_C2_DACBFUP_SHIFT))&DAC_C2_DACBFUP_MASK)
S#define DAC_C2_DACBFRP_MASK                      0x10u
S#define DAC_C2_DACBFRP_SHIFT                     4
S#define DAC_C2_DACBFRP_WIDTH                     1
S#define DAC_C2_DACBFRP(x)                        (((uint8_t)(((uint8_t)(x))<<DAC_C2_DACBFRP_SHIFT))&DAC_C2_DACBFRP_MASK)
S
S/*!
S * @}
S */ /* end of group DAC_Register_Masks */
S
S
S/* DAC - Peripheral instance base addresses */
S/** Peripheral DAC0 base address */
S#define DAC0_BASE                                (0x4003F000u)
S/** Peripheral DAC0 base pointer */
S#define DAC0                                     ((DAC_Type *)DAC0_BASE)
S#define DAC0_BASE_PTR                            (DAC0)
S/** Array initializer of DAC peripheral base addresses */
S#define DAC_BASE_ADDRS                           { DAC0_BASE }
S/** Array initializer of DAC peripheral base pointers */
S#define DAC_BASE_PTRS                            { DAC0 }
S/** Interrupt vectors for the DAC peripheral type */
S#define DAC_IRQS                                 { DAC0_IRQn }
S
S/* ----------------------------------------------------------------------------
S   -- DAC - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup DAC_Register_Accessor_Macros DAC - Register accessor macros
S * @{
S */
S
S
S/* DAC - Register instance definitions */
S/* DAC0 */
S#define DAC0_DAT0L                               DAC_DATL_REG(DAC0,0)
S#define DAC0_DAT0H                               DAC_DATH_REG(DAC0,0)
S#define DAC0_DAT1L                               DAC_DATL_REG(DAC0,1)
S#define DAC0_DAT1H                               DAC_DATH_REG(DAC0,1)
S#define DAC0_SR                                  DAC_SR_REG(DAC0)
S#define DAC0_C0                                  DAC_C0_REG(DAC0)
S#define DAC0_C1                                  DAC_C1_REG(DAC0)
S#define DAC0_C2                                  DAC_C2_REG(DAC0)
S
S/* DAC - Register array accessors */
S#define DAC0_DATL(index)                         DAC_DATL_REG(DAC0,index)
S#define DAC0_DATH(index)                         DAC_DATH_REG(DAC0,index)
S
S/*!
S * @}
S */ /* end of group DAC_Register_Accessor_Macros */
S
S
S/*!
S * @}
S */ /* end of group DAC_Peripheral_Access_Layer */
S
S
S/* ----------------------------------------------------------------------------
S   -- DMA Peripheral Access Layer
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup DMA_Peripheral_Access_Layer DMA Peripheral Access Layer
S * @{
S */
S
S/** DMA - Register Layout Typedef */
Stypedef struct {
S       uint8_t RESERVED_0[256];
S  struct {                                         /* offset: 0x100, array step: 0x10 */
S    __IO uint32_t SAR;                               /**< Source Address Register, array offset: 0x100, array step: 0x10 */
S    __IO uint32_t DAR;                               /**< Destination Address Register, array offset: 0x104, array step: 0x10 */
S    union {                                          /* offset: 0x108, array step: 0x10 */
S      __IO uint32_t DSR_BCR;                           /**< DMA Status Register / Byte Count Register, array offset: 0x108, array step: 0x10 */
S      struct {                                         /* offset: 0x108, array step: 0x10 */
S             uint8_t RESERVED_0[3];
S        __IO uint8_t DSR;                                /**< DMA_DSR0 register...DMA_DSR3 register., array offset: 0x10B, array step: 0x10 */
S      } DMA_DSR_ACCESS8BIT;
S    };
S    __IO uint32_t DCR;                               /**< DMA Control Register, array offset: 0x10C, array step: 0x10 */
S  } DMA[4];
S} DMA_Type, *DMA_MemMapPtr;
S
S/* ----------------------------------------------------------------------------
S   -- DMA - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup DMA_Register_Accessor_Macros DMA - Register accessor macros
S * @{
S */
S
S
S/* DMA - Register accessors */
S#define DMA_SAR_REG(base,index)                  ((base)->DMA[index].SAR)
S#define DMA_SAR_COUNT                            4
S#define DMA_DAR_REG(base,index)                  ((base)->DMA[index].DAR)
S#define DMA_DAR_COUNT                            4
S#define DMA_DSR_BCR_REG(base,index)              ((base)->DMA[index].DSR_BCR)
S#define DMA_DSR_BCR_COUNT                        4
S#define DMA_DSR_REG(base,index)                  ((base)->DMA[index].DMA_DSR_ACCESS8BIT.DSR)
S#define DMA_DSR_COUNT                            4
S#define DMA_DCR_REG(base,index)                  ((base)->DMA[index].DCR)
S#define DMA_DCR_COUNT                            4
S
S/*!
S * @}
S */ /* end of group DMA_Register_Accessor_Macros */
S
S
S/* ----------------------------------------------------------------------------
S   -- DMA Register Masks
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup DMA_Register_Masks DMA Register Masks
S * @{
S */
S
S/* SAR Bit Fields */
S#define DMA_SAR_SAR_MASK                         0xFFFFFFFFu
S#define DMA_SAR_SAR_SHIFT                        0
S#define DMA_SAR_SAR_WIDTH                        32
S#define DMA_SAR_SAR(x)                           (((uint32_t)(((uint32_t)(x))<<DMA_SAR_SAR_SHIFT))&DMA_SAR_SAR_MASK)
S/* DAR Bit Fields */
S#define DMA_DAR_DAR_MASK                         0xFFFFFFFFu
S#define DMA_DAR_DAR_SHIFT                        0
S#define DMA_DAR_DAR_WIDTH                        32
S#define DMA_DAR_DAR(x)                           (((uint32_t)(((uint32_t)(x))<<DMA_DAR_DAR_SHIFT))&DMA_DAR_DAR_MASK)
S/* DSR_BCR Bit Fields */
S#define DMA_DSR_BCR_BCR_MASK                     0xFFFFFFu
S#define DMA_DSR_BCR_BCR_SHIFT                    0
S#define DMA_DSR_BCR_BCR_WIDTH                    24
S#define DMA_DSR_BCR_BCR(x)                       (((uint32_t)(((uint32_t)(x))<<DMA_DSR_BCR_BCR_SHIFT))&DMA_DSR_BCR_BCR_MASK)
S#define DMA_DSR_BCR_DONE_MASK                    0x1000000u
S#define DMA_DSR_BCR_DONE_SHIFT                   24
S#define DMA_DSR_BCR_DONE_WIDTH                   1
S#define DMA_DSR_BCR_DONE(x)                      (((uint32_t)(((uint32_t)(x))<<DMA_DSR_BCR_DONE_SHIFT))&DMA_DSR_BCR_DONE_MASK)
S#define DMA_DSR_BCR_BSY_MASK                     0x2000000u
S#define DMA_DSR_BCR_BSY_SHIFT                    25
S#define DMA_DSR_BCR_BSY_WIDTH                    1
S#define DMA_DSR_BCR_BSY(x)                       (((uint32_t)(((uint32_t)(x))<<DMA_DSR_BCR_BSY_SHIFT))&DMA_DSR_BCR_BSY_MASK)
S#define DMA_DSR_BCR_REQ_MASK                     0x4000000u
S#define DMA_DSR_BCR_REQ_SHIFT                    26
S#define DMA_DSR_BCR_REQ_WIDTH                    1
S#define DMA_DSR_BCR_REQ(x)                       (((uint32_t)(((uint32_t)(x))<<DMA_DSR_BCR_REQ_SHIFT))&DMA_DSR_BCR_REQ_MASK)
S#define DMA_DSR_BCR_BED_MASK                     0x10000000u
S#define DMA_DSR_BCR_BED_SHIFT                    28
S#define DMA_DSR_BCR_BED_WIDTH                    1
S#define DMA_DSR_BCR_BED(x)                       (((uint32_t)(((uint32_t)(x))<<DMA_DSR_BCR_BED_SHIFT))&DMA_DSR_BCR_BED_MASK)
S#define DMA_DSR_BCR_BES_MASK                     0x20000000u
S#define DMA_DSR_BCR_BES_SHIFT                    29
S#define DMA_DSR_BCR_BES_WIDTH                    1
S#define DMA_DSR_BCR_BES(x)                       (((uint32_t)(((uint32_t)(x))<<DMA_DSR_BCR_BES_SHIFT))&DMA_DSR_BCR_BES_MASK)
S#define DMA_DSR_BCR_CE_MASK                      0x40000000u
S#define DMA_DSR_BCR_CE_SHIFT                     30
S#define DMA_DSR_BCR_CE_WIDTH                     1
S#define DMA_DSR_BCR_CE(x)                        (((uint32_t)(((uint32_t)(x))<<DMA_DSR_BCR_CE_SHIFT))&DMA_DSR_BCR_CE_MASK)
S/* DCR Bit Fields */
S#define DMA_DCR_LCH2_MASK                        0x3u
S#define DMA_DCR_LCH2_SHIFT                       0
S#define DMA_DCR_LCH2_WIDTH                       2
S#define DMA_DCR_LCH2(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_DCR_LCH2_SHIFT))&DMA_DCR_LCH2_MASK)
S#define DMA_DCR_LCH1_MASK                        0xCu
S#define DMA_DCR_LCH1_SHIFT                       2
S#define DMA_DCR_LCH1_WIDTH                       2
S#define DMA_DCR_LCH1(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_DCR_LCH1_SHIFT))&DMA_DCR_LCH1_MASK)
S#define DMA_DCR_LINKCC_MASK                      0x30u
S#define DMA_DCR_LINKCC_SHIFT                     4
S#define DMA_DCR_LINKCC_WIDTH                     2
S#define DMA_DCR_LINKCC(x)                        (((uint32_t)(((uint32_t)(x))<<DMA_DCR_LINKCC_SHIFT))&DMA_DCR_LINKCC_MASK)
S#define DMA_DCR_D_REQ_MASK                       0x80u
S#define DMA_DCR_D_REQ_SHIFT                      7
S#define DMA_DCR_D_REQ_WIDTH                      1
S#define DMA_DCR_D_REQ(x)                         (((uint32_t)(((uint32_t)(x))<<DMA_DCR_D_REQ_SHIFT))&DMA_DCR_D_REQ_MASK)
S#define DMA_DCR_DMOD_MASK                        0xF00u
S#define DMA_DCR_DMOD_SHIFT                       8
S#define DMA_DCR_DMOD_WIDTH                       4
S#define DMA_DCR_DMOD(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_DCR_DMOD_SHIFT))&DMA_DCR_DMOD_MASK)
S#define DMA_DCR_SMOD_MASK                        0xF000u
S#define DMA_DCR_SMOD_SHIFT                       12
S#define DMA_DCR_SMOD_WIDTH                       4
S#define DMA_DCR_SMOD(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_DCR_SMOD_SHIFT))&DMA_DCR_SMOD_MASK)
S#define DMA_DCR_START_MASK                       0x10000u
S#define DMA_DCR_START_SHIFT                      16
S#define DMA_DCR_START_WIDTH                      1
S#define DMA_DCR_START(x)                         (((uint32_t)(((uint32_t)(x))<<DMA_DCR_START_SHIFT))&DMA_DCR_START_MASK)
S#define DMA_DCR_DSIZE_MASK                       0x60000u
S#define DMA_DCR_DSIZE_SHIFT                      17
S#define DMA_DCR_DSIZE_WIDTH                      2
S#define DMA_DCR_DSIZE(x)                         (((uint32_t)(((uint32_t)(x))<<DMA_DCR_DSIZE_SHIFT))&DMA_DCR_DSIZE_MASK)
S#define DMA_DCR_DINC_MASK                        0x80000u
S#define DMA_DCR_DINC_SHIFT                       19
S#define DMA_DCR_DINC_WIDTH                       1
S#define DMA_DCR_DINC(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_DCR_DINC_SHIFT))&DMA_DCR_DINC_MASK)
S#define DMA_DCR_SSIZE_MASK                       0x300000u
S#define DMA_DCR_SSIZE_SHIFT                      20
S#define DMA_DCR_SSIZE_WIDTH                      2
S#define DMA_DCR_SSIZE(x)                         (((uint32_t)(((uint32_t)(x))<<DMA_DCR_SSIZE_SHIFT))&DMA_DCR_SSIZE_MASK)
S#define DMA_DCR_SINC_MASK                        0x400000u
S#define DMA_DCR_SINC_SHIFT                       22
S#define DMA_DCR_SINC_WIDTH                       1
S#define DMA_DCR_SINC(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_DCR_SINC_SHIFT))&DMA_DCR_SINC_MASK)
S#define DMA_DCR_EADREQ_MASK                      0x800000u
S#define DMA_DCR_EADREQ_SHIFT                     23
S#define DMA_DCR_EADREQ_WIDTH                     1
S#define DMA_DCR_EADREQ(x)                        (((uint32_t)(((uint32_t)(x))<<DMA_DCR_EADREQ_SHIFT))&DMA_DCR_EADREQ_MASK)
S#define DMA_DCR_AA_MASK                          0x10000000u
S#define DMA_DCR_AA_SHIFT                         28
S#define DMA_DCR_AA_WIDTH                         1
S#define DMA_DCR_AA(x)                            (((uint32_t)(((uint32_t)(x))<<DMA_DCR_AA_SHIFT))&DMA_DCR_AA_MASK)
S#define DMA_DCR_CS_MASK                          0x20000000u
S#define DMA_DCR_CS_SHIFT                         29
S#define DMA_DCR_CS_WIDTH                         1
S#define DMA_DCR_CS(x)                            (((uint32_t)(((uint32_t)(x))<<DMA_DCR_CS_SHIFT))&DMA_DCR_CS_MASK)
S#define DMA_DCR_ERQ_MASK                         0x40000000u
S#define DMA_DCR_ERQ_SHIFT                        30
S#define DMA_DCR_ERQ_WIDTH                        1
S#define DMA_DCR_ERQ(x)                           (((uint32_t)(((uint32_t)(x))<<DMA_DCR_ERQ_SHIFT))&DMA_DCR_ERQ_MASK)
S#define DMA_DCR_EINT_MASK                        0x80000000u
S#define DMA_DCR_EINT_SHIFT                       31
S#define DMA_DCR_EINT_WIDTH                       1
S#define DMA_DCR_EINT(x)                          (((uint32_t)(((uint32_t)(x))<<DMA_DCR_EINT_SHIFT))&DMA_DCR_EINT_MASK)
S
S/*!
S * @}
S */ /* end of group DMA_Register_Masks */
S
S
S/* DMA - Peripheral instance base addresses */
S/** Peripheral DMA base address */
S#define DMA_BASE                                 (0x40008000u)
S/** Peripheral DMA base pointer */
S#define DMA0                                     ((DMA_Type *)DMA_BASE)
S#define DMA_BASE_PTR                             (DMA0)
S/** Array initializer of DMA peripheral base addresses */
S#define DMA_BASE_ADDRS                           { DMA_BASE }
S/** Array initializer of DMA peripheral base pointers */
S#define DMA_BASE_PTRS                            { DMA0 }
S/** Interrupt vectors for the DMA peripheral type */
S#define DMA_CHN_IRQS                             { DMA0_IRQn, DMA1_IRQn, DMA2_IRQn, DMA3_IRQn }
S
S/* ----------------------------------------------------------------------------
S   -- DMA - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup DMA_Register_Accessor_Macros DMA - Register accessor macros
S * @{
S */
S
S
S/* DMA - Register instance definitions */
S/* DMA */
S#define DMA_SAR0                                 DMA_SAR_REG(DMA0,0)
S#define DMA_DAR0                                 DMA_DAR_REG(DMA0,0)
S#define DMA_DSR_BCR0                             DMA_DSR_BCR_REG(DMA0,0)
S#define DMA_DSR0                                 DMA_DSR_REG(DMA0,0)
S#define DMA_DCR0                                 DMA_DCR_REG(DMA0,0)
S#define DMA_SAR1                                 DMA_SAR_REG(DMA0,1)
S#define DMA_DAR1                                 DMA_DAR_REG(DMA0,1)
S#define DMA_DSR_BCR1                             DMA_DSR_BCR_REG(DMA0,1)
S#define DMA_DSR1                                 DMA_DSR_REG(DMA0,1)
S#define DMA_DCR1                                 DMA_DCR_REG(DMA0,1)
S#define DMA_SAR2                                 DMA_SAR_REG(DMA0,2)
S#define DMA_DAR2                                 DMA_DAR_REG(DMA0,2)
S#define DMA_DSR_BCR2                             DMA_DSR_BCR_REG(DMA0,2)
S#define DMA_DSR2                                 DMA_DSR_REG(DMA0,2)
S#define DMA_DCR2                                 DMA_DCR_REG(DMA0,2)
S#define DMA_SAR3                                 DMA_SAR_REG(DMA0,3)
S#define DMA_DAR3                                 DMA_DAR_REG(DMA0,3)
S#define DMA_DSR_BCR3                             DMA_DSR_BCR_REG(DMA0,3)
S#define DMA_DSR3                                 DMA_DSR_REG(DMA0,3)
S#define DMA_DCR3                                 DMA_DCR_REG(DMA0,3)
S
S/* DMA - Register array accessors */
S#define DMA_SAR(index)                           DMA_SAR_REG(DMA0,index)
S#define DMA_DAR(index)                           DMA_DAR_REG(DMA0,index)
S#define DMA_DSR_BCR(index)                       DMA_DSR_BCR_REG(DMA0,index)
S#define DMA_DSR(index)                           DMA_DSR_REG(DMA0,index)
S#define DMA_DCR(index)                           DMA_DCR_REG(DMA0,index)
S
S/*!
S * @}
S */ /* end of group DMA_Register_Accessor_Macros */
S
S
S/*!
S * @}
S */ /* end of group DMA_Peripheral_Access_Layer */
S
S
S/* ----------------------------------------------------------------------------
S   -- DMAMUX Peripheral Access Layer
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup DMAMUX_Peripheral_Access_Layer DMAMUX Peripheral Access Layer
S * @{
S */
S
S/** DMAMUX - Register Layout Typedef */
Stypedef struct {
S  __IO uint8_t CHCFG[4];                           /**< Channel Configuration register, array offset: 0x0, array step: 0x1 */
S} DMAMUX_Type, *DMAMUX_MemMapPtr;
S
S/* ----------------------------------------------------------------------------
S   -- DMAMUX - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup DMAMUX_Register_Accessor_Macros DMAMUX - Register accessor macros
S * @{
S */
S
S
S/* DMAMUX - Register accessors */
S#define DMAMUX_CHCFG_REG(base,index)             ((base)->CHCFG[index])
S#define DMAMUX_CHCFG_COUNT                       4
S
S/*!
S * @}
S */ /* end of group DMAMUX_Register_Accessor_Macros */
S
S
S/* ----------------------------------------------------------------------------
S   -- DMAMUX Register Masks
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup DMAMUX_Register_Masks DMAMUX Register Masks
S * @{
S */
S
S/* CHCFG Bit Fields */
S#define DMAMUX_CHCFG_SOURCE_MASK                 0x3Fu
S#define DMAMUX_CHCFG_SOURCE_SHIFT                0
S#define DMAMUX_CHCFG_SOURCE_WIDTH                6
S#define DMAMUX_CHCFG_SOURCE(x)                   (((uint8_t)(((uint8_t)(x))<<DMAMUX_CHCFG_SOURCE_SHIFT))&DMAMUX_CHCFG_SOURCE_MASK)
S#define DMAMUX_CHCFG_TRIG_MASK                   0x40u
S#define DMAMUX_CHCFG_TRIG_SHIFT                  6
S#define DMAMUX_CHCFG_TRIG_WIDTH                  1
S#define DMAMUX_CHCFG_TRIG(x)                     (((uint8_t)(((uint8_t)(x))<<DMAMUX_CHCFG_TRIG_SHIFT))&DMAMUX_CHCFG_TRIG_MASK)
S#define DMAMUX_CHCFG_ENBL_MASK                   0x80u
S#define DMAMUX_CHCFG_ENBL_SHIFT                  7
S#define DMAMUX_CHCFG_ENBL_WIDTH                  1
S#define DMAMUX_CHCFG_ENBL(x)                     (((uint8_t)(((uint8_t)(x))<<DMAMUX_CHCFG_ENBL_SHIFT))&DMAMUX_CHCFG_ENBL_MASK)
S
S/*!
S * @}
S */ /* end of group DMAMUX_Register_Masks */
S
S
S/* DMAMUX - Peripheral instance base addresses */
S/** Peripheral DMAMUX0 base address */
S#define DMAMUX0_BASE                             (0x40021000u)
S/** Peripheral DMAMUX0 base pointer */
S#define DMAMUX0                                  ((DMAMUX_Type *)DMAMUX0_BASE)
S#define DMAMUX0_BASE_PTR                         (DMAMUX0)
S/** Array initializer of DMAMUX peripheral base addresses */
S#define DMAMUX_BASE_ADDRS                        { DMAMUX0_BASE }
S/** Array initializer of DMAMUX peripheral base pointers */
S#define DMAMUX_BASE_PTRS                         { DMAMUX0 }
S
S/* ----------------------------------------------------------------------------
S   -- DMAMUX - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup DMAMUX_Register_Accessor_Macros DMAMUX - Register accessor macros
S * @{
S */
S
S
S/* DMAMUX - Register instance definitions */
S/* DMAMUX0 */
S#define DMAMUX0_CHCFG0                           DMAMUX_CHCFG_REG(DMAMUX0,0)
S#define DMAMUX0_CHCFG1                           DMAMUX_CHCFG_REG(DMAMUX0,1)
S#define DMAMUX0_CHCFG2                           DMAMUX_CHCFG_REG(DMAMUX0,2)
S#define DMAMUX0_CHCFG3                           DMAMUX_CHCFG_REG(DMAMUX0,3)
S
S/* DMAMUX - Register array accessors */
S#define DMAMUX0_CHCFG(index)                     DMAMUX_CHCFG_REG(DMAMUX0,index)
S
S/*!
S * @}
S */ /* end of group DMAMUX_Register_Accessor_Macros */
S
S
S/*!
S * @}
S */ /* end of group DMAMUX_Peripheral_Access_Layer */
S
S
S/* ----------------------------------------------------------------------------
S   -- FGPIO Peripheral Access Layer
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup FGPIO_Peripheral_Access_Layer FGPIO Peripheral Access Layer
S * @{
S */
S
S/** FGPIO - Register Layout Typedef */
Stypedef struct {
S  __IO uint32_t PDOR;                              /**< Port Data Output Register, offset: 0x0 */
S  __O  uint32_t PSOR;                              /**< Port Set Output Register, offset: 0x4 */
S  __O  uint32_t PCOR;                              /**< Port Clear Output Register, offset: 0x8 */
S  __O  uint32_t PTOR;                              /**< Port Toggle Output Register, offset: 0xC */
S  __I  uint32_t PDIR;                              /**< Port Data Input Register, offset: 0x10 */
S  __IO uint32_t PDDR;                              /**< Port Data Direction Register, offset: 0x14 */
S} FGPIO_Type, *FGPIO_MemMapPtr;
S
S/* ----------------------------------------------------------------------------
S   -- FGPIO - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup FGPIO_Register_Accessor_Macros FGPIO - Register accessor macros
S * @{
S */
S
S
S/* FGPIO - Register accessors */
S#define FGPIO_PDOR_REG(base)                     ((base)->PDOR)
S#define FGPIO_PSOR_REG(base)                     ((base)->PSOR)
S#define FGPIO_PCOR_REG(base)                     ((base)->PCOR)
S#define FGPIO_PTOR_REG(base)                     ((base)->PTOR)
S#define FGPIO_PDIR_REG(base)                     ((base)->PDIR)
S#define FGPIO_PDDR_REG(base)                     ((base)->PDDR)
S
S/*!
S * @}
S */ /* end of group FGPIO_Register_Accessor_Macros */
S
S
S/* ----------------------------------------------------------------------------
S   -- FGPIO Register Masks
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup FGPIO_Register_Masks FGPIO Register Masks
S * @{
S */
S
S/* PDOR Bit Fields */
S#define FGPIO_PDOR_PDO_MASK                      0xFFFFFFFFu
S#define FGPIO_PDOR_PDO_SHIFT                     0
S#define FGPIO_PDOR_PDO_WIDTH                     32
S#define FGPIO_PDOR_PDO(x)                        (((uint32_t)(((uint32_t)(x))<<FGPIO_PDOR_PDO_SHIFT))&FGPIO_PDOR_PDO_MASK)
S/* PSOR Bit Fields */
S#define FGPIO_PSOR_PTSO_MASK                     0xFFFFFFFFu
S#define FGPIO_PSOR_PTSO_SHIFT                    0
S#define FGPIO_PSOR_PTSO_WIDTH                    32
S#define FGPIO_PSOR_PTSO(x)                       (((uint32_t)(((uint32_t)(x))<<FGPIO_PSOR_PTSO_SHIFT))&FGPIO_PSOR_PTSO_MASK)
S/* PCOR Bit Fields */
S#define FGPIO_PCOR_PTCO_MASK                     0xFFFFFFFFu
S#define FGPIO_PCOR_PTCO_SHIFT                    0
S#define FGPIO_PCOR_PTCO_WIDTH                    32
S#define FGPIO_PCOR_PTCO(x)                       (((uint32_t)(((uint32_t)(x))<<FGPIO_PCOR_PTCO_SHIFT))&FGPIO_PCOR_PTCO_MASK)
S/* PTOR Bit Fields */
S#define FGPIO_PTOR_PTTO_MASK                     0xFFFFFFFFu
S#define FGPIO_PTOR_PTTO_SHIFT                    0
S#define FGPIO_PTOR_PTTO_WIDTH                    32
S#define FGPIO_PTOR_PTTO(x)                       (((uint32_t)(((uint32_t)(x))<<FGPIO_PTOR_PTTO_SHIFT))&FGPIO_PTOR_PTTO_MASK)
S/* PDIR Bit Fields */
S#define FGPIO_PDIR_PDI_MASK                      0xFFFFFFFFu
S#define FGPIO_PDIR_PDI_SHIFT                     0
S#define FGPIO_PDIR_PDI_WIDTH                     32
S#define FGPIO_PDIR_PDI(x)                        (((uint32_t)(((uint32_t)(x))<<FGPIO_PDIR_PDI_SHIFT))&FGPIO_PDIR_PDI_MASK)
S/* PDDR Bit Fields */
S#define FGPIO_PDDR_PDD_MASK                      0xFFFFFFFFu
S#define FGPIO_PDDR_PDD_SHIFT                     0
S#define FGPIO_PDDR_PDD_WIDTH                     32
S#define FGPIO_PDDR_PDD(x)                        (((uint32_t)(((uint32_t)(x))<<FGPIO_PDDR_PDD_SHIFT))&FGPIO_PDDR_PDD_MASK)
S
S/*!
S * @}
S */ /* end of group FGPIO_Register_Masks */
S
S
S/* FGPIO - Peripheral instance base addresses */
S/** Peripheral FGPIOA base address */
S#define FGPIOA_BASE                              (0xF80FF000u)
S/** Peripheral FGPIOA base pointer */
S#define FGPIOA                                   ((FGPIO_Type *)FGPIOA_BASE)
S#define FGPIOA_BASE_PTR                          (FGPIOA)
S/** Peripheral FGPIOB base address */
S#define FGPIOB_BASE                              (0xF80FF040u)
S/** Peripheral FGPIOB base pointer */
S#define FGPIOB                                   ((FGPIO_Type *)FGPIOB_BASE)
S#define FGPIOB_BASE_PTR                          (FGPIOB)
S/** Peripheral FGPIOC base address */
S#define FGPIOC_BASE                              (0xF80FF080u)
S/** Peripheral FGPIOC base pointer */
S#define FGPIOC                                   ((FGPIO_Type *)FGPIOC_BASE)
S#define FGPIOC_BASE_PTR                          (FGPIOC)
S/** Peripheral FGPIOD base address */
S#define FGPIOD_BASE                              (0xF80FF0C0u)
S/** Peripheral FGPIOD base pointer */
S#define FGPIOD                                   ((FGPIO_Type *)FGPIOD_BASE)
S#define FGPIOD_BASE_PTR                          (FGPIOD)
S/** Peripheral FGPIOE base address */
S#define FGPIOE_BASE                              (0xF80FF100u)
S/** Peripheral FGPIOE base pointer */
S#define FGPIOE                                   ((FGPIO_Type *)FGPIOE_BASE)
S#define FGPIOE_BASE_PTR                          (FGPIOE)
S/** Array initializer of FGPIO peripheral base addresses */
S#define FGPIO_BASE_ADDRS                         { FGPIOA_BASE, FGPIOB_BASE, FGPIOC_BASE, FGPIOD_BASE, FGPIOE_BASE }
S/** Array initializer of FGPIO peripheral base pointers */
S#define FGPIO_BASE_PTRS                          { FGPIOA, FGPIOB, FGPIOC, FGPIOD, FGPIOE }
S
S/* ----------------------------------------------------------------------------
S   -- FGPIO - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup FGPIO_Register_Accessor_Macros FGPIO - Register accessor macros
S * @{
S */
S
S
S/* FGPIO - Register instance definitions */
S/* FGPIOA */
S#define FGPIOA_PDOR                              FGPIO_PDOR_REG(FGPIOA)
S#define FGPIOA_PSOR                              FGPIO_PSOR_REG(FGPIOA)
S#define FGPIOA_PCOR                              FGPIO_PCOR_REG(FGPIOA)
S#define FGPIOA_PTOR                              FGPIO_PTOR_REG(FGPIOA)
S#define FGPIOA_PDIR                              FGPIO_PDIR_REG(FGPIOA)
S#define FGPIOA_PDDR                              FGPIO_PDDR_REG(FGPIOA)
S/* FGPIOB */
S#define FGPIOB_PDOR                              FGPIO_PDOR_REG(FGPIOB)
S#define FGPIOB_PSOR                              FGPIO_PSOR_REG(FGPIOB)
S#define FGPIOB_PCOR                              FGPIO_PCOR_REG(FGPIOB)
S#define FGPIOB_PTOR                              FGPIO_PTOR_REG(FGPIOB)
S#define FGPIOB_PDIR                              FGPIO_PDIR_REG(FGPIOB)
S#define FGPIOB_PDDR                              FGPIO_PDDR_REG(FGPIOB)
S/* FGPIOC */
S#define FGPIOC_PDOR                              FGPIO_PDOR_REG(FGPIOC)
S#define FGPIOC_PSOR                              FGPIO_PSOR_REG(FGPIOC)
S#define FGPIOC_PCOR                              FGPIO_PCOR_REG(FGPIOC)
S#define FGPIOC_PTOR                              FGPIO_PTOR_REG(FGPIOC)
S#define FGPIOC_PDIR                              FGPIO_PDIR_REG(FGPIOC)
S#define FGPIOC_PDDR                              FGPIO_PDDR_REG(FGPIOC)
S/* FGPIOD */
S#define FGPIOD_PDOR                              FGPIO_PDOR_REG(FGPIOD)
S#define FGPIOD_PSOR                              FGPIO_PSOR_REG(FGPIOD)
S#define FGPIOD_PCOR                              FGPIO_PCOR_REG(FGPIOD)
S#define FGPIOD_PTOR                              FGPIO_PTOR_REG(FGPIOD)
S#define FGPIOD_PDIR                              FGPIO_PDIR_REG(FGPIOD)
S#define FGPIOD_PDDR                              FGPIO_PDDR_REG(FGPIOD)
S/* FGPIOE */
S#define FGPIOE_PDOR                              FGPIO_PDOR_REG(FGPIOE)
S#define FGPIOE_PSOR                              FGPIO_PSOR_REG(FGPIOE)
S#define FGPIOE_PCOR                              FGPIO_PCOR_REG(FGPIOE)
S#define FGPIOE_PTOR                              FGPIO_PTOR_REG(FGPIOE)
S#define FGPIOE_PDIR                              FGPIO_PDIR_REG(FGPIOE)
S#define FGPIOE_PDDR                              FGPIO_PDDR_REG(FGPIOE)
S
S/*!
S * @}
S */ /* end of group FGPIO_Register_Accessor_Macros */
S
S
S/*!
S * @}
S */ /* end of group FGPIO_Peripheral_Access_Layer */
S
S
S/* ----------------------------------------------------------------------------
S   -- FTFA Peripheral Access Layer
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup FTFA_Peripheral_Access_Layer FTFA Peripheral Access Layer
S * @{
S */
S
S/** FTFA - Register Layout Typedef */
Stypedef struct {
S  __IO uint8_t FSTAT;                              /**< Flash Status Register, offset: 0x0 */
S  __IO uint8_t FCNFG;                              /**< Flash Configuration Register, offset: 0x1 */
S  __I  uint8_t FSEC;                               /**< Flash Security Register, offset: 0x2 */
S  __I  uint8_t FOPT;                               /**< Flash Option Register, offset: 0x3 */
S  __IO uint8_t FCCOB3;                             /**< Flash Common Command Object Registers, offset: 0x4 */
S  __IO uint8_t FCCOB2;                             /**< Flash Common Command Object Registers, offset: 0x5 */
S  __IO uint8_t FCCOB1;                             /**< Flash Common Command Object Registers, offset: 0x6 */
S  __IO uint8_t FCCOB0;                             /**< Flash Common Command Object Registers, offset: 0x7 */
S  __IO uint8_t FCCOB7;                             /**< Flash Common Command Object Registers, offset: 0x8 */
S  __IO uint8_t FCCOB6;                             /**< Flash Common Command Object Registers, offset: 0x9 */
S  __IO uint8_t FCCOB5;                             /**< Flash Common Command Object Registers, offset: 0xA */
S  __IO uint8_t FCCOB4;                             /**< Flash Common Command Object Registers, offset: 0xB */
S  __IO uint8_t FCCOBB;                             /**< Flash Common Command Object Registers, offset: 0xC */
S  __IO uint8_t FCCOBA;                             /**< Flash Common Command Object Registers, offset: 0xD */
S  __IO uint8_t FCCOB9;                             /**< Flash Common Command Object Registers, offset: 0xE */
S  __IO uint8_t FCCOB8;                             /**< Flash Common Command Object Registers, offset: 0xF */
S  __IO uint8_t FPROT3;                             /**< Program Flash Protection Registers, offset: 0x10 */
S  __IO uint8_t FPROT2;                             /**< Program Flash Protection Registers, offset: 0x11 */
S  __IO uint8_t FPROT1;                             /**< Program Flash Protection Registers, offset: 0x12 */
S  __IO uint8_t FPROT0;                             /**< Program Flash Protection Registers, offset: 0x13 */
S} FTFA_Type, *FTFA_MemMapPtr;
S
S/* ----------------------------------------------------------------------------
S   -- FTFA - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup FTFA_Register_Accessor_Macros FTFA - Register accessor macros
S * @{
S */
S
S
S/* FTFA - Register accessors */
S#define FTFA_FSTAT_REG(base)                     ((base)->FSTAT)
S#define FTFA_FCNFG_REG(base)                     ((base)->FCNFG)
S#define FTFA_FSEC_REG(base)                      ((base)->FSEC)
S#define FTFA_FOPT_REG(base)                      ((base)->FOPT)
S#define FTFA_FCCOB3_REG(base)                    ((base)->FCCOB3)
S#define FTFA_FCCOB2_REG(base)                    ((base)->FCCOB2)
S#define FTFA_FCCOB1_REG(base)                    ((base)->FCCOB1)
S#define FTFA_FCCOB0_REG(base)                    ((base)->FCCOB0)
S#define FTFA_FCCOB7_REG(base)                    ((base)->FCCOB7)
S#define FTFA_FCCOB6_REG(base)                    ((base)->FCCOB6)
S#define FTFA_FCCOB5_REG(base)                    ((base)->FCCOB5)
S#define FTFA_FCCOB4_REG(base)                    ((base)->FCCOB4)
S#define FTFA_FCCOBB_REG(base)                    ((base)->FCCOBB)
S#define FTFA_FCCOBA_REG(base)                    ((base)->FCCOBA)
S#define FTFA_FCCOB9_REG(base)                    ((base)->FCCOB9)
S#define FTFA_FCCOB8_REG(base)                    ((base)->FCCOB8)
S#define FTFA_FPROT3_REG(base)                    ((base)->FPROT3)
S#define FTFA_FPROT2_REG(base)                    ((base)->FPROT2)
S#define FTFA_FPROT1_REG(base)                    ((base)->FPROT1)
S#define FTFA_FPROT0_REG(base)                    ((base)->FPROT0)
S
S/*!
S * @}
S */ /* end of group FTFA_Register_Accessor_Macros */
S
S
S/* ----------------------------------------------------------------------------
S   -- FTFA Register Masks
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup FTFA_Register_Masks FTFA Register Masks
S * @{
S */
S
S/* FSTAT Bit Fields */
S#define FTFA_FSTAT_MGSTAT0_MASK                  0x1u
S#define FTFA_FSTAT_MGSTAT0_SHIFT                 0
S#define FTFA_FSTAT_MGSTAT0_WIDTH                 1
S#define FTFA_FSTAT_MGSTAT0(x)                    (((uint8_t)(((uint8_t)(x))<<FTFA_FSTAT_MGSTAT0_SHIFT))&FTFA_FSTAT_MGSTAT0_MASK)
S#define FTFA_FSTAT_FPVIOL_MASK                   0x10u
S#define FTFA_FSTAT_FPVIOL_SHIFT                  4
S#define FTFA_FSTAT_FPVIOL_WIDTH                  1
S#define FTFA_FSTAT_FPVIOL(x)                     (((uint8_t)(((uint8_t)(x))<<FTFA_FSTAT_FPVIOL_SHIFT))&FTFA_FSTAT_FPVIOL_MASK)
S#define FTFA_FSTAT_ACCERR_MASK                   0x20u
S#define FTFA_FSTAT_ACCERR_SHIFT                  5
S#define FTFA_FSTAT_ACCERR_WIDTH                  1
S#define FTFA_FSTAT_ACCERR(x)                     (((uint8_t)(((uint8_t)(x))<<FTFA_FSTAT_ACCERR_SHIFT))&FTFA_FSTAT_ACCERR_MASK)
S#define FTFA_FSTAT_RDCOLERR_MASK                 0x40u
S#define FTFA_FSTAT_RDCOLERR_SHIFT                6
S#define FTFA_FSTAT_RDCOLERR_WIDTH                1
S#define FTFA_FSTAT_RDCOLERR(x)                   (((uint8_t)(((uint8_t)(x))<<FTFA_FSTAT_RDCOLERR_SHIFT))&FTFA_FSTAT_RDCOLERR_MASK)
S#define FTFA_FSTAT_CCIF_MASK                     0x80u
S#define FTFA_FSTAT_CCIF_SHIFT                    7
S#define FTFA_FSTAT_CCIF_WIDTH                    1
S#define FTFA_FSTAT_CCIF(x)                       (((uint8_t)(((uint8_t)(x))<<FTFA_FSTAT_CCIF_SHIFT))&FTFA_FSTAT_CCIF_MASK)
S/* FCNFG Bit Fields */
S#define FTFA_FCNFG_ERSSUSP_MASK                  0x10u
S#define FTFA_FCNFG_ERSSUSP_SHIFT                 4
S#define FTFA_FCNFG_ERSSUSP_WIDTH                 1
S#define FTFA_FCNFG_ERSSUSP(x)                    (((uint8_t)(((uint8_t)(x))<<FTFA_FCNFG_ERSSUSP_SHIFT))&FTFA_FCNFG_ERSSUSP_MASK)
S#define FTFA_FCNFG_ERSAREQ_MASK                  0x20u
S#define FTFA_FCNFG_ERSAREQ_SHIFT                 5
S#define FTFA_FCNFG_ERSAREQ_WIDTH                 1
S#define FTFA_FCNFG_ERSAREQ(x)                    (((uint8_t)(((uint8_t)(x))<<FTFA_FCNFG_ERSAREQ_SHIFT))&FTFA_FCNFG_ERSAREQ_MASK)
S#define FTFA_FCNFG_RDCOLLIE_MASK                 0x40u
S#define FTFA_FCNFG_RDCOLLIE_SHIFT                6
S#define FTFA_FCNFG_RDCOLLIE_WIDTH                1
S#define FTFA_FCNFG_RDCOLLIE(x)                   (((uint8_t)(((uint8_t)(x))<<FTFA_FCNFG_RDCOLLIE_SHIFT))&FTFA_FCNFG_RDCOLLIE_MASK)
S#define FTFA_FCNFG_CCIE_MASK                     0x80u
S#define FTFA_FCNFG_CCIE_SHIFT                    7
S#define FTFA_FCNFG_CCIE_WIDTH                    1
S#define FTFA_FCNFG_CCIE(x)                       (((uint8_t)(((uint8_t)(x))<<FTFA_FCNFG_CCIE_SHIFT))&FTFA_FCNFG_CCIE_MASK)
S/* FSEC Bit Fields */
S#define FTFA_FSEC_SEC_MASK                       0x3u
S#define FTFA_FSEC_SEC_SHIFT                      0
S#define FTFA_FSEC_SEC_WIDTH                      2
S#define FTFA_FSEC_SEC(x)                         (((uint8_t)(((uint8_t)(x))<<FTFA_FSEC_SEC_SHIFT))&FTFA_FSEC_SEC_MASK)
S#define FTFA_FSEC_FSLACC_MASK                    0xCu
S#define FTFA_FSEC_FSLACC_SHIFT                   2
S#define FTFA_FSEC_FSLACC_WIDTH                   2
S#define FTFA_FSEC_FSLACC(x)                      (((uint8_t)(((uint8_t)(x))<<FTFA_FSEC_FSLACC_SHIFT))&FTFA_FSEC_FSLACC_MASK)
S#define FTFA_FSEC_MEEN_MASK                      0x30u
S#define FTFA_FSEC_MEEN_SHIFT                     4
S#define FTFA_FSEC_MEEN_WIDTH                     2
S#define FTFA_FSEC_MEEN(x)                        (((uint8_t)(((uint8_t)(x))<<FTFA_FSEC_MEEN_SHIFT))&FTFA_FSEC_MEEN_MASK)
S#define FTFA_FSEC_KEYEN_MASK                     0xC0u
S#define FTFA_FSEC_KEYEN_SHIFT                    6
S#define FTFA_FSEC_KEYEN_WIDTH                    2
S#define FTFA_FSEC_KEYEN(x)                       (((uint8_t)(((uint8_t)(x))<<FTFA_FSEC_KEYEN_SHIFT))&FTFA_FSEC_KEYEN_MASK)
S/* FOPT Bit Fields */
S#define FTFA_FOPT_OPT_MASK                       0xFFu
S#define FTFA_FOPT_OPT_SHIFT                      0
S#define FTFA_FOPT_OPT_WIDTH                      8
S#define FTFA_FOPT_OPT(x)                         (((uint8_t)(((uint8_t)(x))<<FTFA_FOPT_OPT_SHIFT))&FTFA_FOPT_OPT_MASK)
S/* FCCOB3 Bit Fields */
S#define FTFA_FCCOB3_CCOBn_MASK                   0xFFu
S#define FTFA_FCCOB3_CCOBn_SHIFT                  0
S#define FTFA_FCCOB3_CCOBn_WIDTH                  8
S#define FTFA_FCCOB3_CCOBn(x)                     (((uint8_t)(((uint8_t)(x))<<FTFA_FCCOB3_CCOBn_SHIFT))&FTFA_FCCOB3_CCOBn_MASK)
S/* FCCOB2 Bit Fields */
S#define FTFA_FCCOB2_CCOBn_MASK                   0xFFu
S#define FTFA_FCCOB2_CCOBn_SHIFT                  0
S#define FTFA_FCCOB2_CCOBn_WIDTH                  8
S#define FTFA_FCCOB2_CCOBn(x)                     (((uint8_t)(((uint8_t)(x))<<FTFA_FCCOB2_CCOBn_SHIFT))&FTFA_FCCOB2_CCOBn_MASK)
S/* FCCOB1 Bit Fields */
S#define FTFA_FCCOB1_CCOBn_MASK                   0xFFu
S#define FTFA_FCCOB1_CCOBn_SHIFT                  0
S#define FTFA_FCCOB1_CCOBn_WIDTH                  8
S#define FTFA_FCCOB1_CCOBn(x)                     (((uint8_t)(((uint8_t)(x))<<FTFA_FCCOB1_CCOBn_SHIFT))&FTFA_FCCOB1_CCOBn_MASK)
S/* FCCOB0 Bit Fields */
S#define FTFA_FCCOB0_CCOBn_MASK                   0xFFu
S#define FTFA_FCCOB0_CCOBn_SHIFT                  0
S#define FTFA_FCCOB0_CCOBn_WIDTH                  8
S#define FTFA_FCCOB0_CCOBn(x)                     (((uint8_t)(((uint8_t)(x))<<FTFA_FCCOB0_CCOBn_SHIFT))&FTFA_FCCOB0_CCOBn_MASK)
S/* FCCOB7 Bit Fields */
S#define FTFA_FCCOB7_CCOBn_MASK                   0xFFu
S#define FTFA_FCCOB7_CCOBn_SHIFT                  0
S#define FTFA_FCCOB7_CCOBn_WIDTH                  8
S#define FTFA_FCCOB7_CCOBn(x)                     (((uint8_t)(((uint8_t)(x))<<FTFA_FCCOB7_CCOBn_SHIFT))&FTFA_FCCOB7_CCOBn_MASK)
S/* FCCOB6 Bit Fields */
S#define FTFA_FCCOB6_CCOBn_MASK                   0xFFu
S#define FTFA_FCCOB6_CCOBn_SHIFT                  0
S#define FTFA_FCCOB6_CCOBn_WIDTH                  8
S#define FTFA_FCCOB6_CCOBn(x)                     (((uint8_t)(((uint8_t)(x))<<FTFA_FCCOB6_CCOBn_SHIFT))&FTFA_FCCOB6_CCOBn_MASK)
S/* FCCOB5 Bit Fields */
S#define FTFA_FCCOB5_CCOBn_MASK                   0xFFu
S#define FTFA_FCCOB5_CCOBn_SHIFT                  0
S#define FTFA_FCCOB5_CCOBn_WIDTH                  8
S#define FTFA_FCCOB5_CCOBn(x)                     (((uint8_t)(((uint8_t)(x))<<FTFA_FCCOB5_CCOBn_SHIFT))&FTFA_FCCOB5_CCOBn_MASK)
S/* FCCOB4 Bit Fields */
S#define FTFA_FCCOB4_CCOBn_MASK                   0xFFu
S#define FTFA_FCCOB4_CCOBn_SHIFT                  0
S#define FTFA_FCCOB4_CCOBn_WIDTH                  8
S#define FTFA_FCCOB4_CCOBn(x)                     (((uint8_t)(((uint8_t)(x))<<FTFA_FCCOB4_CCOBn_SHIFT))&FTFA_FCCOB4_CCOBn_MASK)
S/* FCCOBB Bit Fields */
S#define FTFA_FCCOBB_CCOBn_MASK                   0xFFu
S#define FTFA_FCCOBB_CCOBn_SHIFT                  0
S#define FTFA_FCCOBB_CCOBn_WIDTH                  8
S#define FTFA_FCCOBB_CCOBn(x)                     (((uint8_t)(((uint8_t)(x))<<FTFA_FCCOBB_CCOBn_SHIFT))&FTFA_FCCOBB_CCOBn_MASK)
S/* FCCOBA Bit Fields */
S#define FTFA_FCCOBA_CCOBn_MASK                   0xFFu
S#define FTFA_FCCOBA_CCOBn_SHIFT                  0
S#define FTFA_FCCOBA_CCOBn_WIDTH                  8
S#define FTFA_FCCOBA_CCOBn(x)                     (((uint8_t)(((uint8_t)(x))<<FTFA_FCCOBA_CCOBn_SHIFT))&FTFA_FCCOBA_CCOBn_MASK)
S/* FCCOB9 Bit Fields */
S#define FTFA_FCCOB9_CCOBn_MASK                   0xFFu
S#define FTFA_FCCOB9_CCOBn_SHIFT                  0
S#define FTFA_FCCOB9_CCOBn_WIDTH                  8
S#define FTFA_FCCOB9_CCOBn(x)                     (((uint8_t)(((uint8_t)(x))<<FTFA_FCCOB9_CCOBn_SHIFT))&FTFA_FCCOB9_CCOBn_MASK)
S/* FCCOB8 Bit Fields */
S#define FTFA_FCCOB8_CCOBn_MASK                   0xFFu
S#define FTFA_FCCOB8_CCOBn_SHIFT                  0
S#define FTFA_FCCOB8_CCOBn_WIDTH                  8
S#define FTFA_FCCOB8_CCOBn(x)                     (((uint8_t)(((uint8_t)(x))<<FTFA_FCCOB8_CCOBn_SHIFT))&FTFA_FCCOB8_CCOBn_MASK)
S/* FPROT3 Bit Fields */
S#define FTFA_FPROT3_PROT_MASK                    0xFFu
S#define FTFA_FPROT3_PROT_SHIFT                   0
S#define FTFA_FPROT3_PROT_WIDTH                   8
S#define FTFA_FPROT3_PROT(x)                      (((uint8_t)(((uint8_t)(x))<<FTFA_FPROT3_PROT_SHIFT))&FTFA_FPROT3_PROT_MASK)
S/* FPROT2 Bit Fields */
S#define FTFA_FPROT2_PROT_MASK                    0xFFu
S#define FTFA_FPROT2_PROT_SHIFT                   0
S#define FTFA_FPROT2_PROT_WIDTH                   8
S#define FTFA_FPROT2_PROT(x)                      (((uint8_t)(((uint8_t)(x))<<FTFA_FPROT2_PROT_SHIFT))&FTFA_FPROT2_PROT_MASK)
S/* FPROT1 Bit Fields */
S#define FTFA_FPROT1_PROT_MASK                    0xFFu
S#define FTFA_FPROT1_PROT_SHIFT                   0
S#define FTFA_FPROT1_PROT_WIDTH                   8
S#define FTFA_FPROT1_PROT(x)                      (((uint8_t)(((uint8_t)(x))<<FTFA_FPROT1_PROT_SHIFT))&FTFA_FPROT1_PROT_MASK)
S/* FPROT0 Bit Fields */
S#define FTFA_FPROT0_PROT_MASK                    0xFFu
S#define FTFA_FPROT0_PROT_SHIFT                   0
S#define FTFA_FPROT0_PROT_WIDTH                   8
S#define FTFA_FPROT0_PROT(x)                      (((uint8_t)(((uint8_t)(x))<<FTFA_FPROT0_PROT_SHIFT))&FTFA_FPROT0_PROT_MASK)
S
S/*!
S * @}
S */ /* end of group FTFA_Register_Masks */
S
S
S/* FTFA - Peripheral instance base addresses */
S/** Peripheral FTFA base address */
S#define FTFA_BASE                                (0x40020000u)
S/** Peripheral FTFA base pointer */
S#define FTFA                                     ((FTFA_Type *)FTFA_BASE)
S#define FTFA_BASE_PTR                            (FTFA)
S/** Array initializer of FTFA peripheral base addresses */
S#define FTFA_BASE_ADDRS                          { FTFA_BASE }
S/** Array initializer of FTFA peripheral base pointers */
S#define FTFA_BASE_PTRS                           { FTFA }
S/** Interrupt vectors for the FTFA peripheral type */
S#define FTFA_COMMAND_COMPLETE_IRQS               { FTFA_IRQn }
S
S/* ----------------------------------------------------------------------------
S   -- FTFA - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup FTFA_Register_Accessor_Macros FTFA - Register accessor macros
S * @{
S */
S
S
S/* FTFA - Register instance definitions */
S/* FTFA */
S#define FTFA_FSTAT                               FTFA_FSTAT_REG(FTFA)
S#define FTFA_FCNFG                               FTFA_FCNFG_REG(FTFA)
S#define FTFA_FSEC                                FTFA_FSEC_REG(FTFA)
S#define FTFA_FOPT                                FTFA_FOPT_REG(FTFA)
S#define FTFA_FCCOB3                              FTFA_FCCOB3_REG(FTFA)
S#define FTFA_FCCOB2                              FTFA_FCCOB2_REG(FTFA)
S#define FTFA_FCCOB1                              FTFA_FCCOB1_REG(FTFA)
S#define FTFA_FCCOB0                              FTFA_FCCOB0_REG(FTFA)
S#define FTFA_FCCOB7                              FTFA_FCCOB7_REG(FTFA)
S#define FTFA_FCCOB6                              FTFA_FCCOB6_REG(FTFA)
S#define FTFA_FCCOB5                              FTFA_FCCOB5_REG(FTFA)
S#define FTFA_FCCOB4                              FTFA_FCCOB4_REG(FTFA)
S#define FTFA_FCCOBB                              FTFA_FCCOBB_REG(FTFA)
S#define FTFA_FCCOBA                              FTFA_FCCOBA_REG(FTFA)
S#define FTFA_FCCOB9                              FTFA_FCCOB9_REG(FTFA)
S#define FTFA_FCCOB8                              FTFA_FCCOB8_REG(FTFA)
S#define FTFA_FPROT3                              FTFA_FPROT3_REG(FTFA)
S#define FTFA_FPROT2                              FTFA_FPROT2_REG(FTFA)
S#define FTFA_FPROT1                              FTFA_FPROT1_REG(FTFA)
S#define FTFA_FPROT0                              FTFA_FPROT0_REG(FTFA)
S
S/*!
S * @}
S */ /* end of group FTFA_Register_Accessor_Macros */
S
S
S/*!
S * @}
S */ /* end of group FTFA_Peripheral_Access_Layer */
S
S
S/* ----------------------------------------------------------------------------
S   -- GPIO Peripheral Access Layer
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup GPIO_Peripheral_Access_Layer GPIO Peripheral Access Layer
S * @{
S */
S
S/** GPIO - Register Layout Typedef */
Stypedef struct {
S  __IO uint32_t PDOR;                              /**< Port Data Output Register, offset: 0x0 */
S  __O  uint32_t PSOR;                              /**< Port Set Output Register, offset: 0x4 */
S  __O  uint32_t PCOR;                              /**< Port Clear Output Register, offset: 0x8 */
S  __O  uint32_t PTOR;                              /**< Port Toggle Output Register, offset: 0xC */
S  __I  uint32_t PDIR;                              /**< Port Data Input Register, offset: 0x10 */
S  __IO uint32_t PDDR;                              /**< Port Data Direction Register, offset: 0x14 */
S} GPIO_Type, *GPIO_MemMapPtr;
S
S/* ----------------------------------------------------------------------------
S   -- GPIO - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup GPIO_Register_Accessor_Macros GPIO - Register accessor macros
S * @{
S */
S
S
S/* GPIO - Register accessors */
S#define GPIO_PDOR_REG(base)                      ((base)->PDOR)
S#define GPIO_PSOR_REG(base)                      ((base)->PSOR)
S#define GPIO_PCOR_REG(base)                      ((base)->PCOR)
S#define GPIO_PTOR_REG(base)                      ((base)->PTOR)
S#define GPIO_PDIR_REG(base)                      ((base)->PDIR)
S#define GPIO_PDDR_REG(base)                      ((base)->PDDR)
S
S/*!
S * @}
S */ /* end of group GPIO_Register_Accessor_Macros */
S
S
S/* ----------------------------------------------------------------------------
S   -- GPIO Register Masks
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup GPIO_Register_Masks GPIO Register Masks
S * @{
S */
S
S/* PDOR Bit Fields */
S#define GPIO_PDOR_PDO_MASK                       0xFFFFFFFFu
S#define GPIO_PDOR_PDO_SHIFT                      0
S#define GPIO_PDOR_PDO_WIDTH                      32
S#define GPIO_PDOR_PDO(x)                         (((uint32_t)(((uint32_t)(x))<<GPIO_PDOR_PDO_SHIFT))&GPIO_PDOR_PDO_MASK)
S/* PSOR Bit Fields */
S#define GPIO_PSOR_PTSO_MASK                      0xFFFFFFFFu
S#define GPIO_PSOR_PTSO_SHIFT                     0
S#define GPIO_PSOR_PTSO_WIDTH                     32
S#define GPIO_PSOR_PTSO(x)                        (((uint32_t)(((uint32_t)(x))<<GPIO_PSOR_PTSO_SHIFT))&GPIO_PSOR_PTSO_MASK)
S/* PCOR Bit Fields */
S#define GPIO_PCOR_PTCO_MASK                      0xFFFFFFFFu
S#define GPIO_PCOR_PTCO_SHIFT                     0
S#define GPIO_PCOR_PTCO_WIDTH                     32
S#define GPIO_PCOR_PTCO(x)                        (((uint32_t)(((uint32_t)(x))<<GPIO_PCOR_PTCO_SHIFT))&GPIO_PCOR_PTCO_MASK)
S/* PTOR Bit Fields */
S#define GPIO_PTOR_PTTO_MASK                      0xFFFFFFFFu
S#define GPIO_PTOR_PTTO_SHIFT                     0
S#define GPIO_PTOR_PTTO_WIDTH                     32
S#define GPIO_PTOR_PTTO(x)                        (((uint32_t)(((uint32_t)(x))<<GPIO_PTOR_PTTO_SHIFT))&GPIO_PTOR_PTTO_MASK)
S/* PDIR Bit Fields */
S#define GPIO_PDIR_PDI_MASK                       0xFFFFFFFFu
S#define GPIO_PDIR_PDI_SHIFT                      0
S#define GPIO_PDIR_PDI_WIDTH                      32
S#define GPIO_PDIR_PDI(x)                         (((uint32_t)(((uint32_t)(x))<<GPIO_PDIR_PDI_SHIFT))&GPIO_PDIR_PDI_MASK)
S/* PDDR Bit Fields */
S#define GPIO_PDDR_PDD_MASK                       0xFFFFFFFFu
S#define GPIO_PDDR_PDD_SHIFT                      0
S#define GPIO_PDDR_PDD_WIDTH                      32
S#define GPIO_PDDR_PDD(x)                         (((uint32_t)(((uint32_t)(x))<<GPIO_PDDR_PDD_SHIFT))&GPIO_PDDR_PDD_MASK)
S
S/*!
S * @}
S */ /* end of group GPIO_Register_Masks */
S
S
S/* GPIO - Peripheral instance base addresses */
S/** Peripheral GPIOA base address */
S#define GPIOA_BASE                               (0x400FF000u)
S/** Peripheral GPIOA base pointer */
S#define GPIOA                                    ((GPIO_Type *)GPIOA_BASE)
S#define GPIOA_BASE_PTR                           (GPIOA)
S/** Peripheral GPIOB base address */
S#define GPIOB_BASE                               (0x400FF040u)
S/** Peripheral GPIOB base pointer */
S#define GPIOB                                    ((GPIO_Type *)GPIOB_BASE)
S#define GPIOB_BASE_PTR                           (GPIOB)
S/** Peripheral GPIOC base address */
S#define GPIOC_BASE                               (0x400FF080u)
S/** Peripheral GPIOC base pointer */
S#define GPIOC                                    ((GPIO_Type *)GPIOC_BASE)
S#define GPIOC_BASE_PTR                           (GPIOC)
S/** Peripheral GPIOD base address */
S#define GPIOD_BASE                               (0x400FF0C0u)
S/** Peripheral GPIOD base pointer */
S#define GPIOD                                    ((GPIO_Type *)GPIOD_BASE)
S#define GPIOD_BASE_PTR                           (GPIOD)
S/** Peripheral GPIOE base address */
S#define GPIOE_BASE                               (0x400FF100u)
S/** Peripheral GPIOE base pointer */
S#define GPIOE                                    ((GPIO_Type *)GPIOE_BASE)
S#define GPIOE_BASE_PTR                           (GPIOE)
S/** Array initializer of GPIO peripheral base addresses */
S#define GPIO_BASE_ADDRS                          { GPIOA_BASE, GPIOB_BASE, GPIOC_BASE, GPIOD_BASE, GPIOE_BASE }
S/** Array initializer of GPIO peripheral base pointers */
S#define GPIO_BASE_PTRS                           { GPIOA, GPIOB, GPIOC, GPIOD, GPIOE }
S
S/* ----------------------------------------------------------------------------
S   -- GPIO - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup GPIO_Register_Accessor_Macros GPIO - Register accessor macros
S * @{
S */
S
S
S/* GPIO - Register instance definitions */
S/* GPIOA */
S#define GPIOA_PDOR                               GPIO_PDOR_REG(GPIOA)
S#define GPIOA_PSOR                               GPIO_PSOR_REG(GPIOA)
S#define GPIOA_PCOR                               GPIO_PCOR_REG(GPIOA)
S#define GPIOA_PTOR                               GPIO_PTOR_REG(GPIOA)
S#define GPIOA_PDIR                               GPIO_PDIR_REG(GPIOA)
S#define GPIOA_PDDR                               GPIO_PDDR_REG(GPIOA)
S/* GPIOB */
S#define GPIOB_PDOR                               GPIO_PDOR_REG(GPIOB)
S#define GPIOB_PSOR                               GPIO_PSOR_REG(GPIOB)
S#define GPIOB_PCOR                               GPIO_PCOR_REG(GPIOB)
S#define GPIOB_PTOR                               GPIO_PTOR_REG(GPIOB)
S#define GPIOB_PDIR                               GPIO_PDIR_REG(GPIOB)
S#define GPIOB_PDDR                               GPIO_PDDR_REG(GPIOB)
S/* GPIOC */
S#define GPIOC_PDOR                               GPIO_PDOR_REG(GPIOC)
S#define GPIOC_PSOR                               GPIO_PSOR_REG(GPIOC)
S#define GPIOC_PCOR                               GPIO_PCOR_REG(GPIOC)
S#define GPIOC_PTOR                               GPIO_PTOR_REG(GPIOC)
S#define GPIOC_PDIR                               GPIO_PDIR_REG(GPIOC)
S#define GPIOC_PDDR                               GPIO_PDDR_REG(GPIOC)
S/* GPIOD */
S#define GPIOD_PDOR                               GPIO_PDOR_REG(GPIOD)
S#define GPIOD_PSOR                               GPIO_PSOR_REG(GPIOD)
S#define GPIOD_PCOR                               GPIO_PCOR_REG(GPIOD)
S#define GPIOD_PTOR                               GPIO_PTOR_REG(GPIOD)
S#define GPIOD_PDIR                               GPIO_PDIR_REG(GPIOD)
S#define GPIOD_PDDR                               GPIO_PDDR_REG(GPIOD)
S/* GPIOE */
S#define GPIOE_PDOR                               GPIO_PDOR_REG(GPIOE)
S#define GPIOE_PSOR                               GPIO_PSOR_REG(GPIOE)
S#define GPIOE_PCOR                               GPIO_PCOR_REG(GPIOE)
S#define GPIOE_PTOR                               GPIO_PTOR_REG(GPIOE)
S#define GPIOE_PDIR                               GPIO_PDIR_REG(GPIOE)
S#define GPIOE_PDDR                               GPIO_PDDR_REG(GPIOE)
S
S/*!
S * @}
S */ /* end of group GPIO_Register_Accessor_Macros */
S
S
S/*!
S * @}
S */ /* end of group GPIO_Peripheral_Access_Layer */
S
S
S/* ----------------------------------------------------------------------------
S   -- I2C Peripheral Access Layer
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup I2C_Peripheral_Access_Layer I2C Peripheral Access Layer
S * @{
S */
S
S/** I2C - Register Layout Typedef */
Stypedef struct {
S  __IO uint8_t A1;                                 /**< I2C Address Register 1, offset: 0x0 */
S  __IO uint8_t F;                                  /**< I2C Frequency Divider register, offset: 0x1 */
S  __IO uint8_t C1;                                 /**< I2C Control Register 1, offset: 0x2 */
S  __IO uint8_t S;                                  /**< I2C Status register, offset: 0x3 */
S  __IO uint8_t D;                                  /**< I2C Data I/O register, offset: 0x4 */
S  __IO uint8_t C2;                                 /**< I2C Control Register 2, offset: 0x5 */
S  __IO uint8_t FLT;                                /**< I2C Programmable Input Glitch Filter register, offset: 0x6 */
S  __IO uint8_t RA;                                 /**< I2C Range Address register, offset: 0x7 */
S  __IO uint8_t SMB;                                /**< I2C SMBus Control and Status register, offset: 0x8 */
S  __IO uint8_t A2;                                 /**< I2C Address Register 2, offset: 0x9 */
S  __IO uint8_t SLTH;                               /**< I2C SCL Low Timeout Register High, offset: 0xA */
S  __IO uint8_t SLTL;                               /**< I2C SCL Low Timeout Register Low, offset: 0xB */
S} I2C_Type, *I2C_MemMapPtr;
S
S/* ----------------------------------------------------------------------------
S   -- I2C - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup I2C_Register_Accessor_Macros I2C - Register accessor macros
S * @{
S */
S
S
S/* I2C - Register accessors */
S#define I2C_A1_REG(base)                         ((base)->A1)
S#define I2C_F_REG(base)                          ((base)->F)
S#define I2C_C1_REG(base)                         ((base)->C1)
S#define I2C_S_REG(base)                          ((base)->S)
S#define I2C_D_REG(base)                          ((base)->D)
S#define I2C_C2_REG(base)                         ((base)->C2)
S#define I2C_FLT_REG(base)                        ((base)->FLT)
S#define I2C_RA_REG(base)                         ((base)->RA)
S#define I2C_SMB_REG(base)                        ((base)->SMB)
S#define I2C_A2_REG(base)                         ((base)->A2)
S#define I2C_SLTH_REG(base)                       ((base)->SLTH)
S#define I2C_SLTL_REG(base)                       ((base)->SLTL)
S
S/*!
S * @}
S */ /* end of group I2C_Register_Accessor_Macros */
S
S
S/* ----------------------------------------------------------------------------
S   -- I2C Register Masks
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup I2C_Register_Masks I2C Register Masks
S * @{
S */
S
S/* A1 Bit Fields */
S#define I2C_A1_AD_MASK                           0xFEu
S#define I2C_A1_AD_SHIFT                          1
S#define I2C_A1_AD_WIDTH                          7
S#define I2C_A1_AD(x)                             (((uint8_t)(((uint8_t)(x))<<I2C_A1_AD_SHIFT))&I2C_A1_AD_MASK)
S/* F Bit Fields */
S#define I2C_F_ICR_MASK                           0x3Fu
S#define I2C_F_ICR_SHIFT                          0
S#define I2C_F_ICR_WIDTH                          6
S#define I2C_F_ICR(x)                             (((uint8_t)(((uint8_t)(x))<<I2C_F_ICR_SHIFT))&I2C_F_ICR_MASK)
S#define I2C_F_MULT_MASK                          0xC0u
S#define I2C_F_MULT_SHIFT                         6
S#define I2C_F_MULT_WIDTH                         2
S#define I2C_F_MULT(x)                            (((uint8_t)(((uint8_t)(x))<<I2C_F_MULT_SHIFT))&I2C_F_MULT_MASK)
S/* C1 Bit Fields */
S#define I2C_C1_DMAEN_MASK                        0x1u
S#define I2C_C1_DMAEN_SHIFT                       0
S#define I2C_C1_DMAEN_WIDTH                       1
S#define I2C_C1_DMAEN(x)                          (((uint8_t)(((uint8_t)(x))<<I2C_C1_DMAEN_SHIFT))&I2C_C1_DMAEN_MASK)
S#define I2C_C1_WUEN_MASK                         0x2u
S#define I2C_C1_WUEN_SHIFT                        1
S#define I2C_C1_WUEN_WIDTH                        1
S#define I2C_C1_WUEN(x)                           (((uint8_t)(((uint8_t)(x))<<I2C_C1_WUEN_SHIFT))&I2C_C1_WUEN_MASK)
S#define I2C_C1_RSTA_MASK                         0x4u
S#define I2C_C1_RSTA_SHIFT                        2
S#define I2C_C1_RSTA_WIDTH                        1
S#define I2C_C1_RSTA(x)                           (((uint8_t)(((uint8_t)(x))<<I2C_C1_RSTA_SHIFT))&I2C_C1_RSTA_MASK)
S#define I2C_C1_TXAK_MASK                         0x8u
S#define I2C_C1_TXAK_SHIFT                        3
S#define I2C_C1_TXAK_WIDTH                        1
S#define I2C_C1_TXAK(x)                           (((uint8_t)(((uint8_t)(x))<<I2C_C1_TXAK_SHIFT))&I2C_C1_TXAK_MASK)
S#define I2C_C1_TX_MASK                           0x10u
S#define I2C_C1_TX_SHIFT                          4
S#define I2C_C1_TX_WIDTH                          1
S#define I2C_C1_TX(x)                             (((uint8_t)(((uint8_t)(x))<<I2C_C1_TX_SHIFT))&I2C_C1_TX_MASK)
S#define I2C_C1_MST_MASK                          0x20u
S#define I2C_C1_MST_SHIFT                         5
S#define I2C_C1_MST_WIDTH                         1
S#define I2C_C1_MST(x)                            (((uint8_t)(((uint8_t)(x))<<I2C_C1_MST_SHIFT))&I2C_C1_MST_MASK)
S#define I2C_C1_IICIE_MASK                        0x40u
S#define I2C_C1_IICIE_SHIFT                       6
S#define I2C_C1_IICIE_WIDTH                       1
S#define I2C_C1_IICIE(x)                          (((uint8_t)(((uint8_t)(x))<<I2C_C1_IICIE_SHIFT))&I2C_C1_IICIE_MASK)
S#define I2C_C1_IICEN_MASK                        0x80u
S#define I2C_C1_IICEN_SHIFT                       7
S#define I2C_C1_IICEN_WIDTH                       1
S#define I2C_C1_IICEN(x)                          (((uint8_t)(((uint8_t)(x))<<I2C_C1_IICEN_SHIFT))&I2C_C1_IICEN_MASK)
S/* S Bit Fields */
S#define I2C_S_RXAK_MASK                          0x1u
S#define I2C_S_RXAK_SHIFT                         0
S#define I2C_S_RXAK_WIDTH                         1
S#define I2C_S_RXAK(x)                            (((uint8_t)(((uint8_t)(x))<<I2C_S_RXAK_SHIFT))&I2C_S_RXAK_MASK)
S#define I2C_S_IICIF_MASK                         0x2u
S#define I2C_S_IICIF_SHIFT                        1
S#define I2C_S_IICIF_WIDTH                        1
S#define I2C_S_IICIF(x)                           (((uint8_t)(((uint8_t)(x))<<I2C_S_IICIF_SHIFT))&I2C_S_IICIF_MASK)
S#define I2C_S_SRW_MASK                           0x4u
S#define I2C_S_SRW_SHIFT                          2
S#define I2C_S_SRW_WIDTH                          1
S#define I2C_S_SRW(x)                             (((uint8_t)(((uint8_t)(x))<<I2C_S_SRW_SHIFT))&I2C_S_SRW_MASK)
S#define I2C_S_RAM_MASK                           0x8u
S#define I2C_S_RAM_SHIFT                          3
S#define I2C_S_RAM_WIDTH                          1
S#define I2C_S_RAM(x)                             (((uint8_t)(((uint8_t)(x))<<I2C_S_RAM_SHIFT))&I2C_S_RAM_MASK)
S#define I2C_S_ARBL_MASK                          0x10u
S#define I2C_S_ARBL_SHIFT                         4
S#define I2C_S_ARBL_WIDTH                         1
S#define I2C_S_ARBL(x)                            (((uint8_t)(((uint8_t)(x))<<I2C_S_ARBL_SHIFT))&I2C_S_ARBL_MASK)
S#define I2C_S_BUSY_MASK                          0x20u
S#define I2C_S_BUSY_SHIFT                         5
S#define I2C_S_BUSY_WIDTH                         1
S#define I2C_S_BUSY(x)                            (((uint8_t)(((uint8_t)(x))<<I2C_S_BUSY_SHIFT))&I2C_S_BUSY_MASK)
S#define I2C_S_IAAS_MASK                          0x40u
S#define I2C_S_IAAS_SHIFT                         6
S#define I2C_S_IAAS_WIDTH                         1
S#define I2C_S_IAAS(x)                            (((uint8_t)(((uint8_t)(x))<<I2C_S_IAAS_SHIFT))&I2C_S_IAAS_MASK)
S#define I2C_S_TCF_MASK                           0x80u
S#define I2C_S_TCF_SHIFT                          7
S#define I2C_S_TCF_WIDTH                          1
S#define I2C_S_TCF(x)                             (((uint8_t)(((uint8_t)(x))<<I2C_S_TCF_SHIFT))&I2C_S_TCF_MASK)
S/* D Bit Fields */
S#define I2C_D_DATA_MASK                          0xFFu
S#define I2C_D_DATA_SHIFT                         0
S#define I2C_D_DATA_WIDTH                         8
S#define I2C_D_DATA(x)                            (((uint8_t)(((uint8_t)(x))<<I2C_D_DATA_SHIFT))&I2C_D_DATA_MASK)
S/* C2 Bit Fields */
S#define I2C_C2_AD_MASK                           0x7u
S#define I2C_C2_AD_SHIFT                          0
S#define I2C_C2_AD_WIDTH                          3
S#define I2C_C2_AD(x)                             (((uint8_t)(((uint8_t)(x))<<I2C_C2_AD_SHIFT))&I2C_C2_AD_MASK)
S#define I2C_C2_RMEN_MASK                         0x8u
S#define I2C_C2_RMEN_SHIFT                        3
S#define I2C_C2_RMEN_WIDTH                        1
S#define I2C_C2_RMEN(x)                           (((uint8_t)(((uint8_t)(x))<<I2C_C2_RMEN_SHIFT))&I2C_C2_RMEN_MASK)
S#define I2C_C2_SBRC_MASK                         0x10u
S#define I2C_C2_SBRC_SHIFT                        4
S#define I2C_C2_SBRC_WIDTH                        1
S#define I2C_C2_SBRC(x)                           (((uint8_t)(((uint8_t)(x))<<I2C_C2_SBRC_SHIFT))&I2C_C2_SBRC_MASK)
S#define I2C_C2_HDRS_MASK                         0x20u
S#define I2C_C2_HDRS_SHIFT                        5
S#define I2C_C2_HDRS_WIDTH                        1
S#define I2C_C2_HDRS(x)                           (((uint8_t)(((uint8_t)(x))<<I2C_C2_HDRS_SHIFT))&I2C_C2_HDRS_MASK)
S#define I2C_C2_ADEXT_MASK                        0x40u
S#define I2C_C2_ADEXT_SHIFT                       6
S#define I2C_C2_ADEXT_WIDTH                       1
S#define I2C_C2_ADEXT(x)                          (((uint8_t)(((uint8_t)(x))<<I2C_C2_ADEXT_SHIFT))&I2C_C2_ADEXT_MASK)
S#define I2C_C2_GCAEN_MASK                        0x80u
S#define I2C_C2_GCAEN_SHIFT                       7
S#define I2C_C2_GCAEN_WIDTH                       1
S#define I2C_C2_GCAEN(x)                          (((uint8_t)(((uint8_t)(x))<<I2C_C2_GCAEN_SHIFT))&I2C_C2_GCAEN_MASK)
S/* FLT Bit Fields */
S#define I2C_FLT_FLT_MASK                         0x1Fu
S#define I2C_FLT_FLT_SHIFT                        0
S#define I2C_FLT_FLT_WIDTH                        5
S#define I2C_FLT_FLT(x)                           (((uint8_t)(((uint8_t)(x))<<I2C_FLT_FLT_SHIFT))&I2C_FLT_FLT_MASK)
S#define I2C_FLT_STOPIE_MASK                      0x20u
S#define I2C_FLT_STOPIE_SHIFT                     5
S#define I2C_FLT_STOPIE_WIDTH                     1
S#define I2C_FLT_STOPIE(x)                        (((uint8_t)(((uint8_t)(x))<<I2C_FLT_STOPIE_SHIFT))&I2C_FLT_STOPIE_MASK)
S#define I2C_FLT_STOPF_MASK                       0x40u
S#define I2C_FLT_STOPF_SHIFT                      6
S#define I2C_FLT_STOPF_WIDTH                      1
S#define I2C_FLT_STOPF(x)                         (((uint8_t)(((uint8_t)(x))<<I2C_FLT_STOPF_SHIFT))&I2C_FLT_STOPF_MASK)
S#define I2C_FLT_SHEN_MASK                        0x80u
S#define I2C_FLT_SHEN_SHIFT                       7
S#define I2C_FLT_SHEN_WIDTH                       1
S#define I2C_FLT_SHEN(x)                          (((uint8_t)(((uint8_t)(x))<<I2C_FLT_SHEN_SHIFT))&I2C_FLT_SHEN_MASK)
S/* RA Bit Fields */
S#define I2C_RA_RAD_MASK                          0xFEu
S#define I2C_RA_RAD_SHIFT                         1
S#define I2C_RA_RAD_WIDTH                         7
S#define I2C_RA_RAD(x)                            (((uint8_t)(((uint8_t)(x))<<I2C_RA_RAD_SHIFT))&I2C_RA_RAD_MASK)
S/* SMB Bit Fields */
S#define I2C_SMB_SHTF2IE_MASK                     0x1u
S#define I2C_SMB_SHTF2IE_SHIFT                    0
S#define I2C_SMB_SHTF2IE_WIDTH                    1
S#define I2C_SMB_SHTF2IE(x)                       (((uint8_t)(((uint8_t)(x))<<I2C_SMB_SHTF2IE_SHIFT))&I2C_SMB_SHTF2IE_MASK)
S#define I2C_SMB_SHTF2_MASK                       0x2u
S#define I2C_SMB_SHTF2_SHIFT                      1
S#define I2C_SMB_SHTF2_WIDTH                      1
S#define I2C_SMB_SHTF2(x)                         (((uint8_t)(((uint8_t)(x))<<I2C_SMB_SHTF2_SHIFT))&I2C_SMB_SHTF2_MASK)
S#define I2C_SMB_SHTF1_MASK                       0x4u
S#define I2C_SMB_SHTF1_SHIFT                      2
S#define I2C_SMB_SHTF1_WIDTH                      1
S#define I2C_SMB_SHTF1(x)                         (((uint8_t)(((uint8_t)(x))<<I2C_SMB_SHTF1_SHIFT))&I2C_SMB_SHTF1_MASK)
S#define I2C_SMB_SLTF_MASK                        0x8u
S#define I2C_SMB_SLTF_SHIFT                       3
S#define I2C_SMB_SLTF_WIDTH                       1
S#define I2C_SMB_SLTF(x)                          (((uint8_t)(((uint8_t)(x))<<I2C_SMB_SLTF_SHIFT))&I2C_SMB_SLTF_MASK)
S#define I2C_SMB_TCKSEL_MASK                      0x10u
S#define I2C_SMB_TCKSEL_SHIFT                     4
S#define I2C_SMB_TCKSEL_WIDTH                     1
S#define I2C_SMB_TCKSEL(x)                        (((uint8_t)(((uint8_t)(x))<<I2C_SMB_TCKSEL_SHIFT))&I2C_SMB_TCKSEL_MASK)
S#define I2C_SMB_SIICAEN_MASK                     0x20u
S#define I2C_SMB_SIICAEN_SHIFT                    5
S#define I2C_SMB_SIICAEN_WIDTH                    1
S#define I2C_SMB_SIICAEN(x)                       (((uint8_t)(((uint8_t)(x))<<I2C_SMB_SIICAEN_SHIFT))&I2C_SMB_SIICAEN_MASK)
S#define I2C_SMB_ALERTEN_MASK                     0x40u
S#define I2C_SMB_ALERTEN_SHIFT                    6
S#define I2C_SMB_ALERTEN_WIDTH                    1
S#define I2C_SMB_ALERTEN(x)                       (((uint8_t)(((uint8_t)(x))<<I2C_SMB_ALERTEN_SHIFT))&I2C_SMB_ALERTEN_MASK)
S#define I2C_SMB_FACK_MASK                        0x80u
S#define I2C_SMB_FACK_SHIFT                       7
S#define I2C_SMB_FACK_WIDTH                       1
S#define I2C_SMB_FACK(x)                          (((uint8_t)(((uint8_t)(x))<<I2C_SMB_FACK_SHIFT))&I2C_SMB_FACK_MASK)
S/* A2 Bit Fields */
S#define I2C_A2_SAD_MASK                          0xFEu
S#define I2C_A2_SAD_SHIFT                         1
S#define I2C_A2_SAD_WIDTH                         7
S#define I2C_A2_SAD(x)                            (((uint8_t)(((uint8_t)(x))<<I2C_A2_SAD_SHIFT))&I2C_A2_SAD_MASK)
S/* SLTH Bit Fields */
S#define I2C_SLTH_SSLT_MASK                       0xFFu
S#define I2C_SLTH_SSLT_SHIFT                      0
S#define I2C_SLTH_SSLT_WIDTH                      8
S#define I2C_SLTH_SSLT(x)                         (((uint8_t)(((uint8_t)(x))<<I2C_SLTH_SSLT_SHIFT))&I2C_SLTH_SSLT_MASK)
S/* SLTL Bit Fields */
S#define I2C_SLTL_SSLT_MASK                       0xFFu
S#define I2C_SLTL_SSLT_SHIFT                      0
S#define I2C_SLTL_SSLT_WIDTH                      8
S#define I2C_SLTL_SSLT(x)                         (((uint8_t)(((uint8_t)(x))<<I2C_SLTL_SSLT_SHIFT))&I2C_SLTL_SSLT_MASK)
S
S/*!
S * @}
S */ /* end of group I2C_Register_Masks */
S
S
S/* I2C - Peripheral instance base addresses */
S/** Peripheral I2C0 base address */
S#define I2C0_BASE                                (0x40066000u)
S/** Peripheral I2C0 base pointer */
S#define I2C0                                     ((I2C_Type *)I2C0_BASE)
S#define I2C0_BASE_PTR                            (I2C0)
S/** Peripheral I2C1 base address */
S#define I2C1_BASE                                (0x40067000u)
S/** Peripheral I2C1 base pointer */
S#define I2C1                                     ((I2C_Type *)I2C1_BASE)
S#define I2C1_BASE_PTR                            (I2C1)
S/** Array initializer of I2C peripheral base addresses */
S#define I2C_BASE_ADDRS                           { I2C0_BASE, I2C1_BASE }
S/** Array initializer of I2C peripheral base pointers */
S#define I2C_BASE_PTRS                            { I2C0, I2C1 }
S/** Interrupt vectors for the I2C peripheral type */
S#define I2C_IRQS                                 { I2C0_IRQn, I2C1_IRQn }
S
S/* ----------------------------------------------------------------------------
S   -- I2C - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup I2C_Register_Accessor_Macros I2C - Register accessor macros
S * @{
S */
S
S
S/* I2C - Register instance definitions */
S/* I2C0 */
S#define I2C0_A1                                  I2C_A1_REG(I2C0)
S#define I2C0_F                                   I2C_F_REG(I2C0)
S#define I2C0_C1                                  I2C_C1_REG(I2C0)
S#define I2C0_S                                   I2C_S_REG(I2C0)
S#define I2C0_D                                   I2C_D_REG(I2C0)
S#define I2C0_C2                                  I2C_C2_REG(I2C0)
S#define I2C0_FLT                                 I2C_FLT_REG(I2C0)
S#define I2C0_RA                                  I2C_RA_REG(I2C0)
S#define I2C0_SMB                                 I2C_SMB_REG(I2C0)
S#define I2C0_A2                                  I2C_A2_REG(I2C0)
S#define I2C0_SLTH                                I2C_SLTH_REG(I2C0)
S#define I2C0_SLTL                                I2C_SLTL_REG(I2C0)
S/* I2C1 */
S#define I2C1_A1                                  I2C_A1_REG(I2C1)
S#define I2C1_F                                   I2C_F_REG(I2C1)
S#define I2C1_C1                                  I2C_C1_REG(I2C1)
S#define I2C1_S                                   I2C_S_REG(I2C1)
S#define I2C1_D                                   I2C_D_REG(I2C1)
S#define I2C1_C2                                  I2C_C2_REG(I2C1)
S#define I2C1_FLT                                 I2C_FLT_REG(I2C1)
S#define I2C1_RA                                  I2C_RA_REG(I2C1)
S#define I2C1_SMB                                 I2C_SMB_REG(I2C1)
S#define I2C1_A2                                  I2C_A2_REG(I2C1)
S#define I2C1_SLTH                                I2C_SLTH_REG(I2C1)
S#define I2C1_SLTL                                I2C_SLTL_REG(I2C1)
S
S/*!
S * @}
S */ /* end of group I2C_Register_Accessor_Macros */
S
S
S/*!
S * @}
S */ /* end of group I2C_Peripheral_Access_Layer */
S
S
S/* ----------------------------------------------------------------------------
S   -- LLWU Peripheral Access Layer
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup LLWU_Peripheral_Access_Layer LLWU Peripheral Access Layer
S * @{
S */
S
S/** LLWU - Register Layout Typedef */
Stypedef struct {
S  __IO uint8_t PE1;                                /**< LLWU Pin Enable 1 register, offset: 0x0 */
S  __IO uint8_t PE2;                                /**< LLWU Pin Enable 2 register, offset: 0x1 */
S  __IO uint8_t PE3;                                /**< LLWU Pin Enable 3 register, offset: 0x2 */
S  __IO uint8_t PE4;                                /**< LLWU Pin Enable 4 register, offset: 0x3 */
S  __IO uint8_t ME;                                 /**< LLWU Module Enable register, offset: 0x4 */
S  __IO uint8_t F1;                                 /**< LLWU Flag 1 register, offset: 0x5 */
S  __IO uint8_t F2;                                 /**< LLWU Flag 2 register, offset: 0x6 */
S  __I  uint8_t F3;                                 /**< LLWU Flag 3 register, offset: 0x7 */
S  __IO uint8_t FILT1;                              /**< LLWU Pin Filter 1 register, offset: 0x8 */
S  __IO uint8_t FILT2;                              /**< LLWU Pin Filter 2 register, offset: 0x9 */
S} LLWU_Type, *LLWU_MemMapPtr;
S
S/* ----------------------------------------------------------------------------
S   -- LLWU - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup LLWU_Register_Accessor_Macros LLWU - Register accessor macros
S * @{
S */
S
S
S/* LLWU - Register accessors */
S#define LLWU_PE1_REG(base)                       ((base)->PE1)
S#define LLWU_PE2_REG(base)                       ((base)->PE2)
S#define LLWU_PE3_REG(base)                       ((base)->PE3)
S#define LLWU_PE4_REG(base)                       ((base)->PE4)
S#define LLWU_ME_REG(base)                        ((base)->ME)
S#define LLWU_F1_REG(base)                        ((base)->F1)
S#define LLWU_F2_REG(base)                        ((base)->F2)
S#define LLWU_F3_REG(base)                        ((base)->F3)
S#define LLWU_FILT1_REG(base)                     ((base)->FILT1)
S#define LLWU_FILT2_REG(base)                     ((base)->FILT2)
S
S/*!
S * @}
S */ /* end of group LLWU_Register_Accessor_Macros */
S
S
S/* ----------------------------------------------------------------------------
S   -- LLWU Register Masks
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup LLWU_Register_Masks LLWU Register Masks
S * @{
S */
S
S/* PE1 Bit Fields */
S#define LLWU_PE1_WUPE0_MASK                      0x3u
S#define LLWU_PE1_WUPE0_SHIFT                     0
S#define LLWU_PE1_WUPE0_WIDTH                     2
S#define LLWU_PE1_WUPE0(x)                        (((uint8_t)(((uint8_t)(x))<<LLWU_PE1_WUPE0_SHIFT))&LLWU_PE1_WUPE0_MASK)
S#define LLWU_PE1_WUPE1_MASK                      0xCu
S#define LLWU_PE1_WUPE1_SHIFT                     2
S#define LLWU_PE1_WUPE1_WIDTH                     2
S#define LLWU_PE1_WUPE1(x)                        (((uint8_t)(((uint8_t)(x))<<LLWU_PE1_WUPE1_SHIFT))&LLWU_PE1_WUPE1_MASK)
S#define LLWU_PE1_WUPE2_MASK                      0x30u
S#define LLWU_PE1_WUPE2_SHIFT                     4
S#define LLWU_PE1_WUPE2_WIDTH                     2
S#define LLWU_PE1_WUPE2(x)                        (((uint8_t)(((uint8_t)(x))<<LLWU_PE1_WUPE2_SHIFT))&LLWU_PE1_WUPE2_MASK)
S#define LLWU_PE1_WUPE3_MASK                      0xC0u
S#define LLWU_PE1_WUPE3_SHIFT                     6
S#define LLWU_PE1_WUPE3_WIDTH                     2
S#define LLWU_PE1_WUPE3(x)                        (((uint8_t)(((uint8_t)(x))<<LLWU_PE1_WUPE3_SHIFT))&LLWU_PE1_WUPE3_MASK)
S/* PE2 Bit Fields */
S#define LLWU_PE2_WUPE4_MASK                      0x3u
S#define LLWU_PE2_WUPE4_SHIFT                     0
S#define LLWU_PE2_WUPE4_WIDTH                     2
S#define LLWU_PE2_WUPE4(x)                        (((uint8_t)(((uint8_t)(x))<<LLWU_PE2_WUPE4_SHIFT))&LLWU_PE2_WUPE4_MASK)
S#define LLWU_PE2_WUPE5_MASK                      0xCu
S#define LLWU_PE2_WUPE5_SHIFT                     2
S#define LLWU_PE2_WUPE5_WIDTH                     2
S#define LLWU_PE2_WUPE5(x)                        (((uint8_t)(((uint8_t)(x))<<LLWU_PE2_WUPE5_SHIFT))&LLWU_PE2_WUPE5_MASK)
S#define LLWU_PE2_WUPE6_MASK                      0x30u
S#define LLWU_PE2_WUPE6_SHIFT                     4
S#define LLWU_PE2_WUPE6_WIDTH                     2
S#define LLWU_PE2_WUPE6(x)                        (((uint8_t)(((uint8_t)(x))<<LLWU_PE2_WUPE6_SHIFT))&LLWU_PE2_WUPE6_MASK)
S#define LLWU_PE2_WUPE7_MASK                      0xC0u
S#define LLWU_PE2_WUPE7_SHIFT                     6
S#define LLWU_PE2_WUPE7_WIDTH                     2
S#define LLWU_PE2_WUPE7(x)                        (((uint8_t)(((uint8_t)(x))<<LLWU_PE2_WUPE7_SHIFT))&LLWU_PE2_WUPE7_MASK)
S/* PE3 Bit Fields */
S#define LLWU_PE3_WUPE8_MASK                      0x3u
S#define LLWU_PE3_WUPE8_SHIFT                     0
S#define LLWU_PE3_WUPE8_WIDTH                     2
S#define LLWU_PE3_WUPE8(x)                        (((uint8_t)(((uint8_t)(x))<<LLWU_PE3_WUPE8_SHIFT))&LLWU_PE3_WUPE8_MASK)
S#define LLWU_PE3_WUPE9_MASK                      0xCu
S#define LLWU_PE3_WUPE9_SHIFT                     2
S#define LLWU_PE3_WUPE9_WIDTH                     2
S#define LLWU_PE3_WUPE9(x)                        (((uint8_t)(((uint8_t)(x))<<LLWU_PE3_WUPE9_SHIFT))&LLWU_PE3_WUPE9_MASK)
S#define LLWU_PE3_WUPE10_MASK                     0x30u
S#define LLWU_PE3_WUPE10_SHIFT                    4
S#define LLWU_PE3_WUPE10_WIDTH                    2
S#define LLWU_PE3_WUPE10(x)                       (((uint8_t)(((uint8_t)(x))<<LLWU_PE3_WUPE10_SHIFT))&LLWU_PE3_WUPE10_MASK)
S#define LLWU_PE3_WUPE11_MASK                     0xC0u
S#define LLWU_PE3_WUPE11_SHIFT                    6
S#define LLWU_PE3_WUPE11_WIDTH                    2
S#define LLWU_PE3_WUPE11(x)                       (((uint8_t)(((uint8_t)(x))<<LLWU_PE3_WUPE11_SHIFT))&LLWU_PE3_WUPE11_MASK)
S/* PE4 Bit Fields */
S#define LLWU_PE4_WUPE12_MASK                     0x3u
S#define LLWU_PE4_WUPE12_SHIFT                    0
S#define LLWU_PE4_WUPE12_WIDTH                    2
S#define LLWU_PE4_WUPE12(x)                       (((uint8_t)(((uint8_t)(x))<<LLWU_PE4_WUPE12_SHIFT))&LLWU_PE4_WUPE12_MASK)
S#define LLWU_PE4_WUPE13_MASK                     0xCu
S#define LLWU_PE4_WUPE13_SHIFT                    2
S#define LLWU_PE4_WUPE13_WIDTH                    2
S#define LLWU_PE4_WUPE13(x)                       (((uint8_t)(((uint8_t)(x))<<LLWU_PE4_WUPE13_SHIFT))&LLWU_PE4_WUPE13_MASK)
S#define LLWU_PE4_WUPE14_MASK                     0x30u
S#define LLWU_PE4_WUPE14_SHIFT                    4
S#define LLWU_PE4_WUPE14_WIDTH                    2
S#define LLWU_PE4_WUPE14(x)                       (((uint8_t)(((uint8_t)(x))<<LLWU_PE4_WUPE14_SHIFT))&LLWU_PE4_WUPE14_MASK)
S#define LLWU_PE4_WUPE15_MASK                     0xC0u
S#define LLWU_PE4_WUPE15_SHIFT                    6
S#define LLWU_PE4_WUPE15_WIDTH                    2
S#define LLWU_PE4_WUPE15(x)                       (((uint8_t)(((uint8_t)(x))<<LLWU_PE4_WUPE15_SHIFT))&LLWU_PE4_WUPE15_MASK)
S/* ME Bit Fields */
S#define LLWU_ME_WUME0_MASK                       0x1u
S#define LLWU_ME_WUME0_SHIFT                      0
S#define LLWU_ME_WUME0_WIDTH                      1
S#define LLWU_ME_WUME0(x)                         (((uint8_t)(((uint8_t)(x))<<LLWU_ME_WUME0_SHIFT))&LLWU_ME_WUME0_MASK)
S#define LLWU_ME_WUME1_MASK                       0x2u
S#define LLWU_ME_WUME1_SHIFT                      1
S#define LLWU_ME_WUME1_WIDTH                      1
S#define LLWU_ME_WUME1(x)                         (((uint8_t)(((uint8_t)(x))<<LLWU_ME_WUME1_SHIFT))&LLWU_ME_WUME1_MASK)
S#define LLWU_ME_WUME2_MASK                       0x4u
S#define LLWU_ME_WUME2_SHIFT                      2
S#define LLWU_ME_WUME2_WIDTH                      1
S#define LLWU_ME_WUME2(x)                         (((uint8_t)(((uint8_t)(x))<<LLWU_ME_WUME2_SHIFT))&LLWU_ME_WUME2_MASK)
S#define LLWU_ME_WUME3_MASK                       0x8u
S#define LLWU_ME_WUME3_SHIFT                      3
S#define LLWU_ME_WUME3_WIDTH                      1
S#define LLWU_ME_WUME3(x)                         (((uint8_t)(((uint8_t)(x))<<LLWU_ME_WUME3_SHIFT))&LLWU_ME_WUME3_MASK)
S#define LLWU_ME_WUME4_MASK                       0x10u
S#define LLWU_ME_WUME4_SHIFT                      4
S#define LLWU_ME_WUME4_WIDTH                      1
S#define LLWU_ME_WUME4(x)                         (((uint8_t)(((uint8_t)(x))<<LLWU_ME_WUME4_SHIFT))&LLWU_ME_WUME4_MASK)
S#define LLWU_ME_WUME5_MASK                       0x20u
S#define LLWU_ME_WUME5_SHIFT                      5
S#define LLWU_ME_WUME5_WIDTH                      1
S#define LLWU_ME_WUME5(x)                         (((uint8_t)(((uint8_t)(x))<<LLWU_ME_WUME5_SHIFT))&LLWU_ME_WUME5_MASK)
S#define LLWU_ME_WUME6_MASK                       0x40u
S#define LLWU_ME_WUME6_SHIFT                      6
S#define LLWU_ME_WUME6_WIDTH                      1
S#define LLWU_ME_WUME6(x)                         (((uint8_t)(((uint8_t)(x))<<LLWU_ME_WUME6_SHIFT))&LLWU_ME_WUME6_MASK)
S#define LLWU_ME_WUME7_MASK                       0x80u
S#define LLWU_ME_WUME7_SHIFT                      7
S#define LLWU_ME_WUME7_WIDTH                      1
S#define LLWU_ME_WUME7(x)                         (((uint8_t)(((uint8_t)(x))<<LLWU_ME_WUME7_SHIFT))&LLWU_ME_WUME7_MASK)
S/* F1 Bit Fields */
S#define LLWU_F1_WUF0_MASK                        0x1u
S#define LLWU_F1_WUF0_SHIFT                       0
S#define LLWU_F1_WUF0_WIDTH                       1
S#define LLWU_F1_WUF0(x)                          (((uint8_t)(((uint8_t)(x))<<LLWU_F1_WUF0_SHIFT))&LLWU_F1_WUF0_MASK)
S#define LLWU_F1_WUF1_MASK                        0x2u
S#define LLWU_F1_WUF1_SHIFT                       1
S#define LLWU_F1_WUF1_WIDTH                       1
S#define LLWU_F1_WUF1(x)                          (((uint8_t)(((uint8_t)(x))<<LLWU_F1_WUF1_SHIFT))&LLWU_F1_WUF1_MASK)
S#define LLWU_F1_WUF2_MASK                        0x4u
S#define LLWU_F1_WUF2_SHIFT                       2
S#define LLWU_F1_WUF2_WIDTH                       1
S#define LLWU_F1_WUF2(x)                          (((uint8_t)(((uint8_t)(x))<<LLWU_F1_WUF2_SHIFT))&LLWU_F1_WUF2_MASK)
S#define LLWU_F1_WUF3_MASK                        0x8u
S#define LLWU_F1_WUF3_SHIFT                       3
S#define LLWU_F1_WUF3_WIDTH                       1
S#define LLWU_F1_WUF3(x)                          (((uint8_t)(((uint8_t)(x))<<LLWU_F1_WUF3_SHIFT))&LLWU_F1_WUF3_MASK)
S#define LLWU_F1_WUF4_MASK                        0x10u
S#define LLWU_F1_WUF4_SHIFT                       4
S#define LLWU_F1_WUF4_WIDTH                       1
S#define LLWU_F1_WUF4(x)                          (((uint8_t)(((uint8_t)(x))<<LLWU_F1_WUF4_SHIFT))&LLWU_F1_WUF4_MASK)
S#define LLWU_F1_WUF5_MASK                        0x20u
S#define LLWU_F1_WUF5_SHIFT                       5
S#define LLWU_F1_WUF5_WIDTH                       1
S#define LLWU_F1_WUF5(x)                          (((uint8_t)(((uint8_t)(x))<<LLWU_F1_WUF5_SHIFT))&LLWU_F1_WUF5_MASK)
S#define LLWU_F1_WUF6_MASK                        0x40u
S#define LLWU_F1_WUF6_SHIFT                       6
S#define LLWU_F1_WUF6_WIDTH                       1
S#define LLWU_F1_WUF6(x)                          (((uint8_t)(((uint8_t)(x))<<LLWU_F1_WUF6_SHIFT))&LLWU_F1_WUF6_MASK)
S#define LLWU_F1_WUF7_MASK                        0x80u
S#define LLWU_F1_WUF7_SHIFT                       7
S#define LLWU_F1_WUF7_WIDTH                       1
S#define LLWU_F1_WUF7(x)                          (((uint8_t)(((uint8_t)(x))<<LLWU_F1_WUF7_SHIFT))&LLWU_F1_WUF7_MASK)
S/* F2 Bit Fields */
S#define LLWU_F2_WUF8_MASK                        0x1u
S#define LLWU_F2_WUF8_SHIFT                       0
S#define LLWU_F2_WUF8_WIDTH                       1
S#define LLWU_F2_WUF8(x)                          (((uint8_t)(((uint8_t)(x))<<LLWU_F2_WUF8_SHIFT))&LLWU_F2_WUF8_MASK)
S#define LLWU_F2_WUF9_MASK                        0x2u
S#define LLWU_F2_WUF9_SHIFT                       1
S#define LLWU_F2_WUF9_WIDTH                       1
S#define LLWU_F2_WUF9(x)                          (((uint8_t)(((uint8_t)(x))<<LLWU_F2_WUF9_SHIFT))&LLWU_F2_WUF9_MASK)
S#define LLWU_F2_WUF10_MASK                       0x4u
S#define LLWU_F2_WUF10_SHIFT                      2
S#define LLWU_F2_WUF10_WIDTH                      1
S#define LLWU_F2_WUF10(x)                         (((uint8_t)(((uint8_t)(x))<<LLWU_F2_WUF10_SHIFT))&LLWU_F2_WUF10_MASK)
S#define LLWU_F2_WUF11_MASK                       0x8u
S#define LLWU_F2_WUF11_SHIFT                      3
S#define LLWU_F2_WUF11_WIDTH                      1
S#define LLWU_F2_WUF11(x)                         (((uint8_t)(((uint8_t)(x))<<LLWU_F2_WUF11_SHIFT))&LLWU_F2_WUF11_MASK)
S#define LLWU_F2_WUF12_MASK                       0x10u
S#define LLWU_F2_WUF12_SHIFT                      4
S#define LLWU_F2_WUF12_WIDTH                      1
S#define LLWU_F2_WUF12(x)                         (((uint8_t)(((uint8_t)(x))<<LLWU_F2_WUF12_SHIFT))&LLWU_F2_WUF12_MASK)
S#define LLWU_F2_WUF13_MASK                       0x20u
S#define LLWU_F2_WUF13_SHIFT                      5
S#define LLWU_F2_WUF13_WIDTH                      1
S#define LLWU_F2_WUF13(x)                         (((uint8_t)(((uint8_t)(x))<<LLWU_F2_WUF13_SHIFT))&LLWU_F2_WUF13_MASK)
S#define LLWU_F2_WUF14_MASK                       0x40u
S#define LLWU_F2_WUF14_SHIFT                      6
S#define LLWU_F2_WUF14_WIDTH                      1
S#define LLWU_F2_WUF14(x)                         (((uint8_t)(((uint8_t)(x))<<LLWU_F2_WUF14_SHIFT))&LLWU_F2_WUF14_MASK)
S#define LLWU_F2_WUF15_MASK                       0x80u
S#define LLWU_F2_WUF15_SHIFT                      7
S#define LLWU_F2_WUF15_WIDTH                      1
S#define LLWU_F2_WUF15(x)                         (((uint8_t)(((uint8_t)(x))<<LLWU_F2_WUF15_SHIFT))&LLWU_F2_WUF15_MASK)
S/* F3 Bit Fields */
S#define LLWU_F3_MWUF0_MASK                       0x1u
S#define LLWU_F3_MWUF0_SHIFT                      0
S#define LLWU_F3_MWUF0_WIDTH                      1
S#define LLWU_F3_MWUF0(x)                         (((uint8_t)(((uint8_t)(x))<<LLWU_F3_MWUF0_SHIFT))&LLWU_F3_MWUF0_MASK)
S#define LLWU_F3_MWUF1_MASK                       0x2u
S#define LLWU_F3_MWUF1_SHIFT                      1
S#define LLWU_F3_MWUF1_WIDTH                      1
S#define LLWU_F3_MWUF1(x)                         (((uint8_t)(((uint8_t)(x))<<LLWU_F3_MWUF1_SHIFT))&LLWU_F3_MWUF1_MASK)
S#define LLWU_F3_MWUF2_MASK                       0x4u
S#define LLWU_F3_MWUF2_SHIFT                      2
S#define LLWU_F3_MWUF2_WIDTH                      1
S#define LLWU_F3_MWUF2(x)                         (((uint8_t)(((uint8_t)(x))<<LLWU_F3_MWUF2_SHIFT))&LLWU_F3_MWUF2_MASK)
S#define LLWU_F3_MWUF3_MASK                       0x8u
S#define LLWU_F3_MWUF3_SHIFT                      3
S#define LLWU_F3_MWUF3_WIDTH                      1
S#define LLWU_F3_MWUF3(x)                         (((uint8_t)(((uint8_t)(x))<<LLWU_F3_MWUF3_SHIFT))&LLWU_F3_MWUF3_MASK)
S#define LLWU_F3_MWUF4_MASK                       0x10u
S#define LLWU_F3_MWUF4_SHIFT                      4
S#define LLWU_F3_MWUF4_WIDTH                      1
S#define LLWU_F3_MWUF4(x)                         (((uint8_t)(((uint8_t)(x))<<LLWU_F3_MWUF4_SHIFT))&LLWU_F3_MWUF4_MASK)
S#define LLWU_F3_MWUF5_MASK                       0x20u
S#define LLWU_F3_MWUF5_SHIFT                      5
S#define LLWU_F3_MWUF5_WIDTH                      1
S#define LLWU_F3_MWUF5(x)                         (((uint8_t)(((uint8_t)(x))<<LLWU_F3_MWUF5_SHIFT))&LLWU_F3_MWUF5_MASK)
S#define LLWU_F3_MWUF6_MASK                       0x40u
S#define LLWU_F3_MWUF6_SHIFT                      6
S#define LLWU_F3_MWUF6_WIDTH                      1
S#define LLWU_F3_MWUF6(x)                         (((uint8_t)(((uint8_t)(x))<<LLWU_F3_MWUF6_SHIFT))&LLWU_F3_MWUF6_MASK)
S#define LLWU_F3_MWUF7_MASK                       0x80u
S#define LLWU_F3_MWUF7_SHIFT                      7
S#define LLWU_F3_MWUF7_WIDTH                      1
S#define LLWU_F3_MWUF7(x)                         (((uint8_t)(((uint8_t)(x))<<LLWU_F3_MWUF7_SHIFT))&LLWU_F3_MWUF7_MASK)
S/* FILT1 Bit Fields */
S#define LLWU_FILT1_FILTSEL_MASK                  0xFu
S#define LLWU_FILT1_FILTSEL_SHIFT                 0
S#define LLWU_FILT1_FILTSEL_WIDTH                 4
S#define LLWU_FILT1_FILTSEL(x)                    (((uint8_t)(((uint8_t)(x))<<LLWU_FILT1_FILTSEL_SHIFT))&LLWU_FILT1_FILTSEL_MASK)
S#define LLWU_FILT1_FILTE_MASK                    0x60u
S#define LLWU_FILT1_FILTE_SHIFT                   5
S#define LLWU_FILT1_FILTE_WIDTH                   2
S#define LLWU_FILT1_FILTE(x)                      (((uint8_t)(((uint8_t)(x))<<LLWU_FILT1_FILTE_SHIFT))&LLWU_FILT1_FILTE_MASK)
S#define LLWU_FILT1_FILTF_MASK                    0x80u
S#define LLWU_FILT1_FILTF_SHIFT                   7
S#define LLWU_FILT1_FILTF_WIDTH                   1
S#define LLWU_FILT1_FILTF(x)                      (((uint8_t)(((uint8_t)(x))<<LLWU_FILT1_FILTF_SHIFT))&LLWU_FILT1_FILTF_MASK)
S/* FILT2 Bit Fields */
S#define LLWU_FILT2_FILTSEL_MASK                  0xFu
S#define LLWU_FILT2_FILTSEL_SHIFT                 0
S#define LLWU_FILT2_FILTSEL_WIDTH                 4
S#define LLWU_FILT2_FILTSEL(x)                    (((uint8_t)(((uint8_t)(x))<<LLWU_FILT2_FILTSEL_SHIFT))&LLWU_FILT2_FILTSEL_MASK)
S#define LLWU_FILT2_FILTE_MASK                    0x60u
S#define LLWU_FILT2_FILTE_SHIFT                   5
S#define LLWU_FILT2_FILTE_WIDTH                   2
S#define LLWU_FILT2_FILTE(x)                      (((uint8_t)(((uint8_t)(x))<<LLWU_FILT2_FILTE_SHIFT))&LLWU_FILT2_FILTE_MASK)
S#define LLWU_FILT2_FILTF_MASK                    0x80u
S#define LLWU_FILT2_FILTF_SHIFT                   7
S#define LLWU_FILT2_FILTF_WIDTH                   1
S#define LLWU_FILT2_FILTF(x)                      (((uint8_t)(((uint8_t)(x))<<LLWU_FILT2_FILTF_SHIFT))&LLWU_FILT2_FILTF_MASK)
S
S/*!
S * @}
S */ /* end of group LLWU_Register_Masks */
S
S
S/* LLWU - Peripheral instance base addresses */
S/** Peripheral LLWU base address */
S#define LLWU_BASE                                (0x4007C000u)
S/** Peripheral LLWU base pointer */
S#define LLWU                                     ((LLWU_Type *)LLWU_BASE)
S#define LLWU_BASE_PTR                            (LLWU)
S/** Array initializer of LLWU peripheral base addresses */
S#define LLWU_BASE_ADDRS                          { LLWU_BASE }
S/** Array initializer of LLWU peripheral base pointers */
S#define LLWU_BASE_PTRS                           { LLWU }
S/** Interrupt vectors for the LLWU peripheral type */
S#define LLWU_IRQS                                { LLWU_IRQn }
S
S/* ----------------------------------------------------------------------------
S   -- LLWU - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup LLWU_Register_Accessor_Macros LLWU - Register accessor macros
S * @{
S */
S
S
S/* LLWU - Register instance definitions */
S/* LLWU */
S#define LLWU_PE1                                 LLWU_PE1_REG(LLWU)
S#define LLWU_PE2                                 LLWU_PE2_REG(LLWU)
S#define LLWU_PE3                                 LLWU_PE3_REG(LLWU)
S#define LLWU_PE4                                 LLWU_PE4_REG(LLWU)
S#define LLWU_ME                                  LLWU_ME_REG(LLWU)
S#define LLWU_F1                                  LLWU_F1_REG(LLWU)
S#define LLWU_F2                                  LLWU_F2_REG(LLWU)
S#define LLWU_F3                                  LLWU_F3_REG(LLWU)
S#define LLWU_FILT1                               LLWU_FILT1_REG(LLWU)
S#define LLWU_FILT2                               LLWU_FILT2_REG(LLWU)
S
S/*!
S * @}
S */ /* end of group LLWU_Register_Accessor_Macros */
S
S
S/*!
S * @}
S */ /* end of group LLWU_Peripheral_Access_Layer */
S
S
S/* ----------------------------------------------------------------------------
S   -- LPTMR Peripheral Access Layer
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup LPTMR_Peripheral_Access_Layer LPTMR Peripheral Access Layer
S * @{
S */
S
S/** LPTMR - Register Layout Typedef */
Stypedef struct {
S  __IO uint32_t CSR;                               /**< Low Power Timer Control Status Register, offset: 0x0 */
S  __IO uint32_t PSR;                               /**< Low Power Timer Prescale Register, offset: 0x4 */
S  __IO uint32_t CMR;                               /**< Low Power Timer Compare Register, offset: 0x8 */
S  __IO uint32_t CNR;                               /**< Low Power Timer Counter Register, offset: 0xC */
S} LPTMR_Type, *LPTMR_MemMapPtr;
S
S/* ----------------------------------------------------------------------------
S   -- LPTMR - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup LPTMR_Register_Accessor_Macros LPTMR - Register accessor macros
S * @{
S */
S
S
S/* LPTMR - Register accessors */
S#define LPTMR_CSR_REG(base)                      ((base)->CSR)
S#define LPTMR_PSR_REG(base)                      ((base)->PSR)
S#define LPTMR_CMR_REG(base)                      ((base)->CMR)
S#define LPTMR_CNR_REG(base)                      ((base)->CNR)
S
S/*!
S * @}
S */ /* end of group LPTMR_Register_Accessor_Macros */
S
S
S/* ----------------------------------------------------------------------------
S   -- LPTMR Register Masks
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup LPTMR_Register_Masks LPTMR Register Masks
S * @{
S */
S
S/* CSR Bit Fields */
S#define LPTMR_CSR_TEN_MASK                       0x1u
S#define LPTMR_CSR_TEN_SHIFT                      0
S#define LPTMR_CSR_TEN_WIDTH                      1
S#define LPTMR_CSR_TEN(x)                         (((uint32_t)(((uint32_t)(x))<<LPTMR_CSR_TEN_SHIFT))&LPTMR_CSR_TEN_MASK)
S#define LPTMR_CSR_TMS_MASK                       0x2u
S#define LPTMR_CSR_TMS_SHIFT                      1
S#define LPTMR_CSR_TMS_WIDTH                      1
S#define LPTMR_CSR_TMS(x)                         (((uint32_t)(((uint32_t)(x))<<LPTMR_CSR_TMS_SHIFT))&LPTMR_CSR_TMS_MASK)
S#define LPTMR_CSR_TFC_MASK                       0x4u
S#define LPTMR_CSR_TFC_SHIFT                      2
S#define LPTMR_CSR_TFC_WIDTH                      1
S#define LPTMR_CSR_TFC(x)                         (((uint32_t)(((uint32_t)(x))<<LPTMR_CSR_TFC_SHIFT))&LPTMR_CSR_TFC_MASK)
S#define LPTMR_CSR_TPP_MASK                       0x8u
S#define LPTMR_CSR_TPP_SHIFT                      3
S#define LPTMR_CSR_TPP_WIDTH                      1
S#define LPTMR_CSR_TPP(x)                         (((uint32_t)(((uint32_t)(x))<<LPTMR_CSR_TPP_SHIFT))&LPTMR_CSR_TPP_MASK)
S#define LPTMR_CSR_TPS_MASK                       0x30u
S#define LPTMR_CSR_TPS_SHIFT                      4
S#define LPTMR_CSR_TPS_WIDTH                      2
S#define LPTMR_CSR_TPS(x)                         (((uint32_t)(((uint32_t)(x))<<LPTMR_CSR_TPS_SHIFT))&LPTMR_CSR_TPS_MASK)
S#define LPTMR_CSR_TIE_MASK                       0x40u
S#define LPTMR_CSR_TIE_SHIFT                      6
S#define LPTMR_CSR_TIE_WIDTH                      1
S#define LPTMR_CSR_TIE(x)                         (((uint32_t)(((uint32_t)(x))<<LPTMR_CSR_TIE_SHIFT))&LPTMR_CSR_TIE_MASK)
S#define LPTMR_CSR_TCF_MASK                       0x80u
S#define LPTMR_CSR_TCF_SHIFT                      7
S#define LPTMR_CSR_TCF_WIDTH                      1
S#define LPTMR_CSR_TCF(x)                         (((uint32_t)(((uint32_t)(x))<<LPTMR_CSR_TCF_SHIFT))&LPTMR_CSR_TCF_MASK)
S/* PSR Bit Fields */
S#define LPTMR_PSR_PCS_MASK                       0x3u
S#define LPTMR_PSR_PCS_SHIFT                      0
S#define LPTMR_PSR_PCS_WIDTH                      2
S#define LPTMR_PSR_PCS(x)                         (((uint32_t)(((uint32_t)(x))<<LPTMR_PSR_PCS_SHIFT))&LPTMR_PSR_PCS_MASK)
S#define LPTMR_PSR_PBYP_MASK                      0x4u
S#define LPTMR_PSR_PBYP_SHIFT                     2
S#define LPTMR_PSR_PBYP_WIDTH                     1
S#define LPTMR_PSR_PBYP(x)                        (((uint32_t)(((uint32_t)(x))<<LPTMR_PSR_PBYP_SHIFT))&LPTMR_PSR_PBYP_MASK)
S#define LPTMR_PSR_PRESCALE_MASK                  0x78u
S#define LPTMR_PSR_PRESCALE_SHIFT                 3
S#define LPTMR_PSR_PRESCALE_WIDTH                 4
S#define LPTMR_PSR_PRESCALE(x)                    (((uint32_t)(((uint32_t)(x))<<LPTMR_PSR_PRESCALE_SHIFT))&LPTMR_PSR_PRESCALE_MASK)
S/* CMR Bit Fields */
S#define LPTMR_CMR_COMPARE_MASK                   0xFFFFu
S#define LPTMR_CMR_COMPARE_SHIFT                  0
S#define LPTMR_CMR_COMPARE_WIDTH                  16
S#define LPTMR_CMR_COMPARE(x)                     (((uint32_t)(((uint32_t)(x))<<LPTMR_CMR_COMPARE_SHIFT))&LPTMR_CMR_COMPARE_MASK)
S/* CNR Bit Fields */
S#define LPTMR_CNR_COUNTER_MASK                   0xFFFFu
S#define LPTMR_CNR_COUNTER_SHIFT                  0
S#define LPTMR_CNR_COUNTER_WIDTH                  16
S#define LPTMR_CNR_COUNTER(x)                     (((uint32_t)(((uint32_t)(x))<<LPTMR_CNR_COUNTER_SHIFT))&LPTMR_CNR_COUNTER_MASK)
S
S/*!
S * @}
S */ /* end of group LPTMR_Register_Masks */
S
S
S/* LPTMR - Peripheral instance base addresses */
S/** Peripheral LPTMR0 base address */
S#define LPTMR0_BASE                              (0x40040000u)
S/** Peripheral LPTMR0 base pointer */
S#define LPTMR0                                   ((LPTMR_Type *)LPTMR0_BASE)
S#define LPTMR0_BASE_PTR                          (LPTMR0)
S/** Array initializer of LPTMR peripheral base addresses */
S#define LPTMR_BASE_ADDRS                         { LPTMR0_BASE }
S/** Array initializer of LPTMR peripheral base pointers */
S#define LPTMR_BASE_PTRS                          { LPTMR0 }
S/** Interrupt vectors for the LPTMR peripheral type */
S#define LPTMR_IRQS                               { LPTMR0_IRQn }
S
S/* ----------------------------------------------------------------------------
S   -- LPTMR - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup LPTMR_Register_Accessor_Macros LPTMR - Register accessor macros
S * @{
S */
S
S
S/* LPTMR - Register instance definitions */
S/* LPTMR0 */
S#define LPTMR0_CSR                               LPTMR_CSR_REG(LPTMR0)
S#define LPTMR0_PSR                               LPTMR_PSR_REG(LPTMR0)
S#define LPTMR0_CMR                               LPTMR_CMR_REG(LPTMR0)
S#define LPTMR0_CNR                               LPTMR_CNR_REG(LPTMR0)
S
S/*!
S * @}
S */ /* end of group LPTMR_Register_Accessor_Macros */
S
S
S/*!
S * @}
S */ /* end of group LPTMR_Peripheral_Access_Layer */
S
S
S/* ----------------------------------------------------------------------------
S   -- MCG Peripheral Access Layer
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup MCG_Peripheral_Access_Layer MCG Peripheral Access Layer
S * @{
S */
S
S/** MCG - Register Layout Typedef */
Stypedef struct {
S  __IO uint8_t C1;                                 /**< MCG Control 1 Register, offset: 0x0 */
S  __IO uint8_t C2;                                 /**< MCG Control 2 Register, offset: 0x1 */
S  __IO uint8_t C3;                                 /**< MCG Control 3 Register, offset: 0x2 */
S  __IO uint8_t C4;                                 /**< MCG Control 4 Register, offset: 0x3 */
S  __IO uint8_t C5;                                 /**< MCG Control 5 Register, offset: 0x4 */
S  __IO uint8_t C6;                                 /**< MCG Control 6 Register, offset: 0x5 */
S  __IO uint8_t S;                                  /**< MCG Status Register, offset: 0x6 */
S       uint8_t RESERVED_0[1];
S  __IO uint8_t SC;                                 /**< MCG Status and Control Register, offset: 0x8 */
S       uint8_t RESERVED_1[1];
S  __IO uint8_t ATCVH;                              /**< MCG Auto Trim Compare Value High Register, offset: 0xA */
S  __IO uint8_t ATCVL;                              /**< MCG Auto Trim Compare Value Low Register, offset: 0xB */
S  __I  uint8_t C7;                                 /**< MCG Control 7 Register, offset: 0xC */
S  __IO uint8_t C8;                                 /**< MCG Control 8 Register, offset: 0xD */
S  __I  uint8_t C9;                                 /**< MCG Control 9 Register, offset: 0xE */
S  __I  uint8_t C10;                                /**< MCG Control 10 Register, offset: 0xF */
S} MCG_Type, *MCG_MemMapPtr;
S
S/* ----------------------------------------------------------------------------
S   -- MCG - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup MCG_Register_Accessor_Macros MCG - Register accessor macros
S * @{
S */
S
S
S/* MCG - Register accessors */
S#define MCG_C1_REG(base)                         ((base)->C1)
S#define MCG_C2_REG(base)                         ((base)->C2)
S#define MCG_C3_REG(base)                         ((base)->C3)
S#define MCG_C4_REG(base)                         ((base)->C4)
S#define MCG_C5_REG(base)                         ((base)->C5)
S#define MCG_C6_REG(base)                         ((base)->C6)
S#define MCG_S_REG(base)                          ((base)->S)
S#define MCG_SC_REG(base)                         ((base)->SC)
S#define MCG_ATCVH_REG(base)                      ((base)->ATCVH)
S#define MCG_ATCVL_REG(base)                      ((base)->ATCVL)
S#define MCG_C7_REG(base)                         ((base)->C7)
S#define MCG_C8_REG(base)                         ((base)->C8)
S#define MCG_C9_REG(base)                         ((base)->C9)
S#define MCG_C10_REG(base)                        ((base)->C10)
S
S/*!
S * @}
S */ /* end of group MCG_Register_Accessor_Macros */
S
S
S/* ----------------------------------------------------------------------------
S   -- MCG Register Masks
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup MCG_Register_Masks MCG Register Masks
S * @{
S */
S
S/* C1 Bit Fields */
S#define MCG_C1_IREFSTEN_MASK                     0x1u
S#define MCG_C1_IREFSTEN_SHIFT                    0
S#define MCG_C1_IREFSTEN_WIDTH                    1
S#define MCG_C1_IREFSTEN(x)                       (((uint8_t)(((uint8_t)(x))<<MCG_C1_IREFSTEN_SHIFT))&MCG_C1_IREFSTEN_MASK)
S#define MCG_C1_IRCLKEN_MASK                      0x2u
S#define MCG_C1_IRCLKEN_SHIFT                     1
S#define MCG_C1_IRCLKEN_WIDTH                     1
S#define MCG_C1_IRCLKEN(x)                        (((uint8_t)(((uint8_t)(x))<<MCG_C1_IRCLKEN_SHIFT))&MCG_C1_IRCLKEN_MASK)
S#define MCG_C1_IREFS_MASK                        0x4u
S#define MCG_C1_IREFS_SHIFT                       2
S#define MCG_C1_IREFS_WIDTH                       1
S#define MCG_C1_IREFS(x)                          (((uint8_t)(((uint8_t)(x))<<MCG_C1_IREFS_SHIFT))&MCG_C1_IREFS_MASK)
S#define MCG_C1_FRDIV_MASK                        0x38u
S#define MCG_C1_FRDIV_SHIFT                       3
S#define MCG_C1_FRDIV_WIDTH                       3
S#define MCG_C1_FRDIV(x)                          (((uint8_t)(((uint8_t)(x))<<MCG_C1_FRDIV_SHIFT))&MCG_C1_FRDIV_MASK)
S#define MCG_C1_CLKS_MASK                         0xC0u
S#define MCG_C1_CLKS_SHIFT                        6
S#define MCG_C1_CLKS_WIDTH                        2
S#define MCG_C1_CLKS(x)                           (((uint8_t)(((uint8_t)(x))<<MCG_C1_CLKS_SHIFT))&MCG_C1_CLKS_MASK)
S/* C2 Bit Fields */
S#define MCG_C2_IRCS_MASK                         0x1u
S#define MCG_C2_IRCS_SHIFT                        0
S#define MCG_C2_IRCS_WIDTH                        1
S#define MCG_C2_IRCS(x)                           (((uint8_t)(((uint8_t)(x))<<MCG_C2_IRCS_SHIFT))&MCG_C2_IRCS_MASK)
S#define MCG_C2_LP_MASK                           0x2u
S#define MCG_C2_LP_SHIFT                          1
S#define MCG_C2_LP_WIDTH                          1
S#define MCG_C2_LP(x)                             (((uint8_t)(((uint8_t)(x))<<MCG_C2_LP_SHIFT))&MCG_C2_LP_MASK)
S#define MCG_C2_EREFS0_MASK                       0x4u
S#define MCG_C2_EREFS0_SHIFT                      2
S#define MCG_C2_EREFS0_WIDTH                      1
S#define MCG_C2_EREFS0(x)                         (((uint8_t)(((uint8_t)(x))<<MCG_C2_EREFS0_SHIFT))&MCG_C2_EREFS0_MASK)
S#define MCG_C2_HGO0_MASK                         0x8u
S#define MCG_C2_HGO0_SHIFT                        3
S#define MCG_C2_HGO0_WIDTH                        1
S#define MCG_C2_HGO0(x)                           (((uint8_t)(((uint8_t)(x))<<MCG_C2_HGO0_SHIFT))&MCG_C2_HGO0_MASK)
S#define MCG_C2_RANGE0_MASK                       0x30u
S#define MCG_C2_RANGE0_SHIFT                      4
S#define MCG_C2_RANGE0_WIDTH                      2
S#define MCG_C2_RANGE0(x)                         (((uint8_t)(((uint8_t)(x))<<MCG_C2_RANGE0_SHIFT))&MCG_C2_RANGE0_MASK)
S#define MCG_C2_LOCRE0_MASK                       0x80u
S#define MCG_C2_LOCRE0_SHIFT                      7
S#define MCG_C2_LOCRE0_WIDTH                      1
S#define MCG_C2_LOCRE0(x)                         (((uint8_t)(((uint8_t)(x))<<MCG_C2_LOCRE0_SHIFT))&MCG_C2_LOCRE0_MASK)
S/* C3 Bit Fields */
S#define MCG_C3_SCTRIM_MASK                       0xFFu
S#define MCG_C3_SCTRIM_SHIFT                      0
S#define MCG_C3_SCTRIM_WIDTH                      8
S#define MCG_C3_SCTRIM(x)                         (((uint8_t)(((uint8_t)(x))<<MCG_C3_SCTRIM_SHIFT))&MCG_C3_SCTRIM_MASK)
S/* C4 Bit Fields */
S#define MCG_C4_SCFTRIM_MASK                      0x1u
S#define MCG_C4_SCFTRIM_SHIFT                     0
S#define MCG_C4_SCFTRIM_WIDTH                     1
S#define MCG_C4_SCFTRIM(x)                        (((uint8_t)(((uint8_t)(x))<<MCG_C4_SCFTRIM_SHIFT))&MCG_C4_SCFTRIM_MASK)
S#define MCG_C4_FCTRIM_MASK                       0x1Eu
S#define MCG_C4_FCTRIM_SHIFT                      1
S#define MCG_C4_FCTRIM_WIDTH                      4
S#define MCG_C4_FCTRIM(x)                         (((uint8_t)(((uint8_t)(x))<<MCG_C4_FCTRIM_SHIFT))&MCG_C4_FCTRIM_MASK)
S#define MCG_C4_DRST_DRS_MASK                     0x60u
S#define MCG_C4_DRST_DRS_SHIFT                    5
S#define MCG_C4_DRST_DRS_WIDTH                    2
S#define MCG_C4_DRST_DRS(x)                       (((uint8_t)(((uint8_t)(x))<<MCG_C4_DRST_DRS_SHIFT))&MCG_C4_DRST_DRS_MASK)
S#define MCG_C4_DMX32_MASK                        0x80u
S#define MCG_C4_DMX32_SHIFT                       7
S#define MCG_C4_DMX32_WIDTH                       1
S#define MCG_C4_DMX32(x)                          (((uint8_t)(((uint8_t)(x))<<MCG_C4_DMX32_SHIFT))&MCG_C4_DMX32_MASK)
S/* C5 Bit Fields */
S#define MCG_C5_PRDIV0_MASK                       0x1Fu
S#define MCG_C5_PRDIV0_SHIFT                      0
S#define MCG_C5_PRDIV0_WIDTH                      5
S#define MCG_C5_PRDIV0(x)                         (((uint8_t)(((uint8_t)(x))<<MCG_C5_PRDIV0_SHIFT))&MCG_C5_PRDIV0_MASK)
S#define MCG_C5_PLLSTEN0_MASK                     0x20u
S#define MCG_C5_PLLSTEN0_SHIFT                    5
S#define MCG_C5_PLLSTEN0_WIDTH                    1
S#define MCG_C5_PLLSTEN0(x)                       (((uint8_t)(((uint8_t)(x))<<MCG_C5_PLLSTEN0_SHIFT))&MCG_C5_PLLSTEN0_MASK)
S#define MCG_C5_PLLCLKEN0_MASK                    0x40u
S#define MCG_C5_PLLCLKEN0_SHIFT                   6
S#define MCG_C5_PLLCLKEN0_WIDTH                   1
S#define MCG_C5_PLLCLKEN0(x)                      (((uint8_t)(((uint8_t)(x))<<MCG_C5_PLLCLKEN0_SHIFT))&MCG_C5_PLLCLKEN0_MASK)
S/* C6 Bit Fields */
S#define MCG_C6_VDIV0_MASK                        0x1Fu
S#define MCG_C6_VDIV0_SHIFT                       0
S#define MCG_C6_VDIV0_WIDTH                       5
S#define MCG_C6_VDIV0(x)                          (((uint8_t)(((uint8_t)(x))<<MCG_C6_VDIV0_SHIFT))&MCG_C6_VDIV0_MASK)
S#define MCG_C6_CME0_MASK                         0x20u
S#define MCG_C6_CME0_SHIFT                        5
S#define MCG_C6_CME0_WIDTH                        1
S#define MCG_C6_CME0(x)                           (((uint8_t)(((uint8_t)(x))<<MCG_C6_CME0_SHIFT))&MCG_C6_CME0_MASK)
S#define MCG_C6_PLLS_MASK                         0x40u
S#define MCG_C6_PLLS_SHIFT                        6
S#define MCG_C6_PLLS_WIDTH                        1
S#define MCG_C6_PLLS(x)                           (((uint8_t)(((uint8_t)(x))<<MCG_C6_PLLS_SHIFT))&MCG_C6_PLLS_MASK)
S#define MCG_C6_LOLIE0_MASK                       0x80u
S#define MCG_C6_LOLIE0_SHIFT                      7
S#define MCG_C6_LOLIE0_WIDTH                      1
S#define MCG_C6_LOLIE0(x)                         (((uint8_t)(((uint8_t)(x))<<MCG_C6_LOLIE0_SHIFT))&MCG_C6_LOLIE0_MASK)
S/* S Bit Fields */
S#define MCG_S_IRCST_MASK                         0x1u
S#define MCG_S_IRCST_SHIFT                        0
S#define MCG_S_IRCST_WIDTH                        1
S#define MCG_S_IRCST(x)                           (((uint8_t)(((uint8_t)(x))<<MCG_S_IRCST_SHIFT))&MCG_S_IRCST_MASK)
S#define MCG_S_OSCINIT0_MASK                      0x2u
S#define MCG_S_OSCINIT0_SHIFT                     1
S#define MCG_S_OSCINIT0_WIDTH                     1
S#define MCG_S_OSCINIT0(x)                        (((uint8_t)(((uint8_t)(x))<<MCG_S_OSCINIT0_SHIFT))&MCG_S_OSCINIT0_MASK)
S#define MCG_S_CLKST_MASK                         0xCu
S#define MCG_S_CLKST_SHIFT                        2
S#define MCG_S_CLKST_WIDTH                        2
S#define MCG_S_CLKST(x)                           (((uint8_t)(((uint8_t)(x))<<MCG_S_CLKST_SHIFT))&MCG_S_CLKST_MASK)
S#define MCG_S_IREFST_MASK                        0x10u
S#define MCG_S_IREFST_SHIFT                       4
S#define MCG_S_IREFST_WIDTH                       1
S#define MCG_S_IREFST(x)                          (((uint8_t)(((uint8_t)(x))<<MCG_S_IREFST_SHIFT))&MCG_S_IREFST_MASK)
S#define MCG_S_PLLST_MASK                         0x20u
S#define MCG_S_PLLST_SHIFT                        5
S#define MCG_S_PLLST_WIDTH                        1
S#define MCG_S_PLLST(x)                           (((uint8_t)(((uint8_t)(x))<<MCG_S_PLLST_SHIFT))&MCG_S_PLLST_MASK)
S#define MCG_S_LOCK0_MASK                         0x40u
S#define MCG_S_LOCK0_SHIFT                        6
S#define MCG_S_LOCK0_WIDTH                        1
S#define MCG_S_LOCK0(x)                           (((uint8_t)(((uint8_t)(x))<<MCG_S_LOCK0_SHIFT))&MCG_S_LOCK0_MASK)
S#define MCG_S_LOLS0_MASK                         0x80u
S#define MCG_S_LOLS0_SHIFT                        7
S#define MCG_S_LOLS0_WIDTH                        1
S#define MCG_S_LOLS0(x)                           (((uint8_t)(((uint8_t)(x))<<MCG_S_LOLS0_SHIFT))&MCG_S_LOLS0_MASK)
S/* SC Bit Fields */
S#define MCG_SC_LOCS0_MASK                        0x1u
S#define MCG_SC_LOCS0_SHIFT                       0
S#define MCG_SC_LOCS0_WIDTH                       1
S#define MCG_SC_LOCS0(x)                          (((uint8_t)(((uint8_t)(x))<<MCG_SC_LOCS0_SHIFT))&MCG_SC_LOCS0_MASK)
S#define MCG_SC_FCRDIV_MASK                       0xEu
S#define MCG_SC_FCRDIV_SHIFT                      1
S#define MCG_SC_FCRDIV_WIDTH                      3
S#define MCG_SC_FCRDIV(x)                         (((uint8_t)(((uint8_t)(x))<<MCG_SC_FCRDIV_SHIFT))&MCG_SC_FCRDIV_MASK)
S#define MCG_SC_FLTPRSRV_MASK                     0x10u
S#define MCG_SC_FLTPRSRV_SHIFT                    4
S#define MCG_SC_FLTPRSRV_WIDTH                    1
S#define MCG_SC_FLTPRSRV(x)                       (((uint8_t)(((uint8_t)(x))<<MCG_SC_FLTPRSRV_SHIFT))&MCG_SC_FLTPRSRV_MASK)
S#define MCG_SC_ATMF_MASK                         0x20u
S#define MCG_SC_ATMF_SHIFT                        5
S#define MCG_SC_ATMF_WIDTH                        1
S#define MCG_SC_ATMF(x)                           (((uint8_t)(((uint8_t)(x))<<MCG_SC_ATMF_SHIFT))&MCG_SC_ATMF_MASK)
S#define MCG_SC_ATMS_MASK                         0x40u
S#define MCG_SC_ATMS_SHIFT                        6
S#define MCG_SC_ATMS_WIDTH                        1
S#define MCG_SC_ATMS(x)                           (((uint8_t)(((uint8_t)(x))<<MCG_SC_ATMS_SHIFT))&MCG_SC_ATMS_MASK)
S#define MCG_SC_ATME_MASK                         0x80u
S#define MCG_SC_ATME_SHIFT                        7
S#define MCG_SC_ATME_WIDTH                        1
S#define MCG_SC_ATME(x)                           (((uint8_t)(((uint8_t)(x))<<MCG_SC_ATME_SHIFT))&MCG_SC_ATME_MASK)
S/* ATCVH Bit Fields */
S#define MCG_ATCVH_ATCVH_MASK                     0xFFu
S#define MCG_ATCVH_ATCVH_SHIFT                    0
S#define MCG_ATCVH_ATCVH_WIDTH                    8
S#define MCG_ATCVH_ATCVH(x)                       (((uint8_t)(((uint8_t)(x))<<MCG_ATCVH_ATCVH_SHIFT))&MCG_ATCVH_ATCVH_MASK)
S/* ATCVL Bit Fields */
S#define MCG_ATCVL_ATCVL_MASK                     0xFFu
S#define MCG_ATCVL_ATCVL_SHIFT                    0
S#define MCG_ATCVL_ATCVL_WIDTH                    8
S#define MCG_ATCVL_ATCVL(x)                       (((uint8_t)(((uint8_t)(x))<<MCG_ATCVL_ATCVL_SHIFT))&MCG_ATCVL_ATCVL_MASK)
S/* C8 Bit Fields */
S#define MCG_C8_LOLRE_MASK                        0x40u
S#define MCG_C8_LOLRE_SHIFT                       6
S#define MCG_C8_LOLRE_WIDTH                       1
S#define MCG_C8_LOLRE(x)                          (((uint8_t)(((uint8_t)(x))<<MCG_C8_LOLRE_SHIFT))&MCG_C8_LOLRE_MASK)
S
S/*!
S * @}
S */ /* end of group MCG_Register_Masks */
S
S
S/* MCG - Peripheral instance base addresses */
S/** Peripheral MCG base address */
S#define MCG_BASE                                 (0x40064000u)
S/** Peripheral MCG base pointer */
S#define MCG                                      ((MCG_Type *)MCG_BASE)
S#define MCG_BASE_PTR                             (MCG)
S/** Array initializer of MCG peripheral base addresses */
S#define MCG_BASE_ADDRS                           { MCG_BASE }
S/** Array initializer of MCG peripheral base pointers */
S#define MCG_BASE_PTRS                            { MCG }
S/** Interrupt vectors for the MCG peripheral type */
S#define MCG_IRQS                                 { MCG_IRQn }
S
S/* ----------------------------------------------------------------------------
S   -- MCG - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup MCG_Register_Accessor_Macros MCG - Register accessor macros
S * @{
S */
S
S
S/* MCG - Register instance definitions */
S/* MCG */
S#define MCG_C1                                   MCG_C1_REG(MCG)
S#define MCG_C2                                   MCG_C2_REG(MCG)
S#define MCG_C3                                   MCG_C3_REG(MCG)
S#define MCG_C4                                   MCG_C4_REG(MCG)
S#define MCG_C5                                   MCG_C5_REG(MCG)
S#define MCG_C6                                   MCG_C6_REG(MCG)
S#define MCG_S                                    MCG_S_REG(MCG)
S#define MCG_SC                                   MCG_SC_REG(MCG)
S#define MCG_ATCVH                                MCG_ATCVH_REG(MCG)
S#define MCG_ATCVL                                MCG_ATCVL_REG(MCG)
S#define MCG_C7                                   MCG_C7_REG(MCG)
S#define MCG_C8                                   MCG_C8_REG(MCG)
S#define MCG_C9                                   MCG_C9_REG(MCG)
S#define MCG_C10                                  MCG_C10_REG(MCG)
S
S/*!
S * @}
S */ /* end of group MCG_Register_Accessor_Macros */
S
S/* MCG C2[EREFS] backward compatibility */
S#define MCG_C2_EREFS_MASK         (MCG_C2_EREFS0_MASK)
S#define MCG_C2_EREFS_SHIFT        (MCG_C2_EREFS0_SHIFT)
S#define MCG_C2_EREFS_WIDTH        (MCG_C2_EREFS0_WIDTH)
S#define MCG_C2_EREFS(x)           (MCG_C2_EREFS0(x))
S
S/* MCG C2[HGO] backward compatibility */
S#define MCG_C2_HGO_MASK         (MCG_C2_HGO0_MASK)
S#define MCG_C2_HGO_SHIFT        (MCG_C2_HGO0_SHIFT)
S#define MCG_C2_HGO_WIDTH        (MCG_C2_HGO0_WIDTH)
S#define MCG_C2_HGO(x)           (MCG_C2_HGO0(x))
S
S/* MCG C2[RANGE] backward compatibility */
S#define MCG_C2_RANGE_MASK         (MCG_C2_RANGE0_MASK)
S#define MCG_C2_RANGE_SHIFT        (MCG_C2_RANGE0_SHIFT)
S#define MCG_C2_RANGE_WIDTH        (MCG_C2_RANGE0_WIDTH)
S#define MCG_C2_RANGE(x)           (MCG_C2_RANGE0(x))
S
S
S/*!
S * @}
S */ /* end of group MCG_Peripheral_Access_Layer */
S
S
S/* ----------------------------------------------------------------------------
S   -- MCM Peripheral Access Layer
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup MCM_Peripheral_Access_Layer MCM Peripheral Access Layer
S * @{
S */
S
S/** MCM - Register Layout Typedef */
Stypedef struct {
S       uint8_t RESERVED_0[8];
S  __I  uint16_t PLASC;                             /**< Crossbar Switch (AXBS) Slave Configuration, offset: 0x8 */
S  __I  uint16_t PLAMC;                             /**< Crossbar Switch (AXBS) Master Configuration, offset: 0xA */
S  __IO uint32_t PLACR;                             /**< Platform Control Register, offset: 0xC */
S       uint8_t RESERVED_1[48];
S  __IO uint32_t CPO;                               /**< Compute Operation Control Register, offset: 0x40 */
S} MCM_Type, *MCM_MemMapPtr;
S
S/* ----------------------------------------------------------------------------
S   -- MCM - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup MCM_Register_Accessor_Macros MCM - Register accessor macros
S * @{
S */
S
S
S/* MCM - Register accessors */
S#define MCM_PLASC_REG(base)                      ((base)->PLASC)
S#define MCM_PLAMC_REG(base)                      ((base)->PLAMC)
S#define MCM_PLACR_REG(base)                      ((base)->PLACR)
S#define MCM_CPO_REG(base)                        ((base)->CPO)
S
S/*!
S * @}
S */ /* end of group MCM_Register_Accessor_Macros */
S
S
S/* ----------------------------------------------------------------------------
S   -- MCM Register Masks
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup MCM_Register_Masks MCM Register Masks
S * @{
S */
S
S/* PLASC Bit Fields */
S#define MCM_PLASC_ASC_MASK                       0xFFu
S#define MCM_PLASC_ASC_SHIFT                      0
S#define MCM_PLASC_ASC_WIDTH                      8
S#define MCM_PLASC_ASC(x)                         (((uint16_t)(((uint16_t)(x))<<MCM_PLASC_ASC_SHIFT))&MCM_PLASC_ASC_MASK)
S/* PLAMC Bit Fields */
S#define MCM_PLAMC_AMC_MASK                       0xFFu
S#define MCM_PLAMC_AMC_SHIFT                      0
S#define MCM_PLAMC_AMC_WIDTH                      8
S#define MCM_PLAMC_AMC(x)                         (((uint16_t)(((uint16_t)(x))<<MCM_PLAMC_AMC_SHIFT))&MCM_PLAMC_AMC_MASK)
S/* PLACR Bit Fields */
S#define MCM_PLACR_ARB_MASK                       0x200u
S#define MCM_PLACR_ARB_SHIFT                      9
S#define MCM_PLACR_ARB_WIDTH                      1
S#define MCM_PLACR_ARB(x)                         (((uint32_t)(((uint32_t)(x))<<MCM_PLACR_ARB_SHIFT))&MCM_PLACR_ARB_MASK)
S#define MCM_PLACR_CFCC_MASK                      0x400u
S#define MCM_PLACR_CFCC_SHIFT                     10
S#define MCM_PLACR_CFCC_WIDTH                     1
S#define MCM_PLACR_CFCC(x)                        (((uint32_t)(((uint32_t)(x))<<MCM_PLACR_CFCC_SHIFT))&MCM_PLACR_CFCC_MASK)
S#define MCM_PLACR_DFCDA_MASK                     0x800u
S#define MCM_PLACR_DFCDA_SHIFT                    11
S#define MCM_PLACR_DFCDA_WIDTH                    1
S#define MCM_PLACR_DFCDA(x)                       (((uint32_t)(((uint32_t)(x))<<MCM_PLACR_DFCDA_SHIFT))&MCM_PLACR_DFCDA_MASK)
S#define MCM_PLACR_DFCIC_MASK                     0x1000u
S#define MCM_PLACR_DFCIC_SHIFT                    12
S#define MCM_PLACR_DFCIC_WIDTH                    1
S#define MCM_PLACR_DFCIC(x)                       (((uint32_t)(((uint32_t)(x))<<MCM_PLACR_DFCIC_SHIFT))&MCM_PLACR_DFCIC_MASK)
S#define MCM_PLACR_DFCC_MASK                      0x2000u
S#define MCM_PLACR_DFCC_SHIFT                     13
S#define MCM_PLACR_DFCC_WIDTH                     1
S#define MCM_PLACR_DFCC(x)                        (((uint32_t)(((uint32_t)(x))<<MCM_PLACR_DFCC_SHIFT))&MCM_PLACR_DFCC_MASK)
S#define MCM_PLACR_EFDS_MASK                      0x4000u
S#define MCM_PLACR_EFDS_SHIFT                     14
S#define MCM_PLACR_EFDS_WIDTH                     1
S#define MCM_PLACR_EFDS(x)                        (((uint32_t)(((uint32_t)(x))<<MCM_PLACR_EFDS_SHIFT))&MCM_PLACR_EFDS_MASK)
S#define MCM_PLACR_DFCS_MASK                      0x8000u
S#define MCM_PLACR_DFCS_SHIFT                     15
S#define MCM_PLACR_DFCS_WIDTH                     1
S#define MCM_PLACR_DFCS(x)                        (((uint32_t)(((uint32_t)(x))<<MCM_PLACR_DFCS_SHIFT))&MCM_PLACR_DFCS_MASK)
S#define MCM_PLACR_ESFC_MASK                      0x10000u
S#define MCM_PLACR_ESFC_SHIFT                     16
S#define MCM_PLACR_ESFC_WIDTH                     1
S#define MCM_PLACR_ESFC(x)                        (((uint32_t)(((uint32_t)(x))<<MCM_PLACR_ESFC_SHIFT))&MCM_PLACR_ESFC_MASK)
S/* CPO Bit Fields */
S#define MCM_CPO_CPOREQ_MASK                      0x1u
S#define MCM_CPO_CPOREQ_SHIFT                     0
S#define MCM_CPO_CPOREQ_WIDTH                     1
S#define MCM_CPO_CPOREQ(x)                        (((uint32_t)(((uint32_t)(x))<<MCM_CPO_CPOREQ_SHIFT))&MCM_CPO_CPOREQ_MASK)
S#define MCM_CPO_CPOACK_MASK                      0x2u
S#define MCM_CPO_CPOACK_SHIFT                     1
S#define MCM_CPO_CPOACK_WIDTH                     1
S#define MCM_CPO_CPOACK(x)                        (((uint32_t)(((uint32_t)(x))<<MCM_CPO_CPOACK_SHIFT))&MCM_CPO_CPOACK_MASK)
S#define MCM_CPO_CPOWOI_MASK                      0x4u
S#define MCM_CPO_CPOWOI_SHIFT                     2
S#define MCM_CPO_CPOWOI_WIDTH                     1
S#define MCM_CPO_CPOWOI(x)                        (((uint32_t)(((uint32_t)(x))<<MCM_CPO_CPOWOI_SHIFT))&MCM_CPO_CPOWOI_MASK)
S
S/*!
S * @}
S */ /* end of group MCM_Register_Masks */
S
S
S/* MCM - Peripheral instance base addresses */
S/** Peripheral MCM base address */
S#define MCM_BASE                                 (0xF0003000u)
S/** Peripheral MCM base pointer */
S#define MCM                                      ((MCM_Type *)MCM_BASE)
S#define MCM_BASE_PTR                             (MCM)
S/** Array initializer of MCM peripheral base addresses */
S#define MCM_BASE_ADDRS                           { MCM_BASE }
S/** Array initializer of MCM peripheral base pointers */
S#define MCM_BASE_PTRS                            { MCM }
S
S/* ----------------------------------------------------------------------------
S   -- MCM - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup MCM_Register_Accessor_Macros MCM - Register accessor macros
S * @{
S */
S
S
S/* MCM - Register instance definitions */
S/* MCM */
S#define MCM_PLASC                                MCM_PLASC_REG(MCM)
S#define MCM_PLAMC                                MCM_PLAMC_REG(MCM)
S#define MCM_PLACR                                MCM_PLACR_REG(MCM)
S#define MCM_CPO                                  MCM_CPO_REG(MCM)
S
S/*!
S * @}
S */ /* end of group MCM_Register_Accessor_Macros */
S
S
S/*!
S * @}
S */ /* end of group MCM_Peripheral_Access_Layer */
S
S
S/* ----------------------------------------------------------------------------
S   -- MTB Peripheral Access Layer
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup MTB_Peripheral_Access_Layer MTB Peripheral Access Layer
S * @{
S */
S
S/** MTB - Register Layout Typedef */
Stypedef struct {
S  __IO uint32_t POSITION;                          /**< MTB Position Register, offset: 0x0 */
S  __IO uint32_t MASTER;                            /**< MTB Master Register, offset: 0x4 */
S  __IO uint32_t FLOW;                              /**< MTB Flow Register, offset: 0x8 */
S  __I  uint32_t BASE;                              /**< MTB Base Register, offset: 0xC */
S       uint8_t RESERVED_0[3824];
S  __I  uint32_t MODECTRL;                          /**< Integration Mode Control Register, offset: 0xF00 */
S       uint8_t RESERVED_1[156];
S  __I  uint32_t TAGSET;                            /**< Claim TAG Set Register, offset: 0xFA0 */
S  __I  uint32_t TAGCLEAR;                          /**< Claim TAG Clear Register, offset: 0xFA4 */
S       uint8_t RESERVED_2[8];
S  __I  uint32_t LOCKACCESS;                        /**< Lock Access Register, offset: 0xFB0 */
S  __I  uint32_t LOCKSTAT;                          /**< Lock Status Register, offset: 0xFB4 */
S  __I  uint32_t AUTHSTAT;                          /**< Authentication Status Register, offset: 0xFB8 */
S  __I  uint32_t DEVICEARCH;                        /**< Device Architecture Register, offset: 0xFBC */
S       uint8_t RESERVED_3[8];
S  __I  uint32_t DEVICECFG;                         /**< Device Configuration Register, offset: 0xFC8 */
S  __I  uint32_t DEVICETYPID;                       /**< Device Type Identifier Register, offset: 0xFCC */
S  __I  uint32_t PERIPHID[8];                       /**< Peripheral ID Register, array offset: 0xFD0, array step: 0x4 */
S  __I  uint32_t COMPID[4];                         /**< Component ID Register, array offset: 0xFF0, array step: 0x4 */
S} MTB_Type, *MTB_MemMapPtr;
S
S/* ----------------------------------------------------------------------------
S   -- MTB - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup MTB_Register_Accessor_Macros MTB - Register accessor macros
S * @{
S */
S
S
S/* MTB - Register accessors */
S#define MTB_POSITION_REG(base)                   ((base)->POSITION)
S#define MTB_MASTER_REG(base)                     ((base)->MASTER)
S#define MTB_FLOW_REG(base)                       ((base)->FLOW)
S#define MTB_BASE_REG(base)                       ((base)->BASE)
S#define MTB_MODECTRL_REG(base)                   ((base)->MODECTRL)
S#define MTB_TAGSET_REG(base)                     ((base)->TAGSET)
S#define MTB_TAGCLEAR_REG(base)                   ((base)->TAGCLEAR)
S#define MTB_LOCKACCESS_REG(base)                 ((base)->LOCKACCESS)
S#define MTB_LOCKSTAT_REG(base)                   ((base)->LOCKSTAT)
S#define MTB_AUTHSTAT_REG(base)                   ((base)->AUTHSTAT)
S#define MTB_DEVICEARCH_REG(base)                 ((base)->DEVICEARCH)
S#define MTB_DEVICECFG_REG(base)                  ((base)->DEVICECFG)
S#define MTB_DEVICETYPID_REG(base)                ((base)->DEVICETYPID)
S#define MTB_PERIPHID_REG(base,index)             ((base)->PERIPHID[index])
S#define MTB_PERIPHID_COUNT                       8
S#define MTB_COMPID_REG(base,index)               ((base)->COMPID[index])
S#define MTB_COMPID_COUNT                         4
S
S/*!
S * @}
S */ /* end of group MTB_Register_Accessor_Macros */
S
S
S/* ----------------------------------------------------------------------------
S   -- MTB Register Masks
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup MTB_Register_Masks MTB Register Masks
S * @{
S */
S
S/* POSITION Bit Fields */
S#define MTB_POSITION_WRAP_MASK                   0x4u
S#define MTB_POSITION_WRAP_SHIFT                  2
S#define MTB_POSITION_WRAP_WIDTH                  1
S#define MTB_POSITION_WRAP(x)                     (((uint32_t)(((uint32_t)(x))<<MTB_POSITION_WRAP_SHIFT))&MTB_POSITION_WRAP_MASK)
S#define MTB_POSITION_POINTER_MASK                0xFFFFFFF8u
S#define MTB_POSITION_POINTER_SHIFT               3
S#define MTB_POSITION_POINTER_WIDTH               29
S#define MTB_POSITION_POINTER(x)                  (((uint32_t)(((uint32_t)(x))<<MTB_POSITION_POINTER_SHIFT))&MTB_POSITION_POINTER_MASK)
S/* MASTER Bit Fields */
S#define MTB_MASTER_MASK_MASK                     0x1Fu
S#define MTB_MASTER_MASK_SHIFT                    0
S#define MTB_MASTER_MASK_WIDTH                    5
S#define MTB_MASTER_MASK(x)                       (((uint32_t)(((uint32_t)(x))<<MTB_MASTER_MASK_SHIFT))&MTB_MASTER_MASK_MASK)
S#define MTB_MASTER_TSTARTEN_MASK                 0x20u
S#define MTB_MASTER_TSTARTEN_SHIFT                5
S#define MTB_MASTER_TSTARTEN_WIDTH                1
S#define MTB_MASTER_TSTARTEN(x)                   (((uint32_t)(((uint32_t)(x))<<MTB_MASTER_TSTARTEN_SHIFT))&MTB_MASTER_TSTARTEN_MASK)
S#define MTB_MASTER_TSTOPEN_MASK                  0x40u
S#define MTB_MASTER_TSTOPEN_SHIFT                 6
S#define MTB_MASTER_TSTOPEN_WIDTH                 1
S#define MTB_MASTER_TSTOPEN(x)                    (((uint32_t)(((uint32_t)(x))<<MTB_MASTER_TSTOPEN_SHIFT))&MTB_MASTER_TSTOPEN_MASK)
S#define MTB_MASTER_SFRWPRIV_MASK                 0x80u
S#define MTB_MASTER_SFRWPRIV_SHIFT                7
S#define MTB_MASTER_SFRWPRIV_WIDTH                1
S#define MTB_MASTER_SFRWPRIV(x)                   (((uint32_t)(((uint32_t)(x))<<MTB_MASTER_SFRWPRIV_SHIFT))&MTB_MASTER_SFRWPRIV_MASK)
S#define MTB_MASTER_RAMPRIV_MASK                  0x100u
S#define MTB_MASTER_RAMPRIV_SHIFT                 8
S#define MTB_MASTER_RAMPRIV_WIDTH                 1
S#define MTB_MASTER_RAMPRIV(x)                    (((uint32_t)(((uint32_t)(x))<<MTB_MASTER_RAMPRIV_SHIFT))&MTB_MASTER_RAMPRIV_MASK)
S#define MTB_MASTER_HALTREQ_MASK                  0x200u
S#define MTB_MASTER_HALTREQ_SHIFT                 9
S#define MTB_MASTER_HALTREQ_WIDTH                 1
S#define MTB_MASTER_HALTREQ(x)                    (((uint32_t)(((uint32_t)(x))<<MTB_MASTER_HALTREQ_SHIFT))&MTB_MASTER_HALTREQ_MASK)
S#define MTB_MASTER_EN_MASK                       0x80000000u
S#define MTB_MASTER_EN_SHIFT                      31
S#define MTB_MASTER_EN_WIDTH                      1
S#define MTB_MASTER_EN(x)                         (((uint32_t)(((uint32_t)(x))<<MTB_MASTER_EN_SHIFT))&MTB_MASTER_EN_MASK)
S/* FLOW Bit Fields */
S#define MTB_FLOW_AUTOSTOP_MASK                   0x1u
S#define MTB_FLOW_AUTOSTOP_SHIFT                  0
S#define MTB_FLOW_AUTOSTOP_WIDTH                  1
S#define MTB_FLOW_AUTOSTOP(x)                     (((uint32_t)(((uint32_t)(x))<<MTB_FLOW_AUTOSTOP_SHIFT))&MTB_FLOW_AUTOSTOP_MASK)
S#define MTB_FLOW_AUTOHALT_MASK                   0x2u
S#define MTB_FLOW_AUTOHALT_SHIFT                  1
S#define MTB_FLOW_AUTOHALT_WIDTH                  1
S#define MTB_FLOW_AUTOHALT(x)                     (((uint32_t)(((uint32_t)(x))<<MTB_FLOW_AUTOHALT_SHIFT))&MTB_FLOW_AUTOHALT_MASK)
S#define MTB_FLOW_WATERMARK_MASK                  0xFFFFFFF8u
S#define MTB_FLOW_WATERMARK_SHIFT                 3
S#define MTB_FLOW_WATERMARK_WIDTH                 29
S#define MTB_FLOW_WATERMARK(x)                    (((uint32_t)(((uint32_t)(x))<<MTB_FLOW_WATERMARK_SHIFT))&MTB_FLOW_WATERMARK_MASK)
S/* BASE Bit Fields */
S#define MTB_BASE_BASEADDR_MASK                   0xFFFFFFFFu
S#define MTB_BASE_BASEADDR_SHIFT                  0
S#define MTB_BASE_BASEADDR_WIDTH                  32
S#define MTB_BASE_BASEADDR(x)                     (((uint32_t)(((uint32_t)(x))<<MTB_BASE_BASEADDR_SHIFT))&MTB_BASE_BASEADDR_MASK)
S/* MODECTRL Bit Fields */
S#define MTB_MODECTRL_MODECTRL_MASK               0xFFFFFFFFu
S#define MTB_MODECTRL_MODECTRL_SHIFT              0
S#define MTB_MODECTRL_MODECTRL_WIDTH              32
S#define MTB_MODECTRL_MODECTRL(x)                 (((uint32_t)(((uint32_t)(x))<<MTB_MODECTRL_MODECTRL_SHIFT))&MTB_MODECTRL_MODECTRL_MASK)
S/* TAGSET Bit Fields */
S#define MTB_TAGSET_TAGSET_MASK                   0xFFFFFFFFu
S#define MTB_TAGSET_TAGSET_SHIFT                  0
S#define MTB_TAGSET_TAGSET_WIDTH                  32
S#define MTB_TAGSET_TAGSET(x)                     (((uint32_t)(((uint32_t)(x))<<MTB_TAGSET_TAGSET_SHIFT))&MTB_TAGSET_TAGSET_MASK)
S/* TAGCLEAR Bit Fields */
S#define MTB_TAGCLEAR_TAGCLEAR_MASK               0xFFFFFFFFu
S#define MTB_TAGCLEAR_TAGCLEAR_SHIFT              0
S#define MTB_TAGCLEAR_TAGCLEAR_WIDTH              32
S#define MTB_TAGCLEAR_TAGCLEAR(x)                 (((uint32_t)(((uint32_t)(x))<<MTB_TAGCLEAR_TAGCLEAR_SHIFT))&MTB_TAGCLEAR_TAGCLEAR_MASK)
S/* LOCKACCESS Bit Fields */
S#define MTB_LOCKACCESS_LOCKACCESS_MASK           0xFFFFFFFFu
S#define MTB_LOCKACCESS_LOCKACCESS_SHIFT          0
S#define MTB_LOCKACCESS_LOCKACCESS_WIDTH          32
S#define MTB_LOCKACCESS_LOCKACCESS(x)             (((uint32_t)(((uint32_t)(x))<<MTB_LOCKACCESS_LOCKACCESS_SHIFT))&MTB_LOCKACCESS_LOCKACCESS_MASK)
S/* LOCKSTAT Bit Fields */
S#define MTB_LOCKSTAT_LOCKSTAT_MASK               0xFFFFFFFFu
S#define MTB_LOCKSTAT_LOCKSTAT_SHIFT              0
S#define MTB_LOCKSTAT_LOCKSTAT_WIDTH              32
S#define MTB_LOCKSTAT_LOCKSTAT(x)                 (((uint32_t)(((uint32_t)(x))<<MTB_LOCKSTAT_LOCKSTAT_SHIFT))&MTB_LOCKSTAT_LOCKSTAT_MASK)
S/* AUTHSTAT Bit Fields */
S#define MTB_AUTHSTAT_BIT0_MASK                   0x1u
S#define MTB_AUTHSTAT_BIT0_SHIFT                  0
S#define MTB_AUTHSTAT_BIT0_WIDTH                  1
S#define MTB_AUTHSTAT_BIT0(x)                     (((uint32_t)(((uint32_t)(x))<<MTB_AUTHSTAT_BIT0_SHIFT))&MTB_AUTHSTAT_BIT0_MASK)
S#define MTB_AUTHSTAT_BIT1_MASK                   0x2u
S#define MTB_AUTHSTAT_BIT1_SHIFT                  1
S#define MTB_AUTHSTAT_BIT1_WIDTH                  1
S#define MTB_AUTHSTAT_BIT1(x)                     (((uint32_t)(((uint32_t)(x))<<MTB_AUTHSTAT_BIT1_SHIFT))&MTB_AUTHSTAT_BIT1_MASK)
S#define MTB_AUTHSTAT_BIT2_MASK                   0x4u
S#define MTB_AUTHSTAT_BIT2_SHIFT                  2
S#define MTB_AUTHSTAT_BIT2_WIDTH                  1
S#define MTB_AUTHSTAT_BIT2(x)                     (((uint32_t)(((uint32_t)(x))<<MTB_AUTHSTAT_BIT2_SHIFT))&MTB_AUTHSTAT_BIT2_MASK)
S#define MTB_AUTHSTAT_BIT3_MASK                   0x8u
S#define MTB_AUTHSTAT_BIT3_SHIFT                  3
S#define MTB_AUTHSTAT_BIT3_WIDTH                  1
S#define MTB_AUTHSTAT_BIT3(x)                     (((uint32_t)(((uint32_t)(x))<<MTB_AUTHSTAT_BIT3_SHIFT))&MTB_AUTHSTAT_BIT3_MASK)
S/* DEVICEARCH Bit Fields */
S#define MTB_DEVICEARCH_DEVICEARCH_MASK           0xFFFFFFFFu
S#define MTB_DEVICEARCH_DEVICEARCH_SHIFT          0
S#define MTB_DEVICEARCH_DEVICEARCH_WIDTH          32
S#define MTB_DEVICEARCH_DEVICEARCH(x)             (((uint32_t)(((uint32_t)(x))<<MTB_DEVICEARCH_DEVICEARCH_SHIFT))&MTB_DEVICEARCH_DEVICEARCH_MASK)
S/* DEVICECFG Bit Fields */
S#define MTB_DEVICECFG_DEVICECFG_MASK             0xFFFFFFFFu
S#define MTB_DEVICECFG_DEVICECFG_SHIFT            0
S#define MTB_DEVICECFG_DEVICECFG_WIDTH            32
S#define MTB_DEVICECFG_DEVICECFG(x)               (((uint32_t)(((uint32_t)(x))<<MTB_DEVICECFG_DEVICECFG_SHIFT))&MTB_DEVICECFG_DEVICECFG_MASK)
S/* DEVICETYPID Bit Fields */
S#define MTB_DEVICETYPID_DEVICETYPID_MASK         0xFFFFFFFFu
S#define MTB_DEVICETYPID_DEVICETYPID_SHIFT        0
S#define MTB_DEVICETYPID_DEVICETYPID_WIDTH        32
S#define MTB_DEVICETYPID_DEVICETYPID(x)           (((uint32_t)(((uint32_t)(x))<<MTB_DEVICETYPID_DEVICETYPID_SHIFT))&MTB_DEVICETYPID_DEVICETYPID_MASK)
S/* PERIPHID Bit Fields */
S#define MTB_PERIPHID_PERIPHID_MASK               0xFFFFFFFFu
S#define MTB_PERIPHID_PERIPHID_SHIFT              0
S#define MTB_PERIPHID_PERIPHID_WIDTH              32
S#define MTB_PERIPHID_PERIPHID(x)                 (((uint32_t)(((uint32_t)(x))<<MTB_PERIPHID_PERIPHID_SHIFT))&MTB_PERIPHID_PERIPHID_MASK)
S/* COMPID Bit Fields */
S#define MTB_COMPID_COMPID_MASK                   0xFFFFFFFFu
S#define MTB_COMPID_COMPID_SHIFT                  0
S#define MTB_COMPID_COMPID_WIDTH                  32
S#define MTB_COMPID_COMPID(x)                     (((uint32_t)(((uint32_t)(x))<<MTB_COMPID_COMPID_SHIFT))&MTB_COMPID_COMPID_MASK)
S
S/*!
S * @}
S */ /* end of group MTB_Register_Masks */
S
S
S/* MTB - Peripheral instance base addresses */
S/** Peripheral MTB base address */
S#define MTB_BASE                                 (0xF0000000u)
S/** Peripheral MTB base pointer */
S#define MTB                                      ((MTB_Type *)MTB_BASE)
S#define MTB_BASE_PTR                             (MTB)
S/** Array initializer of MTB peripheral base addresses */
S#define MTB_BASE_ADDRS                           { MTB_BASE }
S/** Array initializer of MTB peripheral base pointers */
S#define MTB_BASE_PTRS                            { MTB }
S
S/* ----------------------------------------------------------------------------
S   -- MTB - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup MTB_Register_Accessor_Macros MTB - Register accessor macros
S * @{
S */
S
S
S/* MTB - Register instance definitions */
S/* MTB */
S#define MTB_POSITION                             MTB_POSITION_REG(MTB)
S#define MTB_MASTER                               MTB_MASTER_REG(MTB)
S#define MTB_FLOW                                 MTB_FLOW_REG(MTB)
S#define MTB_BASEr                                MTB_BASE_REG(MTB)
S#define MTB_MODECTRL                             MTB_MODECTRL_REG(MTB)
S#define MTB_TAGSET                               MTB_TAGSET_REG(MTB)
S#define MTB_TAGCLEAR                             MTB_TAGCLEAR_REG(MTB)
S#define MTB_LOCKACCESS                           MTB_LOCKACCESS_REG(MTB)
S#define MTB_LOCKSTAT                             MTB_LOCKSTAT_REG(MTB)
S#define MTB_AUTHSTAT                             MTB_AUTHSTAT_REG(MTB)
S#define MTB_DEVICEARCH                           MTB_DEVICEARCH_REG(MTB)
S#define MTB_DEVICECFG                            MTB_DEVICECFG_REG(MTB)
S#define MTB_DEVICETYPID                          MTB_DEVICETYPID_REG(MTB)
S#define MTB_PERIPHID4                            MTB_PERIPHID_REG(MTB,0)
S#define MTB_PERIPHID5                            MTB_PERIPHID_REG(MTB,1)
S#define MTB_PERIPHID6                            MTB_PERIPHID_REG(MTB,2)
S#define MTB_PERIPHID7                            MTB_PERIPHID_REG(MTB,3)
S#define MTB_PERIPHID0                            MTB_PERIPHID_REG(MTB,4)
S#define MTB_PERIPHID1                            MTB_PERIPHID_REG(MTB,5)
S#define MTB_PERIPHID2                            MTB_PERIPHID_REG(MTB,6)
S#define MTB_PERIPHID3                            MTB_PERIPHID_REG(MTB,7)
S#define MTB_COMPID0                              MTB_COMPID_REG(MTB,0)
S#define MTB_COMPID1                              MTB_COMPID_REG(MTB,1)
S#define MTB_COMPID2                              MTB_COMPID_REG(MTB,2)
S#define MTB_COMPID3                              MTB_COMPID_REG(MTB,3)
S
S/* MTB - Register array accessors */
S#define MTB_PERIPHID(index)                      MTB_PERIPHID_REG(MTB,index)
S#define MTB_COMPID(index)                        MTB_COMPID_REG(MTB,index)
S
S/*!
S * @}
S */ /* end of group MTB_Register_Accessor_Macros */
S
S
S/*!
S * @}
S */ /* end of group MTB_Peripheral_Access_Layer */
S
S
S/* ----------------------------------------------------------------------------
S   -- MTBDWT Peripheral Access Layer
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup MTBDWT_Peripheral_Access_Layer MTBDWT Peripheral Access Layer
S * @{
S */
S
S/** MTBDWT - Register Layout Typedef */
Stypedef struct {
S  __I  uint32_t CTRL;                              /**< MTB DWT Control Register, offset: 0x0 */
S       uint8_t RESERVED_0[28];
S  struct {                                         /* offset: 0x20, array step: 0x10 */
S    __IO uint32_t COMP;                              /**< MTB_DWT Comparator Register, array offset: 0x20, array step: 0x10 */
S    __IO uint32_t MASK;                              /**< MTB_DWT Comparator Mask Register, array offset: 0x24, array step: 0x10 */
S    __IO uint32_t FCT;                               /**< MTB_DWT Comparator Function Register 0..MTB_DWT Comparator Function Register 1, array offset: 0x28, array step: 0x10 */
S         uint8_t RESERVED_0[4];
S  } COMPARATOR[2];
S       uint8_t RESERVED_1[448];
S  __IO uint32_t TBCTRL;                            /**< MTB_DWT Trace Buffer Control Register, offset: 0x200 */
S       uint8_t RESERVED_2[3524];
S  __I  uint32_t DEVICECFG;                         /**< Device Configuration Register, offset: 0xFC8 */
S  __I  uint32_t DEVICETYPID;                       /**< Device Type Identifier Register, offset: 0xFCC */
S  __I  uint32_t PERIPHID[8];                       /**< Peripheral ID Register, array offset: 0xFD0, array step: 0x4 */
S  __I  uint32_t COMPID[4];                         /**< Component ID Register, array offset: 0xFF0, array step: 0x4 */
S} MTBDWT_Type, *MTBDWT_MemMapPtr;
S
S/* ----------------------------------------------------------------------------
S   -- MTBDWT - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup MTBDWT_Register_Accessor_Macros MTBDWT - Register accessor macros
S * @{
S */
S
S
S/* MTBDWT - Register accessors */
S#define MTBDWT_CTRL_REG(base)                    ((base)->CTRL)
S#define MTBDWT_COMP_REG(base,index)              ((base)->COMPARATOR[index].COMP)
S#define MTBDWT_COMP_COUNT                        2
S#define MTBDWT_MASK_REG(base,index)              ((base)->COMPARATOR[index].MASK)
S#define MTBDWT_MASK_COUNT                        2
S#define MTBDWT_FCT_REG(base,index)               ((base)->COMPARATOR[index].FCT)
S#define MTBDWT_FCT_COUNT                         2
S#define MTBDWT_TBCTRL_REG(base)                  ((base)->TBCTRL)
S#define MTBDWT_DEVICECFG_REG(base)               ((base)->DEVICECFG)
S#define MTBDWT_DEVICETYPID_REG(base)             ((base)->DEVICETYPID)
S#define MTBDWT_PERIPHID_REG(base,index)          ((base)->PERIPHID[index])
S#define MTBDWT_PERIPHID_COUNT                    8
S#define MTBDWT_COMPID_REG(base,index)            ((base)->COMPID[index])
S#define MTBDWT_COMPID_COUNT                      4
S
S/*!
S * @}
S */ /* end of group MTBDWT_Register_Accessor_Macros */
S
S
S/* ----------------------------------------------------------------------------
S   -- MTBDWT Register Masks
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup MTBDWT_Register_Masks MTBDWT Register Masks
S * @{
S */
S
S/* CTRL Bit Fields */
S#define MTBDWT_CTRL_DWTCFGCTRL_MASK              0xFFFFFFFu
S#define MTBDWT_CTRL_DWTCFGCTRL_SHIFT             0
S#define MTBDWT_CTRL_DWTCFGCTRL_WIDTH             28
S#define MTBDWT_CTRL_DWTCFGCTRL(x)                (((uint32_t)(((uint32_t)(x))<<MTBDWT_CTRL_DWTCFGCTRL_SHIFT))&MTBDWT_CTRL_DWTCFGCTRL_MASK)
S#define MTBDWT_CTRL_NUMCMP_MASK                  0xF0000000u
S#define MTBDWT_CTRL_NUMCMP_SHIFT                 28
S#define MTBDWT_CTRL_NUMCMP_WIDTH                 4
S#define MTBDWT_CTRL_NUMCMP(x)                    (((uint32_t)(((uint32_t)(x))<<MTBDWT_CTRL_NUMCMP_SHIFT))&MTBDWT_CTRL_NUMCMP_MASK)
S/* COMP Bit Fields */
S#define MTBDWT_COMP_COMP_MASK                    0xFFFFFFFFu
S#define MTBDWT_COMP_COMP_SHIFT                   0
S#define MTBDWT_COMP_COMP_WIDTH                   32
S#define MTBDWT_COMP_COMP(x)                      (((uint32_t)(((uint32_t)(x))<<MTBDWT_COMP_COMP_SHIFT))&MTBDWT_COMP_COMP_MASK)
S/* MASK Bit Fields */
S#define MTBDWT_MASK_MASK_MASK                    0x1Fu
S#define MTBDWT_MASK_MASK_SHIFT                   0
S#define MTBDWT_MASK_MASK_WIDTH                   5
S#define MTBDWT_MASK_MASK(x)                      (((uint32_t)(((uint32_t)(x))<<MTBDWT_MASK_MASK_SHIFT))&MTBDWT_MASK_MASK_MASK)
S/* FCT Bit Fields */
S#define MTBDWT_FCT_FUNCTION_MASK                 0xFu
S#define MTBDWT_FCT_FUNCTION_SHIFT                0
S#define MTBDWT_FCT_FUNCTION_WIDTH                4
S#define MTBDWT_FCT_FUNCTION(x)                   (((uint32_t)(((uint32_t)(x))<<MTBDWT_FCT_FUNCTION_SHIFT))&MTBDWT_FCT_FUNCTION_MASK)
S#define MTBDWT_FCT_DATAVMATCH_MASK               0x100u
S#define MTBDWT_FCT_DATAVMATCH_SHIFT              8
S#define MTBDWT_FCT_DATAVMATCH_WIDTH              1
S#define MTBDWT_FCT_DATAVMATCH(x)                 (((uint32_t)(((uint32_t)(x))<<MTBDWT_FCT_DATAVMATCH_SHIFT))&MTBDWT_FCT_DATAVMATCH_MASK)
S#define MTBDWT_FCT_DATAVSIZE_MASK                0xC00u
S#define MTBDWT_FCT_DATAVSIZE_SHIFT               10
S#define MTBDWT_FCT_DATAVSIZE_WIDTH               2
S#define MTBDWT_FCT_DATAVSIZE(x)                  (((uint32_t)(((uint32_t)(x))<<MTBDWT_FCT_DATAVSIZE_SHIFT))&MTBDWT_FCT_DATAVSIZE_MASK)
S#define MTBDWT_FCT_DATAVADDR0_MASK               0xF000u
S#define MTBDWT_FCT_DATAVADDR0_SHIFT              12
S#define MTBDWT_FCT_DATAVADDR0_WIDTH              4
S#define MTBDWT_FCT_DATAVADDR0(x)                 (((uint32_t)(((uint32_t)(x))<<MTBDWT_FCT_DATAVADDR0_SHIFT))&MTBDWT_FCT_DATAVADDR0_MASK)
S#define MTBDWT_FCT_MATCHED_MASK                  0x1000000u
S#define MTBDWT_FCT_MATCHED_SHIFT                 24
S#define MTBDWT_FCT_MATCHED_WIDTH                 1
S#define MTBDWT_FCT_MATCHED(x)                    (((uint32_t)(((uint32_t)(x))<<MTBDWT_FCT_MATCHED_SHIFT))&MTBDWT_FCT_MATCHED_MASK)
S/* TBCTRL Bit Fields */
S#define MTBDWT_TBCTRL_ACOMP0_MASK                0x1u
S#define MTBDWT_TBCTRL_ACOMP0_SHIFT               0
S#define MTBDWT_TBCTRL_ACOMP0_WIDTH               1
S#define MTBDWT_TBCTRL_ACOMP0(x)                  (((uint32_t)(((uint32_t)(x))<<MTBDWT_TBCTRL_ACOMP0_SHIFT))&MTBDWT_TBCTRL_ACOMP0_MASK)
S#define MTBDWT_TBCTRL_ACOMP1_MASK                0x2u
S#define MTBDWT_TBCTRL_ACOMP1_SHIFT               1
S#define MTBDWT_TBCTRL_ACOMP1_WIDTH               1
S#define MTBDWT_TBCTRL_ACOMP1(x)                  (((uint32_t)(((uint32_t)(x))<<MTBDWT_TBCTRL_ACOMP1_SHIFT))&MTBDWT_TBCTRL_ACOMP1_MASK)
S#define MTBDWT_TBCTRL_NUMCOMP_MASK               0xF0000000u
S#define MTBDWT_TBCTRL_NUMCOMP_SHIFT              28
S#define MTBDWT_TBCTRL_NUMCOMP_WIDTH              4
S#define MTBDWT_TBCTRL_NUMCOMP(x)                 (((uint32_t)(((uint32_t)(x))<<MTBDWT_TBCTRL_NUMCOMP_SHIFT))&MTBDWT_TBCTRL_NUMCOMP_MASK)
S/* DEVICECFG Bit Fields */
S#define MTBDWT_DEVICECFG_DEVICECFG_MASK          0xFFFFFFFFu
S#define MTBDWT_DEVICECFG_DEVICECFG_SHIFT         0
S#define MTBDWT_DEVICECFG_DEVICECFG_WIDTH         32
S#define MTBDWT_DEVICECFG_DEVICECFG(x)            (((uint32_t)(((uint32_t)(x))<<MTBDWT_DEVICECFG_DEVICECFG_SHIFT))&MTBDWT_DEVICECFG_DEVICECFG_MASK)
S/* DEVICETYPID Bit Fields */
S#define MTBDWT_DEVICETYPID_DEVICETYPID_MASK      0xFFFFFFFFu
S#define MTBDWT_DEVICETYPID_DEVICETYPID_SHIFT     0
S#define MTBDWT_DEVICETYPID_DEVICETYPID_WIDTH     32
S#define MTBDWT_DEVICETYPID_DEVICETYPID(x)        (((uint32_t)(((uint32_t)(x))<<MTBDWT_DEVICETYPID_DEVICETYPID_SHIFT))&MTBDWT_DEVICETYPID_DEVICETYPID_MASK)
S/* PERIPHID Bit Fields */
S#define MTBDWT_PERIPHID_PERIPHID_MASK            0xFFFFFFFFu
S#define MTBDWT_PERIPHID_PERIPHID_SHIFT           0
S#define MTBDWT_PERIPHID_PERIPHID_WIDTH           32
S#define MTBDWT_PERIPHID_PERIPHID(x)              (((uint32_t)(((uint32_t)(x))<<MTBDWT_PERIPHID_PERIPHID_SHIFT))&MTBDWT_PERIPHID_PERIPHID_MASK)
S/* COMPID Bit Fields */
S#define MTBDWT_COMPID_COMPID_MASK                0xFFFFFFFFu
S#define MTBDWT_COMPID_COMPID_SHIFT               0
S#define MTBDWT_COMPID_COMPID_WIDTH               32
S#define MTBDWT_COMPID_COMPID(x)                  (((uint32_t)(((uint32_t)(x))<<MTBDWT_COMPID_COMPID_SHIFT))&MTBDWT_COMPID_COMPID_MASK)
S
S/*!
S * @}
S */ /* end of group MTBDWT_Register_Masks */
S
S
S/* MTBDWT - Peripheral instance base addresses */
S/** Peripheral MTBDWT base address */
S#define MTBDWT_BASE                              (0xF0001000u)
S/** Peripheral MTBDWT base pointer */
S#define MTBDWT                                   ((MTBDWT_Type *)MTBDWT_BASE)
S#define MTBDWT_BASE_PTR                          (MTBDWT)
S/** Array initializer of MTBDWT peripheral base addresses */
S#define MTBDWT_BASE_ADDRS                        { MTBDWT_BASE }
S/** Array initializer of MTBDWT peripheral base pointers */
S#define MTBDWT_BASE_PTRS                         { MTBDWT }
S
S/* ----------------------------------------------------------------------------
S   -- MTBDWT - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup MTBDWT_Register_Accessor_Macros MTBDWT - Register accessor macros
S * @{
S */
S
S
S/* MTBDWT - Register instance definitions */
S/* MTBDWT */
S#define MTBDWT_CTRL                              MTBDWT_CTRL_REG(MTBDWT)
S#define MTBDWT_COMP0                             MTBDWT_COMP_REG(MTBDWT,0)
S#define MTBDWT_MASK0                             MTBDWT_MASK_REG(MTBDWT,0)
S#define MTBDWT_FCT0                              MTBDWT_FCT_REG(MTBDWT,0)
S#define MTBDWT_COMP1                             MTBDWT_COMP_REG(MTBDWT,1)
S#define MTBDWT_MASK1                             MTBDWT_MASK_REG(MTBDWT,1)
S#define MTBDWT_FCT1                              MTBDWT_FCT_REG(MTBDWT,1)
S#define MTBDWT_TBCTRL                            MTBDWT_TBCTRL_REG(MTBDWT)
S#define MTBDWT_DEVICECFG                         MTBDWT_DEVICECFG_REG(MTBDWT)
S#define MTBDWT_DEVICETYPID                       MTBDWT_DEVICETYPID_REG(MTBDWT)
S#define MTBDWT_PERIPHID4                         MTBDWT_PERIPHID_REG(MTBDWT,0)
S#define MTBDWT_PERIPHID5                         MTBDWT_PERIPHID_REG(MTBDWT,1)
S#define MTBDWT_PERIPHID6                         MTBDWT_PERIPHID_REG(MTBDWT,2)
S#define MTBDWT_PERIPHID7                         MTBDWT_PERIPHID_REG(MTBDWT,3)
S#define MTBDWT_PERIPHID0                         MTBDWT_PERIPHID_REG(MTBDWT,4)
S#define MTBDWT_PERIPHID1                         MTBDWT_PERIPHID_REG(MTBDWT,5)
S#define MTBDWT_PERIPHID2                         MTBDWT_PERIPHID_REG(MTBDWT,6)
S#define MTBDWT_PERIPHID3                         MTBDWT_PERIPHID_REG(MTBDWT,7)
S#define MTBDWT_COMPID0                           MTBDWT_COMPID_REG(MTBDWT,0)
S#define MTBDWT_COMPID1                           MTBDWT_COMPID_REG(MTBDWT,1)
S#define MTBDWT_COMPID2                           MTBDWT_COMPID_REG(MTBDWT,2)
S#define MTBDWT_COMPID3                           MTBDWT_COMPID_REG(MTBDWT,3)
S
S/* MTBDWT - Register array accessors */
S#define MTBDWT_COMP(index)                       MTBDWT_COMP_REG(MTBDWT,index)
S#define MTBDWT_MASK(index)                       MTBDWT_MASK_REG(MTBDWT,index)
S#define MTBDWT_FCT(index)                        MTBDWT_FCT_REG(MTBDWT,index)
S#define MTBDWT_PERIPHID(index)                   MTBDWT_PERIPHID_REG(MTBDWT,index)
S#define MTBDWT_COMPID(index)                     MTBDWT_COMPID_REG(MTBDWT,index)
S
S/*!
S * @}
S */ /* end of group MTBDWT_Register_Accessor_Macros */
S
S
S/*!
S * @}
S */ /* end of group MTBDWT_Peripheral_Access_Layer */
S
S
S/* ----------------------------------------------------------------------------
S   -- NV Peripheral Access Layer
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup NV_Peripheral_Access_Layer NV Peripheral Access Layer
S * @{
S */
S
S/** NV - Register Layout Typedef */
Stypedef struct {
S  __I  uint8_t BACKKEY3;                           /**< Backdoor Comparison Key 3., offset: 0x0 */
S  __I  uint8_t BACKKEY2;                           /**< Backdoor Comparison Key 2., offset: 0x1 */
S  __I  uint8_t BACKKEY1;                           /**< Backdoor Comparison Key 1., offset: 0x2 */
S  __I  uint8_t BACKKEY0;                           /**< Backdoor Comparison Key 0., offset: 0x3 */
S  __I  uint8_t BACKKEY7;                           /**< Backdoor Comparison Key 7., offset: 0x4 */
S  __I  uint8_t BACKKEY6;                           /**< Backdoor Comparison Key 6., offset: 0x5 */
S  __I  uint8_t BACKKEY5;                           /**< Backdoor Comparison Key 5., offset: 0x6 */
S  __I  uint8_t BACKKEY4;                           /**< Backdoor Comparison Key 4., offset: 0x7 */
S  __I  uint8_t FPROT3;                             /**< Non-volatile P-Flash Protection 1 - Low Register, offset: 0x8 */
S  __I  uint8_t FPROT2;                             /**< Non-volatile P-Flash Protection 1 - High Register, offset: 0x9 */
S  __I  uint8_t FPROT1;                             /**< Non-volatile P-Flash Protection 0 - Low Register, offset: 0xA */
S  __I  uint8_t FPROT0;                             /**< Non-volatile P-Flash Protection 0 - High Register, offset: 0xB */
S  __I  uint8_t FSEC;                               /**< Non-volatile Flash Security Register, offset: 0xC */
S  __I  uint8_t FOPT;                               /**< Non-volatile Flash Option Register, offset: 0xD */
S} NV_Type, *NV_MemMapPtr;
S
S/* ----------------------------------------------------------------------------
S   -- NV - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup NV_Register_Accessor_Macros NV - Register accessor macros
S * @{
S */
S
S
S/* NV - Register accessors */
S#define NV_BACKKEY3_REG(base)                    ((base)->BACKKEY3)
S#define NV_BACKKEY2_REG(base)                    ((base)->BACKKEY2)
S#define NV_BACKKEY1_REG(base)                    ((base)->BACKKEY1)
S#define NV_BACKKEY0_REG(base)                    ((base)->BACKKEY0)
S#define NV_BACKKEY7_REG(base)                    ((base)->BACKKEY7)
S#define NV_BACKKEY6_REG(base)                    ((base)->BACKKEY6)
S#define NV_BACKKEY5_REG(base)                    ((base)->BACKKEY5)
S#define NV_BACKKEY4_REG(base)                    ((base)->BACKKEY4)
S#define NV_FPROT3_REG(base)                      ((base)->FPROT3)
S#define NV_FPROT2_REG(base)                      ((base)->FPROT2)
S#define NV_FPROT1_REG(base)                      ((base)->FPROT1)
S#define NV_FPROT0_REG(base)                      ((base)->FPROT0)
S#define NV_FSEC_REG(base)                        ((base)->FSEC)
S#define NV_FOPT_REG(base)                        ((base)->FOPT)
S
S/*!
S * @}
S */ /* end of group NV_Register_Accessor_Macros */
S
S
S/* ----------------------------------------------------------------------------
S   -- NV Register Masks
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup NV_Register_Masks NV Register Masks
S * @{
S */
S
S/* BACKKEY3 Bit Fields */
S#define NV_BACKKEY3_KEY_MASK                     0xFFu
S#define NV_BACKKEY3_KEY_SHIFT                    0
S#define NV_BACKKEY3_KEY_WIDTH                    8
S#define NV_BACKKEY3_KEY(x)                       (((uint8_t)(((uint8_t)(x))<<NV_BACKKEY3_KEY_SHIFT))&NV_BACKKEY3_KEY_MASK)
S/* BACKKEY2 Bit Fields */
S#define NV_BACKKEY2_KEY_MASK                     0xFFu
S#define NV_BACKKEY2_KEY_SHIFT                    0
S#define NV_BACKKEY2_KEY_WIDTH                    8
S#define NV_BACKKEY2_KEY(x)                       (((uint8_t)(((uint8_t)(x))<<NV_BACKKEY2_KEY_SHIFT))&NV_BACKKEY2_KEY_MASK)
S/* BACKKEY1 Bit Fields */
S#define NV_BACKKEY1_KEY_MASK                     0xFFu
S#define NV_BACKKEY1_KEY_SHIFT                    0
S#define NV_BACKKEY1_KEY_WIDTH                    8
S#define NV_BACKKEY1_KEY(x)                       (((uint8_t)(((uint8_t)(x))<<NV_BACKKEY1_KEY_SHIFT))&NV_BACKKEY1_KEY_MASK)
S/* BACKKEY0 Bit Fields */
S#define NV_BACKKEY0_KEY_MASK                     0xFFu
S#define NV_BACKKEY0_KEY_SHIFT                    0
S#define NV_BACKKEY0_KEY_WIDTH                    8
S#define NV_BACKKEY0_KEY(x)                       (((uint8_t)(((uint8_t)(x))<<NV_BACKKEY0_KEY_SHIFT))&NV_BACKKEY0_KEY_MASK)
S/* BACKKEY7 Bit Fields */
S#define NV_BACKKEY7_KEY_MASK                     0xFFu
S#define NV_BACKKEY7_KEY_SHIFT                    0
S#define NV_BACKKEY7_KEY_WIDTH                    8
S#define NV_BACKKEY7_KEY(x)                       (((uint8_t)(((uint8_t)(x))<<NV_BACKKEY7_KEY_SHIFT))&NV_BACKKEY7_KEY_MASK)
S/* BACKKEY6 Bit Fields */
S#define NV_BACKKEY6_KEY_MASK                     0xFFu
S#define NV_BACKKEY6_KEY_SHIFT                    0
S#define NV_BACKKEY6_KEY_WIDTH                    8
S#define NV_BACKKEY6_KEY(x)                       (((uint8_t)(((uint8_t)(x))<<NV_BACKKEY6_KEY_SHIFT))&NV_BACKKEY6_KEY_MASK)
S/* BACKKEY5 Bit Fields */
S#define NV_BACKKEY5_KEY_MASK                     0xFFu
S#define NV_BACKKEY5_KEY_SHIFT                    0
S#define NV_BACKKEY5_KEY_WIDTH                    8
S#define NV_BACKKEY5_KEY(x)                       (((uint8_t)(((uint8_t)(x))<<NV_BACKKEY5_KEY_SHIFT))&NV_BACKKEY5_KEY_MASK)
S/* BACKKEY4 Bit Fields */
S#define NV_BACKKEY4_KEY_MASK                     0xFFu
S#define NV_BACKKEY4_KEY_SHIFT                    0
S#define NV_BACKKEY4_KEY_WIDTH                    8
S#define NV_BACKKEY4_KEY(x)                       (((uint8_t)(((uint8_t)(x))<<NV_BACKKEY4_KEY_SHIFT))&NV_BACKKEY4_KEY_MASK)
S/* FPROT3 Bit Fields */
S#define NV_FPROT3_PROT_MASK                      0xFFu
S#define NV_FPROT3_PROT_SHIFT                     0
S#define NV_FPROT3_PROT_WIDTH                     8
S#define NV_FPROT3_PROT(x)                        (((uint8_t)(((uint8_t)(x))<<NV_FPROT3_PROT_SHIFT))&NV_FPROT3_PROT_MASK)
S/* FPROT2 Bit Fields */
S#define NV_FPROT2_PROT_MASK                      0xFFu
S#define NV_FPROT2_PROT_SHIFT                     0
S#define NV_FPROT2_PROT_WIDTH                     8
S#define NV_FPROT2_PROT(x)                        (((uint8_t)(((uint8_t)(x))<<NV_FPROT2_PROT_SHIFT))&NV_FPROT2_PROT_MASK)
S/* FPROT1 Bit Fields */
S#define NV_FPROT1_PROT_MASK                      0xFFu
S#define NV_FPROT1_PROT_SHIFT                     0
S#define NV_FPROT1_PROT_WIDTH                     8
S#define NV_FPROT1_PROT(x)                        (((uint8_t)(((uint8_t)(x))<<NV_FPROT1_PROT_SHIFT))&NV_FPROT1_PROT_MASK)
S/* FPROT0 Bit Fields */
S#define NV_FPROT0_PROT_MASK                      0xFFu
S#define NV_FPROT0_PROT_SHIFT                     0
S#define NV_FPROT0_PROT_WIDTH                     8
S#define NV_FPROT0_PROT(x)                        (((uint8_t)(((uint8_t)(x))<<NV_FPROT0_PROT_SHIFT))&NV_FPROT0_PROT_MASK)
S/* FSEC Bit Fields */
S#define NV_FSEC_SEC_MASK                         0x3u
S#define NV_FSEC_SEC_SHIFT                        0
S#define NV_FSEC_SEC_WIDTH                        2
S#define NV_FSEC_SEC(x)                           (((uint8_t)(((uint8_t)(x))<<NV_FSEC_SEC_SHIFT))&NV_FSEC_SEC_MASK)
S#define NV_FSEC_FSLACC_MASK                      0xCu
S#define NV_FSEC_FSLACC_SHIFT                     2
S#define NV_FSEC_FSLACC_WIDTH                     2
S#define NV_FSEC_FSLACC(x)                        (((uint8_t)(((uint8_t)(x))<<NV_FSEC_FSLACC_SHIFT))&NV_FSEC_FSLACC_MASK)
S#define NV_FSEC_MEEN_MASK                        0x30u
S#define NV_FSEC_MEEN_SHIFT                       4
S#define NV_FSEC_MEEN_WIDTH                       2
S#define NV_FSEC_MEEN(x)                          (((uint8_t)(((uint8_t)(x))<<NV_FSEC_MEEN_SHIFT))&NV_FSEC_MEEN_MASK)
S#define NV_FSEC_KEYEN_MASK                       0xC0u
S#define NV_FSEC_KEYEN_SHIFT                      6
S#define NV_FSEC_KEYEN_WIDTH                      2
S#define NV_FSEC_KEYEN(x)                         (((uint8_t)(((uint8_t)(x))<<NV_FSEC_KEYEN_SHIFT))&NV_FSEC_KEYEN_MASK)
S/* FOPT Bit Fields */
S#define NV_FOPT_LPBOOT0_MASK                     0x1u
S#define NV_FOPT_LPBOOT0_SHIFT                    0
S#define NV_FOPT_LPBOOT0_WIDTH                    1
S#define NV_FOPT_LPBOOT0(x)                       (((uint8_t)(((uint8_t)(x))<<NV_FOPT_LPBOOT0_SHIFT))&NV_FOPT_LPBOOT0_MASK)
S#define NV_FOPT_NMI_DIS_MASK                     0x4u
S#define NV_FOPT_NMI_DIS_SHIFT                    2
S#define NV_FOPT_NMI_DIS_WIDTH                    1
S#define NV_FOPT_NMI_DIS(x)                       (((uint8_t)(((uint8_t)(x))<<NV_FOPT_NMI_DIS_SHIFT))&NV_FOPT_NMI_DIS_MASK)
S#define NV_FOPT_RESET_PIN_CFG_MASK               0x8u
S#define NV_FOPT_RESET_PIN_CFG_SHIFT              3
S#define NV_FOPT_RESET_PIN_CFG_WIDTH              1
S#define NV_FOPT_RESET_PIN_CFG(x)                 (((uint8_t)(((uint8_t)(x))<<NV_FOPT_RESET_PIN_CFG_SHIFT))&NV_FOPT_RESET_PIN_CFG_MASK)
S#define NV_FOPT_LPBOOT1_MASK                     0x10u
S#define NV_FOPT_LPBOOT1_SHIFT                    4
S#define NV_FOPT_LPBOOT1_WIDTH                    1
S#define NV_FOPT_LPBOOT1(x)                       (((uint8_t)(((uint8_t)(x))<<NV_FOPT_LPBOOT1_SHIFT))&NV_FOPT_LPBOOT1_MASK)
S#define NV_FOPT_FAST_INIT_MASK                   0x20u
S#define NV_FOPT_FAST_INIT_SHIFT                  5
S#define NV_FOPT_FAST_INIT_WIDTH                  1
S#define NV_FOPT_FAST_INIT(x)                     (((uint8_t)(((uint8_t)(x))<<NV_FOPT_FAST_INIT_SHIFT))&NV_FOPT_FAST_INIT_MASK)
S
S/*!
S * @}
S */ /* end of group NV_Register_Masks */
S
S
S/* NV - Peripheral instance base addresses */
S/** Peripheral FTFA_FlashConfig base address */
S#define FTFA_FlashConfig_BASE                    (0x400u)
S/** Peripheral FTFA_FlashConfig base pointer */
S#define FTFA_FlashConfig                         ((NV_Type *)FTFA_FlashConfig_BASE)
S#define FTFA_FlashConfig_BASE_PTR                (FTFA_FlashConfig)
S/** Array initializer of NV peripheral base addresses */
S#define NV_BASE_ADDRS                            { FTFA_FlashConfig_BASE }
S/** Array initializer of NV peripheral base pointers */
S#define NV_BASE_PTRS                             { FTFA_FlashConfig }
S
S/* ----------------------------------------------------------------------------
S   -- NV - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup NV_Register_Accessor_Macros NV - Register accessor macros
S * @{
S */
S
S
S/* NV - Register instance definitions */
S/* FTFA_FlashConfig */
S#define NV_BACKKEY3                              NV_BACKKEY3_REG(FTFA_FlashConfig)
S#define NV_BACKKEY2                              NV_BACKKEY2_REG(FTFA_FlashConfig)
S#define NV_BACKKEY1                              NV_BACKKEY1_REG(FTFA_FlashConfig)
S#define NV_BACKKEY0                              NV_BACKKEY0_REG(FTFA_FlashConfig)
S#define NV_BACKKEY7                              NV_BACKKEY7_REG(FTFA_FlashConfig)
S#define NV_BACKKEY6                              NV_BACKKEY6_REG(FTFA_FlashConfig)
S#define NV_BACKKEY5                              NV_BACKKEY5_REG(FTFA_FlashConfig)
S#define NV_BACKKEY4                              NV_BACKKEY4_REG(FTFA_FlashConfig)
S#define NV_FPROT3                                NV_FPROT3_REG(FTFA_FlashConfig)
S#define NV_FPROT2                                NV_FPROT2_REG(FTFA_FlashConfig)
S#define NV_FPROT1                                NV_FPROT1_REG(FTFA_FlashConfig)
S#define NV_FPROT0                                NV_FPROT0_REG(FTFA_FlashConfig)
S#define NV_FSEC                                  NV_FSEC_REG(FTFA_FlashConfig)
S#define NV_FOPT                                  NV_FOPT_REG(FTFA_FlashConfig)
S
S/*!
S * @}
S */ /* end of group NV_Register_Accessor_Macros */
S
S
S/*!
S * @}
S */ /* end of group NV_Peripheral_Access_Layer */
S
S
S/* ----------------------------------------------------------------------------
S   -- OSC Peripheral Access Layer
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup OSC_Peripheral_Access_Layer OSC Peripheral Access Layer
S * @{
S */
S
S/** OSC - Register Layout Typedef */
Stypedef struct {
S  __IO uint8_t CR;                                 /**< OSC Control Register, offset: 0x0 */
S} OSC_Type, *OSC_MemMapPtr;
S
S/* ----------------------------------------------------------------------------
S   -- OSC - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup OSC_Register_Accessor_Macros OSC - Register accessor macros
S * @{
S */
S
S
S/* OSC - Register accessors */
S#define OSC_CR_REG(base)                         ((base)->CR)
S
S/*!
S * @}
S */ /* end of group OSC_Register_Accessor_Macros */
S
S
S/* ----------------------------------------------------------------------------
S   -- OSC Register Masks
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup OSC_Register_Masks OSC Register Masks
S * @{
S */
S
S/* CR Bit Fields */
S#define OSC_CR_SC16P_MASK                        0x1u
S#define OSC_CR_SC16P_SHIFT                       0
S#define OSC_CR_SC16P_WIDTH                       1
S#define OSC_CR_SC16P(x)                          (((uint8_t)(((uint8_t)(x))<<OSC_CR_SC16P_SHIFT))&OSC_CR_SC16P_MASK)
S#define OSC_CR_SC8P_MASK                         0x2u
S#define OSC_CR_SC8P_SHIFT                        1
S#define OSC_CR_SC8P_WIDTH                        1
S#define OSC_CR_SC8P(x)                           (((uint8_t)(((uint8_t)(x))<<OSC_CR_SC8P_SHIFT))&OSC_CR_SC8P_MASK)
S#define OSC_CR_SC4P_MASK                         0x4u
S#define OSC_CR_SC4P_SHIFT                        2
S#define OSC_CR_SC4P_WIDTH                        1
S#define OSC_CR_SC4P(x)                           (((uint8_t)(((uint8_t)(x))<<OSC_CR_SC4P_SHIFT))&OSC_CR_SC4P_MASK)
S#define OSC_CR_SC2P_MASK                         0x8u
S#define OSC_CR_SC2P_SHIFT                        3
S#define OSC_CR_SC2P_WIDTH                        1
S#define OSC_CR_SC2P(x)                           (((uint8_t)(((uint8_t)(x))<<OSC_CR_SC2P_SHIFT))&OSC_CR_SC2P_MASK)
S#define OSC_CR_EREFSTEN_MASK                     0x20u
S#define OSC_CR_EREFSTEN_SHIFT                    5
S#define OSC_CR_EREFSTEN_WIDTH                    1
S#define OSC_CR_EREFSTEN(x)                       (((uint8_t)(((uint8_t)(x))<<OSC_CR_EREFSTEN_SHIFT))&OSC_CR_EREFSTEN_MASK)
S#define OSC_CR_ERCLKEN_MASK                      0x80u
S#define OSC_CR_ERCLKEN_SHIFT                     7
S#define OSC_CR_ERCLKEN_WIDTH                     1
S#define OSC_CR_ERCLKEN(x)                        (((uint8_t)(((uint8_t)(x))<<OSC_CR_ERCLKEN_SHIFT))&OSC_CR_ERCLKEN_MASK)
S
S/*!
S * @}
S */ /* end of group OSC_Register_Masks */
S
S
S/* OSC - Peripheral instance base addresses */
S/** Peripheral OSC0 base address */
S#define OSC0_BASE                                (0x40065000u)
S/** Peripheral OSC0 base pointer */
S#define OSC0                                     ((OSC_Type *)OSC0_BASE)
S#define OSC0_BASE_PTR                            (OSC0)
S/** Array initializer of OSC peripheral base addresses */
S#define OSC_BASE_ADDRS                           { OSC0_BASE }
S/** Array initializer of OSC peripheral base pointers */
S#define OSC_BASE_PTRS                            { OSC0 }
S
S/* ----------------------------------------------------------------------------
S   -- OSC - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup OSC_Register_Accessor_Macros OSC - Register accessor macros
S * @{
S */
S
S
S/* OSC - Register instance definitions */
S/* OSC0 */
S#define OSC0_CR                                  OSC_CR_REG(OSC0)
S
S/*!
S * @}
S */ /* end of group OSC_Register_Accessor_Macros */
S
S
S/*!
S * @}
S */ /* end of group OSC_Peripheral_Access_Layer */
S
S
S/* ----------------------------------------------------------------------------
S   -- PIT Peripheral Access Layer
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup PIT_Peripheral_Access_Layer PIT Peripheral Access Layer
S * @{
S */
S
S/** PIT - Register Layout Typedef */
Stypedef struct {
S  __IO uint32_t MCR;                               /**< PIT Module Control Register, offset: 0x0 */
S       uint8_t RESERVED_0[220];
S  __I  uint32_t LTMR64H;                           /**< PIT Upper Lifetime Timer Register, offset: 0xE0 */
S  __I  uint32_t LTMR64L;                           /**< PIT Lower Lifetime Timer Register, offset: 0xE4 */
S       uint8_t RESERVED_1[24];
S  struct {                                         /* offset: 0x100, array step: 0x10 */
S    __IO uint32_t LDVAL;                             /**< Timer Load Value Register, array offset: 0x100, array step: 0x10 */
S    __I  uint32_t CVAL;                              /**< Current Timer Value Register, array offset: 0x104, array step: 0x10 */
S    __IO uint32_t TCTRL;                             /**< Timer Control Register, array offset: 0x108, array step: 0x10 */
S    __IO uint32_t TFLG;                              /**< Timer Flag Register, array offset: 0x10C, array step: 0x10 */
S  } CHANNEL[2];
S} PIT_Type, *PIT_MemMapPtr;
S
S/* ----------------------------------------------------------------------------
S   -- PIT - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup PIT_Register_Accessor_Macros PIT - Register accessor macros
S * @{
S */
S
S
S/* PIT - Register accessors */
S#define PIT_MCR_REG(base)                        ((base)->MCR)
S#define PIT_LTMR64H_REG(base)                    ((base)->LTMR64H)
S#define PIT_LTMR64L_REG(base)                    ((base)->LTMR64L)
S#define PIT_LDVAL_REG(base,index)                ((base)->CHANNEL[index].LDVAL)
S#define PIT_LDVAL_COUNT                          2
S#define PIT_CVAL_REG(base,index)                 ((base)->CHANNEL[index].CVAL)
S#define PIT_CVAL_COUNT                           2
S#define PIT_TCTRL_REG(base,index)                ((base)->CHANNEL[index].TCTRL)
S#define PIT_TCTRL_COUNT                          2
S#define PIT_TFLG_REG(base,index)                 ((base)->CHANNEL[index].TFLG)
S#define PIT_TFLG_COUNT                           2
S
S/*!
S * @}
S */ /* end of group PIT_Register_Accessor_Macros */
S
S
S/* ----------------------------------------------------------------------------
S   -- PIT Register Masks
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup PIT_Register_Masks PIT Register Masks
S * @{
S */
S
S/* MCR Bit Fields */
S#define PIT_MCR_FRZ_MASK                         0x1u
S#define PIT_MCR_FRZ_SHIFT                        0
S#define PIT_MCR_FRZ_WIDTH                        1
S#define PIT_MCR_FRZ(x)                           (((uint32_t)(((uint32_t)(x))<<PIT_MCR_FRZ_SHIFT))&PIT_MCR_FRZ_MASK)
S#define PIT_MCR_MDIS_MASK                        0x2u
S#define PIT_MCR_MDIS_SHIFT                       1
S#define PIT_MCR_MDIS_WIDTH                       1
S#define PIT_MCR_MDIS(x)                          (((uint32_t)(((uint32_t)(x))<<PIT_MCR_MDIS_SHIFT))&PIT_MCR_MDIS_MASK)
S/* LTMR64H Bit Fields */
S#define PIT_LTMR64H_LTH_MASK                     0xFFFFFFFFu
S#define PIT_LTMR64H_LTH_SHIFT                    0
S#define PIT_LTMR64H_LTH_WIDTH                    32
S#define PIT_LTMR64H_LTH(x)                       (((uint32_t)(((uint32_t)(x))<<PIT_LTMR64H_LTH_SHIFT))&PIT_LTMR64H_LTH_MASK)
S/* LTMR64L Bit Fields */
S#define PIT_LTMR64L_LTL_MASK                     0xFFFFFFFFu
S#define PIT_LTMR64L_LTL_SHIFT                    0
S#define PIT_LTMR64L_LTL_WIDTH                    32
S#define PIT_LTMR64L_LTL(x)                       (((uint32_t)(((uint32_t)(x))<<PIT_LTMR64L_LTL_SHIFT))&PIT_LTMR64L_LTL_MASK)
S/* LDVAL Bit Fields */
S#define PIT_LDVAL_TSV_MASK                       0xFFFFFFFFu
S#define PIT_LDVAL_TSV_SHIFT                      0
S#define PIT_LDVAL_TSV_WIDTH                      32
S#define PIT_LDVAL_TSV(x)                         (((uint32_t)(((uint32_t)(x))<<PIT_LDVAL_TSV_SHIFT))&PIT_LDVAL_TSV_MASK)
S/* CVAL Bit Fields */
S#define PIT_CVAL_TVL_MASK                        0xFFFFFFFFu
S#define PIT_CVAL_TVL_SHIFT                       0
S#define PIT_CVAL_TVL_WIDTH                       32
S#define PIT_CVAL_TVL(x)                          (((uint32_t)(((uint32_t)(x))<<PIT_CVAL_TVL_SHIFT))&PIT_CVAL_TVL_MASK)
S/* TCTRL Bit Fields */
S#define PIT_TCTRL_TEN_MASK                       0x1u
S#define PIT_TCTRL_TEN_SHIFT                      0
S#define PIT_TCTRL_TEN_WIDTH                      1
S#define PIT_TCTRL_TEN(x)                         (((uint32_t)(((uint32_t)(x))<<PIT_TCTRL_TEN_SHIFT))&PIT_TCTRL_TEN_MASK)
S#define PIT_TCTRL_TIE_MASK                       0x2u
S#define PIT_TCTRL_TIE_SHIFT                      1
S#define PIT_TCTRL_TIE_WIDTH                      1
S#define PIT_TCTRL_TIE(x)                         (((uint32_t)(((uint32_t)(x))<<PIT_TCTRL_TIE_SHIFT))&PIT_TCTRL_TIE_MASK)
S#define PIT_TCTRL_CHN_MASK                       0x4u
S#define PIT_TCTRL_CHN_SHIFT                      2
S#define PIT_TCTRL_CHN_WIDTH                      1
S#define PIT_TCTRL_CHN(x)                         (((uint32_t)(((uint32_t)(x))<<PIT_TCTRL_CHN_SHIFT))&PIT_TCTRL_CHN_MASK)
S/* TFLG Bit Fields */
S#define PIT_TFLG_TIF_MASK                        0x1u
S#define PIT_TFLG_TIF_SHIFT                       0
S#define PIT_TFLG_TIF_WIDTH                       1
S#define PIT_TFLG_TIF(x)                          (((uint32_t)(((uint32_t)(x))<<PIT_TFLG_TIF_SHIFT))&PIT_TFLG_TIF_MASK)
S
S/*!
S * @}
S */ /* end of group PIT_Register_Masks */
S
S
S/* PIT - Peripheral instance base addresses */
S/** Peripheral PIT base address */
S#define PIT_BASE                                 (0x40037000u)
S/** Peripheral PIT base pointer */
S#define PIT                                      ((PIT_Type *)PIT_BASE)
S#define PIT_BASE_PTR                             (PIT)
S/** Array initializer of PIT peripheral base addresses */
S#define PIT_BASE_ADDRS                           { PIT_BASE }
S/** Array initializer of PIT peripheral base pointers */
S#define PIT_BASE_PTRS                            { PIT }
S/** Interrupt vectors for the PIT peripheral type */
S#define PIT_IRQS                                 { PIT_IRQn, PIT_IRQn }
S
S/* ----------------------------------------------------------------------------
S   -- PIT - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup PIT_Register_Accessor_Macros PIT - Register accessor macros
S * @{
S */
S
S
S/* PIT - Register instance definitions */
S/* PIT */
S#define PIT_MCR                                  PIT_MCR_REG(PIT)
S#define PIT_LTMR64H                              PIT_LTMR64H_REG(PIT)
S#define PIT_LTMR64L                              PIT_LTMR64L_REG(PIT)
S#define PIT_LDVAL0                               PIT_LDVAL_REG(PIT,0)
S#define PIT_CVAL0                                PIT_CVAL_REG(PIT,0)
S#define PIT_TCTRL0                               PIT_TCTRL_REG(PIT,0)
S#define PIT_TFLG0                                PIT_TFLG_REG(PIT,0)
S#define PIT_LDVAL1                               PIT_LDVAL_REG(PIT,1)
S#define PIT_CVAL1                                PIT_CVAL_REG(PIT,1)
S#define PIT_TCTRL1                               PIT_TCTRL_REG(PIT,1)
S#define PIT_TFLG1                                PIT_TFLG_REG(PIT,1)
S
S/* PIT - Register array accessors */
S#define PIT_LDVAL(index)                         PIT_LDVAL_REG(PIT,index)
S#define PIT_CVAL(index)                          PIT_CVAL_REG(PIT,index)
S#define PIT_TCTRL(index)                         PIT_TCTRL_REG(PIT,index)
S#define PIT_TFLG(index)                          PIT_TFLG_REG(PIT,index)
S
S/*!
S * @}
S */ /* end of group PIT_Register_Accessor_Macros */
S
S
S/*!
S * @}
S */ /* end of group PIT_Peripheral_Access_Layer */
S
S
S/* ----------------------------------------------------------------------------
S   -- PMC Peripheral Access Layer
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup PMC_Peripheral_Access_Layer PMC Peripheral Access Layer
S * @{
S */
S
S/** PMC - Register Layout Typedef */
Stypedef struct {
S  __IO uint8_t LVDSC1;                             /**< Low Voltage Detect Status And Control 1 register, offset: 0x0 */
S  __IO uint8_t LVDSC2;                             /**< Low Voltage Detect Status And Control 2 register, offset: 0x1 */
S  __IO uint8_t REGSC;                              /**< Regulator Status And Control register, offset: 0x2 */
S} PMC_Type, *PMC_MemMapPtr;
S
S/* ----------------------------------------------------------------------------
S   -- PMC - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup PMC_Register_Accessor_Macros PMC - Register accessor macros
S * @{
S */
S
S
S/* PMC - Register accessors */
S#define PMC_LVDSC1_REG(base)                     ((base)->LVDSC1)
S#define PMC_LVDSC2_REG(base)                     ((base)->LVDSC2)
S#define PMC_REGSC_REG(base)                      ((base)->REGSC)
S
S/*!
S * @}
S */ /* end of group PMC_Register_Accessor_Macros */
S
S
S/* ----------------------------------------------------------------------------
S   -- PMC Register Masks
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup PMC_Register_Masks PMC Register Masks
S * @{
S */
S
S/* LVDSC1 Bit Fields */
S#define PMC_LVDSC1_LVDV_MASK                     0x3u
S#define PMC_LVDSC1_LVDV_SHIFT                    0
S#define PMC_LVDSC1_LVDV_WIDTH                    2
S#define PMC_LVDSC1_LVDV(x)                       (((uint8_t)(((uint8_t)(x))<<PMC_LVDSC1_LVDV_SHIFT))&PMC_LVDSC1_LVDV_MASK)
S#define PMC_LVDSC1_LVDRE_MASK                    0x10u
S#define PMC_LVDSC1_LVDRE_SHIFT                   4
S#define PMC_LVDSC1_LVDRE_WIDTH                   1
S#define PMC_LVDSC1_LVDRE(x)                      (((uint8_t)(((uint8_t)(x))<<PMC_LVDSC1_LVDRE_SHIFT))&PMC_LVDSC1_LVDRE_MASK)
S#define PMC_LVDSC1_LVDIE_MASK                    0x20u
S#define PMC_LVDSC1_LVDIE_SHIFT                   5
S#define PMC_LVDSC1_LVDIE_WIDTH                   1
S#define PMC_LVDSC1_LVDIE(x)                      (((uint8_t)(((uint8_t)(x))<<PMC_LVDSC1_LVDIE_SHIFT))&PMC_LVDSC1_LVDIE_MASK)
S#define PMC_LVDSC1_LVDACK_MASK                   0x40u
S#define PMC_LVDSC1_LVDACK_SHIFT                  6
S#define PMC_LVDSC1_LVDACK_WIDTH                  1
S#define PMC_LVDSC1_LVDACK(x)                     (((uint8_t)(((uint8_t)(x))<<PMC_LVDSC1_LVDACK_SHIFT))&PMC_LVDSC1_LVDACK_MASK)
S#define PMC_LVDSC1_LVDF_MASK                     0x80u
S#define PMC_LVDSC1_LVDF_SHIFT                    7
S#define PMC_LVDSC1_LVDF_WIDTH                    1
S#define PMC_LVDSC1_LVDF(x)                       (((uint8_t)(((uint8_t)(x))<<PMC_LVDSC1_LVDF_SHIFT))&PMC_LVDSC1_LVDF_MASK)
S/* LVDSC2 Bit Fields */
S#define PMC_LVDSC2_LVWV_MASK                     0x3u
S#define PMC_LVDSC2_LVWV_SHIFT                    0
S#define PMC_LVDSC2_LVWV_WIDTH                    2
S#define PMC_LVDSC2_LVWV(x)                       (((uint8_t)(((uint8_t)(x))<<PMC_LVDSC2_LVWV_SHIFT))&PMC_LVDSC2_LVWV_MASK)
S#define PMC_LVDSC2_LVWIE_MASK                    0x20u
S#define PMC_LVDSC2_LVWIE_SHIFT                   5
S#define PMC_LVDSC2_LVWIE_WIDTH                   1
S#define PMC_LVDSC2_LVWIE(x)                      (((uint8_t)(((uint8_t)(x))<<PMC_LVDSC2_LVWIE_SHIFT))&PMC_LVDSC2_LVWIE_MASK)
S#define PMC_LVDSC2_LVWACK_MASK                   0x40u
S#define PMC_LVDSC2_LVWACK_SHIFT                  6
S#define PMC_LVDSC2_LVWACK_WIDTH                  1
S#define PMC_LVDSC2_LVWACK(x)                     (((uint8_t)(((uint8_t)(x))<<PMC_LVDSC2_LVWACK_SHIFT))&PMC_LVDSC2_LVWACK_MASK)
S#define PMC_LVDSC2_LVWF_MASK                     0x80u
S#define PMC_LVDSC2_LVWF_SHIFT                    7
S#define PMC_LVDSC2_LVWF_WIDTH                    1
S#define PMC_LVDSC2_LVWF(x)                       (((uint8_t)(((uint8_t)(x))<<PMC_LVDSC2_LVWF_SHIFT))&PMC_LVDSC2_LVWF_MASK)
S/* REGSC Bit Fields */
S#define PMC_REGSC_BGBE_MASK                      0x1u
S#define PMC_REGSC_BGBE_SHIFT                     0
S#define PMC_REGSC_BGBE_WIDTH                     1
S#define PMC_REGSC_BGBE(x)                        (((uint8_t)(((uint8_t)(x))<<PMC_REGSC_BGBE_SHIFT))&PMC_REGSC_BGBE_MASK)
S#define PMC_REGSC_REGONS_MASK                    0x4u
S#define PMC_REGSC_REGONS_SHIFT                   2
S#define PMC_REGSC_REGONS_WIDTH                   1
S#define PMC_REGSC_REGONS(x)                      (((uint8_t)(((uint8_t)(x))<<PMC_REGSC_REGONS_SHIFT))&PMC_REGSC_REGONS_MASK)
S#define PMC_REGSC_ACKISO_MASK                    0x8u
S#define PMC_REGSC_ACKISO_SHIFT                   3
S#define PMC_REGSC_ACKISO_WIDTH                   1
S#define PMC_REGSC_ACKISO(x)                      (((uint8_t)(((uint8_t)(x))<<PMC_REGSC_ACKISO_SHIFT))&PMC_REGSC_ACKISO_MASK)
S#define PMC_REGSC_BGEN_MASK                      0x10u
S#define PMC_REGSC_BGEN_SHIFT                     4
S#define PMC_REGSC_BGEN_WIDTH                     1
S#define PMC_REGSC_BGEN(x)                        (((uint8_t)(((uint8_t)(x))<<PMC_REGSC_BGEN_SHIFT))&PMC_REGSC_BGEN_MASK)
S
S/*!
S * @}
S */ /* end of group PMC_Register_Masks */
S
S
S/* PMC - Peripheral instance base addresses */
S/** Peripheral PMC base address */
S#define PMC_BASE                                 (0x4007D000u)
S/** Peripheral PMC base pointer */
S#define PMC                                      ((PMC_Type *)PMC_BASE)
S#define PMC_BASE_PTR                             (PMC)
S/** Array initializer of PMC peripheral base addresses */
S#define PMC_BASE_ADDRS                           { PMC_BASE }
S/** Array initializer of PMC peripheral base pointers */
S#define PMC_BASE_PTRS                            { PMC }
S/** Interrupt vectors for the PMC peripheral type */
S#define PMC_IRQS                                 { LVD_LVW_IRQn }
S
S/* ----------------------------------------------------------------------------
S   -- PMC - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup PMC_Register_Accessor_Macros PMC - Register accessor macros
S * @{
S */
S
S
S/* PMC - Register instance definitions */
S/* PMC */
S#define PMC_LVDSC1                               PMC_LVDSC1_REG(PMC)
S#define PMC_LVDSC2                               PMC_LVDSC2_REG(PMC)
S#define PMC_REGSC                                PMC_REGSC_REG(PMC)
S
S/*!
S * @}
S */ /* end of group PMC_Register_Accessor_Macros */
S
S
S/*!
S * @}
S */ /* end of group PMC_Peripheral_Access_Layer */
S
S
S/* ----------------------------------------------------------------------------
S   -- PORT Peripheral Access Layer
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup PORT_Peripheral_Access_Layer PORT Peripheral Access Layer
S * @{
S */
S
S/** PORT - Register Layout Typedef */
Stypedef struct {
S  __IO uint32_t PCR[32];                           /**< Pin Control Register n, array offset: 0x0, array step: 0x4 */
S  __O  uint32_t GPCLR;                             /**< Global Pin Control Low Register, offset: 0x80 */
S  __O  uint32_t GPCHR;                             /**< Global Pin Control High Register, offset: 0x84 */
S       uint8_t RESERVED_0[24];
S  __IO uint32_t ISFR;                              /**< Interrupt Status Flag Register, offset: 0xA0 */
S} PORT_Type, *PORT_MemMapPtr;
S
S/* ----------------------------------------------------------------------------
S   -- PORT - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup PORT_Register_Accessor_Macros PORT - Register accessor macros
S * @{
S */
S
S
S/* PORT - Register accessors */
S#define PORT_PCR_REG(base,index)                 ((base)->PCR[index])
S#define PORT_PCR_COUNT                           32
S#define PORT_GPCLR_REG(base)                     ((base)->GPCLR)
S#define PORT_GPCHR_REG(base)                     ((base)->GPCHR)
S#define PORT_ISFR_REG(base)                      ((base)->ISFR)
S
S/*!
S * @}
S */ /* end of group PORT_Register_Accessor_Macros */
S
S
S/* ----------------------------------------------------------------------------
S   -- PORT Register Masks
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup PORT_Register_Masks PORT Register Masks
S * @{
S */
S
S/* PCR Bit Fields */
S#define PORT_PCR_PS_MASK                         0x1u
S#define PORT_PCR_PS_SHIFT                        0
S#define PORT_PCR_PS_WIDTH                        1
S#define PORT_PCR_PS(x)                           (((uint32_t)(((uint32_t)(x))<<PORT_PCR_PS_SHIFT))&PORT_PCR_PS_MASK)
S#define PORT_PCR_PE_MASK                         0x2u
S#define PORT_PCR_PE_SHIFT                        1
S#define PORT_PCR_PE_WIDTH                        1
S#define PORT_PCR_PE(x)                           (((uint32_t)(((uint32_t)(x))<<PORT_PCR_PE_SHIFT))&PORT_PCR_PE_MASK)
S#define PORT_PCR_SRE_MASK                        0x4u
S#define PORT_PCR_SRE_SHIFT                       2
S#define PORT_PCR_SRE_WIDTH                       1
S#define PORT_PCR_SRE(x)                          (((uint32_t)(((uint32_t)(x))<<PORT_PCR_SRE_SHIFT))&PORT_PCR_SRE_MASK)
S#define PORT_PCR_PFE_MASK                        0x10u
S#define PORT_PCR_PFE_SHIFT                       4
S#define PORT_PCR_PFE_WIDTH                       1
S#define PORT_PCR_PFE(x)                          (((uint32_t)(((uint32_t)(x))<<PORT_PCR_PFE_SHIFT))&PORT_PCR_PFE_MASK)
S#define PORT_PCR_DSE_MASK                        0x40u
S#define PORT_PCR_DSE_SHIFT                       6
S#define PORT_PCR_DSE_WIDTH                       1
S#define PORT_PCR_DSE(x)                          (((uint32_t)(((uint32_t)(x))<<PORT_PCR_DSE_SHIFT))&PORT_PCR_DSE_MASK)
S#define PORT_PCR_MUX_MASK                        0x700u
S#define PORT_PCR_MUX_SHIFT                       8
S#define PORT_PCR_MUX_WIDTH                       3
S#define PORT_PCR_MUX(x)                          (((uint32_t)(((uint32_t)(x))<<PORT_PCR_MUX_SHIFT))&PORT_PCR_MUX_MASK)
S#define PORT_PCR_IRQC_MASK                       0xF0000u
S#define PORT_PCR_IRQC_SHIFT                      16
S#define PORT_PCR_IRQC_WIDTH                      4
S#define PORT_PCR_IRQC(x)                         (((uint32_t)(((uint32_t)(x))<<PORT_PCR_IRQC_SHIFT))&PORT_PCR_IRQC_MASK)
S#define PORT_PCR_ISF_MASK                        0x1000000u
S#define PORT_PCR_ISF_SHIFT                       24
S#define PORT_PCR_ISF_WIDTH                       1
S#define PORT_PCR_ISF(x)                          (((uint32_t)(((uint32_t)(x))<<PORT_PCR_ISF_SHIFT))&PORT_PCR_ISF_MASK)
S/* GPCLR Bit Fields */
S#define PORT_GPCLR_GPWD_MASK                     0xFFFFu
S#define PORT_GPCLR_GPWD_SHIFT                    0
S#define PORT_GPCLR_GPWD_WIDTH                    16
S#define PORT_GPCLR_GPWD(x)                       (((uint32_t)(((uint32_t)(x))<<PORT_GPCLR_GPWD_SHIFT))&PORT_GPCLR_GPWD_MASK)
S#define PORT_GPCLR_GPWE_MASK                     0xFFFF0000u
S#define PORT_GPCLR_GPWE_SHIFT                    16
S#define PORT_GPCLR_GPWE_WIDTH                    16
S#define PORT_GPCLR_GPWE(x)                       (((uint32_t)(((uint32_t)(x))<<PORT_GPCLR_GPWE_SHIFT))&PORT_GPCLR_GPWE_MASK)
S/* GPCHR Bit Fields */
S#define PORT_GPCHR_GPWD_MASK                     0xFFFFu
S#define PORT_GPCHR_GPWD_SHIFT                    0
S#define PORT_GPCHR_GPWD_WIDTH                    16
S#define PORT_GPCHR_GPWD(x)                       (((uint32_t)(((uint32_t)(x))<<PORT_GPCHR_GPWD_SHIFT))&PORT_GPCHR_GPWD_MASK)
S#define PORT_GPCHR_GPWE_MASK                     0xFFFF0000u
S#define PORT_GPCHR_GPWE_SHIFT                    16
S#define PORT_GPCHR_GPWE_WIDTH                    16
S#define PORT_GPCHR_GPWE(x)                       (((uint32_t)(((uint32_t)(x))<<PORT_GPCHR_GPWE_SHIFT))&PORT_GPCHR_GPWE_MASK)
S/* ISFR Bit Fields */
S#define PORT_ISFR_ISF_MASK                       0xFFFFFFFFu
S#define PORT_ISFR_ISF_SHIFT                      0
S#define PORT_ISFR_ISF_WIDTH                      32
S#define PORT_ISFR_ISF(x)                         (((uint32_t)(((uint32_t)(x))<<PORT_ISFR_ISF_SHIFT))&PORT_ISFR_ISF_MASK)
S
S/*!
S * @}
S */ /* end of group PORT_Register_Masks */
S
S
S/* PORT - Peripheral instance base addresses */
S/** Peripheral PORTA base address */
S#define PORTA_BASE                               (0x40049000u)
S/** Peripheral PORTA base pointer */
S#define PORTA                                    ((PORT_Type *)PORTA_BASE)
S#define PORTA_BASE_PTR                           (PORTA)
S/** Peripheral PORTB base address */
S#define PORTB_BASE                               (0x4004A000u)
S/** Peripheral PORTB base pointer */
S#define PORTB                                    ((PORT_Type *)PORTB_BASE)
S#define PORTB_BASE_PTR                           (PORTB)
S/** Peripheral PORTC base address */
S#define PORTC_BASE                               (0x4004B000u)
S/** Peripheral PORTC base pointer */
S#define PORTC                                    ((PORT_Type *)PORTC_BASE)
S#define PORTC_BASE_PTR                           (PORTC)
S/** Peripheral PORTD base address */
S#define PORTD_BASE                               (0x4004C000u)
S/** Peripheral PORTD base pointer */
S#define PORTD                                    ((PORT_Type *)PORTD_BASE)
S#define PORTD_BASE_PTR                           (PORTD)
S/** Peripheral PORTE base address */
S#define PORTE_BASE                               (0x4004D000u)
S/** Peripheral PORTE base pointer */
S#define PORTE                                    ((PORT_Type *)PORTE_BASE)
S#define PORTE_BASE_PTR                           (PORTE)
S/** Array initializer of PORT peripheral base addresses */
S#define PORT_BASE_ADDRS                          { PORTA_BASE, PORTB_BASE, PORTC_BASE, PORTD_BASE, PORTE_BASE }
S/** Array initializer of PORT peripheral base pointers */
S#define PORT_BASE_PTRS                           { PORTA, PORTB, PORTC, PORTD, PORTE }
S/** Interrupt vectors for the PORT peripheral type */
S#define PORT_IRQS                                { PORTA_IRQn, NotAvail_IRQn, NotAvail_IRQn, PORTD_IRQn, NotAvail_IRQn }
S
S/* ----------------------------------------------------------------------------
S   -- PORT - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup PORT_Register_Accessor_Macros PORT - Register accessor macros
S * @{
S */
S
S
S/* PORT - Register instance definitions */
S/* PORTA */
S#define PORTA_PCR0                               PORT_PCR_REG(PORTA,0)
S#define PORTA_PCR1                               PORT_PCR_REG(PORTA,1)
S#define PORTA_PCR2                               PORT_PCR_REG(PORTA,2)
S#define PORTA_PCR3                               PORT_PCR_REG(PORTA,3)
S#define PORTA_PCR4                               PORT_PCR_REG(PORTA,4)
S#define PORTA_PCR5                               PORT_PCR_REG(PORTA,5)
S#define PORTA_PCR6                               PORT_PCR_REG(PORTA,6)
S#define PORTA_PCR7                               PORT_PCR_REG(PORTA,7)
S#define PORTA_PCR8                               PORT_PCR_REG(PORTA,8)
S#define PORTA_PCR9                               PORT_PCR_REG(PORTA,9)
S#define PORTA_PCR10                              PORT_PCR_REG(PORTA,10)
S#define PORTA_PCR11                              PORT_PCR_REG(PORTA,11)
S#define PORTA_PCR12                              PORT_PCR_REG(PORTA,12)
S#define PORTA_PCR13                              PORT_PCR_REG(PORTA,13)
S#define PORTA_PCR14                              PORT_PCR_REG(PORTA,14)
S#define PORTA_PCR15                              PORT_PCR_REG(PORTA,15)
S#define PORTA_PCR16                              PORT_PCR_REG(PORTA,16)
S#define PORTA_PCR17                              PORT_PCR_REG(PORTA,17)
S#define PORTA_PCR18                              PORT_PCR_REG(PORTA,18)
S#define PORTA_PCR19                              PORT_PCR_REG(PORTA,19)
S#define PORTA_PCR20                              PORT_PCR_REG(PORTA,20)
S#define PORTA_PCR21                              PORT_PCR_REG(PORTA,21)
S#define PORTA_PCR22                              PORT_PCR_REG(PORTA,22)
S#define PORTA_PCR23                              PORT_PCR_REG(PORTA,23)
S#define PORTA_PCR24                              PORT_PCR_REG(PORTA,24)
S#define PORTA_PCR25                              PORT_PCR_REG(PORTA,25)
S#define PORTA_PCR26                              PORT_PCR_REG(PORTA,26)
S#define PORTA_PCR27                              PORT_PCR_REG(PORTA,27)
S#define PORTA_PCR28                              PORT_PCR_REG(PORTA,28)
S#define PORTA_PCR29                              PORT_PCR_REG(PORTA,29)
S#define PORTA_PCR30                              PORT_PCR_REG(PORTA,30)
S#define PORTA_PCR31                              PORT_PCR_REG(PORTA,31)
S#define PORTA_GPCLR                              PORT_GPCLR_REG(PORTA)
S#define PORTA_GPCHR                              PORT_GPCHR_REG(PORTA)
S#define PORTA_ISFR                               PORT_ISFR_REG(PORTA)
S/* PORTB */
S#define PORTB_PCR0                               PORT_PCR_REG(PORTB,0)
S#define PORTB_PCR1                               PORT_PCR_REG(PORTB,1)
S#define PORTB_PCR2                               PORT_PCR_REG(PORTB,2)
S#define PORTB_PCR3                               PORT_PCR_REG(PORTB,3)
S#define PORTB_PCR4                               PORT_PCR_REG(PORTB,4)
S#define PORTB_PCR5                               PORT_PCR_REG(PORTB,5)
S#define PORTB_PCR6                               PORT_PCR_REG(PORTB,6)
S#define PORTB_PCR7                               PORT_PCR_REG(PORTB,7)
S#define PORTB_PCR8                               PORT_PCR_REG(PORTB,8)
S#define PORTB_PCR9                               PORT_PCR_REG(PORTB,9)
S#define PORTB_PCR10                              PORT_PCR_REG(PORTB,10)
S#define PORTB_PCR11                              PORT_PCR_REG(PORTB,11)
S#define PORTB_PCR12                              PORT_PCR_REG(PORTB,12)
S#define PORTB_PCR13                              PORT_PCR_REG(PORTB,13)
S#define PORTB_PCR14                              PORT_PCR_REG(PORTB,14)
S#define PORTB_PCR15                              PORT_PCR_REG(PORTB,15)
S#define PORTB_PCR16                              PORT_PCR_REG(PORTB,16)
S#define PORTB_PCR17                              PORT_PCR_REG(PORTB,17)
S#define PORTB_PCR18                              PORT_PCR_REG(PORTB,18)
S#define PORTB_PCR19                              PORT_PCR_REG(PORTB,19)
S#define PORTB_PCR20                              PORT_PCR_REG(PORTB,20)
S#define PORTB_PCR21                              PORT_PCR_REG(PORTB,21)
S#define PORTB_PCR22                              PORT_PCR_REG(PORTB,22)
S#define PORTB_PCR23                              PORT_PCR_REG(PORTB,23)
S#define PORTB_PCR24                              PORT_PCR_REG(PORTB,24)
S#define PORTB_PCR25                              PORT_PCR_REG(PORTB,25)
S#define PORTB_PCR26                              PORT_PCR_REG(PORTB,26)
S#define PORTB_PCR27                              PORT_PCR_REG(PORTB,27)
S#define PORTB_PCR28                              PORT_PCR_REG(PORTB,28)
S#define PORTB_PCR29                              PORT_PCR_REG(PORTB,29)
S#define PORTB_PCR30                              PORT_PCR_REG(PORTB,30)
S#define PORTB_PCR31                              PORT_PCR_REG(PORTB,31)
S#define PORTB_GPCLR                              PORT_GPCLR_REG(PORTB)
S#define PORTB_GPCHR                              PORT_GPCHR_REG(PORTB)
S#define PORTB_ISFR                               PORT_ISFR_REG(PORTB)
S/* PORTC */
S#define PORTC_PCR0                               PORT_PCR_REG(PORTC,0)
S#define PORTC_PCR1                               PORT_PCR_REG(PORTC,1)
S#define PORTC_PCR2                               PORT_PCR_REG(PORTC,2)
S#define PORTC_PCR3                               PORT_PCR_REG(PORTC,3)
S#define PORTC_PCR4                               PORT_PCR_REG(PORTC,4)
S#define PORTC_PCR5                               PORT_PCR_REG(PORTC,5)
S#define PORTC_PCR6                               PORT_PCR_REG(PORTC,6)
S#define PORTC_PCR7                               PORT_PCR_REG(PORTC,7)
S#define PORTC_PCR8                               PORT_PCR_REG(PORTC,8)
S#define PORTC_PCR9                               PORT_PCR_REG(PORTC,9)
S#define PORTC_PCR10                              PORT_PCR_REG(PORTC,10)
S#define PORTC_PCR11                              PORT_PCR_REG(PORTC,11)
S#define PORTC_PCR12                              PORT_PCR_REG(PORTC,12)
S#define PORTC_PCR13                              PORT_PCR_REG(PORTC,13)
S#define PORTC_PCR14                              PORT_PCR_REG(PORTC,14)
S#define PORTC_PCR15                              PORT_PCR_REG(PORTC,15)
S#define PORTC_PCR16                              PORT_PCR_REG(PORTC,16)
S#define PORTC_PCR17                              PORT_PCR_REG(PORTC,17)
S#define PORTC_PCR18                              PORT_PCR_REG(PORTC,18)
S#define PORTC_PCR19                              PORT_PCR_REG(PORTC,19)
S#define PORTC_PCR20                              PORT_PCR_REG(PORTC,20)
S#define PORTC_PCR21                              PORT_PCR_REG(PORTC,21)
S#define PORTC_PCR22                              PORT_PCR_REG(PORTC,22)
S#define PORTC_PCR23                              PORT_PCR_REG(PORTC,23)
S#define PORTC_PCR24                              PORT_PCR_REG(PORTC,24)
S#define PORTC_PCR25                              PORT_PCR_REG(PORTC,25)
S#define PORTC_PCR26                              PORT_PCR_REG(PORTC,26)
S#define PORTC_PCR27                              PORT_PCR_REG(PORTC,27)
S#define PORTC_PCR28                              PORT_PCR_REG(PORTC,28)
S#define PORTC_PCR29                              PORT_PCR_REG(PORTC,29)
S#define PORTC_PCR30                              PORT_PCR_REG(PORTC,30)
S#define PORTC_PCR31                              PORT_PCR_REG(PORTC,31)
S#define PORTC_GPCLR                              PORT_GPCLR_REG(PORTC)
S#define PORTC_GPCHR                              PORT_GPCHR_REG(PORTC)
S#define PORTC_ISFR                               PORT_ISFR_REG(PORTC)
S/* PORTD */
S#define PORTD_PCR0                               PORT_PCR_REG(PORTD,0)
S#define PORTD_PCR1                               PORT_PCR_REG(PORTD,1)
S#define PORTD_PCR2                               PORT_PCR_REG(PORTD,2)
S#define PORTD_PCR3                               PORT_PCR_REG(PORTD,3)
S#define PORTD_PCR4                               PORT_PCR_REG(PORTD,4)
S#define PORTD_PCR5                               PORT_PCR_REG(PORTD,5)
S#define PORTD_PCR6                               PORT_PCR_REG(PORTD,6)
S#define PORTD_PCR7                               PORT_PCR_REG(PORTD,7)
S#define PORTD_PCR8                               PORT_PCR_REG(PORTD,8)
S#define PORTD_PCR9                               PORT_PCR_REG(PORTD,9)
S#define PORTD_PCR10                              PORT_PCR_REG(PORTD,10)
S#define PORTD_PCR11                              PORT_PCR_REG(PORTD,11)
S#define PORTD_PCR12                              PORT_PCR_REG(PORTD,12)
S#define PORTD_PCR13                              PORT_PCR_REG(PORTD,13)
S#define PORTD_PCR14                              PORT_PCR_REG(PORTD,14)
S#define PORTD_PCR15                              PORT_PCR_REG(PORTD,15)
S#define PORTD_PCR16                              PORT_PCR_REG(PORTD,16)
S#define PORTD_PCR17                              PORT_PCR_REG(PORTD,17)
S#define PORTD_PCR18                              PORT_PCR_REG(PORTD,18)
S#define PORTD_PCR19                              PORT_PCR_REG(PORTD,19)
S#define PORTD_PCR20                              PORT_PCR_REG(PORTD,20)
S#define PORTD_PCR21                              PORT_PCR_REG(PORTD,21)
S#define PORTD_PCR22                              PORT_PCR_REG(PORTD,22)
S#define PORTD_PCR23                              PORT_PCR_REG(PORTD,23)
S#define PORTD_PCR24                              PORT_PCR_REG(PORTD,24)
S#define PORTD_PCR25                              PORT_PCR_REG(PORTD,25)
S#define PORTD_PCR26                              PORT_PCR_REG(PORTD,26)
S#define PORTD_PCR27                              PORT_PCR_REG(PORTD,27)
S#define PORTD_PCR28                              PORT_PCR_REG(PORTD,28)
S#define PORTD_PCR29                              PORT_PCR_REG(PORTD,29)
S#define PORTD_PCR30                              PORT_PCR_REG(PORTD,30)
S#define PORTD_PCR31                              PORT_PCR_REG(PORTD,31)
S#define PORTD_GPCLR                              PORT_GPCLR_REG(PORTD)
S#define PORTD_GPCHR                              PORT_GPCHR_REG(PORTD)
S#define PORTD_ISFR                               PORT_ISFR_REG(PORTD)
S/* PORTE */
S#define PORTE_PCR0                               PORT_PCR_REG(PORTE,0)
S#define PORTE_PCR1                               PORT_PCR_REG(PORTE,1)
S#define PORTE_PCR2                               PORT_PCR_REG(PORTE,2)
S#define PORTE_PCR3                               PORT_PCR_REG(PORTE,3)
S#define PORTE_PCR4                               PORT_PCR_REG(PORTE,4)
S#define PORTE_PCR5                               PORT_PCR_REG(PORTE,5)
S#define PORTE_PCR6                               PORT_PCR_REG(PORTE,6)
S#define PORTE_PCR7                               PORT_PCR_REG(PORTE,7)
S#define PORTE_PCR8                               PORT_PCR_REG(PORTE,8)
S#define PORTE_PCR9                               PORT_PCR_REG(PORTE,9)
S#define PORTE_PCR10                              PORT_PCR_REG(PORTE,10)
S#define PORTE_PCR11                              PORT_PCR_REG(PORTE,11)
S#define PORTE_PCR12                              PORT_PCR_REG(PORTE,12)
S#define PORTE_PCR13                              PORT_PCR_REG(PORTE,13)
S#define PORTE_PCR14                              PORT_PCR_REG(PORTE,14)
S#define PORTE_PCR15                              PORT_PCR_REG(PORTE,15)
S#define PORTE_PCR16                              PORT_PCR_REG(PORTE,16)
S#define PORTE_PCR17                              PORT_PCR_REG(PORTE,17)
S#define PORTE_PCR18                              PORT_PCR_REG(PORTE,18)
S#define PORTE_PCR19                              PORT_PCR_REG(PORTE,19)
S#define PORTE_PCR20                              PORT_PCR_REG(PORTE,20)
S#define PORTE_PCR21                              PORT_PCR_REG(PORTE,21)
S#define PORTE_PCR22                              PORT_PCR_REG(PORTE,22)
S#define PORTE_PCR23                              PORT_PCR_REG(PORTE,23)
S#define PORTE_PCR24                              PORT_PCR_REG(PORTE,24)
S#define PORTE_PCR25                              PORT_PCR_REG(PORTE,25)
S#define PORTE_PCR26                              PORT_PCR_REG(PORTE,26)
S#define PORTE_PCR27                              PORT_PCR_REG(PORTE,27)
S#define PORTE_PCR28                              PORT_PCR_REG(PORTE,28)
S#define PORTE_PCR29                              PORT_PCR_REG(PORTE,29)
S#define PORTE_PCR30                              PORT_PCR_REG(PORTE,30)
S#define PORTE_PCR31                              PORT_PCR_REG(PORTE,31)
S#define PORTE_GPCLR                              PORT_GPCLR_REG(PORTE)
S#define PORTE_GPCHR                              PORT_GPCHR_REG(PORTE)
S#define PORTE_ISFR                               PORT_ISFR_REG(PORTE)
S
S/* PORT - Register array accessors */
S#define PORTA_PCR(index)                         PORT_PCR_REG(PORTA,index)
S#define PORTB_PCR(index)                         PORT_PCR_REG(PORTB,index)
S#define PORTC_PCR(index)                         PORT_PCR_REG(PORTC,index)
S#define PORTD_PCR(index)                         PORT_PCR_REG(PORTD,index)
S#define PORTE_PCR(index)                         PORT_PCR_REG(PORTE,index)
S
S/*!
S * @}
S */ /* end of group PORT_Register_Accessor_Macros */
S
S
S/*!
S * @}
S */ /* end of group PORT_Peripheral_Access_Layer */
S
S
S/* ----------------------------------------------------------------------------
S   -- RCM Peripheral Access Layer
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup RCM_Peripheral_Access_Layer RCM Peripheral Access Layer
S * @{
S */
S
S/** RCM - Register Layout Typedef */
Stypedef struct {
S  __I  uint8_t SRS0;                               /**< System Reset Status Register 0, offset: 0x0 */
S  __I  uint8_t SRS1;                               /**< System Reset Status Register 1, offset: 0x1 */
S       uint8_t RESERVED_0[2];
S  __IO uint8_t RPFC;                               /**< Reset Pin Filter Control register, offset: 0x4 */
S  __IO uint8_t RPFW;                               /**< Reset Pin Filter Width register, offset: 0x5 */
S} RCM_Type, *RCM_MemMapPtr;
S
S/* ----------------------------------------------------------------------------
S   -- RCM - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup RCM_Register_Accessor_Macros RCM - Register accessor macros
S * @{
S */
S
S
S/* RCM - Register accessors */
S#define RCM_SRS0_REG(base)                       ((base)->SRS0)
S#define RCM_SRS1_REG(base)                       ((base)->SRS1)
S#define RCM_RPFC_REG(base)                       ((base)->RPFC)
S#define RCM_RPFW_REG(base)                       ((base)->RPFW)
S
S/*!
S * @}
S */ /* end of group RCM_Register_Accessor_Macros */
S
S
S/* ----------------------------------------------------------------------------
S   -- RCM Register Masks
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup RCM_Register_Masks RCM Register Masks
S * @{
S */
S
S/* SRS0 Bit Fields */
S#define RCM_SRS0_WAKEUP_MASK                     0x1u
S#define RCM_SRS0_WAKEUP_SHIFT                    0
S#define RCM_SRS0_WAKEUP_WIDTH                    1
S#define RCM_SRS0_WAKEUP(x)                       (((uint8_t)(((uint8_t)(x))<<RCM_SRS0_WAKEUP_SHIFT))&RCM_SRS0_WAKEUP_MASK)
S#define RCM_SRS0_LVD_MASK                        0x2u
S#define RCM_SRS0_LVD_SHIFT                       1
S#define RCM_SRS0_LVD_WIDTH                       1
S#define RCM_SRS0_LVD(x)                          (((uint8_t)(((uint8_t)(x))<<RCM_SRS0_LVD_SHIFT))&RCM_SRS0_LVD_MASK)
S#define RCM_SRS0_LOC_MASK                        0x4u
S#define RCM_SRS0_LOC_SHIFT                       2
S#define RCM_SRS0_LOC_WIDTH                       1
S#define RCM_SRS0_LOC(x)                          (((uint8_t)(((uint8_t)(x))<<RCM_SRS0_LOC_SHIFT))&RCM_SRS0_LOC_MASK)
S#define RCM_SRS0_LOL_MASK                        0x8u
S#define RCM_SRS0_LOL_SHIFT                       3
S#define RCM_SRS0_LOL_WIDTH                       1
S#define RCM_SRS0_LOL(x)                          (((uint8_t)(((uint8_t)(x))<<RCM_SRS0_LOL_SHIFT))&RCM_SRS0_LOL_MASK)
S#define RCM_SRS0_WDOG_MASK                       0x20u
S#define RCM_SRS0_WDOG_SHIFT                      5
S#define RCM_SRS0_WDOG_WIDTH                      1
S#define RCM_SRS0_WDOG(x)                         (((uint8_t)(((uint8_t)(x))<<RCM_SRS0_WDOG_SHIFT))&RCM_SRS0_WDOG_MASK)
S#define RCM_SRS0_PIN_MASK                        0x40u
S#define RCM_SRS0_PIN_SHIFT                       6
S#define RCM_SRS0_PIN_WIDTH                       1
S#define RCM_SRS0_PIN(x)                          (((uint8_t)(((uint8_t)(x))<<RCM_SRS0_PIN_SHIFT))&RCM_SRS0_PIN_MASK)
S#define RCM_SRS0_POR_MASK                        0x80u
S#define RCM_SRS0_POR_SHIFT                       7
S#define RCM_SRS0_POR_WIDTH                       1
S#define RCM_SRS0_POR(x)                          (((uint8_t)(((uint8_t)(x))<<RCM_SRS0_POR_SHIFT))&RCM_SRS0_POR_MASK)
S/* SRS1 Bit Fields */
S#define RCM_SRS1_LOCKUP_MASK                     0x2u
S#define RCM_SRS1_LOCKUP_SHIFT                    1
S#define RCM_SRS1_LOCKUP_WIDTH                    1
S#define RCM_SRS1_LOCKUP(x)                       (((uint8_t)(((uint8_t)(x))<<RCM_SRS1_LOCKUP_SHIFT))&RCM_SRS1_LOCKUP_MASK)
S#define RCM_SRS1_SW_MASK                         0x4u
S#define RCM_SRS1_SW_SHIFT                        2
S#define RCM_SRS1_SW_WIDTH                        1
S#define RCM_SRS1_SW(x)                           (((uint8_t)(((uint8_t)(x))<<RCM_SRS1_SW_SHIFT))&RCM_SRS1_SW_MASK)
S#define RCM_SRS1_MDM_AP_MASK                     0x8u
S#define RCM_SRS1_MDM_AP_SHIFT                    3
S#define RCM_SRS1_MDM_AP_WIDTH                    1
S#define RCM_SRS1_MDM_AP(x)                       (((uint8_t)(((uint8_t)(x))<<RCM_SRS1_MDM_AP_SHIFT))&RCM_SRS1_MDM_AP_MASK)
S#define RCM_SRS1_SACKERR_MASK                    0x20u
S#define RCM_SRS1_SACKERR_SHIFT                   5
S#define RCM_SRS1_SACKERR_WIDTH                   1
S#define RCM_SRS1_SACKERR(x)                      (((uint8_t)(((uint8_t)(x))<<RCM_SRS1_SACKERR_SHIFT))&RCM_SRS1_SACKERR_MASK)
S/* RPFC Bit Fields */
S#define RCM_RPFC_RSTFLTSRW_MASK                  0x3u
S#define RCM_RPFC_RSTFLTSRW_SHIFT                 0
S#define RCM_RPFC_RSTFLTSRW_WIDTH                 2
S#define RCM_RPFC_RSTFLTSRW(x)                    (((uint8_t)(((uint8_t)(x))<<RCM_RPFC_RSTFLTSRW_SHIFT))&RCM_RPFC_RSTFLTSRW_MASK)
S#define RCM_RPFC_RSTFLTSS_MASK                   0x4u
S#define RCM_RPFC_RSTFLTSS_SHIFT                  2
S#define RCM_RPFC_RSTFLTSS_WIDTH                  1
S#define RCM_RPFC_RSTFLTSS(x)                     (((uint8_t)(((uint8_t)(x))<<RCM_RPFC_RSTFLTSS_SHIFT))&RCM_RPFC_RSTFLTSS_MASK)
S/* RPFW Bit Fields */
S#define RCM_RPFW_RSTFLTSEL_MASK                  0x1Fu
S#define RCM_RPFW_RSTFLTSEL_SHIFT                 0
S#define RCM_RPFW_RSTFLTSEL_WIDTH                 5
S#define RCM_RPFW_RSTFLTSEL(x)                    (((uint8_t)(((uint8_t)(x))<<RCM_RPFW_RSTFLTSEL_SHIFT))&RCM_RPFW_RSTFLTSEL_MASK)
S
S/*!
S * @}
S */ /* end of group RCM_Register_Masks */
S
S
S/* RCM - Peripheral instance base addresses */
S/** Peripheral RCM base address */
S#define RCM_BASE                                 (0x4007F000u)
S/** Peripheral RCM base pointer */
S#define RCM                                      ((RCM_Type *)RCM_BASE)
S#define RCM_BASE_PTR                             (RCM)
S/** Array initializer of RCM peripheral base addresses */
S#define RCM_BASE_ADDRS                           { RCM_BASE }
S/** Array initializer of RCM peripheral base pointers */
S#define RCM_BASE_PTRS                            { RCM }
S
S/* ----------------------------------------------------------------------------
S   -- RCM - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup RCM_Register_Accessor_Macros RCM - Register accessor macros
S * @{
S */
S
S
S/* RCM - Register instance definitions */
S/* RCM */
S#define RCM_SRS0                                 RCM_SRS0_REG(RCM)
S#define RCM_SRS1                                 RCM_SRS1_REG(RCM)
S#define RCM_RPFC                                 RCM_RPFC_REG(RCM)
S#define RCM_RPFW                                 RCM_RPFW_REG(RCM)
S
S/*!
S * @}
S */ /* end of group RCM_Register_Accessor_Macros */
S
S
S/*!
S * @}
S */ /* end of group RCM_Peripheral_Access_Layer */
S
S
S/* ----------------------------------------------------------------------------
S   -- ROM Peripheral Access Layer
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup ROM_Peripheral_Access_Layer ROM Peripheral Access Layer
S * @{
S */
S
S/** ROM - Register Layout Typedef */
Stypedef struct {
S  __I  uint32_t ENTRY[3];                          /**< Entry, array offset: 0x0, array step: 0x4 */
S  __I  uint32_t TABLEMARK;                         /**< End of Table Marker Register, offset: 0xC */
S       uint8_t RESERVED_0[4028];
S  __I  uint32_t SYSACCESS;                         /**< System Access Register, offset: 0xFCC */
S  __I  uint32_t PERIPHID4;                         /**< Peripheral ID Register, offset: 0xFD0 */
S  __I  uint32_t PERIPHID5;                         /**< Peripheral ID Register, offset: 0xFD4 */
S  __I  uint32_t PERIPHID6;                         /**< Peripheral ID Register, offset: 0xFD8 */
S  __I  uint32_t PERIPHID7;                         /**< Peripheral ID Register, offset: 0xFDC */
S  __I  uint32_t PERIPHID0;                         /**< Peripheral ID Register, offset: 0xFE0 */
S  __I  uint32_t PERIPHID1;                         /**< Peripheral ID Register, offset: 0xFE4 */
S  __I  uint32_t PERIPHID2;                         /**< Peripheral ID Register, offset: 0xFE8 */
S  __I  uint32_t PERIPHID3;                         /**< Peripheral ID Register, offset: 0xFEC */
S  __I  uint32_t COMPID[4];                         /**< Component ID Register, array offset: 0xFF0, array step: 0x4 */
S} ROM_Type, *ROM_MemMapPtr;
S
S/* ----------------------------------------------------------------------------
S   -- ROM - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup ROM_Register_Accessor_Macros ROM - Register accessor macros
S * @{
S */
S
S
S/* ROM - Register accessors */
S#define ROM_ENTRY_REG(base,index)                ((base)->ENTRY[index])
S#define ROM_ENTRY_COUNT                          3
S#define ROM_TABLEMARK_REG(base)                  ((base)->TABLEMARK)
S#define ROM_SYSACCESS_REG(base)                  ((base)->SYSACCESS)
S#define ROM_PERIPHID4_REG(base)                  ((base)->PERIPHID4)
S#define ROM_PERIPHID5_REG(base)                  ((base)->PERIPHID5)
S#define ROM_PERIPHID6_REG(base)                  ((base)->PERIPHID6)
S#define ROM_PERIPHID7_REG(base)                  ((base)->PERIPHID7)
S#define ROM_PERIPHID0_REG(base)                  ((base)->PERIPHID0)
S#define ROM_PERIPHID1_REG(base)                  ((base)->PERIPHID1)
S#define ROM_PERIPHID2_REG(base)                  ((base)->PERIPHID2)
S#define ROM_PERIPHID3_REG(base)                  ((base)->PERIPHID3)
S#define ROM_COMPID_REG(base,index)               ((base)->COMPID[index])
S#define ROM_COMPID_COUNT                         4
S
S/*!
S * @}
S */ /* end of group ROM_Register_Accessor_Macros */
S
S
S/* ----------------------------------------------------------------------------
S   -- ROM Register Masks
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup ROM_Register_Masks ROM Register Masks
S * @{
S */
S
S/* ENTRY Bit Fields */
S#define ROM_ENTRY_ENTRY_MASK                     0xFFFFFFFFu
S#define ROM_ENTRY_ENTRY_SHIFT                    0
S#define ROM_ENTRY_ENTRY_WIDTH                    32
S#define ROM_ENTRY_ENTRY(x)                       (((uint32_t)(((uint32_t)(x))<<ROM_ENTRY_ENTRY_SHIFT))&ROM_ENTRY_ENTRY_MASK)
S/* TABLEMARK Bit Fields */
S#define ROM_TABLEMARK_MARK_MASK                  0xFFFFFFFFu
S#define ROM_TABLEMARK_MARK_SHIFT                 0
S#define ROM_TABLEMARK_MARK_WIDTH                 32
S#define ROM_TABLEMARK_MARK(x)                    (((uint32_t)(((uint32_t)(x))<<ROM_TABLEMARK_MARK_SHIFT))&ROM_TABLEMARK_MARK_MASK)
S/* SYSACCESS Bit Fields */
S#define ROM_SYSACCESS_SYSACCESS_MASK             0xFFFFFFFFu
S#define ROM_SYSACCESS_SYSACCESS_SHIFT            0
S#define ROM_SYSACCESS_SYSACCESS_WIDTH            32
S#define ROM_SYSACCESS_SYSACCESS(x)               (((uint32_t)(((uint32_t)(x))<<ROM_SYSACCESS_SYSACCESS_SHIFT))&ROM_SYSACCESS_SYSACCESS_MASK)
S/* PERIPHID4 Bit Fields */
S#define ROM_PERIPHID4_PERIPHID_MASK              0xFFFFFFFFu
S#define ROM_PERIPHID4_PERIPHID_SHIFT             0
S#define ROM_PERIPHID4_PERIPHID_WIDTH             32
S#define ROM_PERIPHID4_PERIPHID(x)                (((uint32_t)(((uint32_t)(x))<<ROM_PERIPHID4_PERIPHID_SHIFT))&ROM_PERIPHID4_PERIPHID_MASK)
S/* PERIPHID5 Bit Fields */
S#define ROM_PERIPHID5_PERIPHID_MASK              0xFFFFFFFFu
S#define ROM_PERIPHID5_PERIPHID_SHIFT             0
S#define ROM_PERIPHID5_PERIPHID_WIDTH             32
S#define ROM_PERIPHID5_PERIPHID(x)                (((uint32_t)(((uint32_t)(x))<<ROM_PERIPHID5_PERIPHID_SHIFT))&ROM_PERIPHID5_PERIPHID_MASK)
S/* PERIPHID6 Bit Fields */
S#define ROM_PERIPHID6_PERIPHID_MASK              0xFFFFFFFFu
S#define ROM_PERIPHID6_PERIPHID_SHIFT             0
S#define ROM_PERIPHID6_PERIPHID_WIDTH             32
S#define ROM_PERIPHID6_PERIPHID(x)                (((uint32_t)(((uint32_t)(x))<<ROM_PERIPHID6_PERIPHID_SHIFT))&ROM_PERIPHID6_PERIPHID_MASK)
S/* PERIPHID7 Bit Fields */
S#define ROM_PERIPHID7_PERIPHID_MASK              0xFFFFFFFFu
S#define ROM_PERIPHID7_PERIPHID_SHIFT             0
S#define ROM_PERIPHID7_PERIPHID_WIDTH             32
S#define ROM_PERIPHID7_PERIPHID(x)                (((uint32_t)(((uint32_t)(x))<<ROM_PERIPHID7_PERIPHID_SHIFT))&ROM_PERIPHID7_PERIPHID_MASK)
S/* PERIPHID0 Bit Fields */
S#define ROM_PERIPHID0_PERIPHID_MASK              0xFFFFFFFFu
S#define ROM_PERIPHID0_PERIPHID_SHIFT             0
S#define ROM_PERIPHID0_PERIPHID_WIDTH             32
S#define ROM_PERIPHID0_PERIPHID(x)                (((uint32_t)(((uint32_t)(x))<<ROM_PERIPHID0_PERIPHID_SHIFT))&ROM_PERIPHID0_PERIPHID_MASK)
S/* PERIPHID1 Bit Fields */
S#define ROM_PERIPHID1_PERIPHID_MASK              0xFFFFFFFFu
S#define ROM_PERIPHID1_PERIPHID_SHIFT             0
S#define ROM_PERIPHID1_PERIPHID_WIDTH             32
S#define ROM_PERIPHID1_PERIPHID(x)                (((uint32_t)(((uint32_t)(x))<<ROM_PERIPHID1_PERIPHID_SHIFT))&ROM_PERIPHID1_PERIPHID_MASK)
S/* PERIPHID2 Bit Fields */
S#define ROM_PERIPHID2_PERIPHID_MASK              0xFFFFFFFFu
S#define ROM_PERIPHID2_PERIPHID_SHIFT             0
S#define ROM_PERIPHID2_PERIPHID_WIDTH             32
S#define ROM_PERIPHID2_PERIPHID(x)                (((uint32_t)(((uint32_t)(x))<<ROM_PERIPHID2_PERIPHID_SHIFT))&ROM_PERIPHID2_PERIPHID_MASK)
S/* PERIPHID3 Bit Fields */
S#define ROM_PERIPHID3_PERIPHID_MASK              0xFFFFFFFFu
S#define ROM_PERIPHID3_PERIPHID_SHIFT             0
S#define ROM_PERIPHID3_PERIPHID_WIDTH             32
S#define ROM_PERIPHID3_PERIPHID(x)                (((uint32_t)(((uint32_t)(x))<<ROM_PERIPHID3_PERIPHID_SHIFT))&ROM_PERIPHID3_PERIPHID_MASK)
S/* COMPID Bit Fields */
S#define ROM_COMPID_COMPID_MASK                   0xFFFFFFFFu
S#define ROM_COMPID_COMPID_SHIFT                  0
S#define ROM_COMPID_COMPID_WIDTH                  32
S#define ROM_COMPID_COMPID(x)                     (((uint32_t)(((uint32_t)(x))<<ROM_COMPID_COMPID_SHIFT))&ROM_COMPID_COMPID_MASK)
S
S/*!
S * @}
S */ /* end of group ROM_Register_Masks */
S
S
S/* ROM - Peripheral instance base addresses */
S/** Peripheral ROM base address */
S#define ROM_BASE                                 (0xF0002000u)
S/** Peripheral ROM base pointer */
S#define ROM                                      ((ROM_Type *)ROM_BASE)
S#define ROM_BASE_PTR                             (ROM)
S/** Array initializer of ROM peripheral base addresses */
S#define ROM_BASE_ADDRS                           { ROM_BASE }
S/** Array initializer of ROM peripheral base pointers */
S#define ROM_BASE_PTRS                            { ROM }
S
S/* ----------------------------------------------------------------------------
S   -- ROM - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup ROM_Register_Accessor_Macros ROM - Register accessor macros
S * @{
S */
S
S
S/* ROM - Register instance definitions */
S/* ROM */
S#define ROM_ENTRY0                               ROM_ENTRY_REG(ROM,0)
S#define ROM_ENTRY1                               ROM_ENTRY_REG(ROM,1)
S#define ROM_ENTRY2                               ROM_ENTRY_REG(ROM,2)
S#define ROM_TABLEMARK                            ROM_TABLEMARK_REG(ROM)
S#define ROM_SYSACCESS                            ROM_SYSACCESS_REG(ROM)
S#define ROM_PERIPHID4                            ROM_PERIPHID4_REG(ROM)
S#define ROM_PERIPHID5                            ROM_PERIPHID5_REG(ROM)
S#define ROM_PERIPHID6                            ROM_PERIPHID6_REG(ROM)
S#define ROM_PERIPHID7                            ROM_PERIPHID7_REG(ROM)
S#define ROM_PERIPHID0                            ROM_PERIPHID0_REG(ROM)
S#define ROM_PERIPHID1                            ROM_PERIPHID1_REG(ROM)
S#define ROM_PERIPHID2                            ROM_PERIPHID2_REG(ROM)
S#define ROM_PERIPHID3                            ROM_PERIPHID3_REG(ROM)
S#define ROM_COMPID0                              ROM_COMPID_REG(ROM,0)
S#define ROM_COMPID1                              ROM_COMPID_REG(ROM,1)
S#define ROM_COMPID2                              ROM_COMPID_REG(ROM,2)
S#define ROM_COMPID3                              ROM_COMPID_REG(ROM,3)
S
S/* ROM - Register array accessors */
S#define ROM_ENTRY(index)                         ROM_ENTRY_REG(ROM,index)
S#define ROM_COMPID(index)                        ROM_COMPID_REG(ROM,index)
S
S/*!
S * @}
S */ /* end of group ROM_Register_Accessor_Macros */
S
S
S/*!
S * @}
S */ /* end of group ROM_Peripheral_Access_Layer */
S
S
S/* ----------------------------------------------------------------------------
S   -- RTC Peripheral Access Layer
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup RTC_Peripheral_Access_Layer RTC Peripheral Access Layer
S * @{
S */
S
S/** RTC - Register Layout Typedef */
Stypedef struct {
S  __IO uint32_t TSR;                               /**< RTC Time Seconds Register, offset: 0x0 */
S  __IO uint32_t TPR;                               /**< RTC Time Prescaler Register, offset: 0x4 */
S  __IO uint32_t TAR;                               /**< RTC Time Alarm Register, offset: 0x8 */
S  __IO uint32_t TCR;                               /**< RTC Time Compensation Register, offset: 0xC */
S  __IO uint32_t CR;                                /**< RTC Control Register, offset: 0x10 */
S  __IO uint32_t SR;                                /**< RTC Status Register, offset: 0x14 */
S  __IO uint32_t LR;                                /**< RTC Lock Register, offset: 0x18 */
S  __IO uint32_t IER;                               /**< RTC Interrupt Enable Register, offset: 0x1C */
S} RTC_Type, *RTC_MemMapPtr;
S
S/* ----------------------------------------------------------------------------
S   -- RTC - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup RTC_Register_Accessor_Macros RTC - Register accessor macros
S * @{
S */
S
S
S/* RTC - Register accessors */
S#define RTC_TSR_REG(base)                        ((base)->TSR)
S#define RTC_TPR_REG(base)                        ((base)->TPR)
S#define RTC_TAR_REG(base)                        ((base)->TAR)
S#define RTC_TCR_REG(base)                        ((base)->TCR)
S#define RTC_CR_REG(base)                         ((base)->CR)
S#define RTC_SR_REG(base)                         ((base)->SR)
S#define RTC_LR_REG(base)                         ((base)->LR)
S#define RTC_IER_REG(base)                        ((base)->IER)
S
S/*!
S * @}
S */ /* end of group RTC_Register_Accessor_Macros */
S
S
S/* ----------------------------------------------------------------------------
S   -- RTC Register Masks
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup RTC_Register_Masks RTC Register Masks
S * @{
S */
S
S/* TSR Bit Fields */
S#define RTC_TSR_TSR_MASK                         0xFFFFFFFFu
S#define RTC_TSR_TSR_SHIFT                        0
S#define RTC_TSR_TSR_WIDTH                        32
S#define RTC_TSR_TSR(x)                           (((uint32_t)(((uint32_t)(x))<<RTC_TSR_TSR_SHIFT))&RTC_TSR_TSR_MASK)
S/* TPR Bit Fields */
S#define RTC_TPR_TPR_MASK                         0xFFFFu
S#define RTC_TPR_TPR_SHIFT                        0
S#define RTC_TPR_TPR_WIDTH                        16
S#define RTC_TPR_TPR(x)                           (((uint32_t)(((uint32_t)(x))<<RTC_TPR_TPR_SHIFT))&RTC_TPR_TPR_MASK)
S/* TAR Bit Fields */
S#define RTC_TAR_TAR_MASK                         0xFFFFFFFFu
S#define RTC_TAR_TAR_SHIFT                        0
S#define RTC_TAR_TAR_WIDTH                        32
S#define RTC_TAR_TAR(x)                           (((uint32_t)(((uint32_t)(x))<<RTC_TAR_TAR_SHIFT))&RTC_TAR_TAR_MASK)
S/* TCR Bit Fields */
S#define RTC_TCR_TCR_MASK                         0xFFu
S#define RTC_TCR_TCR_SHIFT                        0
S#define RTC_TCR_TCR_WIDTH                        8
S#define RTC_TCR_TCR(x)                           (((uint32_t)(((uint32_t)(x))<<RTC_TCR_TCR_SHIFT))&RTC_TCR_TCR_MASK)
S#define RTC_TCR_CIR_MASK                         0xFF00u
S#define RTC_TCR_CIR_SHIFT                        8
S#define RTC_TCR_CIR_WIDTH                        8
S#define RTC_TCR_CIR(x)                           (((uint32_t)(((uint32_t)(x))<<RTC_TCR_CIR_SHIFT))&RTC_TCR_CIR_MASK)
S#define RTC_TCR_TCV_MASK                         0xFF0000u
S#define RTC_TCR_TCV_SHIFT                        16
S#define RTC_TCR_TCV_WIDTH                        8
S#define RTC_TCR_TCV(x)                           (((uint32_t)(((uint32_t)(x))<<RTC_TCR_TCV_SHIFT))&RTC_TCR_TCV_MASK)
S#define RTC_TCR_CIC_MASK                         0xFF000000u
S#define RTC_TCR_CIC_SHIFT                        24
S#define RTC_TCR_CIC_WIDTH                        8
S#define RTC_TCR_CIC(x)                           (((uint32_t)(((uint32_t)(x))<<RTC_TCR_CIC_SHIFT))&RTC_TCR_CIC_MASK)
S/* CR Bit Fields */
S#define RTC_CR_SWR_MASK                          0x1u
S#define RTC_CR_SWR_SHIFT                         0
S#define RTC_CR_SWR_WIDTH                         1
S#define RTC_CR_SWR(x)                            (((uint32_t)(((uint32_t)(x))<<RTC_CR_SWR_SHIFT))&RTC_CR_SWR_MASK)
S#define RTC_CR_WPE_MASK                          0x2u
S#define RTC_CR_WPE_SHIFT                         1
S#define RTC_CR_WPE_WIDTH                         1
S#define RTC_CR_WPE(x)                            (((uint32_t)(((uint32_t)(x))<<RTC_CR_WPE_SHIFT))&RTC_CR_WPE_MASK)
S#define RTC_CR_SUP_MASK                          0x4u
S#define RTC_CR_SUP_SHIFT                         2
S#define RTC_CR_SUP_WIDTH                         1
S#define RTC_CR_SUP(x)                            (((uint32_t)(((uint32_t)(x))<<RTC_CR_SUP_SHIFT))&RTC_CR_SUP_MASK)
S#define RTC_CR_UM_MASK                           0x8u
S#define RTC_CR_UM_SHIFT                          3
S#define RTC_CR_UM_WIDTH                          1
S#define RTC_CR_UM(x)                             (((uint32_t)(((uint32_t)(x))<<RTC_CR_UM_SHIFT))&RTC_CR_UM_MASK)
S#define RTC_CR_OSCE_MASK                         0x100u
S#define RTC_CR_OSCE_SHIFT                        8
S#define RTC_CR_OSCE_WIDTH                        1
S#define RTC_CR_OSCE(x)                           (((uint32_t)(((uint32_t)(x))<<RTC_CR_OSCE_SHIFT))&RTC_CR_OSCE_MASK)
S#define RTC_CR_CLKO_MASK                         0x200u
S#define RTC_CR_CLKO_SHIFT                        9
S#define RTC_CR_CLKO_WIDTH                        1
S#define RTC_CR_CLKO(x)                           (((uint32_t)(((uint32_t)(x))<<RTC_CR_CLKO_SHIFT))&RTC_CR_CLKO_MASK)
S#define RTC_CR_SC16P_MASK                        0x400u
S#define RTC_CR_SC16P_SHIFT                       10
S#define RTC_CR_SC16P_WIDTH                       1
S#define RTC_CR_SC16P(x)                          (((uint32_t)(((uint32_t)(x))<<RTC_CR_SC16P_SHIFT))&RTC_CR_SC16P_MASK)
S#define RTC_CR_SC8P_MASK                         0x800u
S#define RTC_CR_SC8P_SHIFT                        11
S#define RTC_CR_SC8P_WIDTH                        1
S#define RTC_CR_SC8P(x)                           (((uint32_t)(((uint32_t)(x))<<RTC_CR_SC8P_SHIFT))&RTC_CR_SC8P_MASK)
S#define RTC_CR_SC4P_MASK                         0x1000u
S#define RTC_CR_SC4P_SHIFT                        12
S#define RTC_CR_SC4P_WIDTH                        1
S#define RTC_CR_SC4P(x)                           (((uint32_t)(((uint32_t)(x))<<RTC_CR_SC4P_SHIFT))&RTC_CR_SC4P_MASK)
S#define RTC_CR_SC2P_MASK                         0x2000u
S#define RTC_CR_SC2P_SHIFT                        13
S#define RTC_CR_SC2P_WIDTH                        1
S#define RTC_CR_SC2P(x)                           (((uint32_t)(((uint32_t)(x))<<RTC_CR_SC2P_SHIFT))&RTC_CR_SC2P_MASK)
S/* SR Bit Fields */
S#define RTC_SR_TIF_MASK                          0x1u
S#define RTC_SR_TIF_SHIFT                         0
S#define RTC_SR_TIF_WIDTH                         1
S#define RTC_SR_TIF(x)                            (((uint32_t)(((uint32_t)(x))<<RTC_SR_TIF_SHIFT))&RTC_SR_TIF_MASK)
S#define RTC_SR_TOF_MASK                          0x2u
S#define RTC_SR_TOF_SHIFT                         1
S#define RTC_SR_TOF_WIDTH                         1
S#define RTC_SR_TOF(x)                            (((uint32_t)(((uint32_t)(x))<<RTC_SR_TOF_SHIFT))&RTC_SR_TOF_MASK)
S#define RTC_SR_TAF_MASK                          0x4u
S#define RTC_SR_TAF_SHIFT                         2
S#define RTC_SR_TAF_WIDTH                         1
S#define RTC_SR_TAF(x)                            (((uint32_t)(((uint32_t)(x))<<RTC_SR_TAF_SHIFT))&RTC_SR_TAF_MASK)
S#define RTC_SR_TCE_MASK                          0x10u
S#define RTC_SR_TCE_SHIFT                         4
S#define RTC_SR_TCE_WIDTH                         1
S#define RTC_SR_TCE(x)                            (((uint32_t)(((uint32_t)(x))<<RTC_SR_TCE_SHIFT))&RTC_SR_TCE_MASK)
S/* LR Bit Fields */
S#define RTC_LR_TCL_MASK                          0x8u
S#define RTC_LR_TCL_SHIFT                         3
S#define RTC_LR_TCL_WIDTH                         1
S#define RTC_LR_TCL(x)                            (((uint32_t)(((uint32_t)(x))<<RTC_LR_TCL_SHIFT))&RTC_LR_TCL_MASK)
S#define RTC_LR_CRL_MASK                          0x10u
S#define RTC_LR_CRL_SHIFT                         4
S#define RTC_LR_CRL_WIDTH                         1
S#define RTC_LR_CRL(x)                            (((uint32_t)(((uint32_t)(x))<<RTC_LR_CRL_SHIFT))&RTC_LR_CRL_MASK)
S#define RTC_LR_SRL_MASK                          0x20u
S#define RTC_LR_SRL_SHIFT                         5
S#define RTC_LR_SRL_WIDTH                         1
S#define RTC_LR_SRL(x)                            (((uint32_t)(((uint32_t)(x))<<RTC_LR_SRL_SHIFT))&RTC_LR_SRL_MASK)
S#define RTC_LR_LRL_MASK                          0x40u
S#define RTC_LR_LRL_SHIFT                         6
S#define RTC_LR_LRL_WIDTH                         1
S#define RTC_LR_LRL(x)                            (((uint32_t)(((uint32_t)(x))<<RTC_LR_LRL_SHIFT))&RTC_LR_LRL_MASK)
S/* IER Bit Fields */
S#define RTC_IER_TIIE_MASK                        0x1u
S#define RTC_IER_TIIE_SHIFT                       0
S#define RTC_IER_TIIE_WIDTH                       1
S#define RTC_IER_TIIE(x)                          (((uint32_t)(((uint32_t)(x))<<RTC_IER_TIIE_SHIFT))&RTC_IER_TIIE_MASK)
S#define RTC_IER_TOIE_MASK                        0x2u
S#define RTC_IER_TOIE_SHIFT                       1
S#define RTC_IER_TOIE_WIDTH                       1
S#define RTC_IER_TOIE(x)                          (((uint32_t)(((uint32_t)(x))<<RTC_IER_TOIE_SHIFT))&RTC_IER_TOIE_MASK)
S#define RTC_IER_TAIE_MASK                        0x4u
S#define RTC_IER_TAIE_SHIFT                       2
S#define RTC_IER_TAIE_WIDTH                       1
S#define RTC_IER_TAIE(x)                          (((uint32_t)(((uint32_t)(x))<<RTC_IER_TAIE_SHIFT))&RTC_IER_TAIE_MASK)
S#define RTC_IER_TSIE_MASK                        0x10u
S#define RTC_IER_TSIE_SHIFT                       4
S#define RTC_IER_TSIE_WIDTH                       1
S#define RTC_IER_TSIE(x)                          (((uint32_t)(((uint32_t)(x))<<RTC_IER_TSIE_SHIFT))&RTC_IER_TSIE_MASK)
S#define RTC_IER_WPON_MASK                        0x80u
S#define RTC_IER_WPON_SHIFT                       7
S#define RTC_IER_WPON_WIDTH                       1
S#define RTC_IER_WPON(x)                          (((uint32_t)(((uint32_t)(x))<<RTC_IER_WPON_SHIFT))&RTC_IER_WPON_MASK)
S
S/*!
S * @}
S */ /* end of group RTC_Register_Masks */
S
S
S/* RTC - Peripheral instance base addresses */
S/** Peripheral RTC base address */
S#define RTC_BASE                                 (0x4003D000u)
S/** Peripheral RTC base pointer */
S#define RTC                                      ((RTC_Type *)RTC_BASE)
S#define RTC_BASE_PTR                             (RTC)
S/** Array initializer of RTC peripheral base addresses */
S#define RTC_BASE_ADDRS                           { RTC_BASE }
S/** Array initializer of RTC peripheral base pointers */
S#define RTC_BASE_PTRS                            { RTC }
S/** Interrupt vectors for the RTC peripheral type */
S#define RTC_IRQS                                 { RTC_IRQn }
S#define RTC_SECONDS_IRQS                         { RTC_Seconds_IRQn }
S
S/* ----------------------------------------------------------------------------
S   -- RTC - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup RTC_Register_Accessor_Macros RTC - Register accessor macros
S * @{
S */
S
S
S/* RTC - Register instance definitions */
S/* RTC */
S#define RTC_TSR                                  RTC_TSR_REG(RTC)
S#define RTC_TPR                                  RTC_TPR_REG(RTC)
S#define RTC_TAR                                  RTC_TAR_REG(RTC)
S#define RTC_TCR                                  RTC_TCR_REG(RTC)
S#define RTC_CR                                   RTC_CR_REG(RTC)
S#define RTC_SR                                   RTC_SR_REG(RTC)
S#define RTC_LR                                   RTC_LR_REG(RTC)
S#define RTC_IER                                  RTC_IER_REG(RTC)
S
S/*!
S * @}
S */ /* end of group RTC_Register_Accessor_Macros */
S
S
S/*!
S * @}
S */ /* end of group RTC_Peripheral_Access_Layer */
S
S
S/* ----------------------------------------------------------------------------
S   -- SIM Peripheral Access Layer
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup SIM_Peripheral_Access_Layer SIM Peripheral Access Layer
S * @{
S */
S
S/** SIM - Register Layout Typedef */
Stypedef struct {
S  __IO uint32_t SOPT1;                             /**< System Options Register 1, offset: 0x0 */
S  __IO uint32_t SOPT1CFG;                          /**< SOPT1 Configuration Register, offset: 0x4 */
S       uint8_t RESERVED_0[4092];
S  __IO uint32_t SOPT2;                             /**< System Options Register 2, offset: 0x1004 */
S       uint8_t RESERVED_1[4];
S  __IO uint32_t SOPT4;                             /**< System Options Register 4, offset: 0x100C */
S  __IO uint32_t SOPT5;                             /**< System Options Register 5, offset: 0x1010 */
S       uint8_t RESERVED_2[4];
S  __IO uint32_t SOPT7;                             /**< System Options Register 7, offset: 0x1018 */
S       uint8_t RESERVED_3[8];
S  __I  uint32_t SDID;                              /**< System Device Identification Register, offset: 0x1024 */
S       uint8_t RESERVED_4[12];
S  __IO uint32_t SCGC4;                             /**< System Clock Gating Control Register 4, offset: 0x1034 */
S  __IO uint32_t SCGC5;                             /**< System Clock Gating Control Register 5, offset: 0x1038 */
S  __IO uint32_t SCGC6;                             /**< System Clock Gating Control Register 6, offset: 0x103C */
S  __IO uint32_t SCGC7;                             /**< System Clock Gating Control Register 7, offset: 0x1040 */
S  __IO uint32_t CLKDIV1;                           /**< System Clock Divider Register 1, offset: 0x1044 */
S       uint8_t RESERVED_5[4];
S  __IO uint32_t FCFG1;                             /**< Flash Configuration Register 1, offset: 0x104C */
S  __I  uint32_t FCFG2;                             /**< Flash Configuration Register 2, offset: 0x1050 */
S       uint8_t RESERVED_6[4];
S  __I  uint32_t UIDMH;                             /**< Unique Identification Register Mid-High, offset: 0x1058 */
S  __I  uint32_t UIDML;                             /**< Unique Identification Register Mid Low, offset: 0x105C */
S  __I  uint32_t UIDL;                              /**< Unique Identification Register Low, offset: 0x1060 */
S       uint8_t RESERVED_7[156];
S  __IO uint32_t COPC;                              /**< COP Control Register, offset: 0x1100 */
S  __O  uint32_t SRVCOP;                            /**< Service COP Register, offset: 0x1104 */
S} SIM_Type, *SIM_MemMapPtr;
S
S/* ----------------------------------------------------------------------------
S   -- SIM - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup SIM_Register_Accessor_Macros SIM - Register accessor macros
S * @{
S */
S
S
S/* SIM - Register accessors */
S#define SIM_SOPT1_REG(base)                      ((base)->SOPT1)
S#define SIM_SOPT1CFG_REG(base)                   ((base)->SOPT1CFG)
S#define SIM_SOPT2_REG(base)                      ((base)->SOPT2)
S#define SIM_SOPT4_REG(base)                      ((base)->SOPT4)
S#define SIM_SOPT5_REG(base)                      ((base)->SOPT5)
S#define SIM_SOPT7_REG(base)                      ((base)->SOPT7)
S#define SIM_SDID_REG(base)                       ((base)->SDID)
S#define SIM_SCGC4_REG(base)                      ((base)->SCGC4)
S#define SIM_SCGC5_REG(base)                      ((base)->SCGC5)
S#define SIM_SCGC6_REG(base)                      ((base)->SCGC6)
S#define SIM_SCGC7_REG(base)                      ((base)->SCGC7)
S#define SIM_CLKDIV1_REG(base)                    ((base)->CLKDIV1)
S#define SIM_FCFG1_REG(base)                      ((base)->FCFG1)
S#define SIM_FCFG2_REG(base)                      ((base)->FCFG2)
S#define SIM_UIDMH_REG(base)                      ((base)->UIDMH)
S#define SIM_UIDML_REG(base)                      ((base)->UIDML)
S#define SIM_UIDL_REG(base)                       ((base)->UIDL)
S#define SIM_COPC_REG(base)                       ((base)->COPC)
S#define SIM_SRVCOP_REG(base)                     ((base)->SRVCOP)
S
S/*!
S * @}
S */ /* end of group SIM_Register_Accessor_Macros */
S
S
S/* ----------------------------------------------------------------------------
S   -- SIM Register Masks
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup SIM_Register_Masks SIM Register Masks
S * @{
S */
S
S/* SOPT1 Bit Fields */
S#define SIM_SOPT1_OSC32KSEL_MASK                 0xC0000u
S#define SIM_SOPT1_OSC32KSEL_SHIFT                18
S#define SIM_SOPT1_OSC32KSEL_WIDTH                2
S#define SIM_SOPT1_OSC32KSEL(x)                   (((uint32_t)(((uint32_t)(x))<<SIM_SOPT1_OSC32KSEL_SHIFT))&SIM_SOPT1_OSC32KSEL_MASK)
S#define SIM_SOPT1_USBVSTBY_MASK                  0x20000000u
S#define SIM_SOPT1_USBVSTBY_SHIFT                 29
S#define SIM_SOPT1_USBVSTBY_WIDTH                 1
S#define SIM_SOPT1_USBVSTBY(x)                    (((uint32_t)(((uint32_t)(x))<<SIM_SOPT1_USBVSTBY_SHIFT))&SIM_SOPT1_USBVSTBY_MASK)
S#define SIM_SOPT1_USBSSTBY_MASK                  0x40000000u
S#define SIM_SOPT1_USBSSTBY_SHIFT                 30
S#define SIM_SOPT1_USBSSTBY_WIDTH                 1
S#define SIM_SOPT1_USBSSTBY(x)                    (((uint32_t)(((uint32_t)(x))<<SIM_SOPT1_USBSSTBY_SHIFT))&SIM_SOPT1_USBSSTBY_MASK)
S#define SIM_SOPT1_USBREGEN_MASK                  0x80000000u
S#define SIM_SOPT1_USBREGEN_SHIFT                 31
S#define SIM_SOPT1_USBREGEN_WIDTH                 1
S#define SIM_SOPT1_USBREGEN(x)                    (((uint32_t)(((uint32_t)(x))<<SIM_SOPT1_USBREGEN_SHIFT))&SIM_SOPT1_USBREGEN_MASK)
S/* SOPT1CFG Bit Fields */
S#define SIM_SOPT1CFG_URWE_MASK                   0x1000000u
S#define SIM_SOPT1CFG_URWE_SHIFT                  24
S#define SIM_SOPT1CFG_URWE_WIDTH                  1
S#define SIM_SOPT1CFG_URWE(x)                     (((uint32_t)(((uint32_t)(x))<<SIM_SOPT1CFG_URWE_SHIFT))&SIM_SOPT1CFG_URWE_MASK)
S#define SIM_SOPT1CFG_UVSWE_MASK                  0x2000000u
S#define SIM_SOPT1CFG_UVSWE_SHIFT                 25
S#define SIM_SOPT1CFG_UVSWE_WIDTH                 1
S#define SIM_SOPT1CFG_UVSWE(x)                    (((uint32_t)(((uint32_t)(x))<<SIM_SOPT1CFG_UVSWE_SHIFT))&SIM_SOPT1CFG_UVSWE_MASK)
S#define SIM_SOPT1CFG_USSWE_MASK                  0x4000000u
S#define SIM_SOPT1CFG_USSWE_SHIFT                 26
S#define SIM_SOPT1CFG_USSWE_WIDTH                 1
S#define SIM_SOPT1CFG_USSWE(x)                    (((uint32_t)(((uint32_t)(x))<<SIM_SOPT1CFG_USSWE_SHIFT))&SIM_SOPT1CFG_USSWE_MASK)
S/* SOPT2 Bit Fields */
S#define SIM_SOPT2_RTCCLKOUTSEL_MASK              0x10u
S#define SIM_SOPT2_RTCCLKOUTSEL_SHIFT             4
S#define SIM_SOPT2_RTCCLKOUTSEL_WIDTH             1
S#define SIM_SOPT2_RTCCLKOUTSEL(x)                (((uint32_t)(((uint32_t)(x))<<SIM_SOPT2_RTCCLKOUTSEL_SHIFT))&SIM_SOPT2_RTCCLKOUTSEL_MASK)
S#define SIM_SOPT2_CLKOUTSEL_MASK                 0xE0u
S#define SIM_SOPT2_CLKOUTSEL_SHIFT                5
S#define SIM_SOPT2_CLKOUTSEL_WIDTH                3
S#define SIM_SOPT2_CLKOUTSEL(x)                   (((uint32_t)(((uint32_t)(x))<<SIM_SOPT2_CLKOUTSEL_SHIFT))&SIM_SOPT2_CLKOUTSEL_MASK)
S#define SIM_SOPT2_PLLFLLSEL_MASK                 0x10000u
S#define SIM_SOPT2_PLLFLLSEL_SHIFT                16
S#define SIM_SOPT2_PLLFLLSEL_WIDTH                1
S#define SIM_SOPT2_PLLFLLSEL(x)                   (((uint32_t)(((uint32_t)(x))<<SIM_SOPT2_PLLFLLSEL_SHIFT))&SIM_SOPT2_PLLFLLSEL_MASK)
S#define SIM_SOPT2_USBSRC_MASK                    0x40000u
S#define SIM_SOPT2_USBSRC_SHIFT                   18
S#define SIM_SOPT2_USBSRC_WIDTH                   1
S#define SIM_SOPT2_USBSRC(x)                      (((uint32_t)(((uint32_t)(x))<<SIM_SOPT2_USBSRC_SHIFT))&SIM_SOPT2_USBSRC_MASK)
S#define SIM_SOPT2_TPMSRC_MASK                    0x3000000u
S#define SIM_SOPT2_TPMSRC_SHIFT                   24
S#define SIM_SOPT2_TPMSRC_WIDTH                   2
S#define SIM_SOPT2_TPMSRC(x)                      (((uint32_t)(((uint32_t)(x))<<SIM_SOPT2_TPMSRC_SHIFT))&SIM_SOPT2_TPMSRC_MASK)
S#define SIM_SOPT2_UART0SRC_MASK                  0xC000000u
S#define SIM_SOPT2_UART0SRC_SHIFT                 26
S#define SIM_SOPT2_UART0SRC_WIDTH                 2
S#define SIM_SOPT2_UART0SRC(x)                    (((uint32_t)(((uint32_t)(x))<<SIM_SOPT2_UART0SRC_SHIFT))&SIM_SOPT2_UART0SRC_MASK)
S/* SOPT4 Bit Fields */
S#define SIM_SOPT4_TPM1CH0SRC_MASK                0x40000u
S#define SIM_SOPT4_TPM1CH0SRC_SHIFT               18
S#define SIM_SOPT4_TPM1CH0SRC_WIDTH               1
S#define SIM_SOPT4_TPM1CH0SRC(x)                  (((uint32_t)(((uint32_t)(x))<<SIM_SOPT4_TPM1CH0SRC_SHIFT))&SIM_SOPT4_TPM1CH0SRC_MASK)
S#define SIM_SOPT4_TPM2CH0SRC_MASK                0x100000u
S#define SIM_SOPT4_TPM2CH0SRC_SHIFT               20
S#define SIM_SOPT4_TPM2CH0SRC_WIDTH               1
S#define SIM_SOPT4_TPM2CH0SRC(x)                  (((uint32_t)(((uint32_t)(x))<<SIM_SOPT4_TPM2CH0SRC_SHIFT))&SIM_SOPT4_TPM2CH0SRC_MASK)
S#define SIM_SOPT4_TPM0CLKSEL_MASK                0x1000000u
S#define SIM_SOPT4_TPM0CLKSEL_SHIFT               24
S#define SIM_SOPT4_TPM0CLKSEL_WIDTH               1
S#define SIM_SOPT4_TPM0CLKSEL(x)                  (((uint32_t)(((uint32_t)(x))<<SIM_SOPT4_TPM0CLKSEL_SHIFT))&SIM_SOPT4_TPM0CLKSEL_MASK)
S#define SIM_SOPT4_TPM1CLKSEL_MASK                0x2000000u
S#define SIM_SOPT4_TPM1CLKSEL_SHIFT               25
S#define SIM_SOPT4_TPM1CLKSEL_WIDTH               1
S#define SIM_SOPT4_TPM1CLKSEL(x)                  (((uint32_t)(((uint32_t)(x))<<SIM_SOPT4_TPM1CLKSEL_SHIFT))&SIM_SOPT4_TPM1CLKSEL_MASK)
S#define SIM_SOPT4_TPM2CLKSEL_MASK                0x4000000u
S#define SIM_SOPT4_TPM2CLKSEL_SHIFT               26
S#define SIM_SOPT4_TPM2CLKSEL_WIDTH               1
S#define SIM_SOPT4_TPM2CLKSEL(x)                  (((uint32_t)(((uint32_t)(x))<<SIM_SOPT4_TPM2CLKSEL_SHIFT))&SIM_SOPT4_TPM2CLKSEL_MASK)
S/* SOPT5 Bit Fields */
S#define SIM_SOPT5_UART0TXSRC_MASK                0x3u
S#define SIM_SOPT5_UART0TXSRC_SHIFT               0
S#define SIM_SOPT5_UART0TXSRC_WIDTH               2
S#define SIM_SOPT5_UART0TXSRC(x)                  (((uint32_t)(((uint32_t)(x))<<SIM_SOPT5_UART0TXSRC_SHIFT))&SIM_SOPT5_UART0TXSRC_MASK)
S#define SIM_SOPT5_UART0RXSRC_MASK                0x4u
S#define SIM_SOPT5_UART0RXSRC_SHIFT               2
S#define SIM_SOPT5_UART0RXSRC_WIDTH               1
S#define SIM_SOPT5_UART0RXSRC(x)                  (((uint32_t)(((uint32_t)(x))<<SIM_SOPT5_UART0RXSRC_SHIFT))&SIM_SOPT5_UART0RXSRC_MASK)
S#define SIM_SOPT5_UART1TXSRC_MASK                0x30u
S#define SIM_SOPT5_UART1TXSRC_SHIFT               4
S#define SIM_SOPT5_UART1TXSRC_WIDTH               2
S#define SIM_SOPT5_UART1TXSRC(x)                  (((uint32_t)(((uint32_t)(x))<<SIM_SOPT5_UART1TXSRC_SHIFT))&SIM_SOPT5_UART1TXSRC_MASK)
S#define SIM_SOPT5_UART1RXSRC_MASK                0x40u
S#define SIM_SOPT5_UART1RXSRC_SHIFT               6
S#define SIM_SOPT5_UART1RXSRC_WIDTH               1
S#define SIM_SOPT5_UART1RXSRC(x)                  (((uint32_t)(((uint32_t)(x))<<SIM_SOPT5_UART1RXSRC_SHIFT))&SIM_SOPT5_UART1RXSRC_MASK)
S#define SIM_SOPT5_UART0ODE_MASK                  0x10000u
S#define SIM_SOPT5_UART0ODE_SHIFT                 16
S#define SIM_SOPT5_UART0ODE_WIDTH                 1
S#define SIM_SOPT5_UART0ODE(x)                    (((uint32_t)(((uint32_t)(x))<<SIM_SOPT5_UART0ODE_SHIFT))&SIM_SOPT5_UART0ODE_MASK)
S#define SIM_SOPT5_UART1ODE_MASK                  0x20000u
S#define SIM_SOPT5_UART1ODE_SHIFT                 17
S#define SIM_SOPT5_UART1ODE_WIDTH                 1
S#define SIM_SOPT5_UART1ODE(x)                    (((uint32_t)(((uint32_t)(x))<<SIM_SOPT5_UART1ODE_SHIFT))&SIM_SOPT5_UART1ODE_MASK)
S#define SIM_SOPT5_UART2ODE_MASK                  0x40000u
S#define SIM_SOPT5_UART2ODE_SHIFT                 18
S#define SIM_SOPT5_UART2ODE_WIDTH                 1
S#define SIM_SOPT5_UART2ODE(x)                    (((uint32_t)(((uint32_t)(x))<<SIM_SOPT5_UART2ODE_SHIFT))&SIM_SOPT5_UART2ODE_MASK)
S/* SOPT7 Bit Fields */
S#define SIM_SOPT7_ADC0TRGSEL_MASK                0xFu
S#define SIM_SOPT7_ADC0TRGSEL_SHIFT               0
S#define SIM_SOPT7_ADC0TRGSEL_WIDTH               4
S#define SIM_SOPT7_ADC0TRGSEL(x)                  (((uint32_t)(((uint32_t)(x))<<SIM_SOPT7_ADC0TRGSEL_SHIFT))&SIM_SOPT7_ADC0TRGSEL_MASK)
S#define SIM_SOPT7_ADC0PRETRGSEL_MASK             0x10u
S#define SIM_SOPT7_ADC0PRETRGSEL_SHIFT            4
S#define SIM_SOPT7_ADC0PRETRGSEL_WIDTH            1
S#define SIM_SOPT7_ADC0PRETRGSEL(x)               (((uint32_t)(((uint32_t)(x))<<SIM_SOPT7_ADC0PRETRGSEL_SHIFT))&SIM_SOPT7_ADC0PRETRGSEL_MASK)
S#define SIM_SOPT7_ADC0ALTTRGEN_MASK              0x80u
S#define SIM_SOPT7_ADC0ALTTRGEN_SHIFT             7
S#define SIM_SOPT7_ADC0ALTTRGEN_WIDTH             1
S#define SIM_SOPT7_ADC0ALTTRGEN(x)                (((uint32_t)(((uint32_t)(x))<<SIM_SOPT7_ADC0ALTTRGEN_SHIFT))&SIM_SOPT7_ADC0ALTTRGEN_MASK)
S/* SDID Bit Fields */
S#define SIM_SDID_PINID_MASK                      0xFu
S#define SIM_SDID_PINID_SHIFT                     0
S#define SIM_SDID_PINID_WIDTH                     4
S#define SIM_SDID_PINID(x)                        (((uint32_t)(((uint32_t)(x))<<SIM_SDID_PINID_SHIFT))&SIM_SDID_PINID_MASK)
S#define SIM_SDID_DIEID_MASK                      0xF80u
S#define SIM_SDID_DIEID_SHIFT                     7
S#define SIM_SDID_DIEID_WIDTH                     5
S#define SIM_SDID_DIEID(x)                        (((uint32_t)(((uint32_t)(x))<<SIM_SDID_DIEID_SHIFT))&SIM_SDID_DIEID_MASK)
S#define SIM_SDID_REVID_MASK                      0xF000u
S#define SIM_SDID_REVID_SHIFT                     12
S#define SIM_SDID_REVID_WIDTH                     4
S#define SIM_SDID_REVID(x)                        (((uint32_t)(((uint32_t)(x))<<SIM_SDID_REVID_SHIFT))&SIM_SDID_REVID_MASK)
S#define SIM_SDID_SRAMSIZE_MASK                   0xF0000u
S#define SIM_SDID_SRAMSIZE_SHIFT                  16
S#define SIM_SDID_SRAMSIZE_WIDTH                  4
S#define SIM_SDID_SRAMSIZE(x)                     (((uint32_t)(((uint32_t)(x))<<SIM_SDID_SRAMSIZE_SHIFT))&SIM_SDID_SRAMSIZE_MASK)
S#define SIM_SDID_SERIESID_MASK                   0xF00000u
S#define SIM_SDID_SERIESID_SHIFT                  20
S#define SIM_SDID_SERIESID_WIDTH                  4
S#define SIM_SDID_SERIESID(x)                     (((uint32_t)(((uint32_t)(x))<<SIM_SDID_SERIESID_SHIFT))&SIM_SDID_SERIESID_MASK)
S#define SIM_SDID_SUBFAMID_MASK                   0xF000000u
S#define SIM_SDID_SUBFAMID_SHIFT                  24
S#define SIM_SDID_SUBFAMID_WIDTH                  4
S#define SIM_SDID_SUBFAMID(x)                     (((uint32_t)(((uint32_t)(x))<<SIM_SDID_SUBFAMID_SHIFT))&SIM_SDID_SUBFAMID_MASK)
S#define SIM_SDID_FAMID_MASK                      0xF0000000u
S#define SIM_SDID_FAMID_SHIFT                     28
S#define SIM_SDID_FAMID_WIDTH                     4
S#define SIM_SDID_FAMID(x)                        (((uint32_t)(((uint32_t)(x))<<SIM_SDID_FAMID_SHIFT))&SIM_SDID_FAMID_MASK)
S/* SCGC4 Bit Fields */
S#define SIM_SCGC4_I2C0_MASK                      0x40u
S#define SIM_SCGC4_I2C0_SHIFT                     6
S#define SIM_SCGC4_I2C0_WIDTH                     1
S#define SIM_SCGC4_I2C0(x)                        (((uint32_t)(((uint32_t)(x))<<SIM_SCGC4_I2C0_SHIFT))&SIM_SCGC4_I2C0_MASK)
S#define SIM_SCGC4_I2C1_MASK                      0x80u
S#define SIM_SCGC4_I2C1_SHIFT                     7
S#define SIM_SCGC4_I2C1_WIDTH                     1
S#define SIM_SCGC4_I2C1(x)                        (((uint32_t)(((uint32_t)(x))<<SIM_SCGC4_I2C1_SHIFT))&SIM_SCGC4_I2C1_MASK)
S#define SIM_SCGC4_UART0_MASK                     0x400u
S#define SIM_SCGC4_UART0_SHIFT                    10
S#define SIM_SCGC4_UART0_WIDTH                    1
S#define SIM_SCGC4_UART0(x)                       (((uint32_t)(((uint32_t)(x))<<SIM_SCGC4_UART0_SHIFT))&SIM_SCGC4_UART0_MASK)
S#define SIM_SCGC4_UART1_MASK                     0x800u
S#define SIM_SCGC4_UART1_SHIFT                    11
S#define SIM_SCGC4_UART1_WIDTH                    1
S#define SIM_SCGC4_UART1(x)                       (((uint32_t)(((uint32_t)(x))<<SIM_SCGC4_UART1_SHIFT))&SIM_SCGC4_UART1_MASK)
S#define SIM_SCGC4_UART2_MASK                     0x1000u
S#define SIM_SCGC4_UART2_SHIFT                    12
S#define SIM_SCGC4_UART2_WIDTH                    1
S#define SIM_SCGC4_UART2(x)                       (((uint32_t)(((uint32_t)(x))<<SIM_SCGC4_UART2_SHIFT))&SIM_SCGC4_UART2_MASK)
S#define SIM_SCGC4_USBOTG_MASK                    0x40000u
S#define SIM_SCGC4_USBOTG_SHIFT                   18
S#define SIM_SCGC4_USBOTG_WIDTH                   1
S#define SIM_SCGC4_USBOTG(x)                      (((uint32_t)(((uint32_t)(x))<<SIM_SCGC4_USBOTG_SHIFT))&SIM_SCGC4_USBOTG_MASK)
S#define SIM_SCGC4_CMP_MASK                       0x80000u
S#define SIM_SCGC4_CMP_SHIFT                      19
S#define SIM_SCGC4_CMP_WIDTH                      1
S#define SIM_SCGC4_CMP(x)                         (((uint32_t)(((uint32_t)(x))<<SIM_SCGC4_CMP_SHIFT))&SIM_SCGC4_CMP_MASK)
S#define SIM_SCGC4_SPI0_MASK                      0x400000u
S#define SIM_SCGC4_SPI0_SHIFT                     22
S#define SIM_SCGC4_SPI0_WIDTH                     1
S#define SIM_SCGC4_SPI0(x)                        (((uint32_t)(((uint32_t)(x))<<SIM_SCGC4_SPI0_SHIFT))&SIM_SCGC4_SPI0_MASK)
S#define SIM_SCGC4_SPI1_MASK                      0x800000u
S#define SIM_SCGC4_SPI1_SHIFT                     23
S#define SIM_SCGC4_SPI1_WIDTH                     1
S#define SIM_SCGC4_SPI1(x)                        (((uint32_t)(((uint32_t)(x))<<SIM_SCGC4_SPI1_SHIFT))&SIM_SCGC4_SPI1_MASK)
S/* SCGC5 Bit Fields */
S#define SIM_SCGC5_LPTMR_MASK                     0x1u
S#define SIM_SCGC5_LPTMR_SHIFT                    0
S#define SIM_SCGC5_LPTMR_WIDTH                    1
S#define SIM_SCGC5_LPTMR(x)                       (((uint32_t)(((uint32_t)(x))<<SIM_SCGC5_LPTMR_SHIFT))&SIM_SCGC5_LPTMR_MASK)
S#define SIM_SCGC5_TSI_MASK                       0x20u
S#define SIM_SCGC5_TSI_SHIFT                      5
S#define SIM_SCGC5_TSI_WIDTH                      1
S#define SIM_SCGC5_TSI(x)                         (((uint32_t)(((uint32_t)(x))<<SIM_SCGC5_TSI_SHIFT))&SIM_SCGC5_TSI_MASK)
S#define SIM_SCGC5_PORTA_MASK                     0x200u
S#define SIM_SCGC5_PORTA_SHIFT                    9
S#define SIM_SCGC5_PORTA_WIDTH                    1
S#define SIM_SCGC5_PORTA(x)                       (((uint32_t)(((uint32_t)(x))<<SIM_SCGC5_PORTA_SHIFT))&SIM_SCGC5_PORTA_MASK)
S#define SIM_SCGC5_PORTB_MASK                     0x400u
S#define SIM_SCGC5_PORTB_SHIFT                    10
S#define SIM_SCGC5_PORTB_WIDTH                    1
S#define SIM_SCGC5_PORTB(x)                       (((uint32_t)(((uint32_t)(x))<<SIM_SCGC5_PORTB_SHIFT))&SIM_SCGC5_PORTB_MASK)
S#define SIM_SCGC5_PORTC_MASK                     0x800u
S#define SIM_SCGC5_PORTC_SHIFT                    11
S#define SIM_SCGC5_PORTC_WIDTH                    1
S#define SIM_SCGC5_PORTC(x)                       (((uint32_t)(((uint32_t)(x))<<SIM_SCGC5_PORTC_SHIFT))&SIM_SCGC5_PORTC_MASK)
S#define SIM_SCGC5_PORTD_MASK                     0x1000u
S#define SIM_SCGC5_PORTD_SHIFT                    12
S#define SIM_SCGC5_PORTD_WIDTH                    1
S#define SIM_SCGC5_PORTD(x)                       (((uint32_t)(((uint32_t)(x))<<SIM_SCGC5_PORTD_SHIFT))&SIM_SCGC5_PORTD_MASK)
S#define SIM_SCGC5_PORTE_MASK                     0x2000u
S#define SIM_SCGC5_PORTE_SHIFT                    13
S#define SIM_SCGC5_PORTE_WIDTH                    1
S#define SIM_SCGC5_PORTE(x)                       (((uint32_t)(((uint32_t)(x))<<SIM_SCGC5_PORTE_SHIFT))&SIM_SCGC5_PORTE_MASK)
S/* SCGC6 Bit Fields */
S#define SIM_SCGC6_FTF_MASK                       0x1u
S#define SIM_SCGC6_FTF_SHIFT                      0
S#define SIM_SCGC6_FTF_WIDTH                      1
S#define SIM_SCGC6_FTF(x)                         (((uint32_t)(((uint32_t)(x))<<SIM_SCGC6_FTF_SHIFT))&SIM_SCGC6_FTF_MASK)
S#define SIM_SCGC6_DMAMUX_MASK                    0x2u
S#define SIM_SCGC6_DMAMUX_SHIFT                   1
S#define SIM_SCGC6_DMAMUX_WIDTH                   1
S#define SIM_SCGC6_DMAMUX(x)                      (((uint32_t)(((uint32_t)(x))<<SIM_SCGC6_DMAMUX_SHIFT))&SIM_SCGC6_DMAMUX_MASK)
S#define SIM_SCGC6_PIT_MASK                       0x800000u
S#define SIM_SCGC6_PIT_SHIFT                      23
S#define SIM_SCGC6_PIT_WIDTH                      1
S#define SIM_SCGC6_PIT(x)                         (((uint32_t)(((uint32_t)(x))<<SIM_SCGC6_PIT_SHIFT))&SIM_SCGC6_PIT_MASK)
S#define SIM_SCGC6_TPM0_MASK                      0x1000000u
S#define SIM_SCGC6_TPM0_SHIFT                     24
S#define SIM_SCGC6_TPM0_WIDTH                     1
S#define SIM_SCGC6_TPM0(x)                        (((uint32_t)(((uint32_t)(x))<<SIM_SCGC6_TPM0_SHIFT))&SIM_SCGC6_TPM0_MASK)
S#define SIM_SCGC6_TPM1_MASK                      0x2000000u
S#define SIM_SCGC6_TPM1_SHIFT                     25
S#define SIM_SCGC6_TPM1_WIDTH                     1
S#define SIM_SCGC6_TPM1(x)                        (((uint32_t)(((uint32_t)(x))<<SIM_SCGC6_TPM1_SHIFT))&SIM_SCGC6_TPM1_MASK)
S#define SIM_SCGC6_TPM2_MASK                      0x4000000u
S#define SIM_SCGC6_TPM2_SHIFT                     26
S#define SIM_SCGC6_TPM2_WIDTH                     1
S#define SIM_SCGC6_TPM2(x)                        (((uint32_t)(((uint32_t)(x))<<SIM_SCGC6_TPM2_SHIFT))&SIM_SCGC6_TPM2_MASK)
S#define SIM_SCGC6_ADC0_MASK                      0x8000000u
S#define SIM_SCGC6_ADC0_SHIFT                     27
S#define SIM_SCGC6_ADC0_WIDTH                     1
S#define SIM_SCGC6_ADC0(x)                        (((uint32_t)(((uint32_t)(x))<<SIM_SCGC6_ADC0_SHIFT))&SIM_SCGC6_ADC0_MASK)
S#define SIM_SCGC6_RTC_MASK                       0x20000000u
S#define SIM_SCGC6_RTC_SHIFT                      29
S#define SIM_SCGC6_RTC_WIDTH                      1
S#define SIM_SCGC6_RTC(x)                         (((uint32_t)(((uint32_t)(x))<<SIM_SCGC6_RTC_SHIFT))&SIM_SCGC6_RTC_MASK)
S#define SIM_SCGC6_DAC0_MASK                      0x80000000u
S#define SIM_SCGC6_DAC0_SHIFT                     31
S#define SIM_SCGC6_DAC0_WIDTH                     1
S#define SIM_SCGC6_DAC0(x)                        (((uint32_t)(((uint32_t)(x))<<SIM_SCGC6_DAC0_SHIFT))&SIM_SCGC6_DAC0_MASK)
S/* SCGC7 Bit Fields */
S#define SIM_SCGC7_DMA_MASK                       0x100u
S#define SIM_SCGC7_DMA_SHIFT                      8
S#define SIM_SCGC7_DMA_WIDTH                      1
S#define SIM_SCGC7_DMA(x)                         (((uint32_t)(((uint32_t)(x))<<SIM_SCGC7_DMA_SHIFT))&SIM_SCGC7_DMA_MASK)
S/* CLKDIV1 Bit Fields */
S#define SIM_CLKDIV1_OUTDIV4_MASK                 0x70000u
S#define SIM_CLKDIV1_OUTDIV4_SHIFT                16
S#define SIM_CLKDIV1_OUTDIV4_WIDTH                3
S#define SIM_CLKDIV1_OUTDIV4(x)                   (((uint32_t)(((uint32_t)(x))<<SIM_CLKDIV1_OUTDIV4_SHIFT))&SIM_CLKDIV1_OUTDIV4_MASK)
S#define SIM_CLKDIV1_OUTDIV1_MASK                 0xF0000000u
S#define SIM_CLKDIV1_OUTDIV1_SHIFT                28
S#define SIM_CLKDIV1_OUTDIV1_WIDTH                4
S#define SIM_CLKDIV1_OUTDIV1(x)                   (((uint32_t)(((uint32_t)(x))<<SIM_CLKDIV1_OUTDIV1_SHIFT))&SIM_CLKDIV1_OUTDIV1_MASK)
S/* FCFG1 Bit Fields */
S#define SIM_FCFG1_FLASHDIS_MASK                  0x1u
S#define SIM_FCFG1_FLASHDIS_SHIFT                 0
S#define SIM_FCFG1_FLASHDIS_WIDTH                 1
S#define SIM_FCFG1_FLASHDIS(x)                    (((uint32_t)(((uint32_t)(x))<<SIM_FCFG1_FLASHDIS_SHIFT))&SIM_FCFG1_FLASHDIS_MASK)
S#define SIM_FCFG1_FLASHDOZE_MASK                 0x2u
S#define SIM_FCFG1_FLASHDOZE_SHIFT                1
S#define SIM_FCFG1_FLASHDOZE_WIDTH                1
S#define SIM_FCFG1_FLASHDOZE(x)                   (((uint32_t)(((uint32_t)(x))<<SIM_FCFG1_FLASHDOZE_SHIFT))&SIM_FCFG1_FLASHDOZE_MASK)
S#define SIM_FCFG1_PFSIZE_MASK                    0xF000000u
S#define SIM_FCFG1_PFSIZE_SHIFT                   24
S#define SIM_FCFG1_PFSIZE_WIDTH                   4
S#define SIM_FCFG1_PFSIZE(x)                      (((uint32_t)(((uint32_t)(x))<<SIM_FCFG1_PFSIZE_SHIFT))&SIM_FCFG1_PFSIZE_MASK)
S/* FCFG2 Bit Fields */
S#define SIM_FCFG2_MAXADDR0_MASK                  0x7F000000u
S#define SIM_FCFG2_MAXADDR0_SHIFT                 24
S#define SIM_FCFG2_MAXADDR0_WIDTH                 7
S#define SIM_FCFG2_MAXADDR0(x)                    (((uint32_t)(((uint32_t)(x))<<SIM_FCFG2_MAXADDR0_SHIFT))&SIM_FCFG2_MAXADDR0_MASK)
S/* UIDMH Bit Fields */
S#define SIM_UIDMH_UID_MASK                       0xFFFFu
S#define SIM_UIDMH_UID_SHIFT                      0
S#define SIM_UIDMH_UID_WIDTH                      16
S#define SIM_UIDMH_UID(x)                         (((uint32_t)(((uint32_t)(x))<<SIM_UIDMH_UID_SHIFT))&SIM_UIDMH_UID_MASK)
S/* UIDML Bit Fields */
S#define SIM_UIDML_UID_MASK                       0xFFFFFFFFu
S#define SIM_UIDML_UID_SHIFT                      0
S#define SIM_UIDML_UID_WIDTH                      32
S#define SIM_UIDML_UID(x)                         (((uint32_t)(((uint32_t)(x))<<SIM_UIDML_UID_SHIFT))&SIM_UIDML_UID_MASK)
S/* UIDL Bit Fields */
S#define SIM_UIDL_UID_MASK                        0xFFFFFFFFu
S#define SIM_UIDL_UID_SHIFT                       0
S#define SIM_UIDL_UID_WIDTH                       32
S#define SIM_UIDL_UID(x)                          (((uint32_t)(((uint32_t)(x))<<SIM_UIDL_UID_SHIFT))&SIM_UIDL_UID_MASK)
S/* COPC Bit Fields */
S#define SIM_COPC_COPW_MASK                       0x1u
S#define SIM_COPC_COPW_SHIFT                      0
S#define SIM_COPC_COPW_WIDTH                      1
S#define SIM_COPC_COPW(x)                         (((uint32_t)(((uint32_t)(x))<<SIM_COPC_COPW_SHIFT))&SIM_COPC_COPW_MASK)
S#define SIM_COPC_COPCLKS_MASK                    0x2u
S#define SIM_COPC_COPCLKS_SHIFT                   1
S#define SIM_COPC_COPCLKS_WIDTH                   1
S#define SIM_COPC_COPCLKS(x)                      (((uint32_t)(((uint32_t)(x))<<SIM_COPC_COPCLKS_SHIFT))&SIM_COPC_COPCLKS_MASK)
S#define SIM_COPC_COPT_MASK                       0xCu
S#define SIM_COPC_COPT_SHIFT                      2
S#define SIM_COPC_COPT_WIDTH                      2
S#define SIM_COPC_COPT(x)                         (((uint32_t)(((uint32_t)(x))<<SIM_COPC_COPT_SHIFT))&SIM_COPC_COPT_MASK)
S/* SRVCOP Bit Fields */
S#define SIM_SRVCOP_SRVCOP_MASK                   0xFFu
S#define SIM_SRVCOP_SRVCOP_SHIFT                  0
S#define SIM_SRVCOP_SRVCOP_WIDTH                  8
S#define SIM_SRVCOP_SRVCOP(x)                     (((uint32_t)(((uint32_t)(x))<<SIM_SRVCOP_SRVCOP_SHIFT))&SIM_SRVCOP_SRVCOP_MASK)
S
S/*!
S * @}
S */ /* end of group SIM_Register_Masks */
S
S
S/* SIM - Peripheral instance base addresses */
S/** Peripheral SIM base address */
S#define SIM_BASE                                 (0x40047000u)
S/** Peripheral SIM base pointer */
S#define SIM                                      ((SIM_Type *)SIM_BASE)
S#define SIM_BASE_PTR                             (SIM)
S/** Array initializer of SIM peripheral base addresses */
S#define SIM_BASE_ADDRS                           { SIM_BASE }
S/** Array initializer of SIM peripheral base pointers */
S#define SIM_BASE_PTRS                            { SIM }
S
S/* ----------------------------------------------------------------------------
S   -- SIM - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup SIM_Register_Accessor_Macros SIM - Register accessor macros
S * @{
S */
S
S
S/* SIM - Register instance definitions */
S/* SIM */
S#define SIM_SOPT1                                SIM_SOPT1_REG(SIM)
S#define SIM_SOPT1CFG                             SIM_SOPT1CFG_REG(SIM)
S#define SIM_SOPT2                                SIM_SOPT2_REG(SIM)
S#define SIM_SOPT4                                SIM_SOPT4_REG(SIM)
S#define SIM_SOPT5                                SIM_SOPT5_REG(SIM)
S#define SIM_SOPT7                                SIM_SOPT7_REG(SIM)
S#define SIM_SDID                                 SIM_SDID_REG(SIM)
S#define SIM_SCGC4                                SIM_SCGC4_REG(SIM)
S#define SIM_SCGC5                                SIM_SCGC5_REG(SIM)
S#define SIM_SCGC6                                SIM_SCGC6_REG(SIM)
S#define SIM_SCGC7                                SIM_SCGC7_REG(SIM)
S#define SIM_CLKDIV1                              SIM_CLKDIV1_REG(SIM)
S#define SIM_FCFG1                                SIM_FCFG1_REG(SIM)
S#define SIM_FCFG2                                SIM_FCFG2_REG(SIM)
S#define SIM_UIDMH                                SIM_UIDMH_REG(SIM)
S#define SIM_UIDML                                SIM_UIDML_REG(SIM)
S#define SIM_UIDL                                 SIM_UIDL_REG(SIM)
S#define SIM_COPC                                 SIM_COPC_REG(SIM)
S#define SIM_SRVCOP                               SIM_SRVCOP_REG(SIM)
S
S/*!
S * @}
S */ /* end of group SIM_Register_Accessor_Macros */
S
S
S/*!
S * @}
S */ /* end of group SIM_Peripheral_Access_Layer */
S
S
S/* ----------------------------------------------------------------------------
S   -- SMC Peripheral Access Layer
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup SMC_Peripheral_Access_Layer SMC Peripheral Access Layer
S * @{
S */
S
S/** SMC - Register Layout Typedef */
Stypedef struct {
S  __IO uint8_t PMPROT;                             /**< Power Mode Protection register, offset: 0x0 */
S  __IO uint8_t PMCTRL;                             /**< Power Mode Control register, offset: 0x1 */
S  __IO uint8_t STOPCTRL;                           /**< Stop Control Register, offset: 0x2 */
S  __I  uint8_t PMSTAT;                             /**< Power Mode Status register, offset: 0x3 */
S} SMC_Type, *SMC_MemMapPtr;
S
S/* ----------------------------------------------------------------------------
S   -- SMC - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup SMC_Register_Accessor_Macros SMC - Register accessor macros
S * @{
S */
S
S
S/* SMC - Register accessors */
S#define SMC_PMPROT_REG(base)                     ((base)->PMPROT)
S#define SMC_PMCTRL_REG(base)                     ((base)->PMCTRL)
S#define SMC_STOPCTRL_REG(base)                   ((base)->STOPCTRL)
S#define SMC_PMSTAT_REG(base)                     ((base)->PMSTAT)
S
S/*!
S * @}
S */ /* end of group SMC_Register_Accessor_Macros */
S
S
S/* ----------------------------------------------------------------------------
S   -- SMC Register Masks
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup SMC_Register_Masks SMC Register Masks
S * @{
S */
S
S/* PMPROT Bit Fields */
S#define SMC_PMPROT_AVLLS_MASK                    0x2u
S#define SMC_PMPROT_AVLLS_SHIFT                   1
S#define SMC_PMPROT_AVLLS_WIDTH                   1
S#define SMC_PMPROT_AVLLS(x)                      (((uint8_t)(((uint8_t)(x))<<SMC_PMPROT_AVLLS_SHIFT))&SMC_PMPROT_AVLLS_MASK)
S#define SMC_PMPROT_ALLS_MASK                     0x8u
S#define SMC_PMPROT_ALLS_SHIFT                    3
S#define SMC_PMPROT_ALLS_WIDTH                    1
S#define SMC_PMPROT_ALLS(x)                       (((uint8_t)(((uint8_t)(x))<<SMC_PMPROT_ALLS_SHIFT))&SMC_PMPROT_ALLS_MASK)
S#define SMC_PMPROT_AVLP_MASK                     0x20u
S#define SMC_PMPROT_AVLP_SHIFT                    5
S#define SMC_PMPROT_AVLP_WIDTH                    1
S#define SMC_PMPROT_AVLP(x)                       (((uint8_t)(((uint8_t)(x))<<SMC_PMPROT_AVLP_SHIFT))&SMC_PMPROT_AVLP_MASK)
S/* PMCTRL Bit Fields */
S#define SMC_PMCTRL_STOPM_MASK                    0x7u
S#define SMC_PMCTRL_STOPM_SHIFT                   0
S#define SMC_PMCTRL_STOPM_WIDTH                   3
S#define SMC_PMCTRL_STOPM(x)                      (((uint8_t)(((uint8_t)(x))<<SMC_PMCTRL_STOPM_SHIFT))&SMC_PMCTRL_STOPM_MASK)
S#define SMC_PMCTRL_STOPA_MASK                    0x8u
S#define SMC_PMCTRL_STOPA_SHIFT                   3
S#define SMC_PMCTRL_STOPA_WIDTH                   1
S#define SMC_PMCTRL_STOPA(x)                      (((uint8_t)(((uint8_t)(x))<<SMC_PMCTRL_STOPA_SHIFT))&SMC_PMCTRL_STOPA_MASK)
S#define SMC_PMCTRL_RUNM_MASK                     0x60u
S#define SMC_PMCTRL_RUNM_SHIFT                    5
S#define SMC_PMCTRL_RUNM_WIDTH                    2
S#define SMC_PMCTRL_RUNM(x)                       (((uint8_t)(((uint8_t)(x))<<SMC_PMCTRL_RUNM_SHIFT))&SMC_PMCTRL_RUNM_MASK)
S/* STOPCTRL Bit Fields */
S#define SMC_STOPCTRL_VLLSM_MASK                  0x7u
S#define SMC_STOPCTRL_VLLSM_SHIFT                 0
S#define SMC_STOPCTRL_VLLSM_WIDTH                 3
S#define SMC_STOPCTRL_VLLSM(x)                    (((uint8_t)(((uint8_t)(x))<<SMC_STOPCTRL_VLLSM_SHIFT))&SMC_STOPCTRL_VLLSM_MASK)
S#define SMC_STOPCTRL_PORPO_MASK                  0x20u
S#define SMC_STOPCTRL_PORPO_SHIFT                 5
S#define SMC_STOPCTRL_PORPO_WIDTH                 1
S#define SMC_STOPCTRL_PORPO(x)                    (((uint8_t)(((uint8_t)(x))<<SMC_STOPCTRL_PORPO_SHIFT))&SMC_STOPCTRL_PORPO_MASK)
S#define SMC_STOPCTRL_PSTOPO_MASK                 0xC0u
S#define SMC_STOPCTRL_PSTOPO_SHIFT                6
S#define SMC_STOPCTRL_PSTOPO_WIDTH                2
S#define SMC_STOPCTRL_PSTOPO(x)                   (((uint8_t)(((uint8_t)(x))<<SMC_STOPCTRL_PSTOPO_SHIFT))&SMC_STOPCTRL_PSTOPO_MASK)
S/* PMSTAT Bit Fields */
S#define SMC_PMSTAT_PMSTAT_MASK                   0x7Fu
S#define SMC_PMSTAT_PMSTAT_SHIFT                  0
S#define SMC_PMSTAT_PMSTAT_WIDTH                  7
S#define SMC_PMSTAT_PMSTAT(x)                     (((uint8_t)(((uint8_t)(x))<<SMC_PMSTAT_PMSTAT_SHIFT))&SMC_PMSTAT_PMSTAT_MASK)
S
S/*!
S * @}
S */ /* end of group SMC_Register_Masks */
S
S
S/* SMC - Peripheral instance base addresses */
S/** Peripheral SMC base address */
S#define SMC_BASE                                 (0x4007E000u)
S/** Peripheral SMC base pointer */
S#define SMC                                      ((SMC_Type *)SMC_BASE)
S#define SMC_BASE_PTR                             (SMC)
S/** Array initializer of SMC peripheral base addresses */
S#define SMC_BASE_ADDRS                           { SMC_BASE }
S/** Array initializer of SMC peripheral base pointers */
S#define SMC_BASE_PTRS                            { SMC }
S
S/* ----------------------------------------------------------------------------
S   -- SMC - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup SMC_Register_Accessor_Macros SMC - Register accessor macros
S * @{
S */
S
S
S/* SMC - Register instance definitions */
S/* SMC */
S#define SMC_PMPROT                               SMC_PMPROT_REG(SMC)
S#define SMC_PMCTRL                               SMC_PMCTRL_REG(SMC)
S#define SMC_STOPCTRL                             SMC_STOPCTRL_REG(SMC)
S#define SMC_PMSTAT                               SMC_PMSTAT_REG(SMC)
S
S/*!
S * @}
S */ /* end of group SMC_Register_Accessor_Macros */
S
S
S/*!
S * @}
S */ /* end of group SMC_Peripheral_Access_Layer */
S
S
S/* ----------------------------------------------------------------------------
S   -- SPI Peripheral Access Layer
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup SPI_Peripheral_Access_Layer SPI Peripheral Access Layer
S * @{
S */
S
S/** SPI - Register Layout Typedef */
Stypedef struct {
S  __IO uint8_t C1;                                 /**< SPI control register 1, offset: 0x0 */
S  __IO uint8_t C2;                                 /**< SPI control register 2, offset: 0x1 */
S  __IO uint8_t BR;                                 /**< SPI baud rate register, offset: 0x2 */
S  __IO uint8_t S;                                  /**< SPI status register, offset: 0x3 */
S       uint8_t RESERVED_0[1];
S  __IO uint8_t D;                                  /**< SPI data register, offset: 0x5 */
S       uint8_t RESERVED_1[1];
S  __IO uint8_t M;                                  /**< SPI match register, offset: 0x7 */
S} SPI_Type, *SPI_MemMapPtr;
S
S/* ----------------------------------------------------------------------------
S   -- SPI - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup SPI_Register_Accessor_Macros SPI - Register accessor macros
S * @{
S */
S
S
S/* SPI - Register accessors */
S#define SPI_C1_REG(base)                         ((base)->C1)
S#define SPI_C2_REG(base)                         ((base)->C2)
S#define SPI_BR_REG(base)                         ((base)->BR)
S#define SPI_S_REG(base)                          ((base)->S)
S#define SPI_D_REG(base)                          ((base)->D)
S#define SPI_M_REG(base)                          ((base)->M)
S
S/*!
S * @}
S */ /* end of group SPI_Register_Accessor_Macros */
S
S
S/* ----------------------------------------------------------------------------
S   -- SPI Register Masks
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup SPI_Register_Masks SPI Register Masks
S * @{
S */
S
S/* C1 Bit Fields */
S#define SPI_C1_LSBFE_MASK                        0x1u
S#define SPI_C1_LSBFE_SHIFT                       0
S#define SPI_C1_LSBFE_WIDTH                       1
S#define SPI_C1_LSBFE(x)                          (((uint8_t)(((uint8_t)(x))<<SPI_C1_LSBFE_SHIFT))&SPI_C1_LSBFE_MASK)
S#define SPI_C1_SSOE_MASK                         0x2u
S#define SPI_C1_SSOE_SHIFT                        1
S#define SPI_C1_SSOE_WIDTH                        1
S#define SPI_C1_SSOE(x)                           (((uint8_t)(((uint8_t)(x))<<SPI_C1_SSOE_SHIFT))&SPI_C1_SSOE_MASK)
S#define SPI_C1_CPHA_MASK                         0x4u
S#define SPI_C1_CPHA_SHIFT                        2
S#define SPI_C1_CPHA_WIDTH                        1
S#define SPI_C1_CPHA(x)                           (((uint8_t)(((uint8_t)(x))<<SPI_C1_CPHA_SHIFT))&SPI_C1_CPHA_MASK)
S#define SPI_C1_CPOL_MASK                         0x8u
S#define SPI_C1_CPOL_SHIFT                        3
S#define SPI_C1_CPOL_WIDTH                        1
S#define SPI_C1_CPOL(x)                           (((uint8_t)(((uint8_t)(x))<<SPI_C1_CPOL_SHIFT))&SPI_C1_CPOL_MASK)
S#define SPI_C1_MSTR_MASK                         0x10u
S#define SPI_C1_MSTR_SHIFT                        4
S#define SPI_C1_MSTR_WIDTH                        1
S#define SPI_C1_MSTR(x)                           (((uint8_t)(((uint8_t)(x))<<SPI_C1_MSTR_SHIFT))&SPI_C1_MSTR_MASK)
S#define SPI_C1_SPTIE_MASK                        0x20u
S#define SPI_C1_SPTIE_SHIFT                       5
S#define SPI_C1_SPTIE_WIDTH                       1
S#define SPI_C1_SPTIE(x)                          (((uint8_t)(((uint8_t)(x))<<SPI_C1_SPTIE_SHIFT))&SPI_C1_SPTIE_MASK)
S#define SPI_C1_SPE_MASK                          0x40u
S#define SPI_C1_SPE_SHIFT                         6
S#define SPI_C1_SPE_WIDTH                         1
S#define SPI_C1_SPE(x)                            (((uint8_t)(((uint8_t)(x))<<SPI_C1_SPE_SHIFT))&SPI_C1_SPE_MASK)
S#define SPI_C1_SPIE_MASK                         0x80u
S#define SPI_C1_SPIE_SHIFT                        7
S#define SPI_C1_SPIE_WIDTH                        1
S#define SPI_C1_SPIE(x)                           (((uint8_t)(((uint8_t)(x))<<SPI_C1_SPIE_SHIFT))&SPI_C1_SPIE_MASK)
S/* C2 Bit Fields */
S#define SPI_C2_SPC0_MASK                         0x1u
S#define SPI_C2_SPC0_SHIFT                        0
S#define SPI_C2_SPC0_WIDTH                        1
S#define SPI_C2_SPC0(x)                           (((uint8_t)(((uint8_t)(x))<<SPI_C2_SPC0_SHIFT))&SPI_C2_SPC0_MASK)
S#define SPI_C2_SPISWAI_MASK                      0x2u
S#define SPI_C2_SPISWAI_SHIFT                     1
S#define SPI_C2_SPISWAI_WIDTH                     1
S#define SPI_C2_SPISWAI(x)                        (((uint8_t)(((uint8_t)(x))<<SPI_C2_SPISWAI_SHIFT))&SPI_C2_SPISWAI_MASK)
S#define SPI_C2_RXDMAE_MASK                       0x4u
S#define SPI_C2_RXDMAE_SHIFT                      2
S#define SPI_C2_RXDMAE_WIDTH                      1
S#define SPI_C2_RXDMAE(x)                         (((uint8_t)(((uint8_t)(x))<<SPI_C2_RXDMAE_SHIFT))&SPI_C2_RXDMAE_MASK)
S#define SPI_C2_BIDIROE_MASK                      0x8u
S#define SPI_C2_BIDIROE_SHIFT                     3
S#define SPI_C2_BIDIROE_WIDTH                     1
S#define SPI_C2_BIDIROE(x)                        (((uint8_t)(((uint8_t)(x))<<SPI_C2_BIDIROE_SHIFT))&SPI_C2_BIDIROE_MASK)
S#define SPI_C2_MODFEN_MASK                       0x10u
S#define SPI_C2_MODFEN_SHIFT                      4
S#define SPI_C2_MODFEN_WIDTH                      1
S#define SPI_C2_MODFEN(x)                         (((uint8_t)(((uint8_t)(x))<<SPI_C2_MODFEN_SHIFT))&SPI_C2_MODFEN_MASK)
S#define SPI_C2_TXDMAE_MASK                       0x20u
S#define SPI_C2_TXDMAE_SHIFT                      5
S#define SPI_C2_TXDMAE_WIDTH                      1
S#define SPI_C2_TXDMAE(x)                         (((uint8_t)(((uint8_t)(x))<<SPI_C2_TXDMAE_SHIFT))&SPI_C2_TXDMAE_MASK)
S#define SPI_C2_SPMIE_MASK                        0x80u
S#define SPI_C2_SPMIE_SHIFT                       7
S#define SPI_C2_SPMIE_WIDTH                       1
S#define SPI_C2_SPMIE(x)                          (((uint8_t)(((uint8_t)(x))<<SPI_C2_SPMIE_SHIFT))&SPI_C2_SPMIE_MASK)
S/* BR Bit Fields */
S#define SPI_BR_SPR_MASK                          0xFu
S#define SPI_BR_SPR_SHIFT                         0
S#define SPI_BR_SPR_WIDTH                         4
S#define SPI_BR_SPR(x)                            (((uint8_t)(((uint8_t)(x))<<SPI_BR_SPR_SHIFT))&SPI_BR_SPR_MASK)
S#define SPI_BR_SPPR_MASK                         0x70u
S#define SPI_BR_SPPR_SHIFT                        4
S#define SPI_BR_SPPR_WIDTH                        3
S#define SPI_BR_SPPR(x)                           (((uint8_t)(((uint8_t)(x))<<SPI_BR_SPPR_SHIFT))&SPI_BR_SPPR_MASK)
S/* S Bit Fields */
S#define SPI_S_MODF_MASK                          0x10u
S#define SPI_S_MODF_SHIFT                         4
S#define SPI_S_MODF_WIDTH                         1
S#define SPI_S_MODF(x)                            (((uint8_t)(((uint8_t)(x))<<SPI_S_MODF_SHIFT))&SPI_S_MODF_MASK)
S#define SPI_S_SPTEF_MASK                         0x20u
S#define SPI_S_SPTEF_SHIFT                        5
S#define SPI_S_SPTEF_WIDTH                        1
S#define SPI_S_SPTEF(x)                           (((uint8_t)(((uint8_t)(x))<<SPI_S_SPTEF_SHIFT))&SPI_S_SPTEF_MASK)
S#define SPI_S_SPMF_MASK                          0x40u
S#define SPI_S_SPMF_SHIFT                         6
S#define SPI_S_SPMF_WIDTH                         1
S#define SPI_S_SPMF(x)                            (((uint8_t)(((uint8_t)(x))<<SPI_S_SPMF_SHIFT))&SPI_S_SPMF_MASK)
S#define SPI_S_SPRF_MASK                          0x80u
S#define SPI_S_SPRF_SHIFT                         7
S#define SPI_S_SPRF_WIDTH                         1
S#define SPI_S_SPRF(x)                            (((uint8_t)(((uint8_t)(x))<<SPI_S_SPRF_SHIFT))&SPI_S_SPRF_MASK)
S/* D Bit Fields */
S#define SPI_D_Bits_MASK                          0xFFu
S#define SPI_D_Bits_SHIFT                         0
S#define SPI_D_Bits_WIDTH                         8
S#define SPI_D_Bits(x)                            (((uint8_t)(((uint8_t)(x))<<SPI_D_Bits_SHIFT))&SPI_D_Bits_MASK)
S/* M Bit Fields */
S#define SPI_M_Bits_MASK                          0xFFu
S#define SPI_M_Bits_SHIFT                         0
S#define SPI_M_Bits_WIDTH                         8
S#define SPI_M_Bits(x)                            (((uint8_t)(((uint8_t)(x))<<SPI_M_Bits_SHIFT))&SPI_M_Bits_MASK)
S
S/*!
S * @}
S */ /* end of group SPI_Register_Masks */
S
S
S/* SPI - Peripheral instance base addresses */
S/** Peripheral SPI0 base address */
S#define SPI0_BASE                                (0x40076000u)
S/** Peripheral SPI0 base pointer */
S#define SPI0                                     ((SPI_Type *)SPI0_BASE)
S#define SPI0_BASE_PTR                            (SPI0)
S/** Peripheral SPI1 base address */
S#define SPI1_BASE                                (0x40077000u)
S/** Peripheral SPI1 base pointer */
S#define SPI1                                     ((SPI_Type *)SPI1_BASE)
S#define SPI1_BASE_PTR                            (SPI1)
S/** Array initializer of SPI peripheral base addresses */
S#define SPI_BASE_ADDRS                           { SPI0_BASE, SPI1_BASE }
S/** Array initializer of SPI peripheral base pointers */
S#define SPI_BASE_PTRS                            { SPI0, SPI1 }
S/** Interrupt vectors for the SPI peripheral type */
S#define SPI_IRQS                                 { SPI0_IRQn, SPI1_IRQn }
S
S/* ----------------------------------------------------------------------------
S   -- SPI - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup SPI_Register_Accessor_Macros SPI - Register accessor macros
S * @{
S */
S
S
S/* SPI - Register instance definitions */
S/* SPI0 */
S#define SPI0_C1                                  SPI_C1_REG(SPI0)
S#define SPI0_C2                                  SPI_C2_REG(SPI0)
S#define SPI0_BR                                  SPI_BR_REG(SPI0)
S#define SPI0_S                                   SPI_S_REG(SPI0)
S#define SPI0_D                                   SPI_D_REG(SPI0)
S#define SPI0_M                                   SPI_M_REG(SPI0)
S/* SPI1 */
S#define SPI1_C1                                  SPI_C1_REG(SPI1)
S#define SPI1_C2                                  SPI_C2_REG(SPI1)
S#define SPI1_BR                                  SPI_BR_REG(SPI1)
S#define SPI1_S                                   SPI_S_REG(SPI1)
S#define SPI1_D                                   SPI_D_REG(SPI1)
S#define SPI1_M                                   SPI_M_REG(SPI1)
S
S/*!
S * @}
S */ /* end of group SPI_Register_Accessor_Macros */
S
S
S/*!
S * @}
S */ /* end of group SPI_Peripheral_Access_Layer */
S
S
S/* ----------------------------------------------------------------------------
S   -- TPM Peripheral Access Layer
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup TPM_Peripheral_Access_Layer TPM Peripheral Access Layer
S * @{
S */
S
S/** TPM - Register Layout Typedef */
Stypedef struct {
S  __IO uint32_t SC;                                /**< Status and Control, offset: 0x0 */
S  __IO uint32_t CNT;                               /**< Counter, offset: 0x4 */
S  __IO uint32_t MOD;                               /**< Modulo, offset: 0x8 */
S  struct {                                         /* offset: 0xC, array step: 0x8 */
S    __IO uint32_t CnSC;                              /**< Channel (n) Status and Control, array offset: 0xC, array step: 0x8 */
S    __IO uint32_t CnV;                               /**< Channel (n) Value, array offset: 0x10, array step: 0x8 */
S  } CONTROLS[6];
S       uint8_t RESERVED_0[20];
S  __IO uint32_t STATUS;                            /**< Capture and Compare Status, offset: 0x50 */
S       uint8_t RESERVED_1[48];
S  __IO uint32_t CONF;                              /**< Configuration, offset: 0x84 */
S} TPM_Type, *TPM_MemMapPtr;
S
S/* ----------------------------------------------------------------------------
S   -- TPM - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup TPM_Register_Accessor_Macros TPM - Register accessor macros
S * @{
S */
S
S
S/* TPM - Register accessors */
S#define TPM_SC_REG(base)                         ((base)->SC)
S#define TPM_CNT_REG(base)                        ((base)->CNT)
S#define TPM_MOD_REG(base)                        ((base)->MOD)
S#define TPM_CnSC_REG(base,index)                 ((base)->CONTROLS[index].CnSC)
S#define TPM_CnSC_COUNT                           6
S#define TPM_CnV_REG(base,index)                  ((base)->CONTROLS[index].CnV)
S#define TPM_CnV_COUNT                            6
S#define TPM_STATUS_REG(base)                     ((base)->STATUS)
S#define TPM_CONF_REG(base)                       ((base)->CONF)
S
S/*!
S * @}
S */ /* end of group TPM_Register_Accessor_Macros */
S
S
S/* ----------------------------------------------------------------------------
S   -- TPM Register Masks
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup TPM_Register_Masks TPM Register Masks
S * @{
S */
S
S/* SC Bit Fields */
S#define TPM_SC_PS_MASK                           0x7u
S#define TPM_SC_PS_SHIFT                          0
S#define TPM_SC_PS_WIDTH                          3
S#define TPM_SC_PS(x)                             (((uint32_t)(((uint32_t)(x))<<TPM_SC_PS_SHIFT))&TPM_SC_PS_MASK)
S#define TPM_SC_CMOD_MASK                         0x18u
S#define TPM_SC_CMOD_SHIFT                        3
S#define TPM_SC_CMOD_WIDTH                        2
S#define TPM_SC_CMOD(x)                           (((uint32_t)(((uint32_t)(x))<<TPM_SC_CMOD_SHIFT))&TPM_SC_CMOD_MASK)
S#define TPM_SC_CPWMS_MASK                        0x20u
S#define TPM_SC_CPWMS_SHIFT                       5
S#define TPM_SC_CPWMS_WIDTH                       1
S#define TPM_SC_CPWMS(x)                          (((uint32_t)(((uint32_t)(x))<<TPM_SC_CPWMS_SHIFT))&TPM_SC_CPWMS_MASK)
S#define TPM_SC_TOIE_MASK                         0x40u
S#define TPM_SC_TOIE_SHIFT                        6
S#define TPM_SC_TOIE_WIDTH                        1
S#define TPM_SC_TOIE(x)                           (((uint32_t)(((uint32_t)(x))<<TPM_SC_TOIE_SHIFT))&TPM_SC_TOIE_MASK)
S#define TPM_SC_TOF_MASK                          0x80u
S#define TPM_SC_TOF_SHIFT                         7
S#define TPM_SC_TOF_WIDTH                         1
S#define TPM_SC_TOF(x)                            (((uint32_t)(((uint32_t)(x))<<TPM_SC_TOF_SHIFT))&TPM_SC_TOF_MASK)
S#define TPM_SC_DMA_MASK                          0x100u
S#define TPM_SC_DMA_SHIFT                         8
S#define TPM_SC_DMA_WIDTH                         1
S#define TPM_SC_DMA(x)                            (((uint32_t)(((uint32_t)(x))<<TPM_SC_DMA_SHIFT))&TPM_SC_DMA_MASK)
S/* CNT Bit Fields */
S#define TPM_CNT_COUNT_MASK                       0xFFFFu
S#define TPM_CNT_COUNT_SHIFT                      0
S#define TPM_CNT_COUNT_WIDTH                      16
S#define TPM_CNT_COUNT(x)                         (((uint32_t)(((uint32_t)(x))<<TPM_CNT_COUNT_SHIFT))&TPM_CNT_COUNT_MASK)
S/* MOD Bit Fields */
S#define TPM_MOD_MOD_MASK                         0xFFFFu
S#define TPM_MOD_MOD_SHIFT                        0
S#define TPM_MOD_MOD_WIDTH                        16
S#define TPM_MOD_MOD(x)                           (((uint32_t)(((uint32_t)(x))<<TPM_MOD_MOD_SHIFT))&TPM_MOD_MOD_MASK)
S/* CnSC Bit Fields */
S#define TPM_CnSC_DMA_MASK                        0x1u
S#define TPM_CnSC_DMA_SHIFT                       0
S#define TPM_CnSC_DMA_WIDTH                       1
S#define TPM_CnSC_DMA(x)                          (((uint32_t)(((uint32_t)(x))<<TPM_CnSC_DMA_SHIFT))&TPM_CnSC_DMA_MASK)
S#define TPM_CnSC_ELSA_MASK                       0x4u
S#define TPM_CnSC_ELSA_SHIFT                      2
S#define TPM_CnSC_ELSA_WIDTH                      1
S#define TPM_CnSC_ELSA(x)                         (((uint32_t)(((uint32_t)(x))<<TPM_CnSC_ELSA_SHIFT))&TPM_CnSC_ELSA_MASK)
S#define TPM_CnSC_ELSB_MASK                       0x8u
S#define TPM_CnSC_ELSB_SHIFT                      3
S#define TPM_CnSC_ELSB_WIDTH                      1
S#define TPM_CnSC_ELSB(x)                         (((uint32_t)(((uint32_t)(x))<<TPM_CnSC_ELSB_SHIFT))&TPM_CnSC_ELSB_MASK)
S#define TPM_CnSC_MSA_MASK                        0x10u
S#define TPM_CnSC_MSA_SHIFT                       4
S#define TPM_CnSC_MSA_WIDTH                       1
S#define TPM_CnSC_MSA(x)                          (((uint32_t)(((uint32_t)(x))<<TPM_CnSC_MSA_SHIFT))&TPM_CnSC_MSA_MASK)
S#define TPM_CnSC_MSB_MASK                        0x20u
S#define TPM_CnSC_MSB_SHIFT                       5
S#define TPM_CnSC_MSB_WIDTH                       1
S#define TPM_CnSC_MSB(x)                          (((uint32_t)(((uint32_t)(x))<<TPM_CnSC_MSB_SHIFT))&TPM_CnSC_MSB_MASK)
S#define TPM_CnSC_CHIE_MASK                       0x40u
S#define TPM_CnSC_CHIE_SHIFT                      6
S#define TPM_CnSC_CHIE_WIDTH                      1
S#define TPM_CnSC_CHIE(x)                         (((uint32_t)(((uint32_t)(x))<<TPM_CnSC_CHIE_SHIFT))&TPM_CnSC_CHIE_MASK)
S#define TPM_CnSC_CHF_MASK                        0x80u
S#define TPM_CnSC_CHF_SHIFT                       7
S#define TPM_CnSC_CHF_WIDTH                       1
S#define TPM_CnSC_CHF(x)                          (((uint32_t)(((uint32_t)(x))<<TPM_CnSC_CHF_SHIFT))&TPM_CnSC_CHF_MASK)
S/* CnV Bit Fields */
S#define TPM_CnV_VAL_MASK                         0xFFFFu
S#define TPM_CnV_VAL_SHIFT                        0
S#define TPM_CnV_VAL_WIDTH                        16
S#define TPM_CnV_VAL(x)                           (((uint32_t)(((uint32_t)(x))<<TPM_CnV_VAL_SHIFT))&TPM_CnV_VAL_MASK)
S/* STATUS Bit Fields */
S#define TPM_STATUS_CH0F_MASK                     0x1u
S#define TPM_STATUS_CH0F_SHIFT                    0
S#define TPM_STATUS_CH0F_WIDTH                    1
S#define TPM_STATUS_CH0F(x)                       (((uint32_t)(((uint32_t)(x))<<TPM_STATUS_CH0F_SHIFT))&TPM_STATUS_CH0F_MASK)
S#define TPM_STATUS_CH1F_MASK                     0x2u
S#define TPM_STATUS_CH1F_SHIFT                    1
S#define TPM_STATUS_CH1F_WIDTH                    1
S#define TPM_STATUS_CH1F(x)                       (((uint32_t)(((uint32_t)(x))<<TPM_STATUS_CH1F_SHIFT))&TPM_STATUS_CH1F_MASK)
S#define TPM_STATUS_CH2F_MASK                     0x4u
S#define TPM_STATUS_CH2F_SHIFT                    2
S#define TPM_STATUS_CH2F_WIDTH                    1
S#define TPM_STATUS_CH2F(x)                       (((uint32_t)(((uint32_t)(x))<<TPM_STATUS_CH2F_SHIFT))&TPM_STATUS_CH2F_MASK)
S#define TPM_STATUS_CH3F_MASK                     0x8u
S#define TPM_STATUS_CH3F_SHIFT                    3
S#define TPM_STATUS_CH3F_WIDTH                    1
S#define TPM_STATUS_CH3F(x)                       (((uint32_t)(((uint32_t)(x))<<TPM_STATUS_CH3F_SHIFT))&TPM_STATUS_CH3F_MASK)
S#define TPM_STATUS_CH4F_MASK                     0x10u
S#define TPM_STATUS_CH4F_SHIFT                    4
S#define TPM_STATUS_CH4F_WIDTH                    1
S#define TPM_STATUS_CH4F(x)                       (((uint32_t)(((uint32_t)(x))<<TPM_STATUS_CH4F_SHIFT))&TPM_STATUS_CH4F_MASK)
S#define TPM_STATUS_CH5F_MASK                     0x20u
S#define TPM_STATUS_CH5F_SHIFT                    5
S#define TPM_STATUS_CH5F_WIDTH                    1
S#define TPM_STATUS_CH5F(x)                       (((uint32_t)(((uint32_t)(x))<<TPM_STATUS_CH5F_SHIFT))&TPM_STATUS_CH5F_MASK)
S#define TPM_STATUS_TOF_MASK                      0x100u
S#define TPM_STATUS_TOF_SHIFT                     8
S#define TPM_STATUS_TOF_WIDTH                     1
S#define TPM_STATUS_TOF(x)                        (((uint32_t)(((uint32_t)(x))<<TPM_STATUS_TOF_SHIFT))&TPM_STATUS_TOF_MASK)
S/* CONF Bit Fields */
S#define TPM_CONF_DOZEEN_MASK                     0x20u
S#define TPM_CONF_DOZEEN_SHIFT                    5
S#define TPM_CONF_DOZEEN_WIDTH                    1
S#define TPM_CONF_DOZEEN(x)                       (((uint32_t)(((uint32_t)(x))<<TPM_CONF_DOZEEN_SHIFT))&TPM_CONF_DOZEEN_MASK)
S#define TPM_CONF_DBGMODE_MASK                    0xC0u
S#define TPM_CONF_DBGMODE_SHIFT                   6
S#define TPM_CONF_DBGMODE_WIDTH                   2
S#define TPM_CONF_DBGMODE(x)                      (((uint32_t)(((uint32_t)(x))<<TPM_CONF_DBGMODE_SHIFT))&TPM_CONF_DBGMODE_MASK)
S#define TPM_CONF_GTBEEN_MASK                     0x200u
S#define TPM_CONF_GTBEEN_SHIFT                    9
S#define TPM_CONF_GTBEEN_WIDTH                    1
S#define TPM_CONF_GTBEEN(x)                       (((uint32_t)(((uint32_t)(x))<<TPM_CONF_GTBEEN_SHIFT))&TPM_CONF_GTBEEN_MASK)
S#define TPM_CONF_CSOT_MASK                       0x10000u
S#define TPM_CONF_CSOT_SHIFT                      16
S#define TPM_CONF_CSOT_WIDTH                      1
S#define TPM_CONF_CSOT(x)                         (((uint32_t)(((uint32_t)(x))<<TPM_CONF_CSOT_SHIFT))&TPM_CONF_CSOT_MASK)
S#define TPM_CONF_CSOO_MASK                       0x20000u
S#define TPM_CONF_CSOO_SHIFT                      17
S#define TPM_CONF_CSOO_WIDTH                      1
S#define TPM_CONF_CSOO(x)                         (((uint32_t)(((uint32_t)(x))<<TPM_CONF_CSOO_SHIFT))&TPM_CONF_CSOO_MASK)
S#define TPM_CONF_CROT_MASK                       0x40000u
S#define TPM_CONF_CROT_SHIFT                      18
S#define TPM_CONF_CROT_WIDTH                      1
S#define TPM_CONF_CROT(x)                         (((uint32_t)(((uint32_t)(x))<<TPM_CONF_CROT_SHIFT))&TPM_CONF_CROT_MASK)
S#define TPM_CONF_TRGSEL_MASK                     0xF000000u
S#define TPM_CONF_TRGSEL_SHIFT                    24
S#define TPM_CONF_TRGSEL_WIDTH                    4
S#define TPM_CONF_TRGSEL(x)                       (((uint32_t)(((uint32_t)(x))<<TPM_CONF_TRGSEL_SHIFT))&TPM_CONF_TRGSEL_MASK)
S
S/*!
S * @}
S */ /* end of group TPM_Register_Masks */
S
S
S/* TPM - Peripheral instance base addresses */
S/** Peripheral TPM0 base address */
S#define TPM0_BASE                                (0x40038000u)
S/** Peripheral TPM0 base pointer */
S#define TPM0                                     ((TPM_Type *)TPM0_BASE)
S#define TPM0_BASE_PTR                            (TPM0)
S/** Peripheral TPM1 base address */
S#define TPM1_BASE                                (0x40039000u)
S/** Peripheral TPM1 base pointer */
S#define TPM1                                     ((TPM_Type *)TPM1_BASE)
S#define TPM1_BASE_PTR                            (TPM1)
S/** Peripheral TPM2 base address */
S#define TPM2_BASE                                (0x4003A000u)
S/** Peripheral TPM2 base pointer */
S#define TPM2                                     ((TPM_Type *)TPM2_BASE)
S#define TPM2_BASE_PTR                            (TPM2)
S/** Array initializer of TPM peripheral base addresses */
S#define TPM_BASE_ADDRS                           { TPM0_BASE, TPM1_BASE, TPM2_BASE }
S/** Array initializer of TPM peripheral base pointers */
S#define TPM_BASE_PTRS                            { TPM0, TPM1, TPM2 }
S/** Interrupt vectors for the TPM peripheral type */
S#define TPM_IRQS                                 { TPM0_IRQn, TPM1_IRQn, TPM2_IRQn }
S
S/* ----------------------------------------------------------------------------
S   -- TPM - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup TPM_Register_Accessor_Macros TPM - Register accessor macros
S * @{
S */
S
S
S/* TPM - Register instance definitions */
S/* TPM0 */
S#define TPM0_SC                                  TPM_SC_REG(TPM0)
S#define TPM0_CNT                                 TPM_CNT_REG(TPM0)
S#define TPM0_MOD                                 TPM_MOD_REG(TPM0)
S#define TPM0_C0SC                                TPM_CnSC_REG(TPM0,0)
S#define TPM0_C0V                                 TPM_CnV_REG(TPM0,0)
S#define TPM0_C1SC                                TPM_CnSC_REG(TPM0,1)
S#define TPM0_C1V                                 TPM_CnV_REG(TPM0,1)
S#define TPM0_C2SC                                TPM_CnSC_REG(TPM0,2)
S#define TPM0_C2V                                 TPM_CnV_REG(TPM0,2)
S#define TPM0_C3SC                                TPM_CnSC_REG(TPM0,3)
S#define TPM0_C3V                                 TPM_CnV_REG(TPM0,3)
S#define TPM0_C4SC                                TPM_CnSC_REG(TPM0,4)
S#define TPM0_C4V                                 TPM_CnV_REG(TPM0,4)
S#define TPM0_C5SC                                TPM_CnSC_REG(TPM0,5)
S#define TPM0_C5V                                 TPM_CnV_REG(TPM0,5)
S#define TPM0_STATUS                              TPM_STATUS_REG(TPM0)
S#define TPM0_CONF                                TPM_CONF_REG(TPM0)
S/* TPM1 */
S#define TPM1_SC                                  TPM_SC_REG(TPM1)
S#define TPM1_CNT                                 TPM_CNT_REG(TPM1)
S#define TPM1_MOD                                 TPM_MOD_REG(TPM1)
S#define TPM1_C0SC                                TPM_CnSC_REG(TPM1,0)
S#define TPM1_C0V                                 TPM_CnV_REG(TPM1,0)
S#define TPM1_C1SC                                TPM_CnSC_REG(TPM1,1)
S#define TPM1_C1V                                 TPM_CnV_REG(TPM1,1)
S#define TPM1_STATUS                              TPM_STATUS_REG(TPM1)
S#define TPM1_CONF                                TPM_CONF_REG(TPM1)
S/* TPM2 */
S#define TPM2_SC                                  TPM_SC_REG(TPM2)
S#define TPM2_CNT                                 TPM_CNT_REG(TPM2)
S#define TPM2_MOD                                 TPM_MOD_REG(TPM2)
S#define TPM2_C0SC                                TPM_CnSC_REG(TPM2,0)
S#define TPM2_C0V                                 TPM_CnV_REG(TPM2,0)
S#define TPM2_C1SC                                TPM_CnSC_REG(TPM2,1)
S#define TPM2_C1V                                 TPM_CnV_REG(TPM2,1)
S#define TPM2_STATUS                              TPM_STATUS_REG(TPM2)
S#define TPM2_CONF                                TPM_CONF_REG(TPM2)
S
S/* TPM - Register array accessors */
S#define TPM0_CnSC(index)                         TPM_CnSC_REG(TPM0,index)
S#define TPM1_CnSC(index)                         TPM_CnSC_REG(TPM1,index)
S#define TPM2_CnSC(index)                         TPM_CnSC_REG(TPM2,index)
S#define TPM0_CnV(index)                          TPM_CnV_REG(TPM0,index)
S#define TPM1_CnV(index)                          TPM_CnV_REG(TPM1,index)
S#define TPM2_CnV(index)                          TPM_CnV_REG(TPM2,index)
S
S/*!
S * @}
S */ /* end of group TPM_Register_Accessor_Macros */
S
S
S/*!
S * @}
S */ /* end of group TPM_Peripheral_Access_Layer */
S
S
S/* ----------------------------------------------------------------------------
S   -- TSI Peripheral Access Layer
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup TSI_Peripheral_Access_Layer TSI Peripheral Access Layer
S * @{
S */
S
S/** TSI - Register Layout Typedef */
Stypedef struct {
S  __IO uint32_t GENCS;                             /**< TSI General Control and Status Register, offset: 0x0 */
S  __IO uint32_t DATA;                              /**< TSI DATA Register, offset: 0x4 */
S  __IO uint32_t TSHD;                              /**< TSI Threshold Register, offset: 0x8 */
S} TSI_Type, *TSI_MemMapPtr;
S
S/* ----------------------------------------------------------------------------
S   -- TSI - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup TSI_Register_Accessor_Macros TSI - Register accessor macros
S * @{
S */
S
S
S/* TSI - Register accessors */
S#define TSI_GENCS_REG(base)                      ((base)->GENCS)
S#define TSI_DATA_REG(base)                       ((base)->DATA)
S#define TSI_TSHD_REG(base)                       ((base)->TSHD)
S
S/*!
S * @}
S */ /* end of group TSI_Register_Accessor_Macros */
S
S
S/* ----------------------------------------------------------------------------
S   -- TSI Register Masks
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup TSI_Register_Masks TSI Register Masks
S * @{
S */
S
S/* GENCS Bit Fields */
S#define TSI_GENCS_CURSW_MASK                     0x2u
S#define TSI_GENCS_CURSW_SHIFT                    1
S#define TSI_GENCS_CURSW_WIDTH                    1
S#define TSI_GENCS_CURSW(x)                       (((uint32_t)(((uint32_t)(x))<<TSI_GENCS_CURSW_SHIFT))&TSI_GENCS_CURSW_MASK)
S#define TSI_GENCS_EOSF_MASK                      0x4u
S#define TSI_GENCS_EOSF_SHIFT                     2
S#define TSI_GENCS_EOSF_WIDTH                     1
S#define TSI_GENCS_EOSF(x)                        (((uint32_t)(((uint32_t)(x))<<TSI_GENCS_EOSF_SHIFT))&TSI_GENCS_EOSF_MASK)
S#define TSI_GENCS_SCNIP_MASK                     0x8u
S#define TSI_GENCS_SCNIP_SHIFT                    3
S#define TSI_GENCS_SCNIP_WIDTH                    1
S#define TSI_GENCS_SCNIP(x)                       (((uint32_t)(((uint32_t)(x))<<TSI_GENCS_SCNIP_SHIFT))&TSI_GENCS_SCNIP_MASK)
S#define TSI_GENCS_STM_MASK                       0x10u
S#define TSI_GENCS_STM_SHIFT                      4
S#define TSI_GENCS_STM_WIDTH                      1
S#define TSI_GENCS_STM(x)                         (((uint32_t)(((uint32_t)(x))<<TSI_GENCS_STM_SHIFT))&TSI_GENCS_STM_MASK)
S#define TSI_GENCS_STPE_MASK                      0x20u
S#define TSI_GENCS_STPE_SHIFT                     5
S#define TSI_GENCS_STPE_WIDTH                     1
S#define TSI_GENCS_STPE(x)                        (((uint32_t)(((uint32_t)(x))<<TSI_GENCS_STPE_SHIFT))&TSI_GENCS_STPE_MASK)
S#define TSI_GENCS_TSIIEN_MASK                    0x40u
S#define TSI_GENCS_TSIIEN_SHIFT                   6
S#define TSI_GENCS_TSIIEN_WIDTH                   1
S#define TSI_GENCS_TSIIEN(x)                      (((uint32_t)(((uint32_t)(x))<<TSI_GENCS_TSIIEN_SHIFT))&TSI_GENCS_TSIIEN_MASK)
S#define TSI_GENCS_TSIEN_MASK                     0x80u
S#define TSI_GENCS_TSIEN_SHIFT                    7
S#define TSI_GENCS_TSIEN_WIDTH                    1
S#define TSI_GENCS_TSIEN(x)                       (((uint32_t)(((uint32_t)(x))<<TSI_GENCS_TSIEN_SHIFT))&TSI_GENCS_TSIEN_MASK)
S#define TSI_GENCS_NSCN_MASK                      0x1F00u
S#define TSI_GENCS_NSCN_SHIFT                     8
S#define TSI_GENCS_NSCN_WIDTH                     5
S#define TSI_GENCS_NSCN(x)                        (((uint32_t)(((uint32_t)(x))<<TSI_GENCS_NSCN_SHIFT))&TSI_GENCS_NSCN_MASK)
S#define TSI_GENCS_PS_MASK                        0xE000u
S#define TSI_GENCS_PS_SHIFT                       13
S#define TSI_GENCS_PS_WIDTH                       3
S#define TSI_GENCS_PS(x)                          (((uint32_t)(((uint32_t)(x))<<TSI_GENCS_PS_SHIFT))&TSI_GENCS_PS_MASK)
S#define TSI_GENCS_EXTCHRG_MASK                   0x70000u
S#define TSI_GENCS_EXTCHRG_SHIFT                  16
S#define TSI_GENCS_EXTCHRG_WIDTH                  3
S#define TSI_GENCS_EXTCHRG(x)                     (((uint32_t)(((uint32_t)(x))<<TSI_GENCS_EXTCHRG_SHIFT))&TSI_GENCS_EXTCHRG_MASK)
S#define TSI_GENCS_DVOLT_MASK                     0x180000u
S#define TSI_GENCS_DVOLT_SHIFT                    19
S#define TSI_GENCS_DVOLT_WIDTH                    2
S#define TSI_GENCS_DVOLT(x)                       (((uint32_t)(((uint32_t)(x))<<TSI_GENCS_DVOLT_SHIFT))&TSI_GENCS_DVOLT_MASK)
S#define TSI_GENCS_REFCHRG_MASK                   0xE00000u
S#define TSI_GENCS_REFCHRG_SHIFT                  21
S#define TSI_GENCS_REFCHRG_WIDTH                  3
S#define TSI_GENCS_REFCHRG(x)                     (((uint32_t)(((uint32_t)(x))<<TSI_GENCS_REFCHRG_SHIFT))&TSI_GENCS_REFCHRG_MASK)
S#define TSI_GENCS_MODE_MASK                      0xF000000u
S#define TSI_GENCS_MODE_SHIFT                     24
S#define TSI_GENCS_MODE_WIDTH                     4
S#define TSI_GENCS_MODE(x)                        (((uint32_t)(((uint32_t)(x))<<TSI_GENCS_MODE_SHIFT))&TSI_GENCS_MODE_MASK)
S#define TSI_GENCS_ESOR_MASK                      0x10000000u
S#define TSI_GENCS_ESOR_SHIFT                     28
S#define TSI_GENCS_ESOR_WIDTH                     1
S#define TSI_GENCS_ESOR(x)                        (((uint32_t)(((uint32_t)(x))<<TSI_GENCS_ESOR_SHIFT))&TSI_GENCS_ESOR_MASK)
S#define TSI_GENCS_OUTRGF_MASK                    0x80000000u
S#define TSI_GENCS_OUTRGF_SHIFT                   31
S#define TSI_GENCS_OUTRGF_WIDTH                   1
S#define TSI_GENCS_OUTRGF(x)                      (((uint32_t)(((uint32_t)(x))<<TSI_GENCS_OUTRGF_SHIFT))&TSI_GENCS_OUTRGF_MASK)
S/* DATA Bit Fields */
S#define TSI_DATA_TSICNT_MASK                     0xFFFFu
S#define TSI_DATA_TSICNT_SHIFT                    0
S#define TSI_DATA_TSICNT_WIDTH                    16
S#define TSI_DATA_TSICNT(x)                       (((uint32_t)(((uint32_t)(x))<<TSI_DATA_TSICNT_SHIFT))&TSI_DATA_TSICNT_MASK)
S#define TSI_DATA_SWTS_MASK                       0x400000u
S#define TSI_DATA_SWTS_SHIFT                      22
S#define TSI_DATA_SWTS_WIDTH                      1
S#define TSI_DATA_SWTS(x)                         (((uint32_t)(((uint32_t)(x))<<TSI_DATA_SWTS_SHIFT))&TSI_DATA_SWTS_MASK)
S#define TSI_DATA_DMAEN_MASK                      0x800000u
S#define TSI_DATA_DMAEN_SHIFT                     23
S#define TSI_DATA_DMAEN_WIDTH                     1
S#define TSI_DATA_DMAEN(x)                        (((uint32_t)(((uint32_t)(x))<<TSI_DATA_DMAEN_SHIFT))&TSI_DATA_DMAEN_MASK)
S#define TSI_DATA_TSICH_MASK                      0xF0000000u
S#define TSI_DATA_TSICH_SHIFT                     28
S#define TSI_DATA_TSICH_WIDTH                     4
S#define TSI_DATA_TSICH(x)                        (((uint32_t)(((uint32_t)(x))<<TSI_DATA_TSICH_SHIFT))&TSI_DATA_TSICH_MASK)
S/* TSHD Bit Fields */
S#define TSI_TSHD_THRESL_MASK                     0xFFFFu
S#define TSI_TSHD_THRESL_SHIFT                    0
S#define TSI_TSHD_THRESL_WIDTH                    16
S#define TSI_TSHD_THRESL(x)                       (((uint32_t)(((uint32_t)(x))<<TSI_TSHD_THRESL_SHIFT))&TSI_TSHD_THRESL_MASK)
S#define TSI_TSHD_THRESH_MASK                     0xFFFF0000u
S#define TSI_TSHD_THRESH_SHIFT                    16
S#define TSI_TSHD_THRESH_WIDTH                    16
S#define TSI_TSHD_THRESH(x)                       (((uint32_t)(((uint32_t)(x))<<TSI_TSHD_THRESH_SHIFT))&TSI_TSHD_THRESH_MASK)
S
S/*!
S * @}
S */ /* end of group TSI_Register_Masks */
S
S
S/* TSI - Peripheral instance base addresses */
S/** Peripheral TSI0 base address */
S#define TSI0_BASE                                (0x40045000u)
S/** Peripheral TSI0 base pointer */
S#define TSI0                                     ((TSI_Type *)TSI0_BASE)
S#define TSI0_BASE_PTR                            (TSI0)
S/** Array initializer of TSI peripheral base addresses */
S#define TSI_BASE_ADDRS                           { TSI0_BASE }
S/** Array initializer of TSI peripheral base pointers */
S#define TSI_BASE_PTRS                            { TSI0 }
S/** Interrupt vectors for the TSI peripheral type */
S#define TSI_IRQS                                 { TSI0_IRQn }
S
S/* ----------------------------------------------------------------------------
S   -- TSI - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup TSI_Register_Accessor_Macros TSI - Register accessor macros
S * @{
S */
S
S
S/* TSI - Register instance definitions */
S/* TSI0 */
S#define TSI0_GENCS                               TSI_GENCS_REG(TSI0)
S#define TSI0_DATA                                TSI_DATA_REG(TSI0)
S#define TSI0_TSHD                                TSI_TSHD_REG(TSI0)
S
S/*!
S * @}
S */ /* end of group TSI_Register_Accessor_Macros */
S
S
S/*!
S * @}
S */ /* end of group TSI_Peripheral_Access_Layer */
S
S
S/* ----------------------------------------------------------------------------
S   -- UART Peripheral Access Layer
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup UART_Peripheral_Access_Layer UART Peripheral Access Layer
S * @{
S */
S
S/** UART - Register Layout Typedef */
Stypedef struct {
S  __IO uint8_t BDH;                                /**< UART Baud Rate Register: High, offset: 0x0 */
S  __IO uint8_t BDL;                                /**< UART Baud Rate Register: Low, offset: 0x1 */
S  __IO uint8_t C1;                                 /**< UART Control Register 1, offset: 0x2 */
S  __IO uint8_t C2;                                 /**< UART Control Register 2, offset: 0x3 */
S  __I  uint8_t S1;                                 /**< UART Status Register 1, offset: 0x4 */
S  __IO uint8_t S2;                                 /**< UART Status Register 2, offset: 0x5 */
S  __IO uint8_t C3;                                 /**< UART Control Register 3, offset: 0x6 */
S  __IO uint8_t D;                                  /**< UART Data Register, offset: 0x7 */
S  __IO uint8_t C4;                                 /**< UART Control Register 4, offset: 0x8 */
S} UART_Type, *UART_MemMapPtr;
S
S/* ----------------------------------------------------------------------------
S   -- UART - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup UART_Register_Accessor_Macros UART - Register accessor macros
S * @{
S */
S
S
S/* UART - Register accessors */
S#define UART_BDH_REG(base)                       ((base)->BDH)
S#define UART_BDL_REG(base)                       ((base)->BDL)
S#define UART_C1_REG(base)                        ((base)->C1)
S#define UART_C2_REG(base)                        ((base)->C2)
S#define UART_S1_REG(base)                        ((base)->S1)
S#define UART_S2_REG(base)                        ((base)->S2)
S#define UART_C3_REG(base)                        ((base)->C3)
S#define UART_D_REG(base)                         ((base)->D)
S#define UART_C4_REG(base)                        ((base)->C4)
S
S/*!
S * @}
S */ /* end of group UART_Register_Accessor_Macros */
S
S
S/* ----------------------------------------------------------------------------
S   -- UART Register Masks
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup UART_Register_Masks UART Register Masks
S * @{
S */
S
S/* BDH Bit Fields */
S#define UART_BDH_SBR_MASK                        0x1Fu
S#define UART_BDH_SBR_SHIFT                       0
S#define UART_BDH_SBR_WIDTH                       5
S#define UART_BDH_SBR(x)                          (((uint8_t)(((uint8_t)(x))<<UART_BDH_SBR_SHIFT))&UART_BDH_SBR_MASK)
S#define UART_BDH_SBNS_MASK                       0x20u
S#define UART_BDH_SBNS_SHIFT                      5
S#define UART_BDH_SBNS_WIDTH                      1
S#define UART_BDH_SBNS(x)                         (((uint8_t)(((uint8_t)(x))<<UART_BDH_SBNS_SHIFT))&UART_BDH_SBNS_MASK)
S#define UART_BDH_RXEDGIE_MASK                    0x40u
S#define UART_BDH_RXEDGIE_SHIFT                   6
S#define UART_BDH_RXEDGIE_WIDTH                   1
S#define UART_BDH_RXEDGIE(x)                      (((uint8_t)(((uint8_t)(x))<<UART_BDH_RXEDGIE_SHIFT))&UART_BDH_RXEDGIE_MASK)
S#define UART_BDH_LBKDIE_MASK                     0x80u
S#define UART_BDH_LBKDIE_SHIFT                    7
S#define UART_BDH_LBKDIE_WIDTH                    1
S#define UART_BDH_LBKDIE(x)                       (((uint8_t)(((uint8_t)(x))<<UART_BDH_LBKDIE_SHIFT))&UART_BDH_LBKDIE_MASK)
S/* BDL Bit Fields */
S#define UART_BDL_SBR_MASK                        0xFFu
S#define UART_BDL_SBR_SHIFT                       0
S#define UART_BDL_SBR_WIDTH                       8
S#define UART_BDL_SBR(x)                          (((uint8_t)(((uint8_t)(x))<<UART_BDL_SBR_SHIFT))&UART_BDL_SBR_MASK)
S/* C1 Bit Fields */
S#define UART_C1_PT_MASK                          0x1u
S#define UART_C1_PT_SHIFT                         0
S#define UART_C1_PT_WIDTH                         1
S#define UART_C1_PT(x)                            (((uint8_t)(((uint8_t)(x))<<UART_C1_PT_SHIFT))&UART_C1_PT_MASK)
S#define UART_C1_PE_MASK                          0x2u
S#define UART_C1_PE_SHIFT                         1
S#define UART_C1_PE_WIDTH                         1
S#define UART_C1_PE(x)                            (((uint8_t)(((uint8_t)(x))<<UART_C1_PE_SHIFT))&UART_C1_PE_MASK)
S#define UART_C1_ILT_MASK                         0x4u
S#define UART_C1_ILT_SHIFT                        2
S#define UART_C1_ILT_WIDTH                        1
S#define UART_C1_ILT(x)                           (((uint8_t)(((uint8_t)(x))<<UART_C1_ILT_SHIFT))&UART_C1_ILT_MASK)
S#define UART_C1_WAKE_MASK                        0x8u
S#define UART_C1_WAKE_SHIFT                       3
S#define UART_C1_WAKE_WIDTH                       1
S#define UART_C1_WAKE(x)                          (((uint8_t)(((uint8_t)(x))<<UART_C1_WAKE_SHIFT))&UART_C1_WAKE_MASK)
S#define UART_C1_M_MASK                           0x10u
S#define UART_C1_M_SHIFT                          4
S#define UART_C1_M_WIDTH                          1
S#define UART_C1_M(x)                             (((uint8_t)(((uint8_t)(x))<<UART_C1_M_SHIFT))&UART_C1_M_MASK)
S#define UART_C1_RSRC_MASK                        0x20u
S#define UART_C1_RSRC_SHIFT                       5
S#define UART_C1_RSRC_WIDTH                       1
S#define UART_C1_RSRC(x)                          (((uint8_t)(((uint8_t)(x))<<UART_C1_RSRC_SHIFT))&UART_C1_RSRC_MASK)
S#define UART_C1_UARTSWAI_MASK                    0x40u
S#define UART_C1_UARTSWAI_SHIFT                   6
S#define UART_C1_UARTSWAI_WIDTH                   1
S#define UART_C1_UARTSWAI(x)                      (((uint8_t)(((uint8_t)(x))<<UART_C1_UARTSWAI_SHIFT))&UART_C1_UARTSWAI_MASK)
S#define UART_C1_LOOPS_MASK                       0x80u
S#define UART_C1_LOOPS_SHIFT                      7
S#define UART_C1_LOOPS_WIDTH                      1
S#define UART_C1_LOOPS(x)                         (((uint8_t)(((uint8_t)(x))<<UART_C1_LOOPS_SHIFT))&UART_C1_LOOPS_MASK)
S/* C2 Bit Fields */
S#define UART_C2_SBK_MASK                         0x1u
S#define UART_C2_SBK_SHIFT                        0
S#define UART_C2_SBK_WIDTH                        1
S#define UART_C2_SBK(x)                           (((uint8_t)(((uint8_t)(x))<<UART_C2_SBK_SHIFT))&UART_C2_SBK_MASK)
S#define UART_C2_RWU_MASK                         0x2u
S#define UART_C2_RWU_SHIFT                        1
S#define UART_C2_RWU_WIDTH                        1
S#define UART_C2_RWU(x)                           (((uint8_t)(((uint8_t)(x))<<UART_C2_RWU_SHIFT))&UART_C2_RWU_MASK)
S#define UART_C2_RE_MASK                          0x4u
S#define UART_C2_RE_SHIFT                         2
S#define UART_C2_RE_WIDTH                         1
S#define UART_C2_RE(x)                            (((uint8_t)(((uint8_t)(x))<<UART_C2_RE_SHIFT))&UART_C2_RE_MASK)
S#define UART_C2_TE_MASK                          0x8u
S#define UART_C2_TE_SHIFT                         3
S#define UART_C2_TE_WIDTH                         1
S#define UART_C2_TE(x)                            (((uint8_t)(((uint8_t)(x))<<UART_C2_TE_SHIFT))&UART_C2_TE_MASK)
S#define UART_C2_ILIE_MASK                        0x10u
S#define UART_C2_ILIE_SHIFT                       4
S#define UART_C2_ILIE_WIDTH                       1
S#define UART_C2_ILIE(x)                          (((uint8_t)(((uint8_t)(x))<<UART_C2_ILIE_SHIFT))&UART_C2_ILIE_MASK)
S#define UART_C2_RIE_MASK                         0x20u
S#define UART_C2_RIE_SHIFT                        5
S#define UART_C2_RIE_WIDTH                        1
S#define UART_C2_RIE(x)                           (((uint8_t)(((uint8_t)(x))<<UART_C2_RIE_SHIFT))&UART_C2_RIE_MASK)
S#define UART_C2_TCIE_MASK                        0x40u
S#define UART_C2_TCIE_SHIFT                       6
S#define UART_C2_TCIE_WIDTH                       1
S#define UART_C2_TCIE(x)                          (((uint8_t)(((uint8_t)(x))<<UART_C2_TCIE_SHIFT))&UART_C2_TCIE_MASK)
S#define UART_C2_TIE_MASK                         0x80u
S#define UART_C2_TIE_SHIFT                        7
S#define UART_C2_TIE_WIDTH                        1
S#define UART_C2_TIE(x)                           (((uint8_t)(((uint8_t)(x))<<UART_C2_TIE_SHIFT))&UART_C2_TIE_MASK)
S/* S1 Bit Fields */
S#define UART_S1_PF_MASK                          0x1u
S#define UART_S1_PF_SHIFT                         0
S#define UART_S1_PF_WIDTH                         1
S#define UART_S1_PF(x)                            (((uint8_t)(((uint8_t)(x))<<UART_S1_PF_SHIFT))&UART_S1_PF_MASK)
S#define UART_S1_FE_MASK                          0x2u
S#define UART_S1_FE_SHIFT                         1
S#define UART_S1_FE_WIDTH                         1
S#define UART_S1_FE(x)                            (((uint8_t)(((uint8_t)(x))<<UART_S1_FE_SHIFT))&UART_S1_FE_MASK)
S#define UART_S1_NF_MASK                          0x4u
S#define UART_S1_NF_SHIFT                         2
S#define UART_S1_NF_WIDTH                         1
S#define UART_S1_NF(x)                            (((uint8_t)(((uint8_t)(x))<<UART_S1_NF_SHIFT))&UART_S1_NF_MASK)
S#define UART_S1_OR_MASK                          0x8u
S#define UART_S1_OR_SHIFT                         3
S#define UART_S1_OR_WIDTH                         1
S#define UART_S1_OR(x)                            (((uint8_t)(((uint8_t)(x))<<UART_S1_OR_SHIFT))&UART_S1_OR_MASK)
S#define UART_S1_IDLE_MASK                        0x10u
S#define UART_S1_IDLE_SHIFT                       4
S#define UART_S1_IDLE_WIDTH                       1
S#define UART_S1_IDLE(x)                          (((uint8_t)(((uint8_t)(x))<<UART_S1_IDLE_SHIFT))&UART_S1_IDLE_MASK)
S#define UART_S1_RDRF_MASK                        0x20u
S#define UART_S1_RDRF_SHIFT                       5
S#define UART_S1_RDRF_WIDTH                       1
S#define UART_S1_RDRF(x)                          (((uint8_t)(((uint8_t)(x))<<UART_S1_RDRF_SHIFT))&UART_S1_RDRF_MASK)
S#define UART_S1_TC_MASK                          0x40u
S#define UART_S1_TC_SHIFT                         6
S#define UART_S1_TC_WIDTH                         1
S#define UART_S1_TC(x)                            (((uint8_t)(((uint8_t)(x))<<UART_S1_TC_SHIFT))&UART_S1_TC_MASK)
S#define UART_S1_TDRE_MASK                        0x80u
S#define UART_S1_TDRE_SHIFT                       7
S#define UART_S1_TDRE_WIDTH                       1
S#define UART_S1_TDRE(x)                          (((uint8_t)(((uint8_t)(x))<<UART_S1_TDRE_SHIFT))&UART_S1_TDRE_MASK)
S/* S2 Bit Fields */
S#define UART_S2_RAF_MASK                         0x1u
S#define UART_S2_RAF_SHIFT                        0
S#define UART_S2_RAF_WIDTH                        1
S#define UART_S2_RAF(x)                           (((uint8_t)(((uint8_t)(x))<<UART_S2_RAF_SHIFT))&UART_S2_RAF_MASK)
S#define UART_S2_LBKDE_MASK                       0x2u
S#define UART_S2_LBKDE_SHIFT                      1
S#define UART_S2_LBKDE_WIDTH                      1
S#define UART_S2_LBKDE(x)                         (((uint8_t)(((uint8_t)(x))<<UART_S2_LBKDE_SHIFT))&UART_S2_LBKDE_MASK)
S#define UART_S2_BRK13_MASK                       0x4u
S#define UART_S2_BRK13_SHIFT                      2
S#define UART_S2_BRK13_WIDTH                      1
S#define UART_S2_BRK13(x)                         (((uint8_t)(((uint8_t)(x))<<UART_S2_BRK13_SHIFT))&UART_S2_BRK13_MASK)
S#define UART_S2_RWUID_MASK                       0x8u
S#define UART_S2_RWUID_SHIFT                      3
S#define UART_S2_RWUID_WIDTH                      1
S#define UART_S2_RWUID(x)                         (((uint8_t)(((uint8_t)(x))<<UART_S2_RWUID_SHIFT))&UART_S2_RWUID_MASK)
S#define UART_S2_RXINV_MASK                       0x10u
S#define UART_S2_RXINV_SHIFT                      4
S#define UART_S2_RXINV_WIDTH                      1
S#define UART_S2_RXINV(x)                         (((uint8_t)(((uint8_t)(x))<<UART_S2_RXINV_SHIFT))&UART_S2_RXINV_MASK)
S#define UART_S2_RXEDGIF_MASK                     0x40u
S#define UART_S2_RXEDGIF_SHIFT                    6
S#define UART_S2_RXEDGIF_WIDTH                    1
S#define UART_S2_RXEDGIF(x)                       (((uint8_t)(((uint8_t)(x))<<UART_S2_RXEDGIF_SHIFT))&UART_S2_RXEDGIF_MASK)
S#define UART_S2_LBKDIF_MASK                      0x80u
S#define UART_S2_LBKDIF_SHIFT                     7
S#define UART_S2_LBKDIF_WIDTH                     1
S#define UART_S2_LBKDIF(x)                        (((uint8_t)(((uint8_t)(x))<<UART_S2_LBKDIF_SHIFT))&UART_S2_LBKDIF_MASK)
S/* C3 Bit Fields */
S#define UART_C3_PEIE_MASK                        0x1u
S#define UART_C3_PEIE_SHIFT                       0
S#define UART_C3_PEIE_WIDTH                       1
S#define UART_C3_PEIE(x)                          (((uint8_t)(((uint8_t)(x))<<UART_C3_PEIE_SHIFT))&UART_C3_PEIE_MASK)
S#define UART_C3_FEIE_MASK                        0x2u
S#define UART_C3_FEIE_SHIFT                       1
S#define UART_C3_FEIE_WIDTH                       1
S#define UART_C3_FEIE(x)                          (((uint8_t)(((uint8_t)(x))<<UART_C3_FEIE_SHIFT))&UART_C3_FEIE_MASK)
S#define UART_C3_NEIE_MASK                        0x4u
S#define UART_C3_NEIE_SHIFT                       2
S#define UART_C3_NEIE_WIDTH                       1
S#define UART_C3_NEIE(x)                          (((uint8_t)(((uint8_t)(x))<<UART_C3_NEIE_SHIFT))&UART_C3_NEIE_MASK)
S#define UART_C3_ORIE_MASK                        0x8u
S#define UART_C3_ORIE_SHIFT                       3
S#define UART_C3_ORIE_WIDTH                       1
S#define UART_C3_ORIE(x)                          (((uint8_t)(((uint8_t)(x))<<UART_C3_ORIE_SHIFT))&UART_C3_ORIE_MASK)
S#define UART_C3_TXINV_MASK                       0x10u
S#define UART_C3_TXINV_SHIFT                      4
S#define UART_C3_TXINV_WIDTH                      1
S#define UART_C3_TXINV(x)                         (((uint8_t)(((uint8_t)(x))<<UART_C3_TXINV_SHIFT))&UART_C3_TXINV_MASK)
S#define UART_C3_TXDIR_MASK                       0x20u
S#define UART_C3_TXDIR_SHIFT                      5
S#define UART_C3_TXDIR_WIDTH                      1
S#define UART_C3_TXDIR(x)                         (((uint8_t)(((uint8_t)(x))<<UART_C3_TXDIR_SHIFT))&UART_C3_TXDIR_MASK)
S#define UART_C3_T8_MASK                          0x40u
S#define UART_C3_T8_SHIFT                         6
S#define UART_C3_T8_WIDTH                         1
S#define UART_C3_T8(x)                            (((uint8_t)(((uint8_t)(x))<<UART_C3_T8_SHIFT))&UART_C3_T8_MASK)
S#define UART_C3_R8_MASK                          0x80u
S#define UART_C3_R8_SHIFT                         7
S#define UART_C3_R8_WIDTH                         1
S#define UART_C3_R8(x)                            (((uint8_t)(((uint8_t)(x))<<UART_C3_R8_SHIFT))&UART_C3_R8_MASK)
S/* D Bit Fields */
S#define UART_D_R0T0_MASK                         0x1u
S#define UART_D_R0T0_SHIFT                        0
S#define UART_D_R0T0_WIDTH                        1
S#define UART_D_R0T0(x)                           (((uint8_t)(((uint8_t)(x))<<UART_D_R0T0_SHIFT))&UART_D_R0T0_MASK)
S#define UART_D_R1T1_MASK                         0x2u
S#define UART_D_R1T1_SHIFT                        1
S#define UART_D_R1T1_WIDTH                        1
S#define UART_D_R1T1(x)                           (((uint8_t)(((uint8_t)(x))<<UART_D_R1T1_SHIFT))&UART_D_R1T1_MASK)
S#define UART_D_R2T2_MASK                         0x4u
S#define UART_D_R2T2_SHIFT                        2
S#define UART_D_R2T2_WIDTH                        1
S#define UART_D_R2T2(x)                           (((uint8_t)(((uint8_t)(x))<<UART_D_R2T2_SHIFT))&UART_D_R2T2_MASK)
S#define UART_D_R3T3_MASK                         0x8u
S#define UART_D_R3T3_SHIFT                        3
S#define UART_D_R3T3_WIDTH                        1
S#define UART_D_R3T3(x)                           (((uint8_t)(((uint8_t)(x))<<UART_D_R3T3_SHIFT))&UART_D_R3T3_MASK)
S#define UART_D_R4T4_MASK                         0x10u
S#define UART_D_R4T4_SHIFT                        4
S#define UART_D_R4T4_WIDTH                        1
S#define UART_D_R4T4(x)                           (((uint8_t)(((uint8_t)(x))<<UART_D_R4T4_SHIFT))&UART_D_R4T4_MASK)
S#define UART_D_R5T5_MASK                         0x20u
S#define UART_D_R5T5_SHIFT                        5
S#define UART_D_R5T5_WIDTH                        1
S#define UART_D_R5T5(x)                           (((uint8_t)(((uint8_t)(x))<<UART_D_R5T5_SHIFT))&UART_D_R5T5_MASK)
S#define UART_D_R6T6_MASK                         0x40u
S#define UART_D_R6T6_SHIFT                        6
S#define UART_D_R6T6_WIDTH                        1
S#define UART_D_R6T6(x)                           (((uint8_t)(((uint8_t)(x))<<UART_D_R6T6_SHIFT))&UART_D_R6T6_MASK)
S#define UART_D_R7T7_MASK                         0x80u
S#define UART_D_R7T7_SHIFT                        7
S#define UART_D_R7T7_WIDTH                        1
S#define UART_D_R7T7(x)                           (((uint8_t)(((uint8_t)(x))<<UART_D_R7T7_SHIFT))&UART_D_R7T7_MASK)
S/* C4 Bit Fields */
S#define UART_C4_RDMAS_MASK                       0x20u
S#define UART_C4_RDMAS_SHIFT                      5
S#define UART_C4_RDMAS_WIDTH                      1
S#define UART_C4_RDMAS(x)                         (((uint8_t)(((uint8_t)(x))<<UART_C4_RDMAS_SHIFT))&UART_C4_RDMAS_MASK)
S#define UART_C4_TDMAS_MASK                       0x80u
S#define UART_C4_TDMAS_SHIFT                      7
S#define UART_C4_TDMAS_WIDTH                      1
S#define UART_C4_TDMAS(x)                         (((uint8_t)(((uint8_t)(x))<<UART_C4_TDMAS_SHIFT))&UART_C4_TDMAS_MASK)
S
S/*!
S * @}
S */ /* end of group UART_Register_Masks */
S
S
S/* UART - Peripheral instance base addresses */
S/** Peripheral UART1 base address */
S#define UART1_BASE                               (0x4006B000u)
S/** Peripheral UART1 base pointer */
S#define UART1                                    ((UART_Type *)UART1_BASE)
S#define UART1_BASE_PTR                           (UART1)
S/** Peripheral UART2 base address */
S#define UART2_BASE                               (0x4006C000u)
S/** Peripheral UART2 base pointer */
S#define UART2                                    ((UART_Type *)UART2_BASE)
S#define UART2_BASE_PTR                           (UART2)
S/** Array initializer of UART peripheral base addresses */
S#define UART_BASE_ADDRS                          { 0u, UART1_BASE, UART2_BASE }
S/** Array initializer of UART peripheral base pointers */
S#define UART_BASE_PTRS                           { (UART_Type *)0u, UART1, UART2 }
S/** Interrupt vectors for the UART peripheral type */
S#define UART_RX_TX_IRQS                          { NotAvail_IRQn, UART1_IRQn, UART2_IRQn }
S#define UART_ERR_IRQS                            { NotAvail_IRQn, UART1_IRQn, UART2_IRQn }
S
S/* ----------------------------------------------------------------------------
S   -- UART - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup UART_Register_Accessor_Macros UART - Register accessor macros
S * @{
S */
S
S
S/* UART - Register instance definitions */
S/* UART1 */
S#define UART1_BDH                                UART_BDH_REG(UART1)
S#define UART1_BDL                                UART_BDL_REG(UART1)
S#define UART1_C1                                 UART_C1_REG(UART1)
S#define UART1_C2                                 UART_C2_REG(UART1)
S#define UART1_S1                                 UART_S1_REG(UART1)
S#define UART1_S2                                 UART_S2_REG(UART1)
S#define UART1_C3                                 UART_C3_REG(UART1)
S#define UART1_D                                  UART_D_REG(UART1)
S#define UART1_C4                                 UART_C4_REG(UART1)
S/* UART2 */
S#define UART2_BDH                                UART_BDH_REG(UART2)
S#define UART2_BDL                                UART_BDL_REG(UART2)
S#define UART2_C1                                 UART_C1_REG(UART2)
S#define UART2_C2                                 UART_C2_REG(UART2)
S#define UART2_S1                                 UART_S1_REG(UART2)
S#define UART2_S2                                 UART_S2_REG(UART2)
S#define UART2_C3                                 UART_C3_REG(UART2)
S#define UART2_D                                  UART_D_REG(UART2)
S#define UART2_C4                                 UART_C4_REG(UART2)
S
S/*!
S * @}
S */ /* end of group UART_Register_Accessor_Macros */
S
S
S/*!
S * @}
S */ /* end of group UART_Peripheral_Access_Layer */
S
S
S/* ----------------------------------------------------------------------------
S   -- UART0 Peripheral Access Layer
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup UART0_Peripheral_Access_Layer UART0 Peripheral Access Layer
S * @{
S */
S
S/** UART0 - Register Layout Typedef */
Stypedef struct {
S  __IO uint8_t BDH;                                /**< UART Baud Rate Register High, offset: 0x0 */
S  __IO uint8_t BDL;                                /**< UART Baud Rate Register Low, offset: 0x1 */
S  __IO uint8_t C1;                                 /**< UART Control Register 1, offset: 0x2 */
S  __IO uint8_t C2;                                 /**< UART Control Register 2, offset: 0x3 */
S  __IO uint8_t S1;                                 /**< UART Status Register 1, offset: 0x4 */
S  __IO uint8_t S2;                                 /**< UART Status Register 2, offset: 0x5 */
S  __IO uint8_t C3;                                 /**< UART Control Register 3, offset: 0x6 */
S  __IO uint8_t D;                                  /**< UART Data Register, offset: 0x7 */
S  __IO uint8_t MA1;                                /**< UART Match Address Registers 1, offset: 0x8 */
S  __IO uint8_t MA2;                                /**< UART Match Address Registers 2, offset: 0x9 */
S  __IO uint8_t C4;                                 /**< UART Control Register 4, offset: 0xA */
S  __IO uint8_t C5;                                 /**< UART Control Register 5, offset: 0xB */
S} UART0_Type, *UART0_MemMapPtr;
S
S/* ----------------------------------------------------------------------------
S   -- UART0 - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup UART0_Register_Accessor_Macros UART0 - Register accessor macros
S * @{
S */
S
S
S/* UART0 - Register accessors */
S#define UART0_BDH_REG(base)                      ((base)->BDH)
S#define UART0_BDL_REG(base)                      ((base)->BDL)
S#define UART0_C1_REG(base)                       ((base)->C1)
S#define UART0_C2_REG(base)                       ((base)->C2)
S#define UART0_S1_REG(base)                       ((base)->S1)
S#define UART0_S2_REG(base)                       ((base)->S2)
S#define UART0_C3_REG(base)                       ((base)->C3)
S#define UART0_D_REG(base)                        ((base)->D)
S#define UART0_MA1_REG(base)                      ((base)->MA1)
S#define UART0_MA2_REG(base)                      ((base)->MA2)
S#define UART0_C4_REG(base)                       ((base)->C4)
S#define UART0_C5_REG(base)                       ((base)->C5)
S
S/*!
S * @}
S */ /* end of group UART0_Register_Accessor_Macros */
S
S
S/* ----------------------------------------------------------------------------
S   -- UART0 Register Masks
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup UART0_Register_Masks UART0 Register Masks
S * @{
S */
S
S/* BDH Bit Fields */
S#define UART0_BDH_SBR_MASK                       0x1Fu
S#define UART0_BDH_SBR_SHIFT                      0
S#define UART0_BDH_SBR_WIDTH                      5
S#define UART0_BDH_SBR(x)                         (((uint8_t)(((uint8_t)(x))<<UART0_BDH_SBR_SHIFT))&UART0_BDH_SBR_MASK)
S#define UART0_BDH_SBNS_MASK                      0x20u
S#define UART0_BDH_SBNS_SHIFT                     5
S#define UART0_BDH_SBNS_WIDTH                     1
S#define UART0_BDH_SBNS(x)                        (((uint8_t)(((uint8_t)(x))<<UART0_BDH_SBNS_SHIFT))&UART0_BDH_SBNS_MASK)
S#define UART0_BDH_RXEDGIE_MASK                   0x40u
S#define UART0_BDH_RXEDGIE_SHIFT                  6
S#define UART0_BDH_RXEDGIE_WIDTH                  1
S#define UART0_BDH_RXEDGIE(x)                     (((uint8_t)(((uint8_t)(x))<<UART0_BDH_RXEDGIE_SHIFT))&UART0_BDH_RXEDGIE_MASK)
S#define UART0_BDH_LBKDIE_MASK                    0x80u
S#define UART0_BDH_LBKDIE_SHIFT                   7
S#define UART0_BDH_LBKDIE_WIDTH                   1
S#define UART0_BDH_LBKDIE(x)                      (((uint8_t)(((uint8_t)(x))<<UART0_BDH_LBKDIE_SHIFT))&UART0_BDH_LBKDIE_MASK)
S/* BDL Bit Fields */
S#define UART0_BDL_SBR_MASK                       0xFFu
S#define UART0_BDL_SBR_SHIFT                      0
S#define UART0_BDL_SBR_WIDTH                      8
S#define UART0_BDL_SBR(x)                         (((uint8_t)(((uint8_t)(x))<<UART0_BDL_SBR_SHIFT))&UART0_BDL_SBR_MASK)
S/* C1 Bit Fields */
S#define UART0_C1_PT_MASK                         0x1u
S#define UART0_C1_PT_SHIFT                        0
S#define UART0_C1_PT_WIDTH                        1
S#define UART0_C1_PT(x)                           (((uint8_t)(((uint8_t)(x))<<UART0_C1_PT_SHIFT))&UART0_C1_PT_MASK)
S#define UART0_C1_PE_MASK                         0x2u
S#define UART0_C1_PE_SHIFT                        1
S#define UART0_C1_PE_WIDTH                        1
S#define UART0_C1_PE(x)                           (((uint8_t)(((uint8_t)(x))<<UART0_C1_PE_SHIFT))&UART0_C1_PE_MASK)
S#define UART0_C1_ILT_MASK                        0x4u
S#define UART0_C1_ILT_SHIFT                       2
S#define UART0_C1_ILT_WIDTH                       1
S#define UART0_C1_ILT(x)                          (((uint8_t)(((uint8_t)(x))<<UART0_C1_ILT_SHIFT))&UART0_C1_ILT_MASK)
S#define UART0_C1_WAKE_MASK                       0x8u
S#define UART0_C1_WAKE_SHIFT                      3
S#define UART0_C1_WAKE_WIDTH                      1
S#define UART0_C1_WAKE(x)                         (((uint8_t)(((uint8_t)(x))<<UART0_C1_WAKE_SHIFT))&UART0_C1_WAKE_MASK)
S#define UART0_C1_M_MASK                          0x10u
S#define UART0_C1_M_SHIFT                         4
S#define UART0_C1_M_WIDTH                         1
S#define UART0_C1_M(x)                            (((uint8_t)(((uint8_t)(x))<<UART0_C1_M_SHIFT))&UART0_C1_M_MASK)
S#define UART0_C1_RSRC_MASK                       0x20u
S#define UART0_C1_RSRC_SHIFT                      5
S#define UART0_C1_RSRC_WIDTH                      1
S#define UART0_C1_RSRC(x)                         (((uint8_t)(((uint8_t)(x))<<UART0_C1_RSRC_SHIFT))&UART0_C1_RSRC_MASK)
S#define UART0_C1_DOZEEN_MASK                     0x40u
S#define UART0_C1_DOZEEN_SHIFT                    6
S#define UART0_C1_DOZEEN_WIDTH                    1
S#define UART0_C1_DOZEEN(x)                       (((uint8_t)(((uint8_t)(x))<<UART0_C1_DOZEEN_SHIFT))&UART0_C1_DOZEEN_MASK)
S#define UART0_C1_LOOPS_MASK                      0x80u
S#define UART0_C1_LOOPS_SHIFT                     7
S#define UART0_C1_LOOPS_WIDTH                     1
S#define UART0_C1_LOOPS(x)                        (((uint8_t)(((uint8_t)(x))<<UART0_C1_LOOPS_SHIFT))&UART0_C1_LOOPS_MASK)
S/* C2 Bit Fields */
S#define UART0_C2_SBK_MASK                        0x1u
S#define UART0_C2_SBK_SHIFT                       0
S#define UART0_C2_SBK_WIDTH                       1
S#define UART0_C2_SBK(x)                          (((uint8_t)(((uint8_t)(x))<<UART0_C2_SBK_SHIFT))&UART0_C2_SBK_MASK)
S#define UART0_C2_RWU_MASK                        0x2u
S#define UART0_C2_RWU_SHIFT                       1
S#define UART0_C2_RWU_WIDTH                       1
S#define UART0_C2_RWU(x)                          (((uint8_t)(((uint8_t)(x))<<UART0_C2_RWU_SHIFT))&UART0_C2_RWU_MASK)
S#define UART0_C2_RE_MASK                         0x4u
S#define UART0_C2_RE_SHIFT                        2
S#define UART0_C2_RE_WIDTH                        1
S#define UART0_C2_RE(x)                           (((uint8_t)(((uint8_t)(x))<<UART0_C2_RE_SHIFT))&UART0_C2_RE_MASK)
S#define UART0_C2_TE_MASK                         0x8u
S#define UART0_C2_TE_SHIFT                        3
S#define UART0_C2_TE_WIDTH                        1
S#define UART0_C2_TE(x)                           (((uint8_t)(((uint8_t)(x))<<UART0_C2_TE_SHIFT))&UART0_C2_TE_MASK)
S#define UART0_C2_ILIE_MASK                       0x10u
S#define UART0_C2_ILIE_SHIFT                      4
S#define UART0_C2_ILIE_WIDTH                      1
S#define UART0_C2_ILIE(x)                         (((uint8_t)(((uint8_t)(x))<<UART0_C2_ILIE_SHIFT))&UART0_C2_ILIE_MASK)
S#define UART0_C2_RIE_MASK                        0x20u
S#define UART0_C2_RIE_SHIFT                       5
S#define UART0_C2_RIE_WIDTH                       1
S#define UART0_C2_RIE(x)                          (((uint8_t)(((uint8_t)(x))<<UART0_C2_RIE_SHIFT))&UART0_C2_RIE_MASK)
S#define UART0_C2_TCIE_MASK                       0x40u
S#define UART0_C2_TCIE_SHIFT                      6
S#define UART0_C2_TCIE_WIDTH                      1
S#define UART0_C2_TCIE(x)                         (((uint8_t)(((uint8_t)(x))<<UART0_C2_TCIE_SHIFT))&UART0_C2_TCIE_MASK)
S#define UART0_C2_TIE_MASK                        0x80u
S#define UART0_C2_TIE_SHIFT                       7
S#define UART0_C2_TIE_WIDTH                       1
S#define UART0_C2_TIE(x)                          (((uint8_t)(((uint8_t)(x))<<UART0_C2_TIE_SHIFT))&UART0_C2_TIE_MASK)
S/* S1 Bit Fields */
S#define UART0_S1_PF_MASK                         0x1u
S#define UART0_S1_PF_SHIFT                        0
S#define UART0_S1_PF_WIDTH                        1
S#define UART0_S1_PF(x)                           (((uint8_t)(((uint8_t)(x))<<UART0_S1_PF_SHIFT))&UART0_S1_PF_MASK)
S#define UART0_S1_FE_MASK                         0x2u
S#define UART0_S1_FE_SHIFT                        1
S#define UART0_S1_FE_WIDTH                        1
S#define UART0_S1_FE(x)                           (((uint8_t)(((uint8_t)(x))<<UART0_S1_FE_SHIFT))&UART0_S1_FE_MASK)
S#define UART0_S1_NF_MASK                         0x4u
S#define UART0_S1_NF_SHIFT                        2
S#define UART0_S1_NF_WIDTH                        1
S#define UART0_S1_NF(x)                           (((uint8_t)(((uint8_t)(x))<<UART0_S1_NF_SHIFT))&UART0_S1_NF_MASK)
S#define UART0_S1_OR_MASK                         0x8u
S#define UART0_S1_OR_SHIFT                        3
S#define UART0_S1_OR_WIDTH                        1
S#define UART0_S1_OR(x)                           (((uint8_t)(((uint8_t)(x))<<UART0_S1_OR_SHIFT))&UART0_S1_OR_MASK)
S#define UART0_S1_IDLE_MASK                       0x10u
S#define UART0_S1_IDLE_SHIFT                      4
S#define UART0_S1_IDLE_WIDTH                      1
S#define UART0_S1_IDLE(x)                         (((uint8_t)(((uint8_t)(x))<<UART0_S1_IDLE_SHIFT))&UART0_S1_IDLE_MASK)
S#define UART0_S1_RDRF_MASK                       0x20u
S#define UART0_S1_RDRF_SHIFT                      5
S#define UART0_S1_RDRF_WIDTH                      1
S#define UART0_S1_RDRF(x)                         (((uint8_t)(((uint8_t)(x))<<UART0_S1_RDRF_SHIFT))&UART0_S1_RDRF_MASK)
S#define UART0_S1_TC_MASK                         0x40u
S#define UART0_S1_TC_SHIFT                        6
S#define UART0_S1_TC_WIDTH                        1
S#define UART0_S1_TC(x)                           (((uint8_t)(((uint8_t)(x))<<UART0_S1_TC_SHIFT))&UART0_S1_TC_MASK)
S#define UART0_S1_TDRE_MASK                       0x80u
S#define UART0_S1_TDRE_SHIFT                      7
S#define UART0_S1_TDRE_WIDTH                      1
S#define UART0_S1_TDRE(x)                         (((uint8_t)(((uint8_t)(x))<<UART0_S1_TDRE_SHIFT))&UART0_S1_TDRE_MASK)
S/* S2 Bit Fields */
S#define UART0_S2_RAF_MASK                        0x1u
S#define UART0_S2_RAF_SHIFT                       0
S#define UART0_S2_RAF_WIDTH                       1
S#define UART0_S2_RAF(x)                          (((uint8_t)(((uint8_t)(x))<<UART0_S2_RAF_SHIFT))&UART0_S2_RAF_MASK)
S#define UART0_S2_LBKDE_MASK                      0x2u
S#define UART0_S2_LBKDE_SHIFT                     1
S#define UART0_S2_LBKDE_WIDTH                     1
S#define UART0_S2_LBKDE(x)                        (((uint8_t)(((uint8_t)(x))<<UART0_S2_LBKDE_SHIFT))&UART0_S2_LBKDE_MASK)
S#define UART0_S2_BRK13_MASK                      0x4u
S#define UART0_S2_BRK13_SHIFT                     2
S#define UART0_S2_BRK13_WIDTH                     1
S#define UART0_S2_BRK13(x)                        (((uint8_t)(((uint8_t)(x))<<UART0_S2_BRK13_SHIFT))&UART0_S2_BRK13_MASK)
S#define UART0_S2_RWUID_MASK                      0x8u
S#define UART0_S2_RWUID_SHIFT                     3
S#define UART0_S2_RWUID_WIDTH                     1
S#define UART0_S2_RWUID(x)                        (((uint8_t)(((uint8_t)(x))<<UART0_S2_RWUID_SHIFT))&UART0_S2_RWUID_MASK)
S#define UART0_S2_RXINV_MASK                      0x10u
S#define UART0_S2_RXINV_SHIFT                     4
S#define UART0_S2_RXINV_WIDTH                     1
S#define UART0_S2_RXINV(x)                        (((uint8_t)(((uint8_t)(x))<<UART0_S2_RXINV_SHIFT))&UART0_S2_RXINV_MASK)
S#define UART0_S2_MSBF_MASK                       0x20u
S#define UART0_S2_MSBF_SHIFT                      5
S#define UART0_S2_MSBF_WIDTH                      1
S#define UART0_S2_MSBF(x)                         (((uint8_t)(((uint8_t)(x))<<UART0_S2_MSBF_SHIFT))&UART0_S2_MSBF_MASK)
S#define UART0_S2_RXEDGIF_MASK                    0x40u
S#define UART0_S2_RXEDGIF_SHIFT                   6
S#define UART0_S2_RXEDGIF_WIDTH                   1
S#define UART0_S2_RXEDGIF(x)                      (((uint8_t)(((uint8_t)(x))<<UART0_S2_RXEDGIF_SHIFT))&UART0_S2_RXEDGIF_MASK)
S#define UART0_S2_LBKDIF_MASK                     0x80u
S#define UART0_S2_LBKDIF_SHIFT                    7
S#define UART0_S2_LBKDIF_WIDTH                    1
S#define UART0_S2_LBKDIF(x)                       (((uint8_t)(((uint8_t)(x))<<UART0_S2_LBKDIF_SHIFT))&UART0_S2_LBKDIF_MASK)
S/* C3 Bit Fields */
S#define UART0_C3_PEIE_MASK                       0x1u
S#define UART0_C3_PEIE_SHIFT                      0
S#define UART0_C3_PEIE_WIDTH                      1
S#define UART0_C3_PEIE(x)                         (((uint8_t)(((uint8_t)(x))<<UART0_C3_PEIE_SHIFT))&UART0_C3_PEIE_MASK)
S#define UART0_C3_FEIE_MASK                       0x2u
S#define UART0_C3_FEIE_SHIFT                      1
S#define UART0_C3_FEIE_WIDTH                      1
S#define UART0_C3_FEIE(x)                         (((uint8_t)(((uint8_t)(x))<<UART0_C3_FEIE_SHIFT))&UART0_C3_FEIE_MASK)
S#define UART0_C3_NEIE_MASK                       0x4u
S#define UART0_C3_NEIE_SHIFT                      2
S#define UART0_C3_NEIE_WIDTH                      1
S#define UART0_C3_NEIE(x)                         (((uint8_t)(((uint8_t)(x))<<UART0_C3_NEIE_SHIFT))&UART0_C3_NEIE_MASK)
S#define UART0_C3_ORIE_MASK                       0x8u
S#define UART0_C3_ORIE_SHIFT                      3
S#define UART0_C3_ORIE_WIDTH                      1
S#define UART0_C3_ORIE(x)                         (((uint8_t)(((uint8_t)(x))<<UART0_C3_ORIE_SHIFT))&UART0_C3_ORIE_MASK)
S#define UART0_C3_TXINV_MASK                      0x10u
S#define UART0_C3_TXINV_SHIFT                     4
S#define UART0_C3_TXINV_WIDTH                     1
S#define UART0_C3_TXINV(x)                        (((uint8_t)(((uint8_t)(x))<<UART0_C3_TXINV_SHIFT))&UART0_C3_TXINV_MASK)
S#define UART0_C3_TXDIR_MASK                      0x20u
S#define UART0_C3_TXDIR_SHIFT                     5
S#define UART0_C3_TXDIR_WIDTH                     1
S#define UART0_C3_TXDIR(x)                        (((uint8_t)(((uint8_t)(x))<<UART0_C3_TXDIR_SHIFT))&UART0_C3_TXDIR_MASK)
S#define UART0_C3_R9T8_MASK                       0x40u
S#define UART0_C3_R9T8_SHIFT                      6
S#define UART0_C3_R9T8_WIDTH                      1
S#define UART0_C3_R9T8(x)                         (((uint8_t)(((uint8_t)(x))<<UART0_C3_R9T8_SHIFT))&UART0_C3_R9T8_MASK)
S#define UART0_C3_R8T9_MASK                       0x80u
S#define UART0_C3_R8T9_SHIFT                      7
S#define UART0_C3_R8T9_WIDTH                      1
S#define UART0_C3_R8T9(x)                         (((uint8_t)(((uint8_t)(x))<<UART0_C3_R8T9_SHIFT))&UART0_C3_R8T9_MASK)
S/* D Bit Fields */
S#define UART0_D_R0T0_MASK                        0x1u
S#define UART0_D_R0T0_SHIFT                       0
S#define UART0_D_R0T0_WIDTH                       1
S#define UART0_D_R0T0(x)                          (((uint8_t)(((uint8_t)(x))<<UART0_D_R0T0_SHIFT))&UART0_D_R0T0_MASK)
S#define UART0_D_R1T1_MASK                        0x2u
S#define UART0_D_R1T1_SHIFT                       1
S#define UART0_D_R1T1_WIDTH                       1
S#define UART0_D_R1T1(x)                          (((uint8_t)(((uint8_t)(x))<<UART0_D_R1T1_SHIFT))&UART0_D_R1T1_MASK)
S#define UART0_D_R2T2_MASK                        0x4u
S#define UART0_D_R2T2_SHIFT                       2
S#define UART0_D_R2T2_WIDTH                       1
S#define UART0_D_R2T2(x)                          (((uint8_t)(((uint8_t)(x))<<UART0_D_R2T2_SHIFT))&UART0_D_R2T2_MASK)
S#define UART0_D_R3T3_MASK                        0x8u
S#define UART0_D_R3T3_SHIFT                       3
S#define UART0_D_R3T3_WIDTH                       1
S#define UART0_D_R3T3(x)                          (((uint8_t)(((uint8_t)(x))<<UART0_D_R3T3_SHIFT))&UART0_D_R3T3_MASK)
S#define UART0_D_R4T4_MASK                        0x10u
S#define UART0_D_R4T4_SHIFT                       4
S#define UART0_D_R4T4_WIDTH                       1
S#define UART0_D_R4T4(x)                          (((uint8_t)(((uint8_t)(x))<<UART0_D_R4T4_SHIFT))&UART0_D_R4T4_MASK)
S#define UART0_D_R5T5_MASK                        0x20u
S#define UART0_D_R5T5_SHIFT                       5
S#define UART0_D_R5T5_WIDTH                       1
S#define UART0_D_R5T5(x)                          (((uint8_t)(((uint8_t)(x))<<UART0_D_R5T5_SHIFT))&UART0_D_R5T5_MASK)
S#define UART0_D_R6T6_MASK                        0x40u
S#define UART0_D_R6T6_SHIFT                       6
S#define UART0_D_R6T6_WIDTH                       1
S#define UART0_D_R6T6(x)                          (((uint8_t)(((uint8_t)(x))<<UART0_D_R6T6_SHIFT))&UART0_D_R6T6_MASK)
S#define UART0_D_R7T7_MASK                        0x80u
S#define UART0_D_R7T7_SHIFT                       7
S#define UART0_D_R7T7_WIDTH                       1
S#define UART0_D_R7T7(x)                          (((uint8_t)(((uint8_t)(x))<<UART0_D_R7T7_SHIFT))&UART0_D_R7T7_MASK)
S/* MA1 Bit Fields */
S#define UART0_MA1_MA_MASK                        0xFFu
S#define UART0_MA1_MA_SHIFT                       0
S#define UART0_MA1_MA_WIDTH                       8
S#define UART0_MA1_MA(x)                          (((uint8_t)(((uint8_t)(x))<<UART0_MA1_MA_SHIFT))&UART0_MA1_MA_MASK)
S/* MA2 Bit Fields */
S#define UART0_MA2_MA_MASK                        0xFFu
S#define UART0_MA2_MA_SHIFT                       0
S#define UART0_MA2_MA_WIDTH                       8
S#define UART0_MA2_MA(x)                          (((uint8_t)(((uint8_t)(x))<<UART0_MA2_MA_SHIFT))&UART0_MA2_MA_MASK)
S/* C4 Bit Fields */
S#define UART0_C4_OSR_MASK                        0x1Fu
S#define UART0_C4_OSR_SHIFT                       0
S#define UART0_C4_OSR_WIDTH                       5
S#define UART0_C4_OSR(x)                          (((uint8_t)(((uint8_t)(x))<<UART0_C4_OSR_SHIFT))&UART0_C4_OSR_MASK)
S#define UART0_C4_M10_MASK                        0x20u
S#define UART0_C4_M10_SHIFT                       5
S#define UART0_C4_M10_WIDTH                       1
S#define UART0_C4_M10(x)                          (((uint8_t)(((uint8_t)(x))<<UART0_C4_M10_SHIFT))&UART0_C4_M10_MASK)
S#define UART0_C4_MAEN2_MASK                      0x40u
S#define UART0_C4_MAEN2_SHIFT                     6
S#define UART0_C4_MAEN2_WIDTH                     1
S#define UART0_C4_MAEN2(x)                        (((uint8_t)(((uint8_t)(x))<<UART0_C4_MAEN2_SHIFT))&UART0_C4_MAEN2_MASK)
S#define UART0_C4_MAEN1_MASK                      0x80u
S#define UART0_C4_MAEN1_SHIFT                     7
S#define UART0_C4_MAEN1_WIDTH                     1
S#define UART0_C4_MAEN1(x)                        (((uint8_t)(((uint8_t)(x))<<UART0_C4_MAEN1_SHIFT))&UART0_C4_MAEN1_MASK)
S/* C5 Bit Fields */
S#define UART0_C5_RESYNCDIS_MASK                  0x1u
S#define UART0_C5_RESYNCDIS_SHIFT                 0
S#define UART0_C5_RESYNCDIS_WIDTH                 1
S#define UART0_C5_RESYNCDIS(x)                    (((uint8_t)(((uint8_t)(x))<<UART0_C5_RESYNCDIS_SHIFT))&UART0_C5_RESYNCDIS_MASK)
S#define UART0_C5_BOTHEDGE_MASK                   0x2u
S#define UART0_C5_BOTHEDGE_SHIFT                  1
S#define UART0_C5_BOTHEDGE_WIDTH                  1
S#define UART0_C5_BOTHEDGE(x)                     (((uint8_t)(((uint8_t)(x))<<UART0_C5_BOTHEDGE_SHIFT))&UART0_C5_BOTHEDGE_MASK)
S#define UART0_C5_RDMAE_MASK                      0x20u
S#define UART0_C5_RDMAE_SHIFT                     5
S#define UART0_C5_RDMAE_WIDTH                     1
S#define UART0_C5_RDMAE(x)                        (((uint8_t)(((uint8_t)(x))<<UART0_C5_RDMAE_SHIFT))&UART0_C5_RDMAE_MASK)
S#define UART0_C5_TDMAE_MASK                      0x80u
S#define UART0_C5_TDMAE_SHIFT                     7
S#define UART0_C5_TDMAE_WIDTH                     1
S#define UART0_C5_TDMAE(x)                        (((uint8_t)(((uint8_t)(x))<<UART0_C5_TDMAE_SHIFT))&UART0_C5_TDMAE_MASK)
S
S/*!
S * @}
S */ /* end of group UART0_Register_Masks */
S
S
S/* UART0 - Peripheral instance base addresses */
S/** Peripheral UART0 base address */
S#define UART0_BASE                               (0x4006A000u)
S/** Peripheral UART0 base pointer */
S#define UART0                                    ((UART0_Type *)UART0_BASE)
S#define UART0_BASE_PTR                           (UART0)
S/** Array initializer of UART0 peripheral base addresses */
S#define UART0_BASE_ADDRS                         { UART0_BASE }
S/** Array initializer of UART0 peripheral base pointers */
S#define UART0_BASE_PTRS                          { UART0 }
S/** Interrupt vectors for the UART0 peripheral type */
S#define UART0_RX_TX_IRQS                         { UART0_IRQn }
S#define UART0_ERR_IRQS                           { UART0_IRQn }
S
S/* ----------------------------------------------------------------------------
S   -- UART0 - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup UART0_Register_Accessor_Macros UART0 - Register accessor macros
S * @{
S */
S
S
S/* UART0 - Register instance definitions */
S/* UART0 */
S#define UART0_BDH                                UART0_BDH_REG(UART0)
S#define UART0_BDL                                UART0_BDL_REG(UART0)
S#define UART0_C1                                 UART0_C1_REG(UART0)
S#define UART0_C2                                 UART0_C2_REG(UART0)
S#define UART0_S1                                 UART0_S1_REG(UART0)
S#define UART0_S2                                 UART0_S2_REG(UART0)
S#define UART0_C3                                 UART0_C3_REG(UART0)
S#define UART0_D                                  UART0_D_REG(UART0)
S#define UART0_MA1                                UART0_MA1_REG(UART0)
S#define UART0_MA2                                UART0_MA2_REG(UART0)
S#define UART0_C4                                 UART0_C4_REG(UART0)
S#define UART0_C5                                 UART0_C5_REG(UART0)
S
S/*!
S * @}
S */ /* end of group UART0_Register_Accessor_Macros */
S
S
S/*!
S * @}
S */ /* end of group UART0_Peripheral_Access_Layer */
S
S
S/* ----------------------------------------------------------------------------
S   -- USB Peripheral Access Layer
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup USB_Peripheral_Access_Layer USB Peripheral Access Layer
S * @{
S */
S
S/** USB - Register Layout Typedef */
Stypedef struct {
S  __I  uint8_t PERID;                              /**< Peripheral ID register, offset: 0x0 */
S       uint8_t RESERVED_0[3];
S  __I  uint8_t IDCOMP;                             /**< Peripheral ID Complement register, offset: 0x4 */
S       uint8_t RESERVED_1[3];
S  __I  uint8_t REV;                                /**< Peripheral Revision register, offset: 0x8 */
S       uint8_t RESERVED_2[3];
S  __I  uint8_t ADDINFO;                            /**< Peripheral Additional Info register, offset: 0xC */
S       uint8_t RESERVED_3[3];
S  __IO uint8_t OTGISTAT;                           /**< OTG Interrupt Status register, offset: 0x10 */
S       uint8_t RESERVED_4[3];
S  __IO uint8_t OTGICR;                             /**< OTG Interrupt Control Register, offset: 0x14 */
S       uint8_t RESERVED_5[3];
S  __IO uint8_t OTGSTAT;                            /**< OTG Status register, offset: 0x18 */
S       uint8_t RESERVED_6[3];
S  __IO uint8_t OTGCTL;                             /**< OTG Control register, offset: 0x1C */
S       uint8_t RESERVED_7[99];
S  __IO uint8_t ISTAT;                              /**< Interrupt Status register, offset: 0x80 */
S       uint8_t RESERVED_8[3];
S  __IO uint8_t INTEN;                              /**< Interrupt Enable register, offset: 0x84 */
S       uint8_t RESERVED_9[3];
S  __IO uint8_t ERRSTAT;                            /**< Error Interrupt Status register, offset: 0x88 */
S       uint8_t RESERVED_10[3];
S  __IO uint8_t ERREN;                              /**< Error Interrupt Enable register, offset: 0x8C */
S       uint8_t RESERVED_11[3];
S  __I  uint8_t STAT;                               /**< Status register, offset: 0x90 */
S       uint8_t RESERVED_12[3];
S  __IO uint8_t CTL;                                /**< Control register, offset: 0x94 */
S       uint8_t RESERVED_13[3];
S  __IO uint8_t ADDR;                               /**< Address register, offset: 0x98 */
S       uint8_t RESERVED_14[3];
S  __IO uint8_t BDTPAGE1;                           /**< BDT Page Register 1, offset: 0x9C */
S       uint8_t RESERVED_15[3];
S  __IO uint8_t FRMNUML;                            /**< Frame Number Register Low, offset: 0xA0 */
S       uint8_t RESERVED_16[3];
S  __IO uint8_t FRMNUMH;                            /**< Frame Number Register High, offset: 0xA4 */
S       uint8_t RESERVED_17[3];
S  __IO uint8_t TOKEN;                              /**< Token register, offset: 0xA8 */
S       uint8_t RESERVED_18[3];
S  __IO uint8_t SOFTHLD;                            /**< SOF Threshold Register, offset: 0xAC */
S       uint8_t RESERVED_19[3];
S  __IO uint8_t BDTPAGE2;                           /**< BDT Page Register 2, offset: 0xB0 */
S       uint8_t RESERVED_20[3];
S  __IO uint8_t BDTPAGE3;                           /**< BDT Page Register 3, offset: 0xB4 */
S       uint8_t RESERVED_21[11];
S  struct {                                         /* offset: 0xC0, array step: 0x4 */
S    __IO uint8_t ENDPT;                              /**< Endpoint Control register, array offset: 0xC0, array step: 0x4 */
S         uint8_t RESERVED_0[3];
S  } ENDPOINT[16];
S  __IO uint8_t USBCTRL;                            /**< USB Control register, offset: 0x100 */
S       uint8_t RESERVED_22[3];
S  __I  uint8_t OBSERVE;                            /**< USB OTG Observe register, offset: 0x104 */
S       uint8_t RESERVED_23[3];
S  __IO uint8_t CONTROL;                            /**< USB OTG Control register, offset: 0x108 */
S       uint8_t RESERVED_24[3];
S  __IO uint8_t USBTRC0;                            /**< USB Transceiver Control Register 0, offset: 0x10C */
S       uint8_t RESERVED_25[7];
S  __IO uint8_t USBFRMADJUST;                       /**< Frame Adjust Register, offset: 0x114 */
S} USB_Type, *USB_MemMapPtr;
S
S/* ----------------------------------------------------------------------------
S   -- USB - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup USB_Register_Accessor_Macros USB - Register accessor macros
S * @{
S */
S
S
S/* USB - Register accessors */
S#define USB_PERID_REG(base)                      ((base)->PERID)
S#define USB_IDCOMP_REG(base)                     ((base)->IDCOMP)
S#define USB_REV_REG(base)                        ((base)->REV)
S#define USB_ADDINFO_REG(base)                    ((base)->ADDINFO)
S#define USB_OTGISTAT_REG(base)                   ((base)->OTGISTAT)
S#define USB_OTGICR_REG(base)                     ((base)->OTGICR)
S#define USB_OTGSTAT_REG(base)                    ((base)->OTGSTAT)
S#define USB_OTGCTL_REG(base)                     ((base)->OTGCTL)
S#define USB_ISTAT_REG(base)                      ((base)->ISTAT)
S#define USB_INTEN_REG(base)                      ((base)->INTEN)
S#define USB_ERRSTAT_REG(base)                    ((base)->ERRSTAT)
S#define USB_ERREN_REG(base)                      ((base)->ERREN)
S#define USB_STAT_REG(base)                       ((base)->STAT)
S#define USB_CTL_REG(base)                        ((base)->CTL)
S#define USB_ADDR_REG(base)                       ((base)->ADDR)
S#define USB_BDTPAGE1_REG(base)                   ((base)->BDTPAGE1)
S#define USB_FRMNUML_REG(base)                    ((base)->FRMNUML)
S#define USB_FRMNUMH_REG(base)                    ((base)->FRMNUMH)
S#define USB_TOKEN_REG(base)                      ((base)->TOKEN)
S#define USB_SOFTHLD_REG(base)                    ((base)->SOFTHLD)
S#define USB_BDTPAGE2_REG(base)                   ((base)->BDTPAGE2)
S#define USB_BDTPAGE3_REG(base)                   ((base)->BDTPAGE3)
S#define USB_ENDPT_REG(base,index)                ((base)->ENDPOINT[index].ENDPT)
S#define USB_ENDPT_COUNT                          16
S#define USB_USBCTRL_REG(base)                    ((base)->USBCTRL)
S#define USB_OBSERVE_REG(base)                    ((base)->OBSERVE)
S#define USB_CONTROL_REG(base)                    ((base)->CONTROL)
S#define USB_USBTRC0_REG(base)                    ((base)->USBTRC0)
S#define USB_USBFRMADJUST_REG(base)               ((base)->USBFRMADJUST)
S
S/*!
S * @}
S */ /* end of group USB_Register_Accessor_Macros */
S
S
S/* ----------------------------------------------------------------------------
S   -- USB Register Masks
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup USB_Register_Masks USB Register Masks
S * @{
S */
S
S/* PERID Bit Fields */
S#define USB_PERID_ID_MASK                        0x3Fu
S#define USB_PERID_ID_SHIFT                       0
S#define USB_PERID_ID_WIDTH                       6
S#define USB_PERID_ID(x)                          (((uint8_t)(((uint8_t)(x))<<USB_PERID_ID_SHIFT))&USB_PERID_ID_MASK)
S/* IDCOMP Bit Fields */
S#define USB_IDCOMP_NID_MASK                      0x3Fu
S#define USB_IDCOMP_NID_SHIFT                     0
S#define USB_IDCOMP_NID_WIDTH                     6
S#define USB_IDCOMP_NID(x)                        (((uint8_t)(((uint8_t)(x))<<USB_IDCOMP_NID_SHIFT))&USB_IDCOMP_NID_MASK)
S/* REV Bit Fields */
S#define USB_REV_REV_MASK                         0xFFu
S#define USB_REV_REV_SHIFT                        0
S#define USB_REV_REV_WIDTH                        8
S#define USB_REV_REV(x)                           (((uint8_t)(((uint8_t)(x))<<USB_REV_REV_SHIFT))&USB_REV_REV_MASK)
S/* ADDINFO Bit Fields */
S#define USB_ADDINFO_IEHOST_MASK                  0x1u
S#define USB_ADDINFO_IEHOST_SHIFT                 0
S#define USB_ADDINFO_IEHOST_WIDTH                 1
S#define USB_ADDINFO_IEHOST(x)                    (((uint8_t)(((uint8_t)(x))<<USB_ADDINFO_IEHOST_SHIFT))&USB_ADDINFO_IEHOST_MASK)
S#define USB_ADDINFO_IRQNUM_MASK                  0xF8u
S#define USB_ADDINFO_IRQNUM_SHIFT                 3
S#define USB_ADDINFO_IRQNUM_WIDTH                 5
S#define USB_ADDINFO_IRQNUM(x)                    (((uint8_t)(((uint8_t)(x))<<USB_ADDINFO_IRQNUM_SHIFT))&USB_ADDINFO_IRQNUM_MASK)
S/* OTGISTAT Bit Fields */
S#define USB_OTGISTAT_AVBUSCHG_MASK               0x1u
S#define USB_OTGISTAT_AVBUSCHG_SHIFT              0
S#define USB_OTGISTAT_AVBUSCHG_WIDTH              1
S#define USB_OTGISTAT_AVBUSCHG(x)                 (((uint8_t)(((uint8_t)(x))<<USB_OTGISTAT_AVBUSCHG_SHIFT))&USB_OTGISTAT_AVBUSCHG_MASK)
S#define USB_OTGISTAT_B_SESS_CHG_MASK             0x4u
S#define USB_OTGISTAT_B_SESS_CHG_SHIFT            2
S#define USB_OTGISTAT_B_SESS_CHG_WIDTH            1
S#define USB_OTGISTAT_B_SESS_CHG(x)               (((uint8_t)(((uint8_t)(x))<<USB_OTGISTAT_B_SESS_CHG_SHIFT))&USB_OTGISTAT_B_SESS_CHG_MASK)
S#define USB_OTGISTAT_SESSVLDCHG_MASK             0x8u
S#define USB_OTGISTAT_SESSVLDCHG_SHIFT            3
S#define USB_OTGISTAT_SESSVLDCHG_WIDTH            1
S#define USB_OTGISTAT_SESSVLDCHG(x)               (((uint8_t)(((uint8_t)(x))<<USB_OTGISTAT_SESSVLDCHG_SHIFT))&USB_OTGISTAT_SESSVLDCHG_MASK)
S#define USB_OTGISTAT_LINE_STATE_CHG_MASK         0x20u
S#define USB_OTGISTAT_LINE_STATE_CHG_SHIFT        5
S#define USB_OTGISTAT_LINE_STATE_CHG_WIDTH        1
S#define USB_OTGISTAT_LINE_STATE_CHG(x)           (((uint8_t)(((uint8_t)(x))<<USB_OTGISTAT_LINE_STATE_CHG_SHIFT))&USB_OTGISTAT_LINE_STATE_CHG_MASK)
S#define USB_OTGISTAT_ONEMSEC_MASK                0x40u
S#define USB_OTGISTAT_ONEMSEC_SHIFT               6
S#define USB_OTGISTAT_ONEMSEC_WIDTH               1
S#define USB_OTGISTAT_ONEMSEC(x)                  (((uint8_t)(((uint8_t)(x))<<USB_OTGISTAT_ONEMSEC_SHIFT))&USB_OTGISTAT_ONEMSEC_MASK)
S#define USB_OTGISTAT_IDCHG_MASK                  0x80u
S#define USB_OTGISTAT_IDCHG_SHIFT                 7
S#define USB_OTGISTAT_IDCHG_WIDTH                 1
S#define USB_OTGISTAT_IDCHG(x)                    (((uint8_t)(((uint8_t)(x))<<USB_OTGISTAT_IDCHG_SHIFT))&USB_OTGISTAT_IDCHG_MASK)
S/* OTGICR Bit Fields */
S#define USB_OTGICR_AVBUSEN_MASK                  0x1u
S#define USB_OTGICR_AVBUSEN_SHIFT                 0
S#define USB_OTGICR_AVBUSEN_WIDTH                 1
S#define USB_OTGICR_AVBUSEN(x)                    (((uint8_t)(((uint8_t)(x))<<USB_OTGICR_AVBUSEN_SHIFT))&USB_OTGICR_AVBUSEN_MASK)
S#define USB_OTGICR_BSESSEN_MASK                  0x4u
S#define USB_OTGICR_BSESSEN_SHIFT                 2
S#define USB_OTGICR_BSESSEN_WIDTH                 1
S#define USB_OTGICR_BSESSEN(x)                    (((uint8_t)(((uint8_t)(x))<<USB_OTGICR_BSESSEN_SHIFT))&USB_OTGICR_BSESSEN_MASK)
S#define USB_OTGICR_SESSVLDEN_MASK                0x8u
S#define USB_OTGICR_SESSVLDEN_SHIFT               3
S#define USB_OTGICR_SESSVLDEN_WIDTH               1
S#define USB_OTGICR_SESSVLDEN(x)                  (((uint8_t)(((uint8_t)(x))<<USB_OTGICR_SESSVLDEN_SHIFT))&USB_OTGICR_SESSVLDEN_MASK)
S#define USB_OTGICR_LINESTATEEN_MASK              0x20u
S#define USB_OTGICR_LINESTATEEN_SHIFT             5
S#define USB_OTGICR_LINESTATEEN_WIDTH             1
S#define USB_OTGICR_LINESTATEEN(x)                (((uint8_t)(((uint8_t)(x))<<USB_OTGICR_LINESTATEEN_SHIFT))&USB_OTGICR_LINESTATEEN_MASK)
S#define USB_OTGICR_ONEMSECEN_MASK                0x40u
S#define USB_OTGICR_ONEMSECEN_SHIFT               6
S#define USB_OTGICR_ONEMSECEN_WIDTH               1
S#define USB_OTGICR_ONEMSECEN(x)                  (((uint8_t)(((uint8_t)(x))<<USB_OTGICR_ONEMSECEN_SHIFT))&USB_OTGICR_ONEMSECEN_MASK)
S#define USB_OTGICR_IDEN_MASK                     0x80u
S#define USB_OTGICR_IDEN_SHIFT                    7
S#define USB_OTGICR_IDEN_WIDTH                    1
S#define USB_OTGICR_IDEN(x)                       (((uint8_t)(((uint8_t)(x))<<USB_OTGICR_IDEN_SHIFT))&USB_OTGICR_IDEN_MASK)
S/* OTGSTAT Bit Fields */
S#define USB_OTGSTAT_AVBUSVLD_MASK                0x1u
S#define USB_OTGSTAT_AVBUSVLD_SHIFT               0
S#define USB_OTGSTAT_AVBUSVLD_WIDTH               1
S#define USB_OTGSTAT_AVBUSVLD(x)                  (((uint8_t)(((uint8_t)(x))<<USB_OTGSTAT_AVBUSVLD_SHIFT))&USB_OTGSTAT_AVBUSVLD_MASK)
S#define USB_OTGSTAT_BSESSEND_MASK                0x4u
S#define USB_OTGSTAT_BSESSEND_SHIFT               2
S#define USB_OTGSTAT_BSESSEND_WIDTH               1
S#define USB_OTGSTAT_BSESSEND(x)                  (((uint8_t)(((uint8_t)(x))<<USB_OTGSTAT_BSESSEND_SHIFT))&USB_OTGSTAT_BSESSEND_MASK)
S#define USB_OTGSTAT_SESS_VLD_MASK                0x8u
S#define USB_OTGSTAT_SESS_VLD_SHIFT               3
S#define USB_OTGSTAT_SESS_VLD_WIDTH               1
S#define USB_OTGSTAT_SESS_VLD(x)                  (((uint8_t)(((uint8_t)(x))<<USB_OTGSTAT_SESS_VLD_SHIFT))&USB_OTGSTAT_SESS_VLD_MASK)
S#define USB_OTGSTAT_LINESTATESTABLE_MASK         0x20u
S#define USB_OTGSTAT_LINESTATESTABLE_SHIFT        5
S#define USB_OTGSTAT_LINESTATESTABLE_WIDTH        1
S#define USB_OTGSTAT_LINESTATESTABLE(x)           (((uint8_t)(((uint8_t)(x))<<USB_OTGSTAT_LINESTATESTABLE_SHIFT))&USB_OTGSTAT_LINESTATESTABLE_MASK)
S#define USB_OTGSTAT_ONEMSECEN_MASK               0x40u
S#define USB_OTGSTAT_ONEMSECEN_SHIFT              6
S#define USB_OTGSTAT_ONEMSECEN_WIDTH              1
S#define USB_OTGSTAT_ONEMSECEN(x)                 (((uint8_t)(((uint8_t)(x))<<USB_OTGSTAT_ONEMSECEN_SHIFT))&USB_OTGSTAT_ONEMSECEN_MASK)
S#define USB_OTGSTAT_ID_MASK                      0x80u
S#define USB_OTGSTAT_ID_SHIFT                     7
S#define USB_OTGSTAT_ID_WIDTH                     1
S#define USB_OTGSTAT_ID(x)                        (((uint8_t)(((uint8_t)(x))<<USB_OTGSTAT_ID_SHIFT))&USB_OTGSTAT_ID_MASK)
S/* OTGCTL Bit Fields */
S#define USB_OTGCTL_OTGEN_MASK                    0x4u
S#define USB_OTGCTL_OTGEN_SHIFT                   2
S#define USB_OTGCTL_OTGEN_WIDTH                   1
S#define USB_OTGCTL_OTGEN(x)                      (((uint8_t)(((uint8_t)(x))<<USB_OTGCTL_OTGEN_SHIFT))&USB_OTGCTL_OTGEN_MASK)
S#define USB_OTGCTL_DMLOW_MASK                    0x10u
S#define USB_OTGCTL_DMLOW_SHIFT                   4
S#define USB_OTGCTL_DMLOW_WIDTH                   1
S#define USB_OTGCTL_DMLOW(x)                      (((uint8_t)(((uint8_t)(x))<<USB_OTGCTL_DMLOW_SHIFT))&USB_OTGCTL_DMLOW_MASK)
S#define USB_OTGCTL_DPLOW_MASK                    0x20u
S#define USB_OTGCTL_DPLOW_SHIFT                   5
S#define USB_OTGCTL_DPLOW_WIDTH                   1
S#define USB_OTGCTL_DPLOW(x)                      (((uint8_t)(((uint8_t)(x))<<USB_OTGCTL_DPLOW_SHIFT))&USB_OTGCTL_DPLOW_MASK)
S#define USB_OTGCTL_DPHIGH_MASK                   0x80u
S#define USB_OTGCTL_DPHIGH_SHIFT                  7
S#define USB_OTGCTL_DPHIGH_WIDTH                  1
S#define USB_OTGCTL_DPHIGH(x)                     (((uint8_t)(((uint8_t)(x))<<USB_OTGCTL_DPHIGH_SHIFT))&USB_OTGCTL_DPHIGH_MASK)
S/* ISTAT Bit Fields */
S#define USB_ISTAT_USBRST_MASK                    0x1u
S#define USB_ISTAT_USBRST_SHIFT                   0
S#define USB_ISTAT_USBRST_WIDTH                   1
S#define USB_ISTAT_USBRST(x)                      (((uint8_t)(((uint8_t)(x))<<USB_ISTAT_USBRST_SHIFT))&USB_ISTAT_USBRST_MASK)
S#define USB_ISTAT_ERROR_MASK                     0x2u
S#define USB_ISTAT_ERROR_SHIFT                    1
S#define USB_ISTAT_ERROR_WIDTH                    1
S#define USB_ISTAT_ERROR(x)                       (((uint8_t)(((uint8_t)(x))<<USB_ISTAT_ERROR_SHIFT))&USB_ISTAT_ERROR_MASK)
S#define USB_ISTAT_SOFTOK_MASK                    0x4u
S#define USB_ISTAT_SOFTOK_SHIFT                   2
S#define USB_ISTAT_SOFTOK_WIDTH                   1
S#define USB_ISTAT_SOFTOK(x)                      (((uint8_t)(((uint8_t)(x))<<USB_ISTAT_SOFTOK_SHIFT))&USB_ISTAT_SOFTOK_MASK)
S#define USB_ISTAT_TOKDNE_MASK                    0x8u
S#define USB_ISTAT_TOKDNE_SHIFT                   3
S#define USB_ISTAT_TOKDNE_WIDTH                   1
S#define USB_ISTAT_TOKDNE(x)                      (((uint8_t)(((uint8_t)(x))<<USB_ISTAT_TOKDNE_SHIFT))&USB_ISTAT_TOKDNE_MASK)
S#define USB_ISTAT_SLEEP_MASK                     0x10u
S#define USB_ISTAT_SLEEP_SHIFT                    4
S#define USB_ISTAT_SLEEP_WIDTH                    1
S#define USB_ISTAT_SLEEP(x)                       (((uint8_t)(((uint8_t)(x))<<USB_ISTAT_SLEEP_SHIFT))&USB_ISTAT_SLEEP_MASK)
S#define USB_ISTAT_RESUME_MASK                    0x20u
S#define USB_ISTAT_RESUME_SHIFT                   5
S#define USB_ISTAT_RESUME_WIDTH                   1
S#define USB_ISTAT_RESUME(x)                      (((uint8_t)(((uint8_t)(x))<<USB_ISTAT_RESUME_SHIFT))&USB_ISTAT_RESUME_MASK)
S#define USB_ISTAT_ATTACH_MASK                    0x40u
S#define USB_ISTAT_ATTACH_SHIFT                   6
S#define USB_ISTAT_ATTACH_WIDTH                   1
S#define USB_ISTAT_ATTACH(x)                      (((uint8_t)(((uint8_t)(x))<<USB_ISTAT_ATTACH_SHIFT))&USB_ISTAT_ATTACH_MASK)
S#define USB_ISTAT_STALL_MASK                     0x80u
S#define USB_ISTAT_STALL_SHIFT                    7
S#define USB_ISTAT_STALL_WIDTH                    1
S#define USB_ISTAT_STALL(x)                       (((uint8_t)(((uint8_t)(x))<<USB_ISTAT_STALL_SHIFT))&USB_ISTAT_STALL_MASK)
S/* INTEN Bit Fields */
S#define USB_INTEN_USBRSTEN_MASK                  0x1u
S#define USB_INTEN_USBRSTEN_SHIFT                 0
S#define USB_INTEN_USBRSTEN_WIDTH                 1
S#define USB_INTEN_USBRSTEN(x)                    (((uint8_t)(((uint8_t)(x))<<USB_INTEN_USBRSTEN_SHIFT))&USB_INTEN_USBRSTEN_MASK)
S#define USB_INTEN_ERROREN_MASK                   0x2u
S#define USB_INTEN_ERROREN_SHIFT                  1
S#define USB_INTEN_ERROREN_WIDTH                  1
S#define USB_INTEN_ERROREN(x)                     (((uint8_t)(((uint8_t)(x))<<USB_INTEN_ERROREN_SHIFT))&USB_INTEN_ERROREN_MASK)
S#define USB_INTEN_SOFTOKEN_MASK                  0x4u
S#define USB_INTEN_SOFTOKEN_SHIFT                 2
S#define USB_INTEN_SOFTOKEN_WIDTH                 1
S#define USB_INTEN_SOFTOKEN(x)                    (((uint8_t)(((uint8_t)(x))<<USB_INTEN_SOFTOKEN_SHIFT))&USB_INTEN_SOFTOKEN_MASK)
S#define USB_INTEN_TOKDNEEN_MASK                  0x8u
S#define USB_INTEN_TOKDNEEN_SHIFT                 3
S#define USB_INTEN_TOKDNEEN_WIDTH                 1
S#define USB_INTEN_TOKDNEEN(x)                    (((uint8_t)(((uint8_t)(x))<<USB_INTEN_TOKDNEEN_SHIFT))&USB_INTEN_TOKDNEEN_MASK)
S#define USB_INTEN_SLEEPEN_MASK                   0x10u
S#define USB_INTEN_SLEEPEN_SHIFT                  4
S#define USB_INTEN_SLEEPEN_WIDTH                  1
S#define USB_INTEN_SLEEPEN(x)                     (((uint8_t)(((uint8_t)(x))<<USB_INTEN_SLEEPEN_SHIFT))&USB_INTEN_SLEEPEN_MASK)
S#define USB_INTEN_RESUMEEN_MASK                  0x20u
S#define USB_INTEN_RESUMEEN_SHIFT                 5
S#define USB_INTEN_RESUMEEN_WIDTH                 1
S#define USB_INTEN_RESUMEEN(x)                    (((uint8_t)(((uint8_t)(x))<<USB_INTEN_RESUMEEN_SHIFT))&USB_INTEN_RESUMEEN_MASK)
S#define USB_INTEN_ATTACHEN_MASK                  0x40u
S#define USB_INTEN_ATTACHEN_SHIFT                 6
S#define USB_INTEN_ATTACHEN_WIDTH                 1
S#define USB_INTEN_ATTACHEN(x)                    (((uint8_t)(((uint8_t)(x))<<USB_INTEN_ATTACHEN_SHIFT))&USB_INTEN_ATTACHEN_MASK)
S#define USB_INTEN_STALLEN_MASK                   0x80u
S#define USB_INTEN_STALLEN_SHIFT                  7
S#define USB_INTEN_STALLEN_WIDTH                  1
S#define USB_INTEN_STALLEN(x)                     (((uint8_t)(((uint8_t)(x))<<USB_INTEN_STALLEN_SHIFT))&USB_INTEN_STALLEN_MASK)
S/* ERRSTAT Bit Fields */
S#define USB_ERRSTAT_PIDERR_MASK                  0x1u
S#define USB_ERRSTAT_PIDERR_SHIFT                 0
S#define USB_ERRSTAT_PIDERR_WIDTH                 1
S#define USB_ERRSTAT_PIDERR(x)                    (((uint8_t)(((uint8_t)(x))<<USB_ERRSTAT_PIDERR_SHIFT))&USB_ERRSTAT_PIDERR_MASK)
S#define USB_ERRSTAT_CRC5EOF_MASK                 0x2u
S#define USB_ERRSTAT_CRC5EOF_SHIFT                1
S#define USB_ERRSTAT_CRC5EOF_WIDTH                1
S#define USB_ERRSTAT_CRC5EOF(x)                   (((uint8_t)(((uint8_t)(x))<<USB_ERRSTAT_CRC5EOF_SHIFT))&USB_ERRSTAT_CRC5EOF_MASK)
S#define USB_ERRSTAT_CRC16_MASK                   0x4u
S#define USB_ERRSTAT_CRC16_SHIFT                  2
S#define USB_ERRSTAT_CRC16_WIDTH                  1
S#define USB_ERRSTAT_CRC16(x)                     (((uint8_t)(((uint8_t)(x))<<USB_ERRSTAT_CRC16_SHIFT))&USB_ERRSTAT_CRC16_MASK)
S#define USB_ERRSTAT_DFN8_MASK                    0x8u
S#define USB_ERRSTAT_DFN8_SHIFT                   3
S#define USB_ERRSTAT_DFN8_WIDTH                   1
S#define USB_ERRSTAT_DFN8(x)                      (((uint8_t)(((uint8_t)(x))<<USB_ERRSTAT_DFN8_SHIFT))&USB_ERRSTAT_DFN8_MASK)
S#define USB_ERRSTAT_BTOERR_MASK                  0x10u
S#define USB_ERRSTAT_BTOERR_SHIFT                 4
S#define USB_ERRSTAT_BTOERR_WIDTH                 1
S#define USB_ERRSTAT_BTOERR(x)                    (((uint8_t)(((uint8_t)(x))<<USB_ERRSTAT_BTOERR_SHIFT))&USB_ERRSTAT_BTOERR_MASK)
S#define USB_ERRSTAT_DMAERR_MASK                  0x20u
S#define USB_ERRSTAT_DMAERR_SHIFT                 5
S#define USB_ERRSTAT_DMAERR_WIDTH                 1
S#define USB_ERRSTAT_DMAERR(x)                    (((uint8_t)(((uint8_t)(x))<<USB_ERRSTAT_DMAERR_SHIFT))&USB_ERRSTAT_DMAERR_MASK)
S#define USB_ERRSTAT_BTSERR_MASK                  0x80u
S#define USB_ERRSTAT_BTSERR_SHIFT                 7
S#define USB_ERRSTAT_BTSERR_WIDTH                 1
S#define USB_ERRSTAT_BTSERR(x)                    (((uint8_t)(((uint8_t)(x))<<USB_ERRSTAT_BTSERR_SHIFT))&USB_ERRSTAT_BTSERR_MASK)
S/* ERREN Bit Fields */
S#define USB_ERREN_PIDERREN_MASK                  0x1u
S#define USB_ERREN_PIDERREN_SHIFT                 0
S#define USB_ERREN_PIDERREN_WIDTH                 1
S#define USB_ERREN_PIDERREN(x)                    (((uint8_t)(((uint8_t)(x))<<USB_ERREN_PIDERREN_SHIFT))&USB_ERREN_PIDERREN_MASK)
S#define USB_ERREN_CRC5EOFEN_MASK                 0x2u
S#define USB_ERREN_CRC5EOFEN_SHIFT                1
S#define USB_ERREN_CRC5EOFEN_WIDTH                1
S#define USB_ERREN_CRC5EOFEN(x)                   (((uint8_t)(((uint8_t)(x))<<USB_ERREN_CRC5EOFEN_SHIFT))&USB_ERREN_CRC5EOFEN_MASK)
S#define USB_ERREN_CRC16EN_MASK                   0x4u
S#define USB_ERREN_CRC16EN_SHIFT                  2
S#define USB_ERREN_CRC16EN_WIDTH                  1
S#define USB_ERREN_CRC16EN(x)                     (((uint8_t)(((uint8_t)(x))<<USB_ERREN_CRC16EN_SHIFT))&USB_ERREN_CRC16EN_MASK)
S#define USB_ERREN_DFN8EN_MASK                    0x8u
S#define USB_ERREN_DFN8EN_SHIFT                   3
S#define USB_ERREN_DFN8EN_WIDTH                   1
S#define USB_ERREN_DFN8EN(x)                      (((uint8_t)(((uint8_t)(x))<<USB_ERREN_DFN8EN_SHIFT))&USB_ERREN_DFN8EN_MASK)
S#define USB_ERREN_BTOERREN_MASK                  0x10u
S#define USB_ERREN_BTOERREN_SHIFT                 4
S#define USB_ERREN_BTOERREN_WIDTH                 1
S#define USB_ERREN_BTOERREN(x)                    (((uint8_t)(((uint8_t)(x))<<USB_ERREN_BTOERREN_SHIFT))&USB_ERREN_BTOERREN_MASK)
S#define USB_ERREN_DMAERREN_MASK                  0x20u
S#define USB_ERREN_DMAERREN_SHIFT                 5
S#define USB_ERREN_DMAERREN_WIDTH                 1
S#define USB_ERREN_DMAERREN(x)                    (((uint8_t)(((uint8_t)(x))<<USB_ERREN_DMAERREN_SHIFT))&USB_ERREN_DMAERREN_MASK)
S#define USB_ERREN_BTSERREN_MASK                  0x80u
S#define USB_ERREN_BTSERREN_SHIFT                 7
S#define USB_ERREN_BTSERREN_WIDTH                 1
S#define USB_ERREN_BTSERREN(x)                    (((uint8_t)(((uint8_t)(x))<<USB_ERREN_BTSERREN_SHIFT))&USB_ERREN_BTSERREN_MASK)
S/* STAT Bit Fields */
S#define USB_STAT_ODD_MASK                        0x4u
S#define USB_STAT_ODD_SHIFT                       2
S#define USB_STAT_ODD_WIDTH                       1
S#define USB_STAT_ODD(x)                          (((uint8_t)(((uint8_t)(x))<<USB_STAT_ODD_SHIFT))&USB_STAT_ODD_MASK)
S#define USB_STAT_TX_MASK                         0x8u
S#define USB_STAT_TX_SHIFT                        3
S#define USB_STAT_TX_WIDTH                        1
S#define USB_STAT_TX(x)                           (((uint8_t)(((uint8_t)(x))<<USB_STAT_TX_SHIFT))&USB_STAT_TX_MASK)
S#define USB_STAT_ENDP_MASK                       0xF0u
S#define USB_STAT_ENDP_SHIFT                      4
S#define USB_STAT_ENDP_WIDTH                      4
S#define USB_STAT_ENDP(x)                         (((uint8_t)(((uint8_t)(x))<<USB_STAT_ENDP_SHIFT))&USB_STAT_ENDP_MASK)
S/* CTL Bit Fields */
S#define USB_CTL_USBENSOFEN_MASK                  0x1u
S#define USB_CTL_USBENSOFEN_SHIFT                 0
S#define USB_CTL_USBENSOFEN_WIDTH                 1
S#define USB_CTL_USBENSOFEN(x)                    (((uint8_t)(((uint8_t)(x))<<USB_CTL_USBENSOFEN_SHIFT))&USB_CTL_USBENSOFEN_MASK)
S#define USB_CTL_ODDRST_MASK                      0x2u
S#define USB_CTL_ODDRST_SHIFT                     1
S#define USB_CTL_ODDRST_WIDTH                     1
S#define USB_CTL_ODDRST(x)                        (((uint8_t)(((uint8_t)(x))<<USB_CTL_ODDRST_SHIFT))&USB_CTL_ODDRST_MASK)
S#define USB_CTL_RESUME_MASK                      0x4u
S#define USB_CTL_RESUME_SHIFT                     2
S#define USB_CTL_RESUME_WIDTH                     1
S#define USB_CTL_RESUME(x)                        (((uint8_t)(((uint8_t)(x))<<USB_CTL_RESUME_SHIFT))&USB_CTL_RESUME_MASK)
S#define USB_CTL_HOSTMODEEN_MASK                  0x8u
S#define USB_CTL_HOSTMODEEN_SHIFT                 3
S#define USB_CTL_HOSTMODEEN_WIDTH                 1
S#define USB_CTL_HOSTMODEEN(x)                    (((uint8_t)(((uint8_t)(x))<<USB_CTL_HOSTMODEEN_SHIFT))&USB_CTL_HOSTMODEEN_MASK)
S#define USB_CTL_RESET_MASK                       0x10u
S#define USB_CTL_RESET_SHIFT                      4
S#define USB_CTL_RESET_WIDTH                      1
S#define USB_CTL_RESET(x)                         (((uint8_t)(((uint8_t)(x))<<USB_CTL_RESET_SHIFT))&USB_CTL_RESET_MASK)
S#define USB_CTL_TXSUSPENDTOKENBUSY_MASK          0x20u
S#define USB_CTL_TXSUSPENDTOKENBUSY_SHIFT         5
S#define USB_CTL_TXSUSPENDTOKENBUSY_WIDTH         1
S#define USB_CTL_TXSUSPENDTOKENBUSY(x)            (((uint8_t)(((uint8_t)(x))<<USB_CTL_TXSUSPENDTOKENBUSY_SHIFT))&USB_CTL_TXSUSPENDTOKENBUSY_MASK)
S#define USB_CTL_SE0_MASK                         0x40u
S#define USB_CTL_SE0_SHIFT                        6
S#define USB_CTL_SE0_WIDTH                        1
S#define USB_CTL_SE0(x)                           (((uint8_t)(((uint8_t)(x))<<USB_CTL_SE0_SHIFT))&USB_CTL_SE0_MASK)
S#define USB_CTL_JSTATE_MASK                      0x80u
S#define USB_CTL_JSTATE_SHIFT                     7
S#define USB_CTL_JSTATE_WIDTH                     1
S#define USB_CTL_JSTATE(x)                        (((uint8_t)(((uint8_t)(x))<<USB_CTL_JSTATE_SHIFT))&USB_CTL_JSTATE_MASK)
S/* ADDR Bit Fields */
S#define USB_ADDR_ADDR_MASK                       0x7Fu
S#define USB_ADDR_ADDR_SHIFT                      0
S#define USB_ADDR_ADDR_WIDTH                      7
S#define USB_ADDR_ADDR(x)                         (((uint8_t)(((uint8_t)(x))<<USB_ADDR_ADDR_SHIFT))&USB_ADDR_ADDR_MASK)
S#define USB_ADDR_LSEN_MASK                       0x80u
S#define USB_ADDR_LSEN_SHIFT                      7
S#define USB_ADDR_LSEN_WIDTH                      1
S#define USB_ADDR_LSEN(x)                         (((uint8_t)(((uint8_t)(x))<<USB_ADDR_LSEN_SHIFT))&USB_ADDR_LSEN_MASK)
S/* BDTPAGE1 Bit Fields */
S#define USB_BDTPAGE1_BDTBA_MASK                  0xFEu
S#define USB_BDTPAGE1_BDTBA_SHIFT                 1
S#define USB_BDTPAGE1_BDTBA_WIDTH                 7
S#define USB_BDTPAGE1_BDTBA(x)                    (((uint8_t)(((uint8_t)(x))<<USB_BDTPAGE1_BDTBA_SHIFT))&USB_BDTPAGE1_BDTBA_MASK)
S/* FRMNUML Bit Fields */
S#define USB_FRMNUML_FRM_MASK                     0xFFu
S#define USB_FRMNUML_FRM_SHIFT                    0
S#define USB_FRMNUML_FRM_WIDTH                    8
S#define USB_FRMNUML_FRM(x)                       (((uint8_t)(((uint8_t)(x))<<USB_FRMNUML_FRM_SHIFT))&USB_FRMNUML_FRM_MASK)
S/* FRMNUMH Bit Fields */
S#define USB_FRMNUMH_FRM_MASK                     0x7u
S#define USB_FRMNUMH_FRM_SHIFT                    0
S#define USB_FRMNUMH_FRM_WIDTH                    3
S#define USB_FRMNUMH_FRM(x)                       (((uint8_t)(((uint8_t)(x))<<USB_FRMNUMH_FRM_SHIFT))&USB_FRMNUMH_FRM_MASK)
S/* TOKEN Bit Fields */
S#define USB_TOKEN_TOKENENDPT_MASK                0xFu
S#define USB_TOKEN_TOKENENDPT_SHIFT               0
S#define USB_TOKEN_TOKENENDPT_WIDTH               4
S#define USB_TOKEN_TOKENENDPT(x)                  (((uint8_t)(((uint8_t)(x))<<USB_TOKEN_TOKENENDPT_SHIFT))&USB_TOKEN_TOKENENDPT_MASK)
S#define USB_TOKEN_TOKENPID_MASK                  0xF0u
S#define USB_TOKEN_TOKENPID_SHIFT                 4
S#define USB_TOKEN_TOKENPID_WIDTH                 4
S#define USB_TOKEN_TOKENPID(x)                    (((uint8_t)(((uint8_t)(x))<<USB_TOKEN_TOKENPID_SHIFT))&USB_TOKEN_TOKENPID_MASK)
S/* SOFTHLD Bit Fields */
S#define USB_SOFTHLD_CNT_MASK                     0xFFu
S#define USB_SOFTHLD_CNT_SHIFT                    0
S#define USB_SOFTHLD_CNT_WIDTH                    8
S#define USB_SOFTHLD_CNT(x)                       (((uint8_t)(((uint8_t)(x))<<USB_SOFTHLD_CNT_SHIFT))&USB_SOFTHLD_CNT_MASK)
S/* BDTPAGE2 Bit Fields */
S#define USB_BDTPAGE2_BDTBA_MASK                  0xFFu
S#define USB_BDTPAGE2_BDTBA_SHIFT                 0
S#define USB_BDTPAGE2_BDTBA_WIDTH                 8
S#define USB_BDTPAGE2_BDTBA(x)                    (((uint8_t)(((uint8_t)(x))<<USB_BDTPAGE2_BDTBA_SHIFT))&USB_BDTPAGE2_BDTBA_MASK)
S/* BDTPAGE3 Bit Fields */
S#define USB_BDTPAGE3_BDTBA_MASK                  0xFFu
S#define USB_BDTPAGE3_BDTBA_SHIFT                 0
S#define USB_BDTPAGE3_BDTBA_WIDTH                 8
S#define USB_BDTPAGE3_BDTBA(x)                    (((uint8_t)(((uint8_t)(x))<<USB_BDTPAGE3_BDTBA_SHIFT))&USB_BDTPAGE3_BDTBA_MASK)
S/* ENDPT Bit Fields */
S#define USB_ENDPT_EPHSHK_MASK                    0x1u
S#define USB_ENDPT_EPHSHK_SHIFT                   0
S#define USB_ENDPT_EPHSHK_WIDTH                   1
S#define USB_ENDPT_EPHSHK(x)                      (((uint8_t)(((uint8_t)(x))<<USB_ENDPT_EPHSHK_SHIFT))&USB_ENDPT_EPHSHK_MASK)
S#define USB_ENDPT_EPSTALL_MASK                   0x2u
S#define USB_ENDPT_EPSTALL_SHIFT                  1
S#define USB_ENDPT_EPSTALL_WIDTH                  1
S#define USB_ENDPT_EPSTALL(x)                     (((uint8_t)(((uint8_t)(x))<<USB_ENDPT_EPSTALL_SHIFT))&USB_ENDPT_EPSTALL_MASK)
S#define USB_ENDPT_EPTXEN_MASK                    0x4u
S#define USB_ENDPT_EPTXEN_SHIFT                   2
S#define USB_ENDPT_EPTXEN_WIDTH                   1
S#define USB_ENDPT_EPTXEN(x)                      (((uint8_t)(((uint8_t)(x))<<USB_ENDPT_EPTXEN_SHIFT))&USB_ENDPT_EPTXEN_MASK)
S#define USB_ENDPT_EPRXEN_MASK                    0x8u
S#define USB_ENDPT_EPRXEN_SHIFT                   3
S#define USB_ENDPT_EPRXEN_WIDTH                   1
S#define USB_ENDPT_EPRXEN(x)                      (((uint8_t)(((uint8_t)(x))<<USB_ENDPT_EPRXEN_SHIFT))&USB_ENDPT_EPRXEN_MASK)
S#define USB_ENDPT_EPCTLDIS_MASK                  0x10u
S#define USB_ENDPT_EPCTLDIS_SHIFT                 4
S#define USB_ENDPT_EPCTLDIS_WIDTH                 1
S#define USB_ENDPT_EPCTLDIS(x)                    (((uint8_t)(((uint8_t)(x))<<USB_ENDPT_EPCTLDIS_SHIFT))&USB_ENDPT_EPCTLDIS_MASK)
S#define USB_ENDPT_RETRYDIS_MASK                  0x40u
S#define USB_ENDPT_RETRYDIS_SHIFT                 6
S#define USB_ENDPT_RETRYDIS_WIDTH                 1
S#define USB_ENDPT_RETRYDIS(x)                    (((uint8_t)(((uint8_t)(x))<<USB_ENDPT_RETRYDIS_SHIFT))&USB_ENDPT_RETRYDIS_MASK)
S#define USB_ENDPT_HOSTWOHUB_MASK                 0x80u
S#define USB_ENDPT_HOSTWOHUB_SHIFT                7
S#define USB_ENDPT_HOSTWOHUB_WIDTH                1
S#define USB_ENDPT_HOSTWOHUB(x)                   (((uint8_t)(((uint8_t)(x))<<USB_ENDPT_HOSTWOHUB_SHIFT))&USB_ENDPT_HOSTWOHUB_MASK)
S/* USBCTRL Bit Fields */
S#define USB_USBCTRL_PDE_MASK                     0x40u
S#define USB_USBCTRL_PDE_SHIFT                    6
S#define USB_USBCTRL_PDE_WIDTH                    1
S#define USB_USBCTRL_PDE(x)                       (((uint8_t)(((uint8_t)(x))<<USB_USBCTRL_PDE_SHIFT))&USB_USBCTRL_PDE_MASK)
S#define USB_USBCTRL_SUSP_MASK                    0x80u
S#define USB_USBCTRL_SUSP_SHIFT                   7
S#define USB_USBCTRL_SUSP_WIDTH                   1
S#define USB_USBCTRL_SUSP(x)                      (((uint8_t)(((uint8_t)(x))<<USB_USBCTRL_SUSP_SHIFT))&USB_USBCTRL_SUSP_MASK)
S/* OBSERVE Bit Fields */
S#define USB_OBSERVE_DMPD_MASK                    0x10u
S#define USB_OBSERVE_DMPD_SHIFT                   4
S#define USB_OBSERVE_DMPD_WIDTH                   1
S#define USB_OBSERVE_DMPD(x)                      (((uint8_t)(((uint8_t)(x))<<USB_OBSERVE_DMPD_SHIFT))&USB_OBSERVE_DMPD_MASK)
S#define USB_OBSERVE_DPPD_MASK                    0x40u
S#define USB_OBSERVE_DPPD_SHIFT                   6
S#define USB_OBSERVE_DPPD_WIDTH                   1
S#define USB_OBSERVE_DPPD(x)                      (((uint8_t)(((uint8_t)(x))<<USB_OBSERVE_DPPD_SHIFT))&USB_OBSERVE_DPPD_MASK)
S#define USB_OBSERVE_DPPU_MASK                    0x80u
S#define USB_OBSERVE_DPPU_SHIFT                   7
S#define USB_OBSERVE_DPPU_WIDTH                   1
S#define USB_OBSERVE_DPPU(x)                      (((uint8_t)(((uint8_t)(x))<<USB_OBSERVE_DPPU_SHIFT))&USB_OBSERVE_DPPU_MASK)
S/* CONTROL Bit Fields */
S#define USB_CONTROL_DPPULLUPNONOTG_MASK          0x10u
S#define USB_CONTROL_DPPULLUPNONOTG_SHIFT         4
S#define USB_CONTROL_DPPULLUPNONOTG_WIDTH         1
S#define USB_CONTROL_DPPULLUPNONOTG(x)            (((uint8_t)(((uint8_t)(x))<<USB_CONTROL_DPPULLUPNONOTG_SHIFT))&USB_CONTROL_DPPULLUPNONOTG_MASK)
S/* USBTRC0 Bit Fields */
S#define USB_USBTRC0_USB_RESUME_INT_MASK          0x1u
S#define USB_USBTRC0_USB_RESUME_INT_SHIFT         0
S#define USB_USBTRC0_USB_RESUME_INT_WIDTH         1
S#define USB_USBTRC0_USB_RESUME_INT(x)            (((uint8_t)(((uint8_t)(x))<<USB_USBTRC0_USB_RESUME_INT_SHIFT))&USB_USBTRC0_USB_RESUME_INT_MASK)
S#define USB_USBTRC0_SYNC_DET_MASK                0x2u
S#define USB_USBTRC0_SYNC_DET_SHIFT               1
S#define USB_USBTRC0_SYNC_DET_WIDTH               1
S#define USB_USBTRC0_SYNC_DET(x)                  (((uint8_t)(((uint8_t)(x))<<USB_USBTRC0_SYNC_DET_SHIFT))&USB_USBTRC0_SYNC_DET_MASK)
S#define USB_USBTRC0_USBRESMEN_MASK               0x20u
S#define USB_USBTRC0_USBRESMEN_SHIFT              5
S#define USB_USBTRC0_USBRESMEN_WIDTH              1
S#define USB_USBTRC0_USBRESMEN(x)                 (((uint8_t)(((uint8_t)(x))<<USB_USBTRC0_USBRESMEN_SHIFT))&USB_USBTRC0_USBRESMEN_MASK)
S#define USB_USBTRC0_USBRESET_MASK                0x80u
S#define USB_USBTRC0_USBRESET_SHIFT               7
S#define USB_USBTRC0_USBRESET_WIDTH               1
S#define USB_USBTRC0_USBRESET(x)                  (((uint8_t)(((uint8_t)(x))<<USB_USBTRC0_USBRESET_SHIFT))&USB_USBTRC0_USBRESET_MASK)
S/* USBFRMADJUST Bit Fields */
S#define USB_USBFRMADJUST_ADJ_MASK                0xFFu
S#define USB_USBFRMADJUST_ADJ_SHIFT               0
S#define USB_USBFRMADJUST_ADJ_WIDTH               8
S#define USB_USBFRMADJUST_ADJ(x)                  (((uint8_t)(((uint8_t)(x))<<USB_USBFRMADJUST_ADJ_SHIFT))&USB_USBFRMADJUST_ADJ_MASK)
S
S/*!
S * @}
S */ /* end of group USB_Register_Masks */
S
S
S/* USB - Peripheral instance base addresses */
S/** Peripheral USB0 base address */
S#define USB0_BASE                                (0x40072000u)
S/** Peripheral USB0 base pointer */
S#define USB0                                     ((USB_Type *)USB0_BASE)
S#define USB0_BASE_PTR                            (USB0)
S/** Array initializer of USB peripheral base addresses */
S#define USB_BASE_ADDRS                           { USB0_BASE }
S/** Array initializer of USB peripheral base pointers */
S#define USB_BASE_PTRS                            { USB0 }
S/** Interrupt vectors for the USB peripheral type */
S#define USB_IRQS                                 { USB0_IRQn }
S
S/* ----------------------------------------------------------------------------
S   -- USB - Register accessor macros
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup USB_Register_Accessor_Macros USB - Register accessor macros
S * @{
S */
S
S
S/* USB - Register instance definitions */
S/* USB0 */
S#define USB0_PERID                               USB_PERID_REG(USB0)
S#define USB0_IDCOMP                              USB_IDCOMP_REG(USB0)
S#define USB0_REV                                 USB_REV_REG(USB0)
S#define USB0_ADDINFO                             USB_ADDINFO_REG(USB0)
S#define USB0_OTGISTAT                            USB_OTGISTAT_REG(USB0)
S#define USB0_OTGICR                              USB_OTGICR_REG(USB0)
S#define USB0_OTGSTAT                             USB_OTGSTAT_REG(USB0)
S#define USB0_OTGCTL                              USB_OTGCTL_REG(USB0)
S#define USB0_ISTAT                               USB_ISTAT_REG(USB0)
S#define USB0_INTEN                               USB_INTEN_REG(USB0)
S#define USB0_ERRSTAT                             USB_ERRSTAT_REG(USB0)
S#define USB0_ERREN                               USB_ERREN_REG(USB0)
S#define USB0_STAT                                USB_STAT_REG(USB0)
S#define USB0_CTL                                 USB_CTL_REG(USB0)
S#define USB0_ADDR                                USB_ADDR_REG(USB0)
S#define USB0_BDTPAGE1                            USB_BDTPAGE1_REG(USB0)
S#define USB0_FRMNUML                             USB_FRMNUML_REG(USB0)
S#define USB0_FRMNUMH                             USB_FRMNUMH_REG(USB0)
S#define USB0_TOKEN                               USB_TOKEN_REG(USB0)
S#define USB0_SOFTHLD                             USB_SOFTHLD_REG(USB0)
S#define USB0_BDTPAGE2                            USB_BDTPAGE2_REG(USB0)
S#define USB0_BDTPAGE3                            USB_BDTPAGE3_REG(USB0)
S#define USB0_ENDPT0                              USB_ENDPT_REG(USB0,0)
S#define USB0_ENDPT1                              USB_ENDPT_REG(USB0,1)
S#define USB0_ENDPT2                              USB_ENDPT_REG(USB0,2)
S#define USB0_ENDPT3                              USB_ENDPT_REG(USB0,3)
S#define USB0_ENDPT4                              USB_ENDPT_REG(USB0,4)
S#define USB0_ENDPT5                              USB_ENDPT_REG(USB0,5)
S#define USB0_ENDPT6                              USB_ENDPT_REG(USB0,6)
S#define USB0_ENDPT7                              USB_ENDPT_REG(USB0,7)
S#define USB0_ENDPT8                              USB_ENDPT_REG(USB0,8)
S#define USB0_ENDPT9                              USB_ENDPT_REG(USB0,9)
S#define USB0_ENDPT10                             USB_ENDPT_REG(USB0,10)
S#define USB0_ENDPT11                             USB_ENDPT_REG(USB0,11)
S#define USB0_ENDPT12                             USB_ENDPT_REG(USB0,12)
S#define USB0_ENDPT13                             USB_ENDPT_REG(USB0,13)
S#define USB0_ENDPT14                             USB_ENDPT_REG(USB0,14)
S#define USB0_ENDPT15                             USB_ENDPT_REG(USB0,15)
S#define USB0_USBCTRL                             USB_USBCTRL_REG(USB0)
S#define USB0_OBSERVE                             USB_OBSERVE_REG(USB0)
S#define USB0_CONTROL                             USB_CONTROL_REG(USB0)
S#define USB0_USBTRC0                             USB_USBTRC0_REG(USB0)
S#define USB0_USBFRMADJUST                        USB_USBFRMADJUST_REG(USB0)
S
S/* USB - Register array accessors */
S#define USB0_ENDPT(index)                        USB_ENDPT_REG(USB0,index)
S
S/*!
S * @}
S */ /* end of group USB_Register_Accessor_Macros */
S
S
S/*!
S * @}
S */ /* end of group USB_Peripheral_Access_Layer */
S
S
S/*
S** End of section using anonymous unions
S*/
S
S#if defined(__CC_ARM)
S  #pragma pop
S#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
S  #pragma clang diagnostic pop
S#elif defined(__CWCC__)
S  #pragma pop
S#elif defined(__GNUC__)
S  /* leave anonymous unions enabled */
S#elif defined(__IAR_SYSTEMS_ICC__)
S  #pragma language=default
S#else
S  #error Not supported compiler type
S#endif
S
S/*!
S * @}
S */ /* end of group Peripheral_access_layer */
S
S
S/* ----------------------------------------------------------------------------
S   -- Backward Compatibility
S   ---------------------------------------------------------------------------- */
S
S/*!
S * @addtogroup Backward_Compatibility_Symbols Backward Compatibility
S * @{
S */
S
S#define DMA_REQC_ARR_DMAC_MASK                   This_symbol_has_been_deprecated
S#define DMA_REQC_ARR_DMAC_SHIFT                  This_symbol_has_been_deprecated
S#define DMA_REQC_ARR_DMAC(x)                     This_symbol_has_been_deprecated
S#define DMA_REQC_ARR_CFSM_MASK                   This_symbol_has_been_deprecated
S#define DMA_REQC_ARR_CFSM_SHIFT                  This_symbol_has_been_deprecated
S#define DMA_REQC0                                This_symbol_has_been_deprecated
S#define DMA_REQC1                                This_symbol_has_been_deprecated
S#define DMA_REQC2                                This_symbol_has_been_deprecated
S#define DMA_REQC3                                This_symbol_has_been_deprecated
S#define MCG_S_LOLS_MASK                          MCG_S_LOLS0_MASK
S#define MCG_S_LOLS_SHIFT                         MCG_S_LOLS0_SHIFT
S#define SIM_FCFG2_MAXADDR_MASK                   SIM_FCFG2_MAXADDR0_MASK
S#define SIM_FCFG2_MAXADDR_SHIFT                  SIM_FCFG2_MAXADDR0_SHIFT
S#define SIM_FCFG2_MAXADDR                        SIM_FCFG2_MAXADDR0
S#define SPI_C2_SPLPIE_MASK                       This_symbol_has_been_deprecated
S#define SPI_C2_SPLPIE_SHIFT                      This_symbol_has_been_deprecated
S#define UART_C4_LBKDDMAS_MASK                    This_symbol_has_been_deprecated
S#define UART_C4_LBKDDMAS_SHIFT                   This_symbol_has_been_deprecated
S#define UART_C4_ILDMAS_MASK                      This_symbol_has_been_deprecated
S#define UART_C4_ILDMAS_SHIFT                     This_symbol_has_been_deprecated
S#define UART_C4_TCDMAS_MASK                      This_symbol_has_been_deprecated
S#define UART_C4_TCDMAS_SHIFT                     This_symbol_has_been_deprecated
S#define UARTLP_Type                              UART0_Type
S#define UARTLP_BDH_REG                           UART0_BDH_REG
S#define UARTLP_BDL_REG                           UART0_BDL_REG
S#define UARTLP_C1_REG                            UART0_C1_REG
S#define UARTLP_C2_REG                            UART0_C2_REG
S#define UARTLP_S1_REG                            UART0_S1_REG
S#define UARTLP_S2_REG                            UART0_S2_REG
S#define UARTLP_C3_REG                            UART0_C3_REG
S#define UARTLP_D_REG                             UART0_D_REG
S#define UARTLP_MA1_REG                           UART0_MA1_REG
S#define UARTLP_MA2_REG                           UART0_MA2_REG
S#define UARTLP_C4_REG                            UART0_C4_REG
S#define UARTLP_C5_REG                            UART0_C5_REG
S#define UARTLP_BDH_SBR_MASK                      UART0_BDH_SBR_MASK
S#define UARTLP_BDH_SBR_SHIFT                     UART0_BDH_SBR_SHIFT
S#define UARTLP_BDH_SBR(x)                        UART0_BDH_SBR(x)
S#define UARTLP_BDH_SBNS_MASK                     UART0_BDH_SBNS_MASK
S#define UARTLP_BDH_SBNS_SHIFT                    UART0_BDH_SBNS_SHIFT
S#define UARTLP_BDH_RXEDGIE_MASK                  UART0_BDH_RXEDGIE_MASK
S#define UARTLP_BDH_RXEDGIE_SHIFT                 UART0_BDH_RXEDGIE_SHIFT
S#define UARTLP_BDH_LBKDIE_MASK                   UART0_BDH_LBKDIE_MASK
S#define UARTLP_BDH_LBKDIE_SHIFT                  UART0_BDH_LBKDIE_SHIFT
S#define UARTLP_BDL_SBR_MASK                      UART0_BDL_SBR_MASK
S#define UARTLP_BDL_SBR_SHIFT                     UART0_BDL_SBR_SHIFT
S#define UARTLP_BDL_SBR(x)                        UART0_BDL_SBR(x)
S#define UARTLP_C1_PT_MASK                        UART0_C1_PT_MASK
S#define UARTLP_C1_PT_SHIFT                       UART0_C1_PT_SHIFT
S#define UARTLP_C1_PE_MASK                        UART0_C1_PE_MASK
S#define UARTLP_C1_PE_SHIFT                       UART0_C1_PE_SHIFT
S#define UARTLP_C1_ILT_MASK                       UART0_C1_ILT_MASK
S#define UARTLP_C1_ILT_SHIFT                      UART0_C1_ILT_SHIFT
S#define UARTLP_C1_WAKE_MASK                      UART0_C1_WAKE_MASK
S#define UARTLP_C1_WAKE_SHIFT                     UART0_C1_WAKE_SHIFT
S#define UARTLP_C1_M_MASK                         UART0_C1_M_MASK
S#define UARTLP_C1_M_SHIFT                        UART0_C1_M_SHIFT
S#define UARTLP_C1_RSRC_MASK                      UART0_C1_RSRC_MASK
S#define UARTLP_C1_RSRC_SHIFT                     UART0_C1_RSRC_SHIFT
S#define UARTLP_C1_DOZEEN_MASK                    UART0_C1_DOZEEN_MASK
S#define UARTLP_C1_DOZEEN_SHIFT                   UART0_C1_DOZEEN_SHIFT
S#define UARTLP_C1_LOOPS_MASK                     UART0_C1_LOOPS_MASK
S#define UARTLP_C1_LOOPS_SHIFT                    UART0_C1_LOOPS_SHIFT
S#define UARTLP_C2_SBK_MASK                       UART0_C2_SBK_MASK
S#define UARTLP_C2_SBK_SHIFT                      UART0_C2_SBK_SHIFT
S#define UARTLP_C2_RWU_MASK                       UART0_C2_RWU_MASK
S#define UARTLP_C2_RWU_SHIFT                      UART0_C2_RWU_SHIFT
S#define UARTLP_C2_RE_MASK                        UART0_C2_RE_MASK
S#define UARTLP_C2_RE_SHIFT                       UART0_C2_RE_SHIFT
S#define UARTLP_C2_TE_MASK                        UART0_C2_TE_MASK
S#define UARTLP_C2_TE_SHIFT                       UART0_C2_TE_SHIFT
S#define UARTLP_C2_ILIE_MASK                      UART0_C2_ILIE_MASK
S#define UARTLP_C2_ILIE_SHIFT                     UART0_C2_ILIE_SHIFT
S#define UARTLP_C2_RIE_MASK                       UART0_C2_RIE_MASK
S#define UARTLP_C2_RIE_SHIFT                      UART0_C2_RIE_SHIFT
S#define UARTLP_C2_TCIE_MASK                      UART0_C2_TCIE_MASK
S#define UARTLP_C2_TCIE_SHIFT                     UART0_C2_TCIE_SHIFT
S#define UARTLP_C2_TIE_MASK                       UART0_C2_TIE_MASK
S#define UARTLP_C2_TIE_SHIFT                      UART0_C2_TIE_SHIFT
S#define UARTLP_S1_PF_MASK                        UART0_S1_PF_MASK
S#define UARTLP_S1_PF_SHIFT                       UART0_S1_PF_SHIFT
S#define UARTLP_S1_FE_MASK                        UART0_S1_FE_MASK
S#define UARTLP_S1_FE_SHIFT                       UART0_S1_FE_SHIFT
S#define UARTLP_S1_NF_MASK                        UART0_S1_NF_MASK
S#define UARTLP_S1_NF_SHIFT                       UART0_S1_NF_SHIFT
S#define UARTLP_S1_OR_MASK                        UART0_S1_OR_MASK
S#define UARTLP_S1_OR_SHIFT                       UART0_S1_OR_SHIFT
S#define UARTLP_S1_IDLE_MASK                      UART0_S1_IDLE_MASK
S#define UARTLP_S1_IDLE_SHIFT                     UART0_S1_IDLE_SHIFT
S#define UARTLP_S1_RDRF_MASK                      UART0_S1_RDRF_MASK
S#define UARTLP_S1_RDRF_SHIFT                     UART0_S1_RDRF_SHIFT
S#define UARTLP_S1_TC_MASK                        UART0_S1_TC_MASK
S#define UARTLP_S1_TC_SHIFT                       UART0_S1_TC_SHIFT
S#define UARTLP_S1_TDRE_MASK                      UART0_S1_TDRE_MASK
S#define UARTLP_S1_TDRE_SHIFT                     UART0_S1_TDRE_SHIFT
S#define UARTLP_S2_RAF_MASK                       UART0_S2_RAF_MASK
S#define UARTLP_S2_RAF_SHIFT                      UART0_S2_RAF_SHIFT
S#define UARTLP_S2_LBKDE_MASK                     UART0_S2_LBKDE_MASK
S#define UARTLP_S2_LBKDE_SHIFT                    UART0_S2_LBKDE_SHIFT
S#define UARTLP_S2_BRK13_MASK                     UART0_S2_BRK13_MASK
S#define UARTLP_S2_BRK13_SHIFT                    UART0_S2_BRK13_SHIFT
S#define UARTLP_S2_RWUID_MASK                     UART0_S2_RWUID_MASK
S#define UARTLP_S2_RWUID_SHIFT                    UART0_S2_RWUID_SHIFT
S#define UARTLP_S2_RXINV_MASK                     UART0_S2_RXINV_MASK
S#define UARTLP_S2_RXINV_SHIFT                    UART0_S2_RXINV_SHIFT
S#define UARTLP_S2_MSBF_MASK                      UART0_S2_MSBF_MASK
S#define UARTLP_S2_MSBF_SHIFT                     UART0_S2_MSBF_SHIFT
S#define UARTLP_S2_RXEDGIF_MASK                   UART0_S2_RXEDGIF_MASK
S#define UARTLP_S2_RXEDGIF_SHIFT                  UART0_S2_RXEDGIF_SHIFT
S#define UARTLP_S2_LBKDIF_MASK                    UART0_S2_LBKDIF_MASK
S#define UARTLP_S2_LBKDIF_SHIFT                   UART0_S2_LBKDIF_SHIFT
S#define UARTLP_C3_PEIE_MASK                      UART0_C3_PEIE_MASK
S#define UARTLP_C3_PEIE_SHIFT                     UART0_C3_PEIE_SHIFT
S#define UARTLP_C3_FEIE_MASK                      UART0_C3_FEIE_MASK
S#define UARTLP_C3_FEIE_SHIFT                     UART0_C3_FEIE_SHIFT
S#define UARTLP_C3_NEIE_MASK                      UART0_C3_NEIE_MASK
S#define UARTLP_C3_NEIE_SHIFT                     UART0_C3_NEIE_SHIFT
S#define UARTLP_C3_ORIE_MASK                      UART0_C3_ORIE_MASK
S#define UARTLP_C3_ORIE_SHIFT                     UART0_C3_ORIE_SHIFT
S#define UARTLP_C3_TXINV_MASK                     UART0_C3_TXINV_MASK
S#define UARTLP_C3_TXINV_SHIFT                    UART0_C3_TXINV_SHIFT
S#define UARTLP_C3_TXDIR_MASK                     UART0_C3_TXDIR_MASK
S#define UARTLP_C3_TXDIR_SHIFT                    UART0_C3_TXDIR_SHIFT
S#define UARTLP_C3_R9T8_MASK                      UART0_C3_R9T8_MASK
S#define UARTLP_C3_R9T8_SHIFT                     UART0_C3_R9T8_SHIFT
S#define UARTLP_C3_R8T9_MASK                      UART0_C3_R8T9_MASK
S#define UARTLP_C3_R8T9_SHIFT                     UART0_C3_R8T9_SHIFT
S#define UARTLP_D_R0T0_MASK                       UART0_D_R0T0_MASK
S#define UARTLP_D_R0T0_SHIFT                      UART0_D_R0T0_SHIFT
S#define UARTLP_D_R1T1_MASK                       UART0_D_R1T1_MASK
S#define UARTLP_D_R1T1_SHIFT                      UART0_D_R1T1_SHIFT
S#define UARTLP_D_R2T2_MASK                       UART0_D_R2T2_MASK
S#define UARTLP_D_R2T2_SHIFT                      UART0_D_R2T2_SHIFT
S#define UARTLP_D_R3T3_MASK                       UART0_D_R3T3_MASK
S#define UARTLP_D_R3T3_SHIFT                      UART0_D_R3T3_SHIFT
S#define UARTLP_D_R4T4_MASK                       UART0_D_R4T4_MASK
S#define UARTLP_D_R4T4_SHIFT                      UART0_D_R4T4_SHIFT
S#define UARTLP_D_R5T5_MASK                       UART0_D_R5T5_MASK
S#define UARTLP_D_R5T5_SHIFT                      UART0_D_R5T5_SHIFT
S#define UARTLP_D_R6T6_MASK                       UART0_D_R6T6_MASK
S#define UARTLP_D_R6T6_SHIFT                      UART0_D_R6T6_SHIFT
S#define UARTLP_D_R7T7_MASK                       UART0_D_R7T7_MASK
S#define UARTLP_D_R7T7_SHIFT                      UART0_D_R7T7_SHIFT
S#define UARTLP_MA1_MA_MASK                       UART0_MA1_MA_MASK
S#define UARTLP_MA1_MA_SHIFT                      UART0_MA1_MA_SHIFT
S#define UARTLP_MA1_MA(x)                         UART0_MA1_MA(x)
S#define UARTLP_MA2_MA_MASK                       UART0_MA2_MA_MASK
S#define UARTLP_MA2_MA_SHIFT                      UART0_MA2_MA_SHIFT
S#define UARTLP_MA2_MA(x)                         UART0_MA2_MA(x)
S#define UARTLP_C4_OSR_MASK                       UART0_C4_OSR_MASK
S#define UARTLP_C4_OSR_SHIFT                      UART0_C4_OSR_SHIFT
S#define UARTLP_C4_OSR(x)                         UART0_C4_OSR(x)
S#define UARTLP_C4_M10_MASK                       UART0_C4_M10_MASK
S#define UARTLP_C4_M10_SHIFT                      UART0_C4_M10_SHIFT
S#define UARTLP_C4_MAEN2_MASK                     UART0_C4_MAEN2_MASK
S#define UARTLP_C4_MAEN2_SHIFT                    UART0_C4_MAEN2_SHIFT
S#define UARTLP_C4_MAEN1_MASK                     UART0_C4_MAEN1_MASK
S#define UARTLP_C4_MAEN1_SHIFT                    UART0_C4_MAEN1_SHIFT
S#define UARTLP_C5_RESYNCDIS_MASK                 UART0_C5_RESYNCDIS_MASK
S#define UARTLP_C5_RESYNCDIS_SHIFT                UART0_C5_RESYNCDIS_SHIFT
S#define UARTLP_C5_BOTHEDGE_MASK                  UART0_C5_BOTHEDGE_MASK
S#define UARTLP_C5_BOTHEDGE_SHIFT                 UART0_C5_BOTHEDGE_SHIFT
S#define UARTLP_C5_RDMAE_MASK                     UART0_C5_RDMAE_MASK
S#define UARTLP_C5_RDMAE_SHIFT                    UART0_C5_RDMAE_SHIFT
S#define UARTLP_C5_TDMAE_MASK                     UART0_C5_TDMAE_MASK
S#define UARTLP_C5_TDMAE_SHIFT                    UART0_C5_TDMAE_SHIFT
S#define UARTLP_BASES                             UARTLP_BASES
S#define NV_FOPT_EZPORT_DIS_MASK                  This_symbol_has_been_deprecated
S#define NV_FOPT_EZPORT_DIS_SHIFT                 This_symbol_has_been_deprecated
S#define ADC_BASES                                ADC_BASE_PTRS
S#define CMP_BASES                                CMP_BASE_PTRS
S#define DAC_BASES                                DAC_BASE_PTRS
S#define DMA_BASES                                DMA_BASE_PTRS
S#define DMAMUX_BASES                             DMAMUX_BASE_PTRS
S#define FPTA_BASE_PTR                            FGPIOA_BASE_PTR
S#define FPTA_BASE                                FGPIOA_BASE
S#define FPTA                                     FGPIOA
S#define FPTB_BASE_PTR                            FGPIOB_BASE_PTR
S#define FPTB_BASE                                FGPIOB_BASE
S#define FPTB                                     FGPIOB
S#define FPTC_BASE_PTR                            FGPIOC_BASE_PTR
S#define FPTC_BASE                                FGPIOC_BASE
S#define FPTC                                     FGPIOC
S#define FPTD_BASE_PTR                            FGPIOD_BASE_PTR
S#define FPTD_BASE                                FGPIOD_BASE
S#define FPTD                                     FGPIOD
S#define FPTE_BASE_PTR                            FGPIOE_BASE_PTR
S#define FPTE_BASE                                FGPIOE_BASE
S#define FPTE                                     FGPIOE
S#define FGPIO_BASES                              FGPIO_BASE_PTRS
S#define FTFA_BASES                               FTFA_BASE_PTRS
S#define PTA_BASE_PTR                             GPIOA_BASE_PTR
S#define PTA_BASE                                 GPIOA_BASE
S#define PTA                                      GPIOA
S#define PTB_BASE_PTR                             GPIOB_BASE_PTR
S#define PTB_BASE                                 GPIOB_BASE
S#define PTB                                      GPIOB
S#define PTC_BASE_PTR                             GPIOC_BASE_PTR
S#define PTC_BASE                                 GPIOC_BASE
S#define PTC                                      GPIOC
S#define PTD_BASE_PTR                             GPIOD_BASE_PTR
S#define PTD_BASE                                 GPIOD_BASE
S#define PTD                                      GPIOD
S#define PTE_BASE_PTR                             GPIOE_BASE_PTR
S#define PTE_BASE                                 GPIOE_BASE
S#define PTE                                      GPIOE
S#define GPIO_BASES                               GPIO_BASE_PTRS
S#define I2C_BASES                                I2C_BASE_PTRS
S#define LLWU_BASES                               LLWU_BASE_PTRS
S#define LPTMR_BASES                              LPTMR_BASE_PTRS
S#define MCG_BASES                                MCG_BASE_PTRS
S#define MCM_BASES                                MCM_BASE_PTRS
S#define MTB_BASES                                MTB_BASE_PTRS
S#define MTBDWT_BASES                             MTBDWT_BASE_PTRS
S#define NV_BASES                                 NV_BASES
S#define OSC_BASES                                OSC_BASE_PTRS
S#define PIT_BASES                                PIT_BASE_PTRS
S#define PMC_BASES                                PMC_BASE_PTRS
S#define PORT_BASES                               PORT_BASE_PTRS
S#define RCM_BASES                                RCM_BASE_PTRS
S#define ROM_BASES                                ROM_BASE_PTRS
S#define RTC_BASES                                RTC_BASE_PTRS
S#define SIM_BASES                                SIM_BASE_PTRS
S#define SMC_BASES                                SMC_BASE_PTRS
S#define SPI_BASES                                SPI_BASE_PTRS
S#define TPM_BASES                                TPM_BASE_PTRS
S#define TSI_BASES                                TSI_BASE_PTRS
S#define UART_BASES                               UART_BASE_PTRS
S#define UART0_BASES                              UART0_BASE_PTRS
S#define USB_BASES                                USB_BASE_PTRS
S#define LPTimer_IRQn                             LPTMR0_IRQn
S#define LPTimer_IRQHandler                       LPTMR0_IRQHandler
S#define LLW_IRQn                                 LLWU_IRQn
S#define LLW_IRQHandler                           LLWU_IRQHandler
S
S/*!
S * @}
S */ /* end of group Backward_Compatibility_Symbols */
S
S
N#else /* #if !defined(MKL25Z4_H_) */
N  /* There is already included the same memory map. Check if it is compatible (has the same major version) */
N  #if (MCU_MEM_MAP_VERSION != 0x0200u)
X  #if (0x0200u != 0x0200u)
S    #if (!defined(MCU_MEM_MAP_SUPPRESS_VERSION_WARNING))
S      #warning There are included two not compatible versions of memory maps. Please check possible differences.
S    #endif /* (!defined(MCU_MEM_MAP_SUPPRESS_VERSION_WARNING)) */
N  #endif /* (MCU_MEM_MAP_VERSION != 0x0200u) */
N#endif  /* #if !defined(MKL25Z4_H_) */
N
N/* MKL25Z4.h, eof. */
L 3 "Source\Profiler\PIT.c" 2
N#include "region.h"
L 1 "Source\Profiler\region.h" 1
N#ifndef REGION_H
N#define REGION_H
N
Ntypedef struct {
N	unsigned int Start;
N	unsigned int End;
N	char Name[24];
N} REGION_T;
N
Nextern const REGION_T RegionTable[];
Nextern const unsigned NumProfileRegions;
Nextern volatile unsigned RegionCount[];
Nextern unsigned SortedRegions[];
N
N#endif
L 4 "Source\Profiler\PIT.c" 2
N#include "profile.h"
L 1 "Source\Profiler\profile.h" 1
N#ifndef PROFILE_H
N#define PROFILE_H
N
N#include "system_MKL25Z4.h"
N
N//// Configuration 
N
N#define PROFILER_SAMPLE_FREQ_HZ (1000)
N
N// Comment out PROFILER_LCD_SUPPORT definition if not using LCD
N// #define PROFILER_LCD_SUPPORT 
N
N// Comment out USING_RTOS definition if not using RTOS
N// #define USING_RTOS
N
N// Comment out PROFILER_SERIAL_SUPPORT if not using printf/serial port for profile output
N#define PROFILER_SERIAL_SUPPORT
N
N//// End of configuration
N
N
N/* Exception Behavior and Stacks:
NRTOS: 
N	HW pushes context onto PSP (PC offset is +24 bytes)
N	SW (handler) builds stack frame on MSP 
N	SW: Call to Process_Profile_Sample builds stack frame on MSP 
N	=> Return address is is at PSP + 24
N	
NNo RTOS:
N	HW pushes context onto MSP (PC offset is 24 bytes)
N	SW: IRQ handler builds stack frame on MSP (+8 bytes)
N	SW: Call to Process_Profile_Sample builds stack frame on MSP (+12 bytes)
N	=> Return address is is at MSP + 44
N	
N*/ 
N#define HW_RET_ADX_OFFSET (24)
N#define IRQ_FRAME_SIZE (8) 
N#define PPS_FRAME_SIZE (12)
N
N#ifdef USING_RTOS // Don't need these since PC is on PSP, not MSP
S	#define FRAME_SIZE 	(0)
S	#define CUR_SP 			(_psp)
N#else // Using MSP, so stack frames are also on the MSP stack 
N	#define FRAME_SIZE 	(IRQ_FRAME_SIZE + PPS_FRAME_SIZE)
N	#define CUR_SP 			(_msp)
N#endif	
N
N#define SAMPLE_FREQ_HZ_TO_TICKS(freq) ((SystemCoreClock/(2*freq))-1)
N
Nextern unsigned char profiling_enabled;
N
Nextern void Init_Profiling(void);
N
Nextern void Disable_Profiling(void);
Nextern void Enable_Profiling(void);
N
N// Need to call this function from timer IRQHandler (e.g. PIT_IRQHandler)
Nextern void Process_Profile_Sample(void);
N
Nextern void Sort_Profile_Regions(void);
N
N#ifdef PROFILER_LCD_SUPPORT 
Sextern void Display_Profile(void);
N#endif
N
N#ifdef PROFILER_SERIAL_SUPPORT
Nvoid Serial_Print_Sorted_Profile(void);
N#endif
N
N#endif
L 5 "Source\Profiler\PIT.c" 2
N
Nvoid PIT_IRQHandler() {
N	// check to see which channel triggered interrupt 
N	if (PIT->CHANNEL[0].TFLG & PIT_TFLG_TIF_MASK) {
X	if (((PIT_Type *)(0x40037000u))->CHANNEL[0].TFLG & 0x1u) {
N		// clear status flag for timer channel 0
N		PIT->CHANNEL[0].TFLG &= PIT_TFLG_TIF_MASK;
X		((PIT_Type *)(0x40037000u))->CHANNEL[0].TFLG &= 0x1u;
N		
N		// Do ISR work
N		// Profiler
N		if (profiling_enabled > 0) {
N			Process_Profile_Sample();
N		}
N	} else if (PIT->CHANNEL[1].TFLG & PIT_TFLG_TIF_MASK) {
X	} else if (((PIT_Type *)(0x40037000u))->CHANNEL[1].TFLG & 0x1u) {
N		// clear status flag for timer channel 1
N		PIT->CHANNEL[1].TFLG &= PIT_TFLG_TIF_MASK;
X		((PIT_Type *)(0x40037000u))->CHANNEL[1].TFLG &= 0x1u;
N	} 
N}
N
Nvoid PIT_Init(unsigned period) {
N	// Enable clock to PIT module
N	SIM->SCGC6 |= SIM_SCGC6_PIT_MASK;
X	((SIM_Type *)(0x40047000u))->SCGC6 |= 0x800000u;
N	
N	// Enable module, freeze timers in debug mode
N	PIT->MCR &= ~PIT_MCR_MDIS_MASK;
X	((PIT_Type *)(0x40037000u))->MCR &= ~0x2u;
N	PIT->MCR |= PIT_MCR_FRZ_MASK;
X	((PIT_Type *)(0x40037000u))->MCR |= 0x1u;
N	
N	// Initialize PIT0 to count down from argument 
N	PIT->CHANNEL[0].LDVAL = PIT_LDVAL_TSV(period);
X	((PIT_Type *)(0x40037000u))->CHANNEL[0].LDVAL = (((uint32_t)(((uint32_t)(period))<<0))&0xFFFFFFFFu);
N
N	// No chaining
N	PIT->CHANNEL[0].TCTRL &= PIT_TCTRL_CHN_MASK;
X	((PIT_Type *)(0x40037000u))->CHANNEL[0].TCTRL &= 0x4u;
N	
N	// Generate interrupts
N	PIT->CHANNEL[0].TCTRL |= PIT_TCTRL_TIE_MASK;
X	((PIT_Type *)(0x40037000u))->CHANNEL[0].TCTRL |= 0x2u;
N
N	/* Enable Interrupts */
N	NVIC_SetPriority(PIT_IRQn, 128); // 0, 64, 128 or 192
X	__NVIC_SetPriority(PIT_IRQn, 128); 
N	NVIC_ClearPendingIRQ(PIT_IRQn); 
X	__NVIC_ClearPendingIRQ(PIT_IRQn); 
N	NVIC_EnableIRQ(PIT_IRQn);	
X	__NVIC_EnableIRQ(PIT_IRQn);	
N}
N
Nvoid PIT_Start(void) {
N// Enable counter
N	PIT->CHANNEL[0].TCTRL |= PIT_TCTRL_TEN_MASK;
X	((PIT_Type *)(0x40037000u))->CHANNEL[0].TCTRL |= 0x1u;
N}
N
Nvoid PIT_Stop(void) {
N// Enable counter
N	PIT->CHANNEL[0].TCTRL &= ~PIT_TCTRL_TEN_MASK;
X	((PIT_Type *)(0x40037000u))->CHANNEL[0].TCTRL &= ~0x1u;
N}
